name: MetaChaos

on:
  pull_request_target:
    types:
      - labeled
    branches:
      - main

permissions:
  id-token: write
  pull-requests: write
  contents: read

env:
  BUILD_PROFILE: release
  RUNNER_PROVIDER: gcp

jobs:
  info:
    if: contains(github.event.pull_request.labels.*.name, 'ci-meta-chaos')
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.sha.outputs.sha }}
      target: ${{ steps.sha.outputs.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "refs/pull/${{ github.event.number }}/merge"
      - name: Get SHA
        shell: bash
        id: sha

  build:
    needs: info
    runs-on: [self-hosted, "${{ matrix.runner }}", Linux, 16c32g, gcp]
    strategy:
      matrix:
        include:
          - {arch: x86_64, runner: X64}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "refs/pull/${{ github.event.number }}/merge"
      - name: Build Release
        uses: ./.github/actions/build_linux
        timeout-minutes: 60
        with:
          sha: ${{ needs.info.outputs.sha }}
          target: ${{ matrix.arch }}-unknown-linux-gnu
          artifacts: meta

  docker:
    needs: [info, build]
    timeout-minutes: 10
    runs-on: [self-hosted, X64, Linux, 4c8g, gcp]
    outputs:
      tag: ${{ steps.prepare.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact for x86_64
        uses: ./.github/actions/artifact_download
        with:
          sha: ${{ needs.info.outputs.sha }}
          target: x86_64-unknown-linux-gnu
          path: ./target/x86_64-unknown-linux-gnu/release
          artifacts: meta,query
      - name: Download artifact for aarch64
        uses: ./.github/actions/artifact_download
        with:
          sha: ${{ needs.info.outputs.sha }}
          target: aarch64-unknown-linux-gnu
          path: ./target/aarch64-unknown-linux-gnu/release
          artifacts: meta,query
      - uses: ./.github/actions/setup_docker
        id: login
        with:
          repo: databend-meta
          ecr_role_arn: ${{ secrets.ECR_ROLE_ARN }}
      - name: Prepare for docker
        id: prepare
        run: |
          mkdir -p ./distro/linux/{amd64,arm64}
          cp ./target/x86_64-unknown-linux-gnu/release/databend-meta ./distro/linux/amd64/
          cp ./target/x86_64-unknown-linux-gnu/release/databend-metactl ./distro/linux/amd64/
          cp ./target/aarch64-unknown-linux-gnu/release/databend-meta ./distro/linux/arm64/
          cp ./target/aarch64-unknown-linux-gnu/release/databend-metactl ./distro/linux/arm64/
          short_sha=$(echo "${{ needs.info.outputs.sha }}" | cut -c1-7)
          echo "tag=pr-${{ github.event.pull_request.number }}-${short_sha}" >> $GITHUB_OUTPUT
      - name: push service image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.login.outputs.ecr_repo }}:${{ steps.prepare.outputs.tag }}
          platforms: linux/amd64,linux/arm64
          context: .
          file: ./docker/debian/meta.Dockerfile
      - name: Comment on PR
        uses: everpcpc/comment-on-pr-action@v1
        with:
          number: ${{ github.event.pull_request.number }}
          token: ${{ github.token }}
          body: |
            ## Docker Image for PR
            * **tag**: `${{ steps.prepare.outputs.tag }}`

            > note: this image tag is only available for internal use,
            > please check the [internal doc](https://datafuselabs.feishu.cn/wiki/Hk7iwYsnWi3wsXkpbW5c9apTn0b) for more details.

  test_meta_chaos:
    needs: [info, build, docker]
    runs-on: [self-hosted, X64, Linux, 4c8g, "${{ inputs.runner_provider }}"]
    if: needs.license.outputs.license
    steps:
      - uses: actions/checkout@v4
      - name: Decode license
        id: license
        run: |
          echo "license=$(echo '${{ needs.license.outputs.license }}' | base64 -d)" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/test_meta_chaos
        timeout-minutes: 10
        env:
          QUERY_DATABEND_ENTERPRISE_LICENSE: ${{ steps.license.outputs.license }}
