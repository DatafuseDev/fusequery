on:
  repository_dispatch:
    types: [run_perf]
name: Build Docker Image on official docker hub (primary for benchmarking and CI tests)
jobs:
  build-current:
    name: Build current datafuse image
    if: github.event.action == 'run_perf'
    runs-on: self-hosted
    env:
      GITHUB_TOKEN: ${{ github.token }}
      GITHUB_ORG: zhihanz
      GITHUB_REPO: fuse-query
      GITHUB_STATUS_TARGET_URL: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
      SHA: ${{ github.event.client_payload.CURRENT_BRANCH }}
      PR_NUMBER: ${{ github.event.client_payload.PR_NUMBER }}
      LAST_COMMIT_SHA: ${{ github.event.client_payload.LAST_COMMIT_SHA }}
      UUID: ${{ github.event.client_payload.UUID }}
      ITERATION: 10
      REGION: ${{ github.event.client_payload.REGION }}
      BUCKET: ${{ github.event.client_payload.BUCKET }}
      ENDPOINT: ${{ github.event.client_payload.ENDPOINT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-west-2
      AWS_DEFAULT_OUTPUT: json
    steps:
    - name: Update status to pending
      run: |
        echo "update github pr status"
        curl -i -X POST \
        -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "Content-Type: application/json" \
        --data '{"state":"pending","context":"build-current-image-status","target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
        "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
   - name: Run Pending job
     run: |
       sleep 100s
   - name: Update status to failure
      if: failure()
      run: |
        curl -i -X POST \
        -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "Content-Type: application/json" \
        --data '{"state":"failure","context":"build-current-image-status","target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
        "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
        echo "sync status to S3"
        echo '{"uuid": "${{ env.UUID }}", "status": "FAIL"}' > status.json
        aws s3 --endpoint-url ${{ env.ENDPOINT }} cp ./status.json  s3://$BUCKET/s3/test/status.json
    - name: Update status to success
      if: success()
      run: |
        curl -i -X POST \
        -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "Content-Type: application/json" \
        --data '{"state":"success","context":"build-current-image-status","target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
        "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
        echo "sync status to S3"
        echo '{"uuid": "${{ env.UUID }}", "status": "SUCCESS"}' > status.json
        aws s3 --endpoint-url ${{ env.ENDPOINT }} cp ./status.json  s3://$BUCKET/s3/test/status.json
  build-release:
    name: Build current datafuse image
    if: github.event.action == 'run_perf'
    runs-on: self-hosted
    env:
      GITHUB_TOKEN: ${{ github.token }}
      GITHUB_ORG: zhihanz
      GITHUB_REPO: fuse-query
      GITHUB_STATUS_TARGET_URL: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
      SHA: ${{ github.event.client_payload.CURRENT_BRANCH }}
      PR_NUMBER: ${{ github.event.client_payload.PR_NUMBER }}
      LAST_COMMIT_SHA: ${{ github.event.client_payload.LAST_COMMIT_SHA }}
      UUID: ${{ github.event.client_payload.UUID }}
      ITERATION: 10
      REGION: ${{ github.event.client_payload.REGION }}
      BUCKET: ${{ github.event.client_payload.BUCKET }}
      ENDPOINT: ${{ github.event.client_payload.ENDPOINT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-west-2
      AWS_DEFAULT_OUTPUT: json
    steps:
      - name: Update status to pending
        run: |
          echo "update github pr status"
          curl -i -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          --data '{"state":"pending","context":"build-ref-image-status","target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
      - name: Run Pending job
        run: |
          sleep 120s
      - name: Update status to failure
        if: failure()
        run: |
          curl -i -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          --data '{"state":"failure","context":"build-ref-image-status","target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
          echo "sync status to S3"
          echo '{"uuid": "${{ env.UUID }}", "status": "FAIL"}' > status.json
          aws s3 --endpoint-url ${{ env.ENDPOINT }} cp ./status.json  s3://$BUCKET/s3/test/status.json
      - name: Update status to success
        if: success()
        run: |
          curl -i -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          --data '{"state":"success","context":"build-ref-image-status","target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
          echo "sync status to S3"
          echo '{"uuid": "${{ env.UUID }}", "status": "SUCCESS"}' > status.json
          aws s3 --endpoint-url ${{ env.ENDPOINT }} cp ./status.json  s3://$BUCKET/s3/test/status.json
  run_funcbench:
    name: Running build_docker
    if: github.event.action == 'run_perf'
    runs-on: self-hosted
    needs: [build-current, build-release]
    env:
      GITHUB_TOKEN: ${{ github.token }}
      GITHUB_ORG: zhihanz
      GITHUB_REPO: fuse-query
      GITHUB_STATUS_TARGET_URL: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
      CPU: 3300m
      MEMORY: 3Gi
      # define reference and compare branches for performance test
      # suppose branch building for current and reference works well
      CURRENT: ${{ github.event.client_payload.CURRENT_BRANCH }}
      REFERENCE: ${{ github.event.client_payload.REF_BRANCH }}
      PR_NUMBER: ${{ github.event.client_payload.PR_NUMBER }} 
      LAST_COMMIT_SHA: ${{ github.event.client_payload.LAST_COMMIT_SHA }}
      UUID: ${{ github.event.client_payload.UUID }}
      ITERATION: 10
      # S3 storage for report and status updates
      CLUSTER_NAME: fusebench
      REGION: ${{ github.event.client_payload.REGION }}
      BUCKET: ${{ github.event.client_payload.BUCKET }}
      ENDPOINT: ${{ github.event.client_payload.ENDPOINT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-west-2
      AWS_DEFAULT_OUTPUT: json
      DELETE_CLUSTER_AFTER_RUN: false
    steps:
    - name: Update status to pending
      run: |
        echo "update github pr status"
        curl -i -X POST \
        -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "Content-Type: application/json" \
        --data '{"state":"pending","context":"run-perf-status","target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
        "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"

        echo "sync status to S3"
        echo '{"uuid": "${{ env.UUID }}", "status": "PENDING"}' > status.json
        aws s3 --endpoint-url ${{ env.ENDPOINT }} cp ./status.json  s3://$BUCKET/s3/test/status.json
    - name: Checkout tools repo
      uses: actions/checkout@v2
      with:
        repository: datafuselabs/test-infra
        ref: main
    - name: build latest binary
      run: |
        export PATH=$PATH:/usr/local/go/bin
        make build
#    - name: create k3d cluster
#      run: |
#        curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
#        k3d cluster create -p "8083:80@agent[0]" -p "8443:443@agent[0]" -p "5053:53/udp@agent[0]" --api-port 127.0.0.1:6445\
#              -p "8084:80@agent[1]" -p "8444:443@agent[1]" -p "5054:53/udp@agent[1]" --agents 2 --no-lb \
#              --k3s-server-arg "--no-deploy=traefik,servicelb,metrics-server" --no-hostip --timeout 360s --wait
    - uses: AbsaOSS/k3d-action@v1.5.0
      name: "Create Single Cluster"
      with:
        cluster-name: "fusebench"
        args: >-
          -p "8083:80@agent[0]"
          -p "8443:443@agent[0]"
          -p "5053:53/udp@agent[0]"
          -p "8084:80@agent[1]"
          -p "8444:443@agent[1]"
          -p "5054:53/udp@agent[1]"
          --api-port 127.0.0.1:6445
          --agents 2
          --no-lb
          --k3s-server-arg "--no-deploy=traefik,servicelb,metrics-server"
          --timeout 360s
          --wait
    - name: testing environment set up
      run: |
        kubectl label node k3d-fusebench-agent-0 test-branch=${{env.CURRENT}}
        kubectl label node k3d-fusebench-agent-1 test-branch=${{env.REFERENCE}}
        kubectl wait -n kube-system --timeout=180s --for condition=Ready --all pods
        kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/namespace.yaml
        kubectl apply -f ./manifests/lb_configs.yaml
        kubectl apply -f ./manifests/config.yaml
        kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/metallb.yaml
        kubectl wait -n metallb-system --timeout=180s --for condition=Ready --all pods

    - name: Start performance testing
      run: >-
            echo ${{ env.UUID }};
            export ENDPOINT=$(echo $ENDPOINT | grep -oP '(http|https)://\K\S+');
            echo $ENDPOINT;
            make resource_apply -j 2;
            echo "Successfully deployed test pods, start to do performance test";
            make run_perf -j 2;
            echo "Finished performance tests, upload reports";
            make run_compare;
    - name: Update status to failure
      if: failure()
      run: |
          curl -i -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          --data '{"state":"failure","context":"run-perf-status","target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
          echo "sync status to S3"
          echo '{"uuid": "${{ env.UUID }}", "status": "FAIL"}' > status.json
          aws s3 --endpoint-url ${{ env.ENDPOINT }} cp ./status.json  s3://$BUCKET/s3/test/status.json
    - name: Update status to success
      if: success()
      run: |
          curl -i -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          --data '{"state":"success","context":"run-perf-status","target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
          echo "sync status to S3"
          echo '{"uuid": "${{ env.UUID }}", "status": "SUCCESS"}' > status.json
          aws s3 --endpoint-url ${{ env.ENDPOINT }} cp ./status.json  s3://$BUCKET/s3/test/status.json
    - name: Delete all resources
      if: always()
      run: |
        k3d cluster delete
#     - name: Delete all resources
#       if: always()
#       uses: docker://zhihanz/test-infra:master
#       with:
#         args: >-
#           make clean
#      with:
#        args: >-
#          echo ${{ env.UUID }};
#          echo "Start to create cluster";
#          make cluster_create;
#          echo "Successfully created cluster, start to pull test images";
#          make resource_apply -j 2;
#          echo "Successfully deployed test pods, start to do performance test";
#          make run_perf -j 2;
#          echo "Finished performance tests, upload reports";
#          make run_compare;
#   - name: Delete all resources
#     if: always()
#     uses: docker://zhihanz/test-infra:master
#     with:
#       args: >-
#         make clean

#  - name: Update status to failure
#    if: failure()
#    run: |
#      curl -i -X POST \
#      -H "Authorization: Bearer $GITHUB_TOKEN" \
#      -H "Content-Type: application/json" \
#      --data '{"state":"failure","context":"run-perf-status,"target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
#      "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
#      echo "sync status to S3"
#      echo '{"uuid": "${{ env.UUID }}", "status": "FAIL"}' > status.json
#      aws s3 --endpoint-url ${{ env.ENDPOINT }} cp ./status.json  s3://$BUCKET/s3/test/status.json
#  - name: Update status to success
#    if: success()
#    run: |
#      curl -i -X POST \
#      -H "Authorization: Bearer $GITHUB_TOKEN" \
#      -H "Content-Type: application/json" \
#      --data '{"state":"success","context":"run-perf-status,"target_url":"'$GITHUB_STATUS_TARGET_URL'"}' \
#      "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA"
#      echo "sync status to S3"
#      echo '{"uuid": "${{ env.UUID }}", "status": "SUCCESS"}' > status.json
#      aws s3 --endpoint-url ${{ env.ENDPOINT }} cp ./status.json  s3://$BUCKET/s3/test/status.json