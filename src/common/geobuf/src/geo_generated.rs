// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;
use self::flatbuffers::Follow;

#[allow(unused_imports, dead_code)]
pub mod geo_buf {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::EndianScalar;
    use self::flatbuffers::Follow;

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_OBJECT_KIND: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_OBJECT_KIND: u8 = 6;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_OBJECT_KIND: [ObjectKind; 7] = [
        ObjectKind::Point,
        ObjectKind::MultiPoint,
        ObjectKind::LineString,
        ObjectKind::MultiLineString,
        ObjectKind::Polygon,
        ObjectKind::MultiPolygon,
        ObjectKind::Collection,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct ObjectKind(pub u8);
    #[allow(non_upper_case_globals)]
    impl ObjectKind {
        pub const Point: Self = Self(0);
        pub const MultiPoint: Self = Self(1);
        pub const LineString: Self = Self(2);
        pub const MultiLineString: Self = Self(3);
        pub const Polygon: Self = Self(4);
        pub const MultiPolygon: Self = Self(5);
        pub const Collection: Self = Self(6);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 6;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::Point,
            Self::MultiPoint,
            Self::LineString,
            Self::MultiLineString,
            Self::Polygon,
            Self::MultiPolygon,
            Self::Collection,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Point => Some("Point"),
                Self::MultiPoint => Some("MultiPoint"),
                Self::LineString => Some("LineString"),
                Self::MultiLineString => Some("MultiLineString"),
                Self::Polygon => Some("Polygon"),
                Self::MultiPolygon => Some("MultiPolygon"),
                Self::Collection => Some("Collection"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for ObjectKind {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for ObjectKind {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for ObjectKind {
        type Output = ObjectKind;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<u8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for ObjectKind {
        type Scalar = u8;
        #[inline]
        fn to_little_endian(self) -> u8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: u8) -> Self {
            let b = u8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for ObjectKind {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for ObjectKind {}
    pub enum LineStringOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct LineString<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for LineString<'a> {
        type Inner = LineString<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> LineString<'a> {
        pub const VT_POINTS: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            LineString { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args LineStringArgs<'args>,
        ) -> flatbuffers::WIPOffset<LineString<'bldr>> {
            let mut builder = LineStringBuilder::new(_fbb);
            if let Some(x) = args.points {
                builder.add_points(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn points(&self) -> Option<flatbuffers::Vector<'a, u16>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(
                        LineString::VT_POINTS,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for LineString<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>(
                    "points",
                    Self::VT_POINTS,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct LineStringArgs<'a> {
        pub points: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
    }
    impl<'a> Default for LineStringArgs<'a> {
        #[inline]
        fn default() -> Self {
            LineStringArgs { points: None }
        }
    }

    pub struct LineStringBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LineStringBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_points(&mut self, points: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u16>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(LineString::VT_POINTS, points);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> LineStringBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            LineStringBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<LineString<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for LineString<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("LineString");
            ds.field("points", &self.points());
            ds.finish()
        }
    }
    pub enum OffsetsOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Offsets<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Offsets<'a> {
        type Inner = Offsets<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Offsets<'a> {
        pub const VT_OFFSETS: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Offsets { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args OffsetsArgs<'args>,
        ) -> flatbuffers::WIPOffset<Offsets<'bldr>> {
            let mut builder = OffsetsBuilder::new(_fbb);
            if let Some(x) = args.offsets {
                builder.add_offsets(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn offsets(&self) -> Option<flatbuffers::Vector<'a, u16>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(
                        Offsets::VT_OFFSETS,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for Offsets<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>(
                    "offsets",
                    Self::VT_OFFSETS,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct OffsetsArgs<'a> {
        pub offsets: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
    }
    impl<'a> Default for OffsetsArgs<'a> {
        #[inline]
        fn default() -> Self {
            OffsetsArgs { offsets: None }
        }
    }

    pub struct OffsetsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OffsetsBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_offsets(
            &mut self,
            offsets: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u16>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Offsets::VT_OFFSETS, offsets);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> OffsetsBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            OffsetsBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Offsets<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Offsets<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Offsets");
            ds.field("offsets", &self.offsets());
            ds.finish()
        }
    }
    pub enum PolygonOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Polygon<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Polygon<'a> {
        type Inner = Polygon<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Polygon<'a> {
        pub const VT_RINGS: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Polygon { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args PolygonArgs<'args>,
        ) -> flatbuffers::WIPOffset<Polygon<'bldr>> {
            let mut builder = PolygonBuilder::new(_fbb);
            if let Some(x) = args.rings {
                builder.add_rings(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn rings(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LineString<'a>>>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab.get::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LineString>>,
                >>(Polygon::VT_RINGS, None)
            }
        }
    }

    impl flatbuffers::Verifiable for Polygon<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<LineString>>,
                >>("rings", Self::VT_RINGS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct PolygonArgs<'a> {
        pub rings: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LineString<'a>>>,
            >,
        >,
    }
    impl<'a> Default for PolygonArgs<'a> {
        #[inline]
        fn default() -> Self {
            PolygonArgs { rings: None }
        }
    }

    pub struct PolygonBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PolygonBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_rings(
            &mut self,
            rings: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<LineString<'b>>>,
            >,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Polygon::VT_RINGS, rings);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> PolygonBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            PolygonBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Polygon<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Polygon<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Polygon");
            ds.field("rings", &self.rings());
            ds.finish()
        }
    }
    pub enum ObjectOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Object<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Object<'a> {
        type Inner = Object<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Object<'a> {
        pub const VT_OFFSETS: flatbuffers::VOffsetT = 4;
        pub const VT_SUB_OFFSETS: flatbuffers::VOffsetT = 6;
        pub const VT_POLYGONS: flatbuffers::VOffsetT = 8;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Object { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args ObjectArgs<'args>,
        ) -> flatbuffers::WIPOffset<Object<'bldr>> {
            let mut builder = ObjectBuilder::new(_fbb);
            if let Some(x) = args.polygons {
                builder.add_polygons(x);
            }
            if let Some(x) = args.sub_offsets {
                builder.add_sub_offsets(x);
            }
            if let Some(x) = args.offsets {
                builder.add_offsets(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn offsets(&self) -> Option<flatbuffers::Vector<'a, u16>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(
                        Object::VT_OFFSETS,
                        None,
                    )
            }
        }
        #[inline]
        pub fn sub_offsets(&self) -> Option<flatbuffers::Vector<'a, u16>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(
                        Object::VT_SUB_OFFSETS,
                        None,
                    )
            }
        }
        #[inline]
        pub fn polygons(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Polygon<'a>>>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab.get::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Polygon>>,
                >>(Object::VT_POLYGONS, None)
            }
        }
    }

    impl flatbuffers::Verifiable for Object<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>(
                    "offsets",
                    Self::VT_OFFSETS,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>(
                    "sub_offsets",
                    Self::VT_SUB_OFFSETS,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Polygon>>,
                >>("polygons", Self::VT_POLYGONS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct ObjectArgs<'a> {
        pub offsets: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
        pub sub_offsets: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
        pub polygons: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Polygon<'a>>>,
            >,
        >,
    }
    impl<'a> Default for ObjectArgs<'a> {
        #[inline]
        fn default() -> Self {
            ObjectArgs {
                offsets: None,
                sub_offsets: None,
                polygons: None,
            }
        }
    }

    pub struct ObjectBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ObjectBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_offsets(
            &mut self,
            offsets: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u16>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Object::VT_OFFSETS, offsets);
        }
        #[inline]
        pub fn add_sub_offsets(
            &mut self,
            sub_offsets: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u16>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Object::VT_SUB_OFFSETS, sub_offsets);
        }
        #[inline]
        pub fn add_polygons(
            &mut self,
            polygons: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Polygon<'b>>>,
            >,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Object::VT_POLYGONS, polygons);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> ObjectBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            ObjectBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Object<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Object<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Object");
            ds.field("offsets", &self.offsets());
            ds.field("sub_offsets", &self.sub_offsets());
            ds.field("polygons", &self.polygons());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `Object`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_object_unchecked`.
    pub fn root_as_object(buf: &[u8]) -> Result<Object, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Object>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Object` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_object_unchecked`.
    pub fn size_prefixed_root_as_object(
        buf: &[u8],
    ) -> Result<Object, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Object>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Object` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_object_unchecked`.
    pub fn root_as_object_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Object<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Object<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Object` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_object_unchecked`.
    pub fn size_prefixed_root_as_object_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Object<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Object<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Object and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Object`.
    pub unsafe fn root_as_object_unchecked(buf: &[u8]) -> Object {
        flatbuffers::root_unchecked::<Object>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Object and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Object`.
    pub unsafe fn size_prefixed_root_as_object_unchecked(buf: &[u8]) -> Object {
        flatbuffers::size_prefixed_root_unchecked::<Object>(buf)
    }
    #[inline]
    pub fn finish_object_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Object<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_object_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Object<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod GeoBuf
