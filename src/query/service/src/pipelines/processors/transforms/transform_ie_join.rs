// Copyright 2021 Datafuse Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use std::any::Any;
use std::collections::VecDeque;
use std::sync::Arc;

use common_exception::Result;
use common_expression::DataBlock;
use common_pipeline_core::processors::port::InputPort;
use common_pipeline_core::processors::port::OutputPort;
use common_pipeline_core::processors::processor::Event;
use common_pipeline_core::processors::Processor;

use crate::pipelines::processors::transforms::IEJoinState;

enum IEJoinStep {
    // Parallel sink left/right table to IEJoinState
    // During this step, we can sort input data by the first join key
    Sink,
    // Merge operation if sorted input data block's size is larger than 1
    Merge,
    // Execute ie join algorithm
    Finalize,
}

// The transform will execute the following operations:
// Sink phase
// 1. left table and right table sink parallel
// 2. sort the partial input data by the first join condition's key for left table and right table
// Merge phase
// 3. merge the sorted input data and add a position col for the whole sorted data block (single thread)
// 4. Sort the sorted data block(generated by TransformIEJoinSink) by the second join condition's key (multi thread)
// Finalize phase
// 5. Get permutation array by position column
// 6. Generate bit array with bitmap
// 7. Execute ie join algorithm
// 8. Generate final result and stream to next processor
pub struct TransformIEJoinLeft {
    input_port: Arc<InputPort>,
    output_port: Arc<OutputPort>,
    input_data: Option<DataBlock>,
    output_data_blocks: VecDeque<DataBlock>,
    state: Arc<IEJoinState>,
    step: IEJoinStep,
}

impl TransformIEJoinLeft {
    pub fn create(
        input_port: Arc<InputPort>,
        output_port: Arc<OutputPort>,
        ie_join_state: Arc<IEJoinState>,
    ) -> Box<dyn Processor> {
        Box::new(TransformIEJoinLeft {
            input_port,
            output_port,
            input_data: None,
            output_data_blocks: Default::default(),
            state: ie_join_state,
            step: IEJoinStep::Sink,
        })
    }
}

#[async_trait::async_trait]
impl Processor for TransformIEJoinLeft {
    fn name(&self) -> String {
        "TransformIEJoinLeft".to_string()
    }

    fn as_any(&mut self) -> &mut dyn Any {
        self
    }

    fn event(&mut self) -> Result<Event> {
        match self.step {
            IEJoinStep::Sink => {
                if self.input_data.is_some() {
                    return Ok(Event::Sync);
                }
                if self.input_port.is_finished() {
                    self.step = IEJoinStep::Merge;
                    return Ok(Event::Sync);
                }
                match self.input_port.has_data() {
                    true => {
                        self.input_data = Some(self.input_port.pull_data().unwrap()?);
                        Ok(Event::Sync)
                    }
                    false => {
                        self.input_port.set_need_data();
                        Ok(Event::NeedData)
                    }
                }
            }
            IEJoinStep::Merge => {
                return Ok(Event::Sync);
            }
            IEJoinStep::Finalize => {
                if self.output_port.is_finished() {
                    self.input_port.finish();
                    return Ok(Event::Finished);
                }

                if !self.output_data_blocks.is_empty() {
                    let data = self.output_data_blocks.pop_front().unwrap();
                    self.output_port.push_data(Ok(data));
                    return Ok(Event::NeedConsume);
                }

                return Ok(Event::Sync);
            }
        }
    }

    fn interrupt(&self) {
        todo!()
    }

    fn process(&mut self) -> Result<()> {
        match self.step {
            IEJoinStep::Sink => {
                if let Some(data_block) = self.input_data.take() {
                    self.state.sink_left(data_block)?;
                }
            }
            IEJoinStep::Merge => {
                self.state.merge_sort()?;
                self.step = IEJoinStep::Finalize;
            }
            IEJoinStep::Finalize => {
                self.output_data_blocks
                    .push_back(self.state.finalize(65536)?);
            }
        }
        Ok(())
    }
}

pub struct TransformIEJoinRight {
    input_port: Arc<InputPort>,
    input_data: Option<DataBlock>,
    state: Arc<IEJoinState>,
    step: IEJoinStep,
}

impl TransformIEJoinRight {
    pub fn create(
        input_port: Arc<InputPort>,
        ie_join_state: Arc<IEJoinState>,
    ) -> Box<dyn Processor> {
        Box::new(TransformIEJoinRight {
            input_port,
            input_data: None,
            state: ie_join_state,
            step: IEJoinStep::Sink,
        })
    }
}

#[async_trait::async_trait]
impl Processor for TransformIEJoinRight {
    fn name(&self) -> String {
        "TransformIEJoinRight".to_string()
    }

    fn as_any(&mut self) -> &mut dyn Any {
        self
    }

    fn event(&mut self) -> Result<Event> {
        if self.input_data.is_some() {
            return Ok(Event::Sync);
        }
        if self.input_port.is_finished() {
            self.state.set_right_finished();
        }
        match self.input_port.has_data() {
            true => {
                self.input_data = Some(self.input_port.pull_data().unwrap()?);
                Ok(Event::Sync)
            }
            false => {
                self.input_port.set_need_data();
                Ok(Event::NeedData)
            }
        }
    }

    fn interrupt(&self) {
        todo!()
    }

    fn process(&mut self) -> Result<()> {
        if let Some(data_block) = self.input_data.take() {
            self.state.sink_right(data_block)?;
        }
        Ok(())
    }
}
