// Copyright 2021 Datafuse Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use std::any::Any;
use std::sync::Arc;

use common_expression::DataBlock;
use common_pipeline_core::processors::port::InputPort;
use common_pipeline_core::processors::port::OutputPort;
use common_pipeline_core::processors::processor::Event;
use common_pipeline_core::processors::Processor;

use crate::pipelines::processors::transforms::IEJoinState;

enum IEJoinStep {
    // Parallel sink left/right table to IEJoinState
    // During this step, we can sort input data by the first join key
    Sink,
    // Merge operation if sorted input data block's size is larger than 1
    Merge,
    // Execute ie join algorithm
    Finalize,
}

// The transform will execute the following operations:
// Sink phase
// 1. left table and right table sink parallel
// 2. sort the partial input data by the first join condition's key for left table and right table
// Merge phase
// 3. merge the sorted input data and add a position col for the whole sorted data block (single thread)
// 4. Sort the sorted data block(generated by TransformIEJoinSink) by the second join condition's key (multi thread)
// Finalize phase
// 5. Get permutation array by position column
// 6. Generate bit array with bitmap
// 7. Execute ie join algorithm
// 8. Generate final result and stream to next processor
pub struct TransformIEJoin {
    input_port: Arc<InputPort>,
    output_port: Arc<OutputPort>,
    input_data: Option<DataBlock>,
    state: Arc<IEJoinState>,
    // Left table is 0, right table is 1
    table_id: u8,
    step: IEJoinStep,
}

impl TransformIEJoin {
    pub fn create(
        input_port: Arc<InputPort>,
        output_port: Arc<OutputPort>,
        ie_join_state: Arc<IEJoinState>,
        table_id: u8,
    ) -> Box<dyn Processor> {
        Box::new(TransformIEJoin {
            input_port,
            output_port,
            input_data: None,
            state: ie_join_state,
            table_id,
            step: IEJoinStep::Sink,
        })
    }
}

impl Processor for TransformIEJoin {
    fn name(&self) -> String {
        todo!()
    }

    fn as_any(&mut self) -> &mut dyn Any {
        todo!()
    }

    fn event(&mut self) -> common_exception::Result<Event> {
        todo!()
    }
}
