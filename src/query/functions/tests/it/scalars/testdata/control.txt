ast            : multi_if(false, 1, false, 2, NULL)
raw expr       : multi_if(false, 1_u8, false, 2_u8, NULL)
checked expr   : multi_if<T0=UInt8 NULL><Boolean NULL, Tuple(T0, String NULL), Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(false AS Boolean NULL), CAST(CATCH(1_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(false AS Boolean NULL), CAST(CATCH(2_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(CATCH(NULL) AS Tuple(UInt8 NULL, String NULL)))
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : multi_if(true, 1, NULL, 2, NULL)
raw expr       : multi_if(true, 1_u8, NULL, 2_u8, NULL)
checked expr   : multi_if<T0=UInt8 NULL><Boolean NULL, Tuple(T0, String NULL), Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(true AS Boolean NULL), CAST(CATCH(1_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(NULL AS Boolean NULL), CAST(CATCH(2_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(CATCH(NULL) AS Tuple(UInt8 NULL, String NULL)))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : multi_if(false, 1, true, 2, NULL)
raw expr       : multi_if(false, 1_u8, true, 2_u8, NULL)
checked expr   : multi_if<T0=UInt8 NULL><Boolean NULL, Tuple(T0, String NULL), Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(false AS Boolean NULL), CAST(CATCH(1_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(true AS Boolean NULL), CAST(CATCH(2_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(CATCH(NULL) AS Tuple(UInt8 NULL, String NULL)))
optimized expr : 2_u8
output type    : UInt8 NULL
output domain  : {2..=2}
output         : 2


ast            : multi_if(true, 1, true, 2, NULL)
raw expr       : multi_if(true, 1_u8, true, 2_u8, NULL)
checked expr   : multi_if<T0=UInt8 NULL><Boolean NULL, Tuple(T0, String NULL), Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(true AS Boolean NULL), CAST(CATCH(1_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(true AS Boolean NULL), CAST(CATCH(2_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(CATCH(NULL) AS Tuple(UInt8 NULL, String NULL)))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : multi_if(true, 1, true, NULL, 2)
raw expr       : multi_if(true, 1_u8, true, NULL, 2_u8)
checked expr   : multi_if<T0=UInt8 NULL><Boolean NULL, Tuple(T0, String NULL), Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(true AS Boolean NULL), CAST(CATCH(1_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(true AS Boolean NULL), CAST(CATCH(NULL) AS Tuple(UInt8 NULL, String NULL)), CAST(CATCH(2_u8) AS Tuple(UInt8 NULL, String NULL)))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : multi_if(true, 1, NULL)
raw expr       : multi_if(true, 1_u8, NULL)
checked expr   : multi_if<T0=UInt8 NULL><Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(true AS Boolean NULL), CAST(CATCH(1_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(CATCH(NULL) AS Tuple(UInt8 NULL, String NULL)))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : multi_if(false, 1, NULL)
raw expr       : multi_if(false, 1_u8, NULL)
checked expr   : multi_if<T0=UInt8 NULL><Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(false AS Boolean NULL), CAST(CATCH(1_u8) AS Tuple(UInt8 NULL, String NULL)), CAST(CATCH(NULL) AS Tuple(UInt8 NULL, String NULL)))
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : multi_if(true, 1, 1 / 0)
raw expr       : multi_if(true, 1_u8, divide(1_u8, 0_u8))
checked expr   : multi_if<T0=Float64><Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(true AS Boolean NULL), CAST(CATCH(1_u8) AS Tuple(Float64, String NULL)), CATCH(divide<UInt8, UInt8>(1_u8, 0_u8)))
optimized expr : multi_if<T0=Float64><Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(true, (1_f64, NULL), CATCH(divide<UInt8, UInt8>(1_u8, 0_u8)))
evaluation:
+--------+---------+
|        | Output  |
+--------+---------+
| Type   | Float64 |
| Domain | Unknown |
| Row 0  | 1       |
+--------+---------+
evaluation (internal):
+--------+--------------+
| Column | Data         |
+--------+--------------+
| Output | Float64([1]) |
+--------+--------------+


ast            : multi_if(false, 1 / 0, 1)
raw expr       : multi_if(false, divide(1_u8, 0_u8), 1_u8)
checked expr   : multi_if<T0=Float64><Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(false AS Boolean NULL), CATCH(divide<UInt8, UInt8>(1_u8, 0_u8)), CAST(CATCH(1_u8) AS Tuple(Float64, String NULL)))
optimized expr : multi_if<T0=Float64><Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(false, CATCH(divide<UInt8, UInt8>(1_u8, 0_u8)), (1_f64, NULL))
evaluation:
+--------+---------+
|        | Output  |
+--------+---------+
| Type   | Float64 |
| Domain | Unknown |
| Row 0  | 1       |
+--------+---------+
evaluation (internal):
+--------+--------------+
| Column | Data         |
+--------+--------------+
| Output | Float64([1]) |
+--------+--------------+


error: 
  --> SQL:1:1
  |
1 | multi_if(false, 1, 1 / 0)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ divided by zero while evaluating function `divide(1, 0)`



ast            : multi_if(cond_a, expr_true, expr_else)
raw expr       : multi_if(cond_a::Boolean, expr_true::Int64, expr_else::Int64 NULL)
checked expr   : multi_if<T0=Int64 NULL><Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(cond_a AS Boolean NULL), CAST(CATCH(expr_true) AS Tuple(Int64 NULL, String NULL)), CATCH(expr_else))
evaluation:
+--------+---------------+-----------+------------------+------------------+
|        | cond_a        | expr_true | expr_else        | Output           |
+--------+---------------+-----------+------------------+------------------+
| Type   | Boolean       | Int64     | Int64 NULL       | Int64 NULL       |
| Domain | {FALSE, TRUE} | {1..=4}   | {5..=8} ∪ {NULL} | {1..=8} ∪ {NULL} |
| Row 0  | true          | 1         | 5                | 1                |
| Row 1  | true          | 2         | NULL             | 2                |
| Row 2  | false         | 3         | 7                | 7                |
| Row 3  | false         | 4         | NULL             | NULL             |
+--------+---------------+-----------+------------------+------------------+
evaluation (internal):
+-----------+------------------------------------------------------------------------+
| Column    | Data                                                                   |
+-----------+------------------------------------------------------------------------+
| cond_a    | Boolean([0b____0011])                                                  |
| expr_true | Int64([1, 2, 3, 4])                                                    |
| expr_else | NullableColumn { column: Int64([5, 6, 7, 8]), validity: [0b____0101] } |
| Output    | NullableColumn { column: Int64([1, 2, 7, 0]), validity: [0b____0111] } |
+-----------+------------------------------------------------------------------------+


ast            : multi_if(cond_a, expr_true, expr_else)
raw expr       : multi_if(cond_a::Boolean, expr_true::Int64, expr_else::Int64 NULL)
checked expr   : multi_if<T0=Int64 NULL><Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(cond_a AS Boolean NULL), CAST(CATCH(expr_true) AS Tuple(Int64 NULL, String NULL)), CATCH(expr_else))
evaluation:
+--------+---------------+-----------+------------------+------------------+
|        | cond_a        | expr_true | expr_else        | Output           |
+--------+---------------+-----------+------------------+------------------+
| Type   | Boolean       | Int64     | Int64 NULL       | Int64 NULL       |
| Domain | {FALSE, TRUE} | {1..=4}   | {5..=8} ∪ {NULL} | {1..=8} ∪ {NULL} |
| Row 0  | false         | 1         | 5                | 5                |
| Row 1  | false         | 2         | 6                | 6                |
| Row 2  | true          | 3         | NULL             | 3                |
| Row 3  | true          | 4         | NULL             | 4                |
+--------+---------------+-----------+------------------+------------------+
evaluation (internal):
+-----------+------------------------------------------------------------------------+
| Column    | Data                                                                   |
+-----------+------------------------------------------------------------------------+
| cond_a    | Boolean([0b____1100])                                                  |
| expr_true | Int64([1, 2, 3, 4])                                                    |
| expr_else | NullableColumn { column: Int64([5, 6, 7, 8]), validity: [0b____0011] } |
| Output    | NullableColumn { column: Int64([5, 6, 3, 4]), validity: [0b____1111] } |
+-----------+------------------------------------------------------------------------+


ast            : multi_if(cond_a, expr_a, cond_b, expr_b, expr_else)
raw expr       : multi_if(cond_a::Boolean, expr_a::Int64, cond_b::Boolean NULL, expr_b::Int64, expr_else::Int64 NULL)
checked expr   : multi_if<T0=Int64 NULL><Boolean NULL, Tuple(T0, String NULL), Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(cond_a AS Boolean NULL), CAST(CATCH(expr_a) AS Tuple(Int64 NULL, String NULL)), cond_b, CAST(CATCH(expr_b) AS Tuple(Int64 NULL, String NULL)), CATCH(expr_else))
evaluation:
+--------+---------------+---------+-----------------+---------+-------------------+-------------------+
|        | cond_a        | expr_a  | cond_b          | expr_b  | expr_else         | Output            |
+--------+---------------+---------+-----------------+---------+-------------------+-------------------+
| Type   | Boolean       | Int64   | Boolean NULL    | Int64   | Int64 NULL        | Int64 NULL        |
| Domain | {FALSE, TRUE} | {1..=4} | {TRUE} ∪ {NULL} | {5..=8} | {9..=12} ∪ {NULL} | {1..=12} ∪ {NULL} |
| Row 0  | true          | 1       | NULL            | 5       | 9                 | 1                 |
| Row 1  | true          | 2       | true            | 6       | 10                | 2                 |
| Row 2  | false         | 3       | NULL            | 7       | NULL              | NULL              |
| Row 3  | false         | 4       | true            | 8       | NULL              | 8                 |
+--------+---------------+---------+-----------------+---------+-------------------+-------------------+
evaluation (internal):
+-----------+---------------------------------------------------------------------------+
| Column    | Data                                                                      |
+-----------+---------------------------------------------------------------------------+
| cond_a    | Boolean([0b____0011])                                                     |
| expr_a    | Int64([1, 2, 3, 4])                                                       |
| cond_b    | NullableColumn { column: Boolean([0b____1111]), validity: [0b____1010] }  |
| expr_b    | Int64([5, 6, 7, 8])                                                       |
| expr_else | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] } |
| Output    | NullableColumn { column: Int64([1, 2, 0, 8]), validity: [0b____1011] }    |
+-----------+---------------------------------------------------------------------------+


ast            : multi_if(cond_a, expr_a, cond_b, expr_b, expr_else)
raw expr       : multi_if(cond_a::Boolean, expr_a::Int64, cond_b::Boolean, expr_b::Int64, expr_else::Int64)
checked expr   : multi_if<T0=Int64><Boolean NULL, Tuple(T0, String NULL), Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(cond_a AS Boolean NULL), CATCH(expr_a), CAST(cond_b AS Boolean NULL), CATCH(expr_b), CATCH(expr_else))
evaluation:
+--------+---------------+---------+---------------+---------+-----------+----------+
|        | cond_a        | expr_a  | cond_b        | expr_b  | expr_else | Output   |
+--------+---------------+---------+---------------+---------+-----------+----------+
| Type   | Boolean       | Int64   | Boolean       | Int64   | Int64     | Int64    |
| Domain | {FALSE, TRUE} | {1..=4} | {FALSE, TRUE} | {5..=8} | {9..=12}  | {1..=12} |
| Row 0  | true          | 1       | true          | 5       | 9         | 1        |
| Row 1  | true          | 2       | false         | 6       | 10        | 2        |
| Row 2  | false         | 3       | true          | 7       | 11        | 7        |
| Row 3  | false         | 4       | false         | 8       | 12        | 12       |
+--------+---------------+---------+---------------+---------+-----------+----------+
evaluation (internal):
+-----------+------------------------+
| Column    | Data                   |
+-----------+------------------------+
| cond_a    | Boolean([0b____0011])  |
| expr_a    | Int64([1, 2, 3, 4])    |
| cond_b    | Boolean([0b____0101])  |
| expr_b    | Int64([5, 6, 7, 8])    |
| expr_else | Int64([9, 10, 11, 12]) |
| Output    | Int64([1, 2, 7, 12])   |
+-----------+------------------------+


ast            : multi_if(cond_a, 1 / expr_a, expr_else)
raw expr       : multi_if(cond_a::Boolean, divide(1_u8, expr_a::Int64), expr_else::Int64)
checked expr   : multi_if<T0=Float64><Boolean NULL, Tuple(T0, String NULL), Tuple(T0, String NULL)>(CAST(cond_a AS Boolean NULL), CATCH(divide<UInt8, Int64>(1_u8, expr_a)), CAST(CATCH(expr_else) AS Tuple(Float64, String NULL)))
evaluation:
+--------+---------------+---------+-----------+---------+
|        | cond_a        | expr_a  | expr_else | Output  |
+--------+---------------+---------+-----------+---------+
| Type   | Boolean       | Int64   | Int64     | Float64 |
| Domain | {FALSE, TRUE} | {0..=4} | {9..=12}  | Unknown |
| Row 0  | true          | 1       | 9         | 1       |
| Row 1  | true          | 2       | 10        | 0.5     |
| Row 2  | false         | 0       | 11        | 11      |
| Row 3  | false         | 4       | 12        | 12      |
+--------+---------------+---------+-----------+---------+
evaluation (internal):
+-----------+---------------------------+
| Column    | Data                      |
+-----------+---------------------------+
| cond_a    | Boolean([0b____0011])     |
| expr_a    | Int64([1, 2, 0, 4])       |
| expr_else | Int64([9, 10, 11, 12])    |
| Output    | Float64([1, 0.5, 11, 12]) |
+-----------+---------------------------+


error: 
  --> SQL:1:1
  |
1 | multi_if(cond_a, 1 / expr_a, expr_else)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ divided by zero while evaluating function `divide(1, 0)`



ast            : is_not_null(1)
raw expr       : is_not_null(1_u8)
checked expr   : is_not_null<T0=UInt8><T0 NULL>(CAST(1_u8 AS UInt8 NULL))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_not_null(4096)
raw expr       : is_not_null(4096_u16)
checked expr   : is_not_null<T0=UInt16><T0 NULL>(CAST(4096_u16 AS UInt16 NULL))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_not_null(true)
raw expr       : is_not_null(true)
checked expr   : is_not_null<T0=Boolean><T0 NULL>(CAST(true AS Boolean NULL))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_not_null(false)
raw expr       : is_not_null(false)
checked expr   : is_not_null<T0=Boolean><T0 NULL>(CAST(false AS Boolean NULL))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_not_null('string')
raw expr       : is_not_null("string")
checked expr   : is_not_null<T0=String><T0 NULL>(CAST("string" AS String NULL))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : is_not_null(NULL)
raw expr       : is_not_null(NULL)
checked expr   : is_not_null<NULL>(NULL)
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_not_null(null_col)
raw expr       : is_not_null(null_col::NULL)
checked expr   : is_not_null<NULL>(null_col)
optimized expr : false
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : is_not_null(int64_col)
raw expr       : is_not_null(int64_col::Int64)
checked expr   : is_not_null<T0=Int64><T0 NULL>(CAST(int64_col AS Int64 NULL))
optimized expr : true
evaluation:
+--------+-----------+---------+
|        | int64_col | Output  |
+--------+-----------+---------+
| Type   | Int64     | Boolean |
| Domain | {5..=8}   | {TRUE}  |
| Row 0  | 5         | true    |
| Row 1  | 6         | true    |
| Row 2  | 7         | true    |
| Row 3  | 8         | true    |
+--------+-----------+---------+
evaluation (internal):
+-----------+-----------------------+
| Column    | Data                  |
+-----------+-----------------------+
| int64_col | Int64([5, 6, 7, 8])   |
| Output    | Boolean([0b____1111]) |
+-----------+-----------------------+


ast            : is_not_null(nullable_col)
raw expr       : is_not_null(nullable_col::Int64 NULL)
checked expr   : is_not_null<T0=Int64><T0 NULL>(nullable_col)
evaluation:
+--------+-------------------+---------------+
|        | nullable_col      | Output        |
+--------+-------------------+---------------+
| Type   | Int64 NULL        | Boolean       |
| Domain | {9..=12} ∪ {NULL} | {FALSE, TRUE} |
| Row 0  | 9                 | true          |
| Row 1  | 10                | true          |
| Row 2  | NULL              | false         |
| Row 3  | NULL              | false         |
+--------+-------------------+---------------+
evaluation (internal):
+--------------+---------------------------------------------------------------------------+
| Column       | Data                                                                      |
+--------------+---------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] } |
| Output       | Boolean([0b____0011])                                                     |
+--------------+---------------------------------------------------------------------------+


