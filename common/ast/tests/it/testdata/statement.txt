---------- Input ----------
show tables
---------- Output ---------
SHOW TABLES
---------- AST ------------
ShowTables {
    database: None,
    full: false,
    limit: None,
}


---------- Input ----------
show processlist;
---------- Output ---------
SHOW PROCESSLIST
---------- AST ------------
ShowProcessList


---------- Input ----------
show create table a.b;
---------- Output ---------
SHOW CREATE TABLE a.b
---------- AST ------------
ShowCreateTable {
    database: Some(
        Identifier {
            name: "a",
            quote: None,
        },
    ),
    table: Identifier {
        name: "b",
        quote: None,
    },
}


---------- Input ----------
explain pipeline select a from b;
---------- Output ---------
EXPLAIN PIPELINE SELECT a FROM b
---------- AST ------------
Explain {
    kind: Pipeline,
    query: Query(
        Query {
            body: Select(
                SelectStmt {
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: ColumnRef {
                                database: None,
                                table: None,
                                column: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                            },
                            alias: None,
                        },
                    ],
                    from: Some(
                        Table {
                            catalog: None,
                            database: None,
                            table: Identifier {
                                name: "b",
                                quote: None,
                            },
                            alias: None,
                        },
                    ),
                    selection: None,
                    group_by: [],
                    having: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
        },
    ),
}


---------- Input ----------
describe a;
---------- Output ---------
DESCRIBE a
---------- AST ------------
Describe {
    catalog: None,
    database: None,
    table: Identifier {
        name: "a",
        quote: None,
    },
}


---------- Input ----------
describe a; describe b
---------- Output ---------
DESCRIBE a
---------- AST ------------
Describe {
    catalog: None,
    database: None,
    table: Identifier {
        name: "a",
        quote: None,
    },
}


---------- Output ---------
DESCRIBE b
---------- AST ------------
Describe {
    catalog: None,
    database: None,
    table: Identifier {
        name: "b",
        quote: None,
    },
}


---------- Input ----------
create table if not exists a.b (c integer not null default 1, b varchar);
---------- Output ---------
CREATE TABLE IF NOT EXISTS a.b (c Int32 NOT NULL DEFAULT 1, b STRING NOT NULL)
---------- AST ------------
CreateTable {
    if_not_exists: true,
    database: Some(
        Identifier {
            name: "a",
            quote: None,
        },
    ),
    table: Identifier {
        name: "b",
        quote: None,
    },
    source: Some(
        Columns(
            [
                ColumnDefinition {
                    name: Identifier {
                        name: "c",
                        quote: None,
                    },
                    data_type: Int32,
                    nullable: false,
                    default_expr: Some(
                        Literal(
                            Number(
                                "1",
                            ),
                        ),
                    ),
                },
                ColumnDefinition {
                    name: Identifier {
                        name: "b",
                        quote: None,
                    },
                    data_type: String,
                    nullable: false,
                    default_expr: None,
                },
            ],
        ),
    ),
    engine: Null,
    cluster_by: [],
    as_query: None,
    comment: None,
}


---------- Input ----------
create table if not exists a.b (c integer default 1 not null, b varchar) as select * from t;
---------- Output ---------
CREATE TABLE IF NOT EXISTS a.b (c Int32 NOT NULL DEFAULT 1, b STRING NOT NULL) AS SELECT * FROM t
---------- AST ------------
CreateTable {
    if_not_exists: true,
    database: Some(
        Identifier {
            name: "a",
            quote: None,
        },
    ),
    table: Identifier {
        name: "b",
        quote: None,
    },
    source: Some(
        Columns(
            [
                ColumnDefinition {
                    name: Identifier {
                        name: "c",
                        quote: None,
                    },
                    data_type: Int32,
                    nullable: false,
                    default_expr: Some(
                        Literal(
                            Number(
                                "1",
                            ),
                        ),
                    ),
                },
                ColumnDefinition {
                    name: Identifier {
                        name: "b",
                        quote: None,
                    },
                    data_type: String,
                    nullable: false,
                    default_expr: None,
                },
            ],
        ),
    ),
    engine: Null,
    cluster_by: [],
    as_query: Some(
        Query {
            body: Select(
                SelectStmt {
                    distinct: false,
                    select_list: [
                        QualifiedName(
                            [
                                Star,
                            ],
                        ),
                    ],
                    from: Some(
                        Table {
                            catalog: None,
                            database: None,
                            table: Identifier {
                                name: "t",
                                quote: None,
                            },
                            alias: None,
                        },
                    ),
                    selection: None,
                    group_by: [],
                    having: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
        },
    ),
    comment: None,
}


---------- Input ----------
create table a.b like c.d;
---------- Output ---------
CREATE TABLE a.b LIKE c.d
---------- AST ------------
CreateTable {
    if_not_exists: false,
    database: Some(
        Identifier {
            name: "a",
            quote: None,
        },
    ),
    table: Identifier {
        name: "b",
        quote: None,
    },
    source: Some(
        Like {
            database: Some(
                Identifier {
                    name: "c",
                    quote: None,
                },
            ),
            table: Identifier {
                name: "d",
                quote: None,
            },
        },
    ),
    engine: Null,
    cluster_by: [],
    as_query: None,
    comment: None,
}


---------- Input ----------
create table t like t2 engine = memory;
---------- Output ---------
CREATE TABLE t LIKE t2 ENGINE = MEMORY
---------- AST ------------
CreateTable {
    if_not_exists: false,
    database: None,
    table: Identifier {
        name: "t",
        quote: None,
    },
    source: Some(
        Like {
            database: None,
            table: Identifier {
                name: "t2",
                quote: None,
            },
        },
    ),
    engine: Memory,
    cluster_by: [],
    as_query: None,
    comment: None,
}


---------- Input ----------
truncate table a;
---------- Output ---------
TRUNCATE TABLE a
---------- AST ------------
TruncateTable {
    database: None,
    table: Identifier {
        name: "a",
        quote: None,
    },
    purge: false,
}


---------- Input ----------
truncate table "a".b;
---------- Output ---------
TRUNCATE TABLE "a".b
---------- AST ------------
TruncateTable {
    database: Some(
        Identifier {
            name: "a",
            quote: Some(
                '"',
            ),
        },
    ),
    table: Identifier {
        name: "b",
        quote: None,
    },
    purge: false,
}


---------- Input ----------
drop table a;
---------- Output ---------
DROP TABLE a
---------- AST ------------
DropTable {
    if_exists: false,
    database: None,
    table: Identifier {
        name: "a",
        quote: None,
    },
}


---------- Input ----------
drop table if exists a."b";
---------- Output ---------
DROP TABLE IF EXISTS a."b"
---------- AST ------------
DropTable {
    if_exists: true,
    database: Some(
        Identifier {
            name: "a",
            quote: None,
        },
    ),
    table: Identifier {
        name: "b",
        quote: Some(
            '"',
        ),
    },
}


---------- Input ----------
use "a";
---------- Output ---------
USE "a"
---------- AST ------------
UseDatabase {
    database: Identifier {
        name: "a",
        quote: Some(
            '"',
        ),
    },
}


---------- Input ----------
create database if not exists a;
---------- Output ---------
CREATE DATABASE IF NOT EXISTS a
---------- AST ------------
CreateDatabase {
    if_not_exists: true,
    database: Identifier {
        name: "a",
        quote: None,
    },
    engine: Null,
    options: [],
}


---------- Input ----------
create table c(a DateTime null, b DateTime(3));
---------- Output ---------
CREATE TABLE c (a DATETIME NULL, b DATETIME(3) NOT NULL)
---------- AST ------------
CreateTable {
    if_not_exists: false,
    database: None,
    table: Identifier {
        name: "c",
        quote: None,
    },
    source: Some(
        Columns(
            [
                ColumnDefinition {
                    name: Identifier {
                        name: "a",
                        quote: None,
                    },
                    data_type: DateTime {
                        precision: None,
                    },
                    nullable: true,
                    default_expr: None,
                },
                ColumnDefinition {
                    name: Identifier {
                        name: "b",
                        quote: None,
                    },
                    data_type: DateTime {
                        precision: Some(
                            3,
                        ),
                    },
                    nullable: false,
                    default_expr: None,
                },
            ],
        ),
    ),
    engine: Null,
    cluster_by: [],
    as_query: None,
    comment: None,
}


---------- Input ----------
truncate table test;
---------- Output ---------
TRUNCATE TABLE test
---------- AST ------------
TruncateTable {
    database: None,
    table: Identifier {
        name: "test",
        quote: None,
    },
    purge: false,
}


---------- Input ----------
truncate table test_db.test;
---------- Output ---------
TRUNCATE TABLE test_db.test
---------- AST ------------
TruncateTable {
    database: Some(
        Identifier {
            name: "test_db",
            quote: None,
        },
    ),
    table: Identifier {
        name: "test",
        quote: None,
    },
    purge: false,
}


---------- Input ----------
DROP table table1;
---------- Output ---------
DROP TABLE table1
---------- AST ------------
DropTable {
    if_exists: false,
    database: None,
    table: Identifier {
        name: "table1",
        quote: None,
    },
}


---------- Input ----------
DROP table IF EXISTS table1;
---------- Output ---------
DROP TABLE IF EXISTS table1
---------- AST ------------
DropTable {
    if_exists: true,
    database: None,
    table: Identifier {
        name: "table1",
        quote: None,
    },
}


---------- Input ----------
CREATE TABLE t(c1 int null, c2 bigint null, c3 varchar null);
---------- Output ---------
CREATE TABLE t (c1 Int32 NULL, c2 Int64 NULL, c3 STRING NULL)
---------- AST ------------
CreateTable {
    if_not_exists: false,
    database: None,
    table: Identifier {
        name: "t",
        quote: None,
    },
    source: Some(
        Columns(
            [
                ColumnDefinition {
                    name: Identifier {
                        name: "c1",
                        quote: None,
                    },
                    data_type: Int32,
                    nullable: true,
                    default_expr: None,
                },
                ColumnDefinition {
                    name: Identifier {
                        name: "c2",
                        quote: None,
                    },
                    data_type: Int64,
                    nullable: true,
                    default_expr: None,
                },
                ColumnDefinition {
                    name: Identifier {
                        name: "c3",
                        quote: None,
                    },
                    data_type: String,
                    nullable: true,
                    default_expr: None,
                },
            ],
        ),
    ),
    engine: Null,
    cluster_by: [],
    as_query: None,
    comment: None,
}


---------- Input ----------
CREATE TABLE t(c1 int not null, c2 bigint not null, c3 varchar not null);
---------- Output ---------
CREATE TABLE t (c1 Int32 NOT NULL, c2 Int64 NOT NULL, c3 STRING NOT NULL)
---------- AST ------------
CreateTable {
    if_not_exists: false,
    database: None,
    table: Identifier {
        name: "t",
        quote: None,
    },
    source: Some(
        Columns(
            [
                ColumnDefinition {
                    name: Identifier {
                        name: "c1",
                        quote: None,
                    },
                    data_type: Int32,
                    nullable: false,
                    default_expr: None,
                },
                ColumnDefinition {
                    name: Identifier {
                        name: "c2",
                        quote: None,
                    },
                    data_type: Int64,
                    nullable: false,
                    default_expr: None,
                },
                ColumnDefinition {
                    name: Identifier {
                        name: "c3",
                        quote: None,
                    },
                    data_type: String,
                    nullable: false,
                    default_expr: None,
                },
            ],
        ),
    ),
    engine: Null,
    cluster_by: [],
    as_query: None,
    comment: None,
}


---------- Input ----------
CREATE TABLE t(c1 int default 1);
---------- Output ---------
CREATE TABLE t (c1 Int32 NOT NULL DEFAULT 1)
---------- AST ------------
CreateTable {
    if_not_exists: false,
    database: None,
    table: Identifier {
        name: "t",
        quote: None,
    },
    source: Some(
        Columns(
            [
                ColumnDefinition {
                    name: Identifier {
                        name: "c1",
                        quote: None,
                    },
                    data_type: Int32,
                    nullable: false,
                    default_expr: Some(
                        Literal(
                            Number(
                                "1",
                            ),
                        ),
                    ),
                },
            ],
        ),
    ),
    engine: Null,
    cluster_by: [],
    as_query: None,
    comment: None,
}


---------- Input ----------
DROP database if exists db1;
---------- Output ---------
DROP DATABASE IF EXISTS db1
---------- AST ------------
DropDatabase {
    if_exists: true,
    database: Identifier {
        name: "db1",
        quote: None,
    },
}


---------- Input ----------
select distinct a, count(*) from t where a = 1 and b - 1 < a group by a having a = 1;
---------- Output ---------
SELECT DISTINCT a, COUNT(*) FROM t WHERE a = 1 AND b - 1 < a GROUP BY a HAVING a = 1
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: true,
                select_list: [
                    AliasedExpr {
                        expr: ColumnRef {
                            database: None,
                            table: None,
                            column: Identifier {
                                name: "a",
                                quote: None,
                            },
                        },
                        alias: None,
                    },
                    AliasedExpr {
                        expr: CountAll,
                        alias: None,
                    },
                ],
                from: Some(
                    Table {
                        catalog: None,
                        database: None,
                        table: Identifier {
                            name: "t",
                            quote: None,
                        },
                        alias: None,
                    },
                ),
                selection: Some(
                    BinaryOp {
                        op: And,
                        left: BinaryOp {
                            op: Eq,
                            left: ColumnRef {
                                database: None,
                                table: None,
                                column: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                            },
                            right: Literal(
                                Number(
                                    "1",
                                ),
                            ),
                        },
                        right: BinaryOp {
                            op: Lt,
                            left: BinaryOp {
                                op: Minus,
                                left: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Identifier {
                                        name: "b",
                                        quote: None,
                                    },
                                },
                                right: Literal(
                                    Number(
                                        "1",
                                    ),
                                ),
                            },
                            right: ColumnRef {
                                database: None,
                                table: None,
                                column: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                            },
                        },
                    },
                ),
                group_by: [
                    ColumnRef {
                        database: None,
                        table: None,
                        column: Identifier {
                            name: "a",
                            quote: None,
                        },
                    },
                ],
                having: Some(
                    BinaryOp {
                        op: Eq,
                        left: ColumnRef {
                            database: None,
                            table: None,
                            column: Identifier {
                                name: "a",
                                quote: None,
                            },
                        },
                        right: Literal(
                            Number(
                                "1",
                            ),
                        ),
                    },
                ),
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from t4;
---------- Output ---------
SELECT * FROM t4
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Table {
                        catalog: None,
                        database: None,
                        table: Identifier {
                            name: "t4",
                            quote: None,
                        },
                        alias: None,
                    },
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from aa.bb;
---------- Output ---------
SELECT * FROM aa.bb
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Table {
                        catalog: None,
                        database: Some(
                            Identifier {
                                name: "aa",
                                quote: None,
                            },
                        ),
                        table: Identifier {
                            name: "bb",
                            quote: None,
                        },
                        alias: None,
                    },
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a, b, c;
---------- Output ---------
SELECT * FROM a CROSS JOIN b CROSS JOIN c
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: CrossJoin,
                            condition: None,
                            left: Join(
                                Join {
                                    op: CrossJoin,
                                    condition: None,
                                    left: Table {
                                        catalog: None,
                                        database: None,
                                        table: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                        alias: None,
                                    },
                                    right: Table {
                                        catalog: None,
                                        database: None,
                                        table: Identifier {
                                            name: "b",
                                            quote: None,
                                        },
                                        alias: None,
                                    },
                                },
                            ),
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "c",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a INNER JOIN b ON a.a = b.a
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: Inner,
                            condition: On(
                                BinaryOp {
                                    op: Eq,
                                    left: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "a",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                    right: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                            },
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a left outer join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a LEFT OUTER JOIN b ON a.a = b.a
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: LeftOuter,
                            condition: On(
                                BinaryOp {
                                    op: Eq,
                                    left: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "a",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                    right: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                            },
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a right outer join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a RIGHT OUTER JOIN b ON a.a = b.a
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: RightOuter,
                            condition: On(
                                BinaryOp {
                                    op: Eq,
                                    left: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "a",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                    right: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                            },
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a full outer join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a FULL OUTER JOIN b ON a.a = b.a
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: FullOuter,
                            condition: On(
                                BinaryOp {
                                    op: Eq,
                                    left: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "a",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                    right: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                            },
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a inner join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a INNER JOIN b ON a.a = b.a
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: Inner,
                            condition: On(
                                BinaryOp {
                                    op: Eq,
                                    left: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "a",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                    right: ColumnRef {
                                        database: None,
                                        table: Some(
                                            Identifier {
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                        column: Identifier {
                                            name: "a",
                                            quote: None,
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                            },
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a left outer join b using(a);
---------- Output ---------
SELECT * FROM a LEFT OUTER JOIN b USING(a)
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: LeftOuter,
                            condition: Using(
                                [
                                    Identifier {
                                        name: "a",
                                        quote: None,
                                    },
                                ],
                            ),
                            left: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                            },
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a right outer join b using(a);
---------- Output ---------
SELECT * FROM a RIGHT OUTER JOIN b USING(a)
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: RightOuter,
                            condition: Using(
                                [
                                    Identifier {
                                        name: "a",
                                        quote: None,
                                    },
                                ],
                            ),
                            left: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                            },
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a full outer join b using(a);
---------- Output ---------
SELECT * FROM a FULL OUTER JOIN b USING(a)
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: FullOuter,
                            condition: Using(
                                [
                                    Identifier {
                                        name: "a",
                                        quote: None,
                                    },
                                ],
                            ),
                            left: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                            },
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
select * from a inner join b using(a);
---------- Output ---------
SELECT * FROM a INNER JOIN b USING(a)
---------- AST ------------
Query(
    Query {
        body: Select(
            SelectStmt {
                distinct: false,
                select_list: [
                    QualifiedName(
                        [
                            Star,
                        ],
                    ),
                ],
                from: Some(
                    Join(
                        Join {
                            op: Inner,
                            condition: Using(
                                [
                                    Identifier {
                                        name: "a",
                                        quote: None,
                                    },
                                ],
                            ),
                            left: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                            },
                            right: Table {
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                            },
                        },
                    ),
                ),
                selection: None,
                group_by: [],
                having: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
    },
)


---------- Input ----------
insert into t (c1, c2) values (1, 2), (3, 4);
---------- Output ---------
INSERT INTO t (c1, c2) VALUES (1, 2), (3, 4)
---------- AST ------------
Insert {
    database: None,
    table: Identifier {
        name: "t",
        quote: None,
    },
    columns: [
        Identifier {
            name: "c1",
            quote: None,
        },
        Identifier {
            name: "c2",
            quote: None,
        },
    ],
    source: Values {
        values_tokens: [
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: LParen,
                span: 30..31,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: LiteralNumber,
                span: 31..32,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: Comma,
                span: 32..33,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: LiteralNumber,
                span: 34..35,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: RParen,
                span: 35..36,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: Comma,
                span: 36..37,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: LParen,
                span: 38..39,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: LiteralNumber,
                span: 39..40,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: Comma,
                span: 40..41,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: LiteralNumber,
                span: 42..43,
            },
            Token {
                source: "insert into t (c1, c2) values (1, 2), (3, 4);",
                kind: RParen,
                span: 43..44,
            },
        ],
    },
    overwrite: false,
}


---------- Input ----------
insert into table t format json;
---------- Output ---------
INSERT INTO t FORMAT json
---------- AST ------------
Insert {
    database: None,
    table: Identifier {
        name: "t",
        quote: None,
    },
    columns: [],
    source: Streaming {
        format: "json",
    },
    overwrite: false,
}


---------- Input ----------
insert into table t select * from t2;
---------- Output ---------
INSERT INTO t SELECT * FROM t2
---------- AST ------------
Insert {
    database: None,
    table: Identifier {
        name: "t",
        quote: None,
    },
    columns: [],
    source: Select {
        query: Query {
            body: Select(
                SelectStmt {
                    distinct: false,
                    select_list: [
                        QualifiedName(
                            [
                                Star,
                            ],
                        ),
                    ],
                    from: Some(
                        Table {
                            catalog: None,
                            database: None,
                            table: Identifier {
                                name: "t2",
                                quote: None,
                            },
                            alias: None,
                        },
                    ),
                    selection: None,
                    group_by: [],
                    having: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
        },
    },
    overwrite: false,
}


