ast            : bool_and(true, false)
raw expr       : bool_and(true, false)
checked expr   : bool_and<Boolean, Boolean>(true, false)
output type    : Boolean
output domain  : {FALSE}
output         : false


ast            : bool_and(null, false)
raw expr       : bool_and(NULL, false)
checked expr   : bool_and<NULL, Boolean NULL>(NULL, cast<dest_type=Boolean NULL>(false))
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : plus(a, 10)
raw expr       : plus(ColumnRef(0)::UInt8 NULL, 10_u8)
checked expr   : plus<Int16 NULL, Int16 NULL>(cast<dest_type=Int16 NULL>(ColumnRef(0)), cast<dest_type=Int16 NULL>(10_u8))
evaluation:
+--------+--------------------+--------------------+
|        | a                  | Output             |
+--------+--------------------+--------------------+
| Type   | UInt8 NULL         | Int16 NULL         |
| Domain | {10..=12} ∪ {NULL} | {20..=22} ∪ {NULL} |
| Row 0  | NULL               | NULL               |
| Row 1  | 11                 | 21                 |
| Row 2  | NULL               | NULL               |
+--------+--------------------+--------------------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] } |
| Output | Nullable { column: Int16([20, 21, 22]), validity: [0b_____010] } |
+--------+------------------------------------------------------------------+


ast            : plus(a, b)
raw expr       : plus(ColumnRef(0)::UInt8 NULL, ColumnRef(1)::UInt8 NULL)
checked expr   : plus<Int16 NULL, Int16 NULL>(cast<dest_type=Int16 NULL>(ColumnRef(0)), cast<dest_type=Int16 NULL>(ColumnRef(1)))
evaluation:
+--------+--------------------+------------------+--------------------+
|        | a                  | b                | Output             |
+--------+--------------------+------------------+--------------------+
| Type   | UInt8 NULL         | UInt8 NULL       | Int16 NULL         |
| Domain | {10..=12} ∪ {NULL} | {1..=3} ∪ {NULL} | {11..=15} ∪ {NULL} |
| Row 0  | NULL               | NULL             | NULL               |
| Row 1  | 11                 | 2                | 13                 |
| Row 2  | NULL               | 3                | NULL               |
+--------+--------------------+------------------+--------------------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] } |
| b      | Nullable { column: UInt8([1, 2, 3]), validity: [0b_____110] }    |
| Output | Nullable { column: Int16([11, 13, 15]), validity: [0b_____010] } |
+--------+------------------------------------------------------------------+


ast            : plus(a, b)
raw expr       : plus(ColumnRef(0)::UInt8 NULL, ColumnRef(1)::NULL)
checked expr   : plus<Int16 NULL, NULL>(cast<dest_type=Int16 NULL>(ColumnRef(0)), ColumnRef(1))
evaluation:
+--------+--------------------+--------+--------+
|        | a                  | b      | Output |
+--------+--------------------+--------+--------+
| Type   | UInt8 NULL         | NULL   | NULL   |
| Domain | {10..=12} ∪ {NULL} | {NULL} | {NULL} |
| Row 0  | NULL               | NULL   | NULL   |
| Row 1  | 11                 | NULL   | NULL   |
| Row 2  | NULL               | NULL   | NULL   |
+--------+--------------------+--------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] } |
| b      | Null { len: 3 }                                                  |
| Output | Null { len: 3 }                                                  |
+--------+------------------------------------------------------------------+


ast            : minus(a, 10)
raw expr       : minus(ColumnRef(0)::UInt8 NULL, 10_u8)
checked expr   : minus<Int32 NULL, Int32 NULL>(cast<dest_type=Int32 NULL>(ColumnRef(0)), cast<dest_type=Int32 NULL>(10_u8))
evaluation:
+--------+--------------------+------------------+
|        | a                  | Output           |
+--------+--------------------+------------------+
| Type   | UInt8 NULL         | Int32 NULL       |
| Domain | {10..=12} ∪ {NULL} | {0..=2} ∪ {NULL} |
| Row 0  | NULL               | NULL             |
| Row 1  | 11                 | 1                |
| Row 2  | NULL               | NULL             |
+--------+--------------------+------------------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] } |
| Output | Nullable { column: Int32([0, 1, 2]), validity: [0b_____010] }    |
+--------+------------------------------------------------------------------+


ast            : minus(a, b)
raw expr       : minus(ColumnRef(0)::UInt16 NULL, ColumnRef(1)::Int16 NULL)
checked expr   : minus<Int32 NULL, Int32 NULL>(cast<dest_type=Int32 NULL>(ColumnRef(0)), cast<dest_type=Int32 NULL>(ColumnRef(1)))
evaluation:
+--------+--------------------+------------------+-------------------+
|        | a                  | b                | Output            |
+--------+--------------------+------------------+-------------------+
| Type   | UInt16 NULL        | Int16 NULL       | Int32 NULL        |
| Domain | {10..=12} ∪ {NULL} | {1..=3} ∪ {NULL} | {7..=11} ∪ {NULL} |
| Row 0  | NULL               | NULL             | NULL              |
| Row 1  | 11                 | 2                | 9                 |
| Row 2  | NULL               | 3                | NULL              |
+--------+--------------------+------------------+-------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------+
| Column | Data                                                              |
+--------+-------------------------------------------------------------------+
| a      | Nullable { column: UInt16([10, 11, 12]), validity: [0b_____010] } |
| b      | Nullable { column: Int16([1, 2, 3]), validity: [0b_____110] }     |
| Output | Nullable { column: Int32([9, 9, 9]), validity: [0b_____010] }     |
+--------+-------------------------------------------------------------------+


ast            : minus(a, b)
raw expr       : minus(ColumnRef(0)::UInt8 NULL, ColumnRef(1)::NULL)
checked expr   : minus<Int32 NULL, NULL>(cast<dest_type=Int32 NULL>(ColumnRef(0)), ColumnRef(1))
evaluation:
+--------+--------------------+--------+--------+
|        | a                  | b      | Output |
+--------+--------------------+--------+--------+
| Type   | UInt8 NULL         | NULL   | NULL   |
| Domain | {10..=12} ∪ {NULL} | {NULL} | {NULL} |
| Row 0  | NULL               | NULL   | NULL   |
| Row 1  | 11                 | NULL   | NULL   |
| Row 2  | NULL               | NULL   | NULL   |
+--------+--------------------+--------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] } |
| b      | Null { len: 3 }                                                  |
| Output | Null { len: 3 }                                                  |
+--------+------------------------------------------------------------------+


ast            : multiply(a, 10)
raw expr       : multiply(ColumnRef(0)::UInt8 NULL, 10_u8)
checked expr   : multiply<Int64 NULL, Int64 NULL>(cast<dest_type=Int64 NULL>(ColumnRef(0)), cast<dest_type=Int64 NULL>(10_u8))
evaluation:
+--------+--------------------+-------------------------------------------------------+
|        | a                  | Output                                                |
+--------+--------------------+-------------------------------------------------------+
| Type   | UInt8 NULL         | Int64 NULL                                            |
| Domain | {10..=12} ∪ {NULL} | {-9223372036854775808..=9223372036854775807} ∪ {NULL} |
| Row 0  | NULL               | NULL                                                  |
| Row 1  | 11                 | 110                                                   |
| Row 2  | NULL               | NULL                                                  |
+--------+--------------------+-------------------------------------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------+
| Column | Data                                                                |
+--------+---------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] }    |
| Output | Nullable { column: Int64([100, 110, 120]), validity: [0b_____010] } |
+--------+---------------------------------------------------------------------+


ast            : multiply(a, b)
raw expr       : multiply(ColumnRef(0)::UInt16 NULL, ColumnRef(1)::Int16 NULL)
checked expr   : multiply<Int64 NULL, Int64 NULL>(cast<dest_type=Int64 NULL>(ColumnRef(0)), cast<dest_type=Int64 NULL>(ColumnRef(1)))
evaluation:
+--------+--------------------+------------------+-------------------------------------------------------+
|        | a                  | b                | Output                                                |
+--------+--------------------+------------------+-------------------------------------------------------+
| Type   | UInt16 NULL        | Int16 NULL       | Int64 NULL                                            |
| Domain | {10..=12} ∪ {NULL} | {1..=3} ∪ {NULL} | {-9223372036854775808..=9223372036854775807} ∪ {NULL} |
| Row 0  | NULL               | NULL             | NULL                                                  |
| Row 1  | 11                 | 2                | 22                                                    |
| Row 2  | NULL               | 3                | NULL                                                  |
+--------+--------------------+------------------+-------------------------------------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------+
| Column | Data                                                              |
+--------+-------------------------------------------------------------------+
| a      | Nullable { column: UInt16([10, 11, 12]), validity: [0b_____010] } |
| b      | Nullable { column: Int16([1, 2, 3]), validity: [0b_____110] }     |
| Output | Nullable { column: Int64([10, 22, 36]), validity: [0b_____010] }  |
+--------+-------------------------------------------------------------------+


ast            : multiply(a, b)
raw expr       : multiply(ColumnRef(0)::UInt32 NULL, ColumnRef(1)::Int32 NULL)
checked expr   : multiply<Int64 NULL, Int64 NULL>(cast<dest_type=Int64 NULL>(ColumnRef(0)), cast<dest_type=Int64 NULL>(ColumnRef(1)))
evaluation:
+--------+--------------------+------------------+-------------------------------------------------------+
|        | a                  | b                | Output                                                |
+--------+--------------------+------------------+-------------------------------------------------------+
| Type   | UInt32 NULL        | Int32 NULL       | Int64 NULL                                            |
| Domain | {10..=12} ∪ {NULL} | {1..=3} ∪ {NULL} | {-9223372036854775808..=9223372036854775807} ∪ {NULL} |
| Row 0  | NULL               | NULL             | NULL                                                  |
| Row 1  | 11                 | 2                | 22                                                    |
| Row 2  | NULL               | 3                | NULL                                                  |
+--------+--------------------+------------------+-------------------------------------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------+
| Column | Data                                                              |
+--------+-------------------------------------------------------------------+
| a      | Nullable { column: UInt32([10, 11, 12]), validity: [0b_____010] } |
| b      | Nullable { column: Int32([1, 2, 3]), validity: [0b_____110] }     |
| Output | Nullable { column: Int64([10, 22, 36]), validity: [0b_____010] }  |
+--------+-------------------------------------------------------------------+


ast            : multiply(a, b)
raw expr       : multiply(ColumnRef(0)::UInt8 NULL, ColumnRef(1)::NULL)
checked expr   : multiply<Int64 NULL, NULL>(cast<dest_type=Int64 NULL>(ColumnRef(0)), ColumnRef(1))
evaluation:
+--------+--------------------+--------+--------+
|        | a                  | b      | Output |
+--------+--------------------+--------+--------+
| Type   | UInt8 NULL         | NULL   | NULL   |
| Domain | {10..=12} ∪ {NULL} | {NULL} | {NULL} |
| Row 0  | NULL               | NULL   | NULL   |
| Row 1  | 11                 | NULL   | NULL   |
| Row 2  | NULL               | NULL   | NULL   |
+--------+--------------------+--------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] } |
| b      | Null { len: 3 }                                                  |
| Output | Null { len: 3 }                                                  |
+--------+------------------------------------------------------------------+


ast            : divide(a, 10)
raw expr       : divide(ColumnRef(0)::UInt8 NULL, 10_u8)
checked expr   : divide<Float32 NULL, Float32 NULL>(cast<dest_type=Float32 NULL>(ColumnRef(0)), cast<dest_type=Float32 NULL>(10_u8))
evaluation:
+--------+--------------------+-----------------------------------------------------------------------------------------------+
|        | a                  | Output                                                                                        |
+--------+--------------------+-----------------------------------------------------------------------------------------------+
| Type   | UInt8 NULL         | Float32 NULL                                                                                  |
| Domain | {10..=12} ∪ {NULL} | {-340282346638528860000000000000000000000..=340282346638528860000000000000000000000} ∪ {NULL} |
| Row 0  | NULL               | NULL                                                                                          |
| Row 1  | 11                 | 1.1                                                                                           |
| Row 2  | NULL               | NULL                                                                                          |
+--------+--------------------+-----------------------------------------------------------------------------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------+
| Column | Data                                                                  |
+--------+-----------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] }      |
| Output | Nullable { column: Float32([1.0, 1.1, 1.2]), validity: [0b_____010] } |
+--------+-----------------------------------------------------------------------+


ast            : divide(a, b)
raw expr       : divide(ColumnRef(0)::UInt16 NULL, ColumnRef(1)::Int16 NULL)
checked expr   : divide<Float32 NULL, Float32 NULL>(cast<dest_type=Float32 NULL>(ColumnRef(0)), cast<dest_type=Float32 NULL>(ColumnRef(1)))
evaluation:
+--------+--------------------+------------------+-----------------------------------------------------------------------------------------------+
|        | a                  | b                | Output                                                                                        |
+--------+--------------------+------------------+-----------------------------------------------------------------------------------------------+
| Type   | UInt16 NULL        | Int16 NULL       | Float32 NULL                                                                                  |
| Domain | {10..=12} ∪ {NULL} | {1..=3} ∪ {NULL} | {-340282346638528860000000000000000000000..=340282346638528860000000000000000000000} ∪ {NULL} |
| Row 0  | NULL               | NULL             | NULL                                                                                          |
| Row 1  | 11                 | 2                | 5.5                                                                                           |
| Row 2  | NULL               | 3                | NULL                                                                                          |
+--------+--------------------+------------------+-----------------------------------------------------------------------------------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------+
| Column | Data                                                                   |
+--------+------------------------------------------------------------------------+
| a      | Nullable { column: UInt16([10, 11, 12]), validity: [0b_____010] }      |
| b      | Nullable { column: Int16([1, 2, 3]), validity: [0b_____110] }          |
| Output | Nullable { column: Float32([10.0, 5.5, 4.0]), validity: [0b_____010] } |
+--------+------------------------------------------------------------------------+


ast            : divide(a, b)
raw expr       : divide(ColumnRef(0)::UInt8 NULL, ColumnRef(1)::NULL)
checked expr   : divide<Float32 NULL, NULL>(cast<dest_type=Float32 NULL>(ColumnRef(0)), ColumnRef(1))
evaluation:
+--------+--------------------+--------+--------+
|        | a                  | b      | Output |
+--------+--------------------+--------+--------+
| Type   | UInt8 NULL         | NULL   | NULL   |
| Domain | {10..=12} ∪ {NULL} | {NULL} | {NULL} |
| Row 0  | NULL               | NULL   | NULL   |
| Row 1  | 11                 | NULL   | NULL   |
| Row 2  | NULL               | NULL   | NULL   |
+--------+--------------------+--------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] } |
| b      | Null { len: 3 }                                                  |
| Output | Null { len: 3 }                                                  |
+--------+------------------------------------------------------------------+


ast            : avg(a, 10)
raw expr       : avg(ColumnRef(0)::UInt8 NULL, 10_u8)
checked expr   : avg<Float64 NULL, Float64 NULL>(cast<dest_type=Float64 NULL>(ColumnRef(0)), cast<dest_type=Float64 NULL>(10_u8))
evaluation:
+--------+--------------------+--------------------+
|        | a                  | Output             |
+--------+--------------------+--------------------+
| Type   | UInt8 NULL         | Float64 NULL       |
| Domain | {10..=12} ∪ {NULL} | {10..=11} ∪ {NULL} |
| Row 0  | NULL               | NULL               |
| Row 1  | 11                 | 10.5               |
| Row 2  | NULL               | NULL               |
+--------+--------------------+--------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] }         |
| Output | Nullable { column: Float64([10.0, 10.5, 11.0]), validity: [0b_____010] } |
+--------+--------------------------------------------------------------------------+


ast            : avg(a, b)
raw expr       : avg(ColumnRef(0)::UInt16 NULL, ColumnRef(1)::Int16 NULL)
checked expr   : avg<Float64 NULL, Float64 NULL>(cast<dest_type=Float64 NULL>(ColumnRef(0)), cast<dest_type=Float64 NULL>(ColumnRef(1)))
evaluation:
+--------+--------------------+------------------+----------------------+
|        | a                  | b                | Output               |
+--------+--------------------+------------------+----------------------+
| Type   | UInt16 NULL        | Int16 NULL       | Float64 NULL         |
| Domain | {10..=12} ∪ {NULL} | {1..=3} ∪ {NULL} | {5.5..=7.5} ∪ {NULL} |
| Row 0  | NULL               | NULL             | NULL                 |
| Row 1  | 11                 | 2                | 6.5                  |
| Row 2  | NULL               | 3                | NULL                 |
+--------+--------------------+------------------+----------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------+
| Column | Data                                                                  |
+--------+-----------------------------------------------------------------------+
| a      | Nullable { column: UInt16([10, 11, 12]), validity: [0b_____010] }     |
| b      | Nullable { column: Int16([1, 2, 3]), validity: [0b_____110] }         |
| Output | Nullable { column: Float64([5.5, 6.5, 7.5]), validity: [0b_____010] } |
+--------+-----------------------------------------------------------------------+


ast            : avg(a, b)
raw expr       : avg(ColumnRef(0)::UInt32 NULL, ColumnRef(1)::Int32 NULL)
checked expr   : avg<Float64 NULL, Float64 NULL>(cast<dest_type=Float64 NULL>(ColumnRef(0)), cast<dest_type=Float64 NULL>(ColumnRef(1)))
evaluation:
+--------+--------------------+------------------+----------------------+
|        | a                  | b                | Output               |
+--------+--------------------+------------------+----------------------+
| Type   | UInt32 NULL        | Int32 NULL       | Float64 NULL         |
| Domain | {10..=12} ∪ {NULL} | {1..=3} ∪ {NULL} | {5.5..=7.5} ∪ {NULL} |
| Row 0  | NULL               | NULL             | NULL                 |
| Row 1  | 11                 | 2                | 6.5                  |
| Row 2  | NULL               | 3                | NULL                 |
+--------+--------------------+------------------+----------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------+
| Column | Data                                                                  |
+--------+-----------------------------------------------------------------------+
| a      | Nullable { column: UInt32([10, 11, 12]), validity: [0b_____010] }     |
| b      | Nullable { column: Int32([1, 2, 3]), validity: [0b_____110] }         |
| Output | Nullable { column: Float64([5.5, 6.5, 7.5]), validity: [0b_____010] } |
+--------+-----------------------------------------------------------------------+


ast            : avg(a, b)
raw expr       : avg(ColumnRef(0)::Float32 NULL, ColumnRef(1)::Int32 NULL)
checked expr   : avg<Float64 NULL, Float64 NULL>(cast<dest_type=Float64 NULL>(ColumnRef(0)), cast<dest_type=Float64 NULL>(ColumnRef(1)))
evaluation:
+--------+--------------------+------------------+----------------------+
|        | a                  | b                | Output               |
+--------+--------------------+------------------+----------------------+
| Type   | Float32 NULL       | Int32 NULL       | Float64 NULL         |
| Domain | {10..=12} ∪ {NULL} | {1..=3} ∪ {NULL} | {5.5..=7.5} ∪ {NULL} |
| Row 0  | NULL               | NULL             | NULL                 |
| Row 1  | 11                 | 2                | 6.5                  |
| Row 2  | NULL               | 3                | NULL                 |
+--------+--------------------+------------------+----------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| a      | Nullable { column: Float32([10.0, 11.0, 12.0]), validity: [0b_____010] } |
| b      | Nullable { column: Int32([1, 2, 3]), validity: [0b_____110] }            |
| Output | Nullable { column: Float64([5.5, 6.5, 7.5]), validity: [0b_____010] }    |
+--------+--------------------------------------------------------------------------+


ast            : avg(a, b)
raw expr       : avg(ColumnRef(0)::Float32 NULL, ColumnRef(1)::Float64 NULL)
checked expr   : avg<Float64 NULL, Float64 NULL>(cast<dest_type=Float64 NULL>(ColumnRef(0)), ColumnRef(1))
evaluation:
+--------+--------------------+------------------+----------------------+
|        | a                  | b                | Output               |
+--------+--------------------+------------------+----------------------+
| Type   | Float32 NULL       | Float64 NULL     | Float64 NULL         |
| Domain | {10..=12} ∪ {NULL} | {1..=3} ∪ {NULL} | {5.5..=7.5} ∪ {NULL} |
| Row 0  | NULL               | NULL             | NULL                 |
| Row 1  | 11                 | 2                | 6.5                  |
| Row 2  | NULL               | 3                | NULL                 |
+--------+--------------------+------------------+----------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| a      | Nullable { column: Float32([10.0, 11.0, 12.0]), validity: [0b_____010] } |
| b      | Nullable { column: Float64([1.0, 2.0, 3.0]), validity: [0b_____110] }    |
| Output | Nullable { column: Float64([5.5, 6.5, 7.5]), validity: [0b_____010] }    |
+--------+--------------------------------------------------------------------------+


ast            : multiply(a, b)
raw expr       : multiply(ColumnRef(0)::Int8 NULL, ColumnRef(1)::NULL)
checked expr   : multiply<Int64 NULL, NULL>(cast<dest_type=Int64 NULL>(ColumnRef(0)), ColumnRef(1))
evaluation:
+--------+--------------------+--------+--------+
|        | a                  | b      | Output |
+--------+--------------------+--------+--------+
| Type   | Int8 NULL          | NULL   | NULL   |
| Domain | {10..=12} ∪ {NULL} | {NULL} | {NULL} |
| Row 0  | NULL               | NULL   | NULL   |
| Row 1  | 11                 | NULL   | NULL   |
| Row 2  | NULL               | NULL   | NULL   |
+--------+--------------------+--------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | Nullable { column: UInt8([10, 11, 12]), validity: [0b_____010] } |
| b      | Null { len: 3 }                                                  |
| Output | Null { len: 3 }                                                  |
+--------+------------------------------------------------------------------+


ast            : bool_not(a)
raw expr       : bool_not(ColumnRef(0)::Boolean NULL)
checked expr   : bool_not<Boolean NULL>(ColumnRef(0))
evaluation:
+--------+------------------------+------------------------+
|        | a                      | Output                 |
+--------+------------------------+------------------------+
| Type   | Boolean NULL           | Boolean NULL           |
| Domain | {FALSE, TRUE} ∪ {NULL} | {FALSE, TRUE} ∪ {NULL} |
| Row 0  | NULL                   | NULL                   |
| Row 1  | false                  | true                   |
| Row 2  | NULL                   | NULL                   |
+--------+------------------------+------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------+
| Column | Data                                                               |
+--------+--------------------------------------------------------------------+
| a      | Nullable { column: Boolean([0b_____101]), validity: [0b_____010] } |
| Output | Nullable { column: Boolean([0b_____010]), validity: [0b_____010] } |
+--------+--------------------------------------------------------------------+


ast            : bool_not(a)
raw expr       : bool_not(ColumnRef(0)::NULL)
checked expr   : bool_not<NULL>(ColumnRef(0))
evaluation:
+--------+--------+--------+
|        | a      | Output |
+--------+--------+--------+
| Type   | NULL   | NULL   |
| Domain | {NULL} | {NULL} |
| Row 0  | NULL   | NULL   |
| Row 1  | NULL   | NULL   |
| Row 2  | NULL   | NULL   |
| Row 3  | NULL   | NULL   |
| Row 4  | NULL   | NULL   |
+--------+--------+--------+
evaluation (internal):
+--------+-----------------+
| Column | Data            |
+--------+-----------------+
| a      | Null { len: 5 } |
| Output | Null { len: 5 } |
+--------+-----------------+


ast            : least(10, 20, 30, 40)
raw expr       : least(10_u8, 20_u8, 30_u8, 40_u8)
checked expr   : least<Int16, Int16, Int16, Int16>(cast<dest_type=Int16>(10_u8), cast<dest_type=Int16>(20_u8), cast<dest_type=Int16>(30_u8), cast<dest_type=Int16>(40_u8))
output type    : Int16
output domain  : {10..=10}
output         : 10


ast            : create_tuple(null, true)
raw expr       : create_tuple(NULL, true)
checked expr   : create_tuple<NULL, Boolean>(NULL, true)
output type    : (NULL, Boolean)
output domain  : ({NULL}, {TRUE})
output         : (NULL, true)


ast            : get_tuple(1)(create_tuple(a, b))
raw expr       : get_tuple(1)(create_tuple(ColumnRef(0)::Int16, ColumnRef(1)::String NULL))
checked expr   : get_tuple<(Int16, String NULL)>(create_tuple<Int16, String NULL>(ColumnRef(0), ColumnRef(1)))
evaluation:
+--------+---------+----------------------+----------------------+
|        | a       | b                    | Output               |
+--------+---------+----------------------+----------------------+
| Type   | Int16   | String NULL          | String NULL          |
| Domain | {0..=4} | {"a"..="e"} ∪ {NULL} | {"a"..="e"} ∪ {NULL} |
| Row 0  | 0       | a                    | a                    |
| Row 1  | 1       | b                    | b                    |
| Row 2  | 2       | NULL                 | NULL                 |
| Row 3  | 3       | NULL                 | NULL                 |
| Row 4  | 4       | NULL                 | NULL                 |
+--------+---------+----------------------+----------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                              |
+--------+-------------------------------------------------------------------------------------------------------------------+
| a      | Int16([0, 1, 2, 3, 4])                                                                                            |
| b      | Nullable { column: String { data: [97, 98, 99, 100, 101], offsets: [0, 1, 2, 3, 4, 5] }, validity: [0b___00011] } |
| Output | Nullable { column: String { data: [97, 98, 99, 100, 101], offsets: [0, 1, 2, 3, 4, 5] }, validity: [0b___00011] } |
+--------+-------------------------------------------------------------------------------------------------------------------+


ast            : get_tuple(1)(create_tuple(a, b))
raw expr       : get_tuple(1)(create_tuple(ColumnRef(0)::Boolean NULL, ColumnRef(1)::String NULL))
checked expr   : get_tuple<(Boolean NULL, String NULL)>(create_tuple<Boolean NULL, String NULL>(ColumnRef(0), ColumnRef(1)))
evaluation:
+--------+------------------+----------------------+----------------------+
|        | a                | b                    | Output               |
+--------+------------------+----------------------+----------------------+
| Type   | Boolean NULL     | String NULL          | String NULL          |
| Domain | {FALSE} ∪ {NULL} | {"a"..="e"} ∪ {NULL} | {"a"..="e"} ∪ {NULL} |
| Row 0  | false            | a                    | a                    |
| Row 1  | false            | b                    | b                    |
| Row 2  | NULL             | NULL                 | NULL                 |
| Row 3  | NULL             | NULL                 | NULL                 |
| Row 4  | NULL             | NULL                 | NULL                 |
+--------+------------------+----------------------+----------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                              |
+--------+-------------------------------------------------------------------------------------------------------------------+
| a      | Nullable { column: Boolean([0b___00000]), validity: [0b___00011] }                                                |
| b      | Nullable { column: String { data: [97, 98, 99, 100, 101], offsets: [0, 1, 2, 3, 4, 5] }, validity: [0b___00011] } |
| Output | Nullable { column: String { data: [97, 98, 99, 100, 101], offsets: [0, 1, 2, 3, 4, 5] }, validity: [0b___00011] } |
+--------+-------------------------------------------------------------------------------------------------------------------+


ast            : create_array()
raw expr       : create_array()
checked expr   : create_array<>()
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : create_array(null, true)
raw expr       : create_array(NULL, true)
checked expr   : create_array<T0=Boolean NULL><T0, T0>(cast<dest_type=Boolean NULL>(NULL), cast<dest_type=Boolean NULL>(true))
output type    : Array(Boolean NULL)
output domain  : [{TRUE} ∪ {NULL}]
output         : [NULL, true]


ast            : create_array(a, b)
raw expr       : create_array(ColumnRef(0)::Int16, ColumnRef(1)::Int16)
checked expr   : create_array<T0=Int16><T0, T0>(ColumnRef(0), ColumnRef(1))
evaluation:
+--------+---------+---------+--------------+
|        | a       | b       | Output       |
+--------+---------+---------+--------------+
| Type   | Int16   | Int16   | Array(Int16) |
| Domain | {0..=4} | {5..=9} | [{0..=9}]    |
| Row 0  | 0       | 5       | [0, 5]       |
| Row 1  | 1       | 6       | [1, 6]       |
| Row 2  | 2       | 7       | [2, 7]       |
| Row 3  | 3       | 8       | [3, 8]       |
| Row 4  | 4       | 9       | [4, 9]       |
+--------+---------+---------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------+
| Column | Data                                                                                 |
+--------+--------------------------------------------------------------------------------------+
| a      | Int16([0, 1, 2, 3, 4])                                                               |
| b      | Int16([5, 6, 7, 8, 9])                                                               |
| Output | Array { array: Int16([0, 5, 1, 6, 2, 7, 3, 8, 4, 9]), offsets: [0, 2, 4, 6, 8, 10] } |
+--------+--------------------------------------------------------------------------------------+


ast            : create_array(create_array(a, b), null, null)
raw expr       : create_array(create_array(ColumnRef(0)::Int16, ColumnRef(1)::Int16), NULL, NULL)
checked expr   : create_array<T0=Array(Int16) NULL><T0, T0, T0>(cast<dest_type=Array(Int16) NULL>(create_array<T0=Int16><T0, T0>(ColumnRef(0), ColumnRef(1))), cast<dest_type=Array(Int16) NULL>(NULL), cast<dest_type=Array(Int16) NULL>(NULL))
evaluation:
+--------+---------+---------+--------------------------+
|        | a       | b       | Output                   |
+--------+---------+---------+--------------------------+
| Type   | Int16   | Int16   | Array(Array(Int16) NULL) |
| Domain | {0..=4} | {5..=9} | [[{0..=9}] ∪ {NULL}]     |
| Row 0  | 0       | 5       | [[0, 5], NULL, NULL]     |
| Row 1  | 1       | 6       | [[1, 6], NULL, NULL]     |
| Row 2  | 2       | 7       | [[2, 7], NULL, NULL]     |
| Row 3  | 3       | 8       | [[3, 8], NULL, NULL]     |
| Row 4  | 4       | 9       | [[4, 9], NULL, NULL]     |
+--------+---------+---------+--------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int16([0, 1, 2, 3, 4])                                                                                                                                                                                                        |
| b      | Int16([5, 6, 7, 8, 9])                                                                                                                                                                                                        |
| Output | Array { array: Nullable { column: Array { array: Int16([0, 5, 1, 6, 2, 7, 3, 8, 4, 9]), offsets: [0, 2, 2, 2, 4, 4, 4, 6, 6, 6, 8, 8, 8, 10, 10, 10] }, validity: [0b01001001, 0b_0010010] }, offsets: [0, 3, 6, 9, 12, 15] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : get(a, b)
raw expr       : get(ColumnRef(0)::Array(Int16), ColumnRef(1)::UInt8)
checked expr   : get<T0=Int16><Array(T0), Int16>(ColumnRef(0), cast<dest_type=Int16>(ColumnRef(1)))
evaluation:
+--------+----------------------------------------------------------------------------------+---------+----------+
|        | a                                                                                | b       | Output   |
+--------+----------------------------------------------------------------------------------+---------+----------+
| Type   | Array(Int16)                                                                     | UInt8   | Int16    |
| Domain | [{0..=99}]                                                                       | {0..=4} | {0..=99} |
| Row 0  | [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]           | 0       | 0        |
| Row 1  | [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39] | 1       | 21       |
| Row 2  | [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59] | 2       | 42       |
| Row 3  | [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79] | 3       | 63       |
| Row 4  | [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99] | 4       | 84       |
+--------+----------------------------------------------------------------------------------+---------+----------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                                                                                                                                                                              |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Array { array: Int16([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]), offsets: [0, 20, 40, 60, 80, 100] } |
| b      | UInt8([0, 1, 2, 3, 4])                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| Output | Int16([0, 21, 42, 63, 84])                                                                                                                                                                                                                                                                                                                                                                                                                                        |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : get(a, b)
raw expr       : get(ColumnRef(0)::Array(Array(Int16)), ColumnRef(1)::UInt8)
checked expr   : get<T0=Array(Int16)><Array(T0), Int16>(ColumnRef(0), cast<dest_type=Int16>(ColumnRef(1)))
evaluation:
+--------+----------------------------------------------------------------------------------------------------------------+---------+----------------------+
|        | a                                                                                                              | b       | Output               |
+--------+----------------------------------------------------------------------------------------------------------------+---------+----------------------+
| Type   | Array(Array(Int16))                                                                                            | UInt8   | Array(Int16)         |
| Domain | [[{0..=99}]]                                                                                                   | {0..=4} | [{0..=99}]           |
| Row 0  | [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]                                 | 0       | [0, 1, 2, 3, 4]      |
| Row 1  | [[20, 21, 22, 23, 24], [25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [35, 36, 37, 38, 39]]                       | 1       | [25, 26, 27, 28, 29] |
| Row 2  | [[40, 41, 42, 43, 44], [45, 46, 47, 48, 49], [50, 51, 52, 53, 54]]                                             | 2       | [50, 51, 52, 53, 54] |
| Row 3  | [[55, 56, 57, 58, 59], [60, 61, 62, 63, 64], [65, 66, 67, 68, 69], [70, 71, 72, 73, 74]]                       | 3       | [70, 71, 72, 73, 74] |
| Row 4  | [[75, 76, 77, 78, 79], [80, 81, 82, 83, 84], [85, 86, 87, 88, 89], [90, 91, 92, 93, 94], [95, 96, 97, 98, 99]] | 4       | [95, 96, 97, 98, 99] |
+--------+----------------------------------------------------------------------------------------------------------------+---------+----------------------+
evaluation (internal):

| Column | Data|

| a      | Array { array: Array { array: Int16([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]), offsets: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] }, offsets: [0, 4, 8, 11, 15, 20] } |
| b      | UInt|
| Output | Array { array: Int16([0, 1, 2, 3, 4, 25, 26, 27, 28, 29, 50, 51, 52, 53, 54, 70, 71, 72, 73, 74, 95, 96, 97, 98, 99]), offsets: [0, 5, 10, 15, 20, 25] }                                                                                                                                                                                                                                                                                                                                                                                                                      |



