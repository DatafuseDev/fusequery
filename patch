diff --git a/src/query/storages/common/cache/src/cache.rs b/src/query/storages/common/cache/src/cache.rs
index 2f9fcec21d..372176d88f 100644
--- a/src/query/storages/common/cache/src/cache.rs
+++ b/src/query/storages/common/cache/src/cache.rs
@@ -35,6 +35,8 @@ where
     fn put(&self, key: K, value: Arc<V>);
     fn evict(&self, k: &str) -> bool;
     fn contains_key(&self, k: &str) -> bool;
+    fn size(&self) -> u64;
+    fn len(&self) -> usize;
 }
 
 /// Helper trait to convert a Cache into NamedCache
@@ -94,6 +96,14 @@ where
         self.cache.evict(k)
     }
 
+    fn size(&self) -> u64 {
+        self.cache.size()
+    }
+
+    fn len(&self) -> usize {
+        self.cache.len()
+    }
+
     fn contains_key(&self, k: &str) -> bool {
         self.cache.contains_key(k)
     }
diff --git a/src/query/storages/common/cache/src/providers/disk_cache.rs b/src/query/storages/common/cache/src/providers/disk_cache.rs
index 22649b9eec..17c26db85a 100644
--- a/src/query/storages/common/cache/src/providers/disk_cache.rs
+++ b/src/query/storages/common/cache/src/providers/disk_cache.rs
@@ -374,6 +374,16 @@ impl CacheAccessor<String, Vec<u8>, common_cache::DefaultHashBuilder, Count>
         let cache = self.read();
         cache.contains_key(k)
     }
+
+    fn size(&self) -> u64 {
+        let cache = self.read();
+        cache.size()
+    }
+
+    fn len(&self) -> usize {
+        let cache = self.read();
+        cache.len()
+    }
 }
 
 /// The crc32 checksum is stored at the end of `bytes` and encoded as le u32.
diff --git a/src/query/storages/common/cache/src/providers/memory_cache.rs b/src/query/storages/common/cache/src/providers/memory_cache.rs
index ab5709fc1a..d843aa1635 100644
--- a/src/query/storages/common/cache/src/providers/memory_cache.rs
+++ b/src/query/storages/common/cache/src/providers/memory_cache.rs
@@ -93,6 +93,16 @@ mod impls {
             let guard = self.read();
             guard.contains(k)
         }
+
+        fn size(&self) -> u64 {
+            let guard = self.read();
+            guard.size()
+        }
+
+        fn len(&self) -> usize {
+            let guard = self.read();
+            guard.len()
+        }
     }
 
     // Wrap an Option<CacheAccessor>, and impl CacheAccessor for it
@@ -127,5 +137,21 @@ mod impls {
                 false
             }
         }
+
+        fn size(&self) -> u64 {
+            if let Some(cache) = self {
+                cache.size()
+            } else {
+                0
+            }
+        }
+
+        fn len(&self) -> usize {
+            if let Some(cache) = self {
+                cache.len()
+            } else {
+                0
+            }
+        }
     }
 }
diff --git a/src/query/storages/common/cache/src/providers/table_data_cache.rs b/src/query/storages/common/cache/src/providers/table_data_cache.rs
index 2ec6b129b1..585c352cb4 100644
--- a/src/query/storages/common/cache/src/providers/table_data_cache.rs
+++ b/src/query/storages/common/cache/src/providers/table_data_cache.rs
@@ -130,6 +130,14 @@ impl CacheAccessor<String, Vec<u8>, DefaultHashBuilder, Count> for TableDataCach
     fn contains_key(&self, k: &str) -> bool {
         self.external_cache.contains_key(k)
     }
+
+    fn size(&self) -> u64 {
+        self.external_cache.size()
+    }
+
+    fn len(&self) -> usize {
+        self.external_cache.len()
+    }
 }
 
 struct CachePopulationWorker<T> {
