<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1542" onload="init(evt)" viewBox="0 0 1200 1542" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1542" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1525.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1525.00"> </text><svg id="frames" x="10" width="1180" total_samples="4170"><g><title>databend-query`common_base::runtime::runtime::Runtime::with_default_worker_threads (1 samples, 0.02%)</title><rect x="0.0000%" y="1381" width="0.0240%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1391.50"></text></g><g><title>databend-query`common_base::runtime::runtime::Runtime::create (1 samples, 0.02%)</title><rect x="0.0000%" y="1365" width="0.0240%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1375.50"></text></g><g><title>databend-query`tokio::runtime::builder::Builder::build (1 samples, 0.02%)</title><rect x="0.0000%" y="1349" width="0.0240%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1359.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Launch::launch (1 samples, 0.02%)</title><rect x="0.0000%" y="1333" width="0.0240%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1343.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.02%)</title><rect x="0.0000%" y="1317" width="0.0240%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1327.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.02%)</title><rect x="0.0000%" y="1301" width="0.0240%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1311.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (1 samples, 0.02%)</title><rect x="0.0000%" y="1285" width="0.0240%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1295.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.02%)</title><rect x="0.0000%" y="1269" width="0.0240%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1279.50"></text></g><g><title>databend-query`std::io::stdio::set_output_capture (1 samples, 0.02%)</title><rect x="0.0000%" y="1253" width="0.0240%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1263.50"></text></g><g><title>databend-query`clap::derive::Parser::parse (1 samples, 0.02%)</title><rect x="0.0240%" y="1253" width="0.0240%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2740%" y="1263.50"></text></g><g><title>databend-query`&lt;common_config::config::Config as clap::derive::Args&gt;::augment_args (1 samples, 0.02%)</title><rect x="0.0240%" y="1237" width="0.0240%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2740%" y="1247.50"></text></g><g><title>databend-query`&lt;common_config::config::StorageConfig as clap::derive::Args&gt;::augment_args (1 samples, 0.02%)</title><rect x="0.0240%" y="1221" width="0.0240%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2740%" y="1231.50"></text></g><g><title>databend-query`&lt;common_config::config::S3StorageConfig as clap::derive::Args&gt;::augment_args (1 samples, 0.02%)</title><rect x="0.0240%" y="1205" width="0.0240%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2740%" y="1215.50"></text></g><g><title>databend-query`common_config::inner::InnerConfig::load (2 samples, 0.05%)</title><rect x="0.0240%" y="1285" width="0.0480%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="2"/><text x="0.2740%" y="1295.50"></text></g><g><title>databend-query`common_config::config::Config::load (2 samples, 0.05%)</title><rect x="0.0240%" y="1269" width="0.0480%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="2"/><text x="0.2740%" y="1279.50"></text></g><g><title>databend-query`serfig::builder::Builder&lt;V&gt;::build (1 samples, 0.02%)</title><rect x="0.0480%" y="1253" width="0.0240%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1263.50"></text></g><g><title>databend-query`serfig::builder::Builder&lt;V&gt;::build_with (1 samples, 0.02%)</title><rect x="0.0480%" y="1237" width="0.0240%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1247.50"></text></g><g><title>databend-query`&lt;serfig::collectors::structural::Structural&lt;V,R,P&gt; as serfig::collectors::collector::Collector&lt;V&gt;&gt;::collect (1 samples, 0.02%)</title><rect x="0.0480%" y="1221" width="0.0240%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1231.50"></text></g><g><title>databend-query`&lt;serfig::parsers::toml::Toml as serfig::parsers::parser::Parser&gt;::parse (1 samples, 0.02%)</title><rect x="0.0480%" y="1205" width="0.0240%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1215.50"></text></g><g><title>databend-query`&lt;toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect x="0.0480%" y="1189" width="0.0240%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1199.50"></text></g><g><title>databend-query`&lt;toml_edit::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect x="0.0480%" y="1173" width="0.0240%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1183.50"></text></g><g><title>databend-query`&lt;toml_edit::de::value::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect x="0.0480%" y="1157" width="0.0240%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1167.50"></text></g><g><title>databend-query`&lt;toml_edit::de::value::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.0480%" y="1141" width="0.0240%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1151.50"></text></g><g><title>databend-query`&lt;toml_edit::de::table::TableDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.0480%" y="1125" width="0.0240%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1135.50"></text></g><g><title>databend-query`&lt;toml_edit::de::table::TableMapAccess as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect x="0.0480%" y="1109" width="0.0240%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1119.50"></text></g><g><title>databend-query`&lt;toml_edit::de::value::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect x="0.0480%" y="1093" width="0.0240%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1103.50"></text></g><g><title>databend-query`&lt;toml_edit::de::table::TableDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.0480%" y="1077" width="0.0240%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="0.2980%" y="1087.50"></text></g><g><title>databend-query`&lt;databend_query::servers::http::http_services::HttpHandler as databend_query::servers::server::Server&gt;::start::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0719%" y="1269" width="0.0240%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1279.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="0.0719%" y="1253" width="0.0240%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1263.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="0.0719%" y="1237" width="0.0240%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1247.50"></text></g><g><title>databend-query`databend_query::servers::http::http_services::HttpHandler::build_router::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0719%" y="1221" width="0.0240%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1231.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="0.0719%" y="1205" width="0.0240%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1215.50"></text></g><g><title>databend-query`poem::route::router::Route::try_at (1 samples, 0.02%)</title><rect x="0.0719%" y="1189" width="0.0240%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1199.50"></text></g><g><title>databend-query`poem::route::router::normalize_path (1 samples, 0.02%)</title><rect x="0.0719%" y="1173" width="0.0240%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1183.50"></text></g><g><title>databend-query`regex::re_unicode::Regex::new (1 samples, 0.02%)</title><rect x="0.0719%" y="1157" width="0.0240%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1167.50"></text></g><g><title>databend-query`regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.02%)</title><rect x="0.0719%" y="1141" width="0.0240%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1151.50"></text></g><g><title>databend-query`regex::exec::ExecBuilder::build (1 samples, 0.02%)</title><rect x="0.0719%" y="1125" width="0.0240%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1135.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="0.0719%" y="1109" width="0.0240%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1"/><text x="0.3219%" y="1119.50"></text></g><g><title>databend-query`databend_query::entry::start_services::_{{closure}} (2 samples, 0.05%)</title><rect x="0.0719%" y="1285" width="0.0480%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="2"/><text x="0.3219%" y="1295.50"></text></g><g><title>databend-query`databend_query::servers::server::ShutdownHandle::create (1 samples, 0.02%)</title><rect x="0.0959%" y="1269" width="0.0240%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="0.3459%" y="1279.50"></text></g><g><title>databend-query`common_base::base::singleton_instance::SingletonType::get (1 samples, 0.02%)</title><rect x="0.0959%" y="1253" width="0.0240%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1"/><text x="0.3459%" y="1263.50"></text></g><g><title>databend-query`&lt;T as core::any::Any&gt;::type_id (1 samples, 0.02%)</title><rect x="0.0959%" y="1237" width="0.0240%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1"/><text x="0.3459%" y="1247.50"></text></g><g><title>databend-query`common_storages_system::log_queue::SystemLogTable&lt;Event&gt;::create (1 samples, 0.02%)</title><rect x="0.1199%" y="1077" width="0.0240%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.3699%" y="1087.50"></text></g><g><title>databend-query`common_storages_system::log_queue::SystemLogQueue&lt;Event&gt;::init (1 samples, 0.02%)</title><rect x="0.1199%" y="1061" width="0.0240%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.3699%" y="1071.50"></text></g><g><title>databend-query`common_storages_system::log_queue::SystemLogQueue&lt;Event&gt;::create (1 samples, 0.02%)</title><rect x="0.1199%" y="1045" width="0.0240%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.3699%" y="1055.50"></text></g><g><title>databend-query`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="0.1199%" y="1029" width="0.0240%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.3699%" y="1039.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="0.1199%" y="1013" width="0.0240%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.3699%" y="1023.50"></text></g><g><title>databend-query`&lt;common_catalog::catalog::manager::CatalogManager as databend_query::catalogs::catalog_manager::CatalogManagerHelper&gt;::init::_{{closure}} (2 samples, 0.05%)</title><rect x="0.1199%" y="1221" width="0.0480%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="2"/><text x="0.3699%" y="1231.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="0.1199%" y="1205" width="0.0480%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="2"/><text x="0.3699%" y="1215.50"></text></g><g><title>databend-query`&lt;common_catalog::catalog::manager::CatalogManager as databend_query::catalogs::catalog_manager::CatalogManagerHelper&gt;::try_create::_{{closure}} (2 samples, 0.05%)</title><rect x="0.1199%" y="1189" width="0.0480%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="2"/><text x="0.3699%" y="1199.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="0.1199%" y="1173" width="0.0480%" height="15" fill="rgb(225,35,8)" fg:x="5" fg:w="2"/><text x="0.3699%" y="1183.50"></text></g><g><title>databend-query`&lt;common_catalog::catalog::manager::CatalogManager as databend_query::catalogs::catalog_manager::CatalogManagerHelper&gt;::register_build_in_catalogs::_{{closure}} (2 samples, 0.05%)</title><rect x="0.1199%" y="1157" width="0.0480%" height="15" fill="rgb(250,213,24)" fg:x="5" fg:w="2"/><text x="0.3699%" y="1167.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="0.1199%" y="1141" width="0.0480%" height="15" fill="rgb(247,123,22)" fg:x="5" fg:w="2"/><text x="0.3699%" y="1151.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="0.1199%" y="1125" width="0.0480%" height="15" fill="rgb(231,138,38)" fg:x="5" fg:w="2"/><text x="0.3699%" y="1135.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="0.1199%" y="1109" width="0.0480%" height="15" fill="rgb(231,145,46)" fg:x="5" fg:w="2"/><text x="0.3699%" y="1119.50"></text></g><g><title>databend-query`databend_query::databases::system::system_database::SystemDatabase::create (2 samples, 0.05%)</title><rect x="0.1199%" y="1093" width="0.0480%" height="15" fill="rgb(251,118,11)" fg:x="5" fg:w="2"/><text x="0.3699%" y="1103.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_meta_app::schema::table::TableMeta&gt; (1 samples, 0.02%)</title><rect x="0.1439%" y="1077" width="0.0240%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="0.3939%" y="1087.50"></text></g><g><title>databend-query`common_base::base::singleton_instance::GlobalInstance::get (1 samples, 0.02%)</title><rect x="0.1679%" y="1221" width="0.0240%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="1"/><text x="0.4179%" y="1231.50"></text></g><g><title>databend-query`security_framework::certificate::SecCertificate::to_der (1 samples, 0.02%)</title><rect x="0.1918%" y="1157" width="0.0240%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="1"/><text x="0.4418%" y="1167.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="0.1918%" y="1141" width="0.0240%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="1"/><text x="0.4418%" y="1151.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="0.1918%" y="1125" width="0.0240%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="1"/><text x="0.4418%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="0.1918%" y="1109" width="0.0240%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="1"/><text x="0.4418%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.1918%" y="1093" width="0.0240%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="1"/><text x="0.4418%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.1918%" y="1077" width="0.0240%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="1"/><text x="0.4418%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="0.1918%" y="1061" width="0.0240%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="1"/><text x="0.4418%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="0.1918%" y="1045" width="0.0240%" height="15" fill="rgb(247,98,35)" fg:x="8" fg:w="1"/><text x="0.4418%" y="1055.50"></text></g><g><title>libdispatch.dylib`-[OS_voucher dealloc] (1 samples, 0.02%)</title><rect x="0.2158%" y="1045" width="0.0240%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="1"/><text x="0.4658%" y="1055.50"></text></g><g><title>libdispatch.dylib`_voucher_dispose (1 samples, 0.02%)</title><rect x="0.2158%" y="1029" width="0.0240%" height="15" fill="rgb(213,79,30)" fg:x="9" fg:w="1"/><text x="0.4658%" y="1039.50"></text></g><g><title>libdispatch.dylib`_voucher_dealloc_mach_voucher (1 samples, 0.02%)</title><rect x="0.2158%" y="1013" width="0.0240%" height="15" fill="rgb(246,177,23)" fg:x="9" fg:w="1"/><text x="0.4658%" y="1023.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_port_deallocate_trap (1 samples, 0.02%)</title><rect x="0.2158%" y="997" width="0.0240%" height="15" fill="rgb(230,62,27)" fg:x="9" fg:w="1"/><text x="0.4658%" y="1007.50"></text></g><g><title>Security`SecTrustEvaluateInternal (2 samples, 0.05%)</title><rect x="0.2158%" y="1125" width="0.0480%" height="15" fill="rgb(216,154,8)" fg:x="9" fg:w="2"/><text x="0.4658%" y="1135.50"></text></g><g><title>Security`SecTrustEvaluateIfNecessary (2 samples, 0.05%)</title><rect x="0.2158%" y="1109" width="0.0480%" height="15" fill="rgb(244,35,45)" fg:x="9" fg:w="2"/><text x="0.4658%" y="1119.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (2 samples, 0.05%)</title><rect x="0.2158%" y="1093" width="0.0480%" height="15" fill="rgb(251,115,12)" fg:x="9" fg:w="2"/><text x="0.4658%" y="1103.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.05%)</title><rect x="0.2158%" y="1077" width="0.0480%" height="15" fill="rgb(240,54,50)" fg:x="9" fg:w="2"/><text x="0.4658%" y="1087.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke (2 samples, 0.05%)</title><rect x="0.2158%" y="1061" width="0.0480%" height="15" fill="rgb(233,84,52)" fg:x="9" fg:w="2"/><text x="0.4658%" y="1071.50"></text></g><g><title>libsystem_trace.dylib`_os_activity_initiate_impl (1 samples, 0.02%)</title><rect x="0.2398%" y="1045" width="0.0240%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="1"/><text x="0.4898%" y="1055.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_2 (1 samples, 0.02%)</title><rect x="0.2398%" y="1029" width="0.0240%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="1"/><text x="0.4898%" y="1039.50"></text></g><g><title>Security`SecOSStatusWith (1 samples, 0.02%)</title><rect x="0.2398%" y="1013" width="0.0240%" height="15" fill="rgb(209,38,44)" fg:x="10" fg:w="1"/><text x="0.4898%" y="1023.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_3 (1 samples, 0.02%)</title><rect x="0.2398%" y="997" width="0.0240%" height="15" fill="rgb(236,212,23)" fg:x="10" fg:w="1"/><text x="0.4898%" y="1007.50"></text></g><g><title>Security`securityd_send_sync_and_do (1 samples, 0.02%)</title><rect x="0.2398%" y="981" width="0.0240%" height="15" fill="rgb(242,79,21)" fg:x="10" fg:w="1"/><text x="0.4898%" y="991.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke_2 (1 samples, 0.02%)</title><rect x="0.2398%" y="965" width="0.0240%" height="15" fill="rgb(211,96,35)" fg:x="10" fg:w="1"/><text x="0.4898%" y="975.50"></text></g><g><title>Security`SecXPCDictionaryCopyChainOptional (1 samples, 0.02%)</title><rect x="0.2398%" y="949" width="0.0240%" height="15" fill="rgb(253,215,40)" fg:x="10" fg:w="1"/><text x="0.4898%" y="959.50"></text></g><g><title>Security`SecCertificateCreateWithXPCArrayAtIndex (1 samples, 0.02%)</title><rect x="0.2398%" y="933" width="0.0240%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="1"/><text x="0.4898%" y="943.50"></text></g><g><title>Security`SecCertificateCreateWithBytes (1 samples, 0.02%)</title><rect x="0.2398%" y="917" width="0.0240%" height="15" fill="rgb(208,190,38)" fg:x="10" fg:w="1"/><text x="0.4898%" y="927.50"></text></g><g><title>Security`SecCertificateParse (1 samples, 0.02%)</title><rect x="0.2398%" y="901" width="0.0240%" height="15" fill="rgb(235,213,38)" fg:x="10" fg:w="1"/><text x="0.4898%" y="911.50"></text></g><g><title>Security`createNormalizedX501Name (1 samples, 0.02%)</title><rect x="0.2398%" y="885" width="0.0240%" height="15" fill="rgb(237,122,38)" fg:x="10" fg:w="1"/><text x="0.4898%" y="895.50"></text></g><g><title>CoreFoundation`__CFDataInit (1 samples, 0.02%)</title><rect x="0.2398%" y="869" width="0.0240%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="1"/><text x="0.4898%" y="879.50"></text></g><g><title>CoreFoundation`CFDataReplaceBytes (1 samples, 0.02%)</title><rect x="0.2398%" y="853" width="0.0240%" height="15" fill="rgb(240,68,47)" fg:x="10" fg:w="1"/><text x="0.4898%" y="863.50"></text></g><g><title>Security`Security::KeychainCore::DynamicDLDBList::searchList (1 samples, 0.02%)</title><rect x="0.2638%" y="1109" width="0.0240%" height="15" fill="rgb(210,16,53)" fg:x="11" fg:w="1"/><text x="0.5138%" y="1119.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery (1 samples, 0.02%)</title><rect x="0.2638%" y="1093" width="0.0240%" height="15" fill="rgb(235,124,12)" fg:x="11" fg:w="1"/><text x="0.5138%" y="1103.50"></text></g><g><title>Security`Security::MDSClient::Directory::dlGetFirst (1 samples, 0.02%)</title><rect x="0.2638%" y="1077" width="0.0240%" height="15" fill="rgb(224,169,11)" fg:x="11" fg:w="1"/><text x="0.5138%" y="1087.50"></text></g><g><title>Security`Security::MDSClient::Directory::cdsa (1 samples, 0.02%)</title><rect x="0.2638%" y="1061" width="0.0240%" height="15" fill="rgb(250,166,2)" fg:x="11" fg:w="1"/><text x="0.5138%" y="1071.50"></text></g><g><title>Security`mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.02%)</title><rect x="0.2638%" y="1045" width="0.0240%" height="15" fill="rgb(242,216,29)" fg:x="11" fg:w="1"/><text x="0.5138%" y="1055.50"></text></g><g><title>Security`Security::MDSSession::DbOpen (1 samples, 0.02%)</title><rect x="0.2638%" y="1029" width="0.0240%" height="15" fill="rgb(230,116,27)" fg:x="11" fg:w="1"/><text x="0.5138%" y="1039.50"></text></g><g><title>Security`Security::MDSSession::updateDataBases (1 samples, 0.02%)</title><rect x="0.2638%" y="1013" width="0.0240%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="1"/><text x="0.5138%" y="1023.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundleDir (1 samples, 0.02%)</title><rect x="0.2638%" y="997" width="0.0240%" height="15" fill="rgb(253,11,6)" fg:x="11" fg:w="1"/><text x="0.5138%" y="1007.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundle (1 samples, 0.02%)</title><rect x="0.2638%" y="981" width="0.0240%" height="15" fill="rgb(247,143,39)" fg:x="11" fg:w="1"/><text x="0.5138%" y="991.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::directDbHand (1 samples, 0.02%)</title><rect x="0.2638%" y="965" width="0.0240%" height="15" fill="rgb(236,97,10)" fg:x="11" fg:w="1"/><text x="0.5138%" y="975.50"></text></g><g><title>Security`Security::MDSSession::dbOpen (1 samples, 0.02%)</title><rect x="0.2638%" y="949" width="0.0240%" height="15" fill="rgb(233,208,19)" fg:x="11" fg:w="1"/><text x="0.5138%" y="959.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.02%)</title><rect x="0.2638%" y="933" width="0.0240%" height="15" fill="rgb(216,164,2)" fg:x="11" fg:w="1"/><text x="0.5138%" y="943.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.02%)</title><rect x="0.2638%" y="917" width="0.0240%" height="15" fill="rgb(220,129,5)" fg:x="11" fg:w="1"/><text x="0.5138%" y="927.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.02%)</title><rect x="0.2638%" y="901" width="0.0240%" height="15" fill="rgb(242,17,10)" fg:x="11" fg:w="1"/><text x="0.5138%" y="911.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.02%)</title><rect x="0.2638%" y="885" width="0.0240%" height="15" fill="rgb(242,107,0)" fg:x="11" fg:w="1"/><text x="0.5138%" y="895.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.02%)</title><rect x="0.2638%" y="869" width="0.0240%" height="15" fill="rgb(251,28,31)" fg:x="11" fg:w="1"/><text x="0.5138%" y="879.50"></text></g><g><title>Security`void std::__1::__tree_balance_after_insert&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (1 samples, 0.02%)</title><rect x="0.2638%" y="853" width="0.0240%" height="15" fill="rgb(233,223,10)" fg:x="11" fg:w="1"/><text x="0.5138%" y="863.50"></text></g><g><title>Security`Security::KeychainCore::StorageManager::getSearchList(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (2 samples, 0.05%)</title><rect x="0.2638%" y="1125" width="0.0480%" height="15" fill="rgb(215,21,27)" fg:x="11" fg:w="2"/><text x="0.5138%" y="1135.50"></text></g><g><title>Security`Security::KeychainCore::StorageManager::keychain (1 samples, 0.02%)</title><rect x="0.2878%" y="1109" width="0.0240%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="1"/><text x="0.5378%" y="1119.50"></text></g><g><title>Security`Security::DLDbIdentifier::DLDbIdentifier (1 samples, 0.02%)</title><rect x="0.2878%" y="1093" width="0.0240%" height="15" fill="rgb(244,5,23)" fg:x="12" fg:w="1"/><text x="0.5378%" y="1103.50"></text></g><g><title>Security`Security::DbName::DbName (1 samples, 0.02%)</title><rect x="0.2878%" y="1077" width="0.0240%" height="15" fill="rgb(226,81,46)" fg:x="12" fg:w="1"/><text x="0.5378%" y="1087.50"></text></g><g><title>Security`Security::DbName::CanonicalizeName (1 samples, 0.02%)</title><rect x="0.2878%" y="1061" width="0.0240%" height="15" fill="rgb(247,70,30)" fg:x="12" fg:w="1"/><text x="0.5378%" y="1071.50"></text></g><g><title>Security`Security::cached_realpath (1 samples, 0.02%)</title><rect x="0.2878%" y="1045" width="0.0240%" height="15" fill="rgb(212,68,19)" fg:x="12" fg:w="1"/><text x="0.5378%" y="1055.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (1 samples, 0.02%)</title><rect x="0.2878%" y="1029" width="0.0240%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="1"/><text x="0.5378%" y="1039.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.2878%" y="1013" width="0.0240%" height="15" fill="rgb(223,113,26)" fg:x="12" fg:w="1"/><text x="0.5378%" y="1023.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.02%)</title><rect x="0.2878%" y="997" width="0.0240%" height="15" fill="rgb(206,192,2)" fg:x="12" fg:w="1"/><text x="0.5378%" y="1007.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::CreateTrustSettings (1 samples, 0.02%)</title><rect x="0.3118%" y="1125" width="0.0240%" height="15" fill="rgb(241,108,4)" fg:x="13" fg:w="1"/><text x="0.5618%" y="1135.50"></text></g><g><title>Security`xpcTrustSettingsRead(Security::Allocator&amp;, SecTrustSettingsDomain, cssm_data&amp;) (1 samples, 0.02%)</title><rect x="0.3118%" y="1109" width="0.0240%" height="15" fill="rgb(247,173,49)" fg:x="13" fg:w="1"/><text x="0.5618%" y="1119.50"></text></g><g><title>Security`SecTrustSettingsXPCRead (1 samples, 0.02%)</title><rect x="0.3118%" y="1093" width="0.0240%" height="15" fill="rgb(224,114,35)" fg:x="13" fg:w="1"/><text x="0.5618%" y="1103.50"></text></g><g><title>Security`SecOSStatusWith (1 samples, 0.02%)</title><rect x="0.3118%" y="1077" width="0.0240%" height="15" fill="rgb(245,159,27)" fg:x="13" fg:w="1"/><text x="0.5618%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`getuid (1 samples, 0.02%)</title><rect x="0.3118%" y="1061" width="0.0240%" height="15" fill="rgb(245,172,44)" fg:x="13" fg:w="1"/><text x="0.5618%" y="1071.50"></text></g><g><title>Security`SecCertificateCreateWithData (1 samples, 0.02%)</title><rect x="0.3357%" y="1109" width="0.0240%" height="15" fill="rgb(236,23,11)" fg:x="14" fg:w="1"/><text x="0.5857%" y="1119.50"></text></g><g><title>Security`SecCertificateParse (1 samples, 0.02%)</title><rect x="0.3357%" y="1093" width="0.0240%" height="15" fill="rgb(205,117,38)" fg:x="14" fg:w="1"/><text x="0.5857%" y="1103.50"></text></g><g><title>Security`DERParseSequenceContentToObject (1 samples, 0.02%)</title><rect x="0.3357%" y="1077" width="0.0240%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="1"/><text x="0.5857%" y="1087.50"></text></g><g><title>Security`Security::CFRef&lt;__SecCertificate*&gt;::~CFRef (1 samples, 0.02%)</title><rect x="0.3597%" y="1109" width="0.0240%" height="15" fill="rgb(244,70,9)" fg:x="15" fg:w="1"/><text x="0.6097%" y="1119.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.02%)</title><rect x="0.3597%" y="1093" width="0.0240%" height="15" fill="rgb(217,125,39)" fg:x="15" fg:w="1"/><text x="0.6097%" y="1103.50"></text></g><g><title>Security`SecCertificateDestroy (1 samples, 0.02%)</title><rect x="0.3597%" y="1077" width="0.0240%" height="15" fill="rgb(235,36,10)" fg:x="15" fg:w="1"/><text x="0.6097%" y="1087.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.02%)</title><rect x="0.3597%" y="1061" width="0.0240%" height="15" fill="rgb(251,123,47)" fg:x="15" fg:w="1"/><text x="0.6097%" y="1071.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::data (1 samples, 0.02%)</title><rect x="0.3837%" y="1109" width="0.0240%" height="15" fill="rgb(221,13,13)" fg:x="16" fg:w="1"/><text x="0.6337%" y="1119.50"></text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::get (1 samples, 0.02%)</title><rect x="0.3837%" y="1093" width="0.0240%" height="15" fill="rgb(238,131,9)" fg:x="16" fg:w="1"/><text x="0.6337%" y="1103.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::get (1 samples, 0.02%)</title><rect x="0.3837%" y="1077" width="0.0240%" height="15" fill="rgb(211,50,8)" fg:x="16" fg:w="1"/><text x="0.6337%" y="1087.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.3837%" y="1061" width="0.0240%" height="15" fill="rgb(245,182,24)" fg:x="16" fg:w="1"/><text x="0.6337%" y="1071.50"></text></g><g><title>Security`cssm_DataGetFromUniqueRecordId(cssm_dl_db_handle, cssm_db_unique_record const*, cssm_db_record_attribute_data*, cssm_data*) (1 samples, 0.02%)</title><rect x="0.3837%" y="1045" width="0.0240%" height="15" fill="rgb(242,14,37)" fg:x="16" fg:w="1"/><text x="0.6337%" y="1055.50"></text></g><g><title>Security`SSDLSession::DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.3837%" y="1029" width="0.0240%" height="15" fill="rgb(246,228,12)" fg:x="16" fg:w="1"/><text x="0.6337%" y="1039.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.3837%" y="1013" width="0.0240%" height="15" fill="rgb(213,55,15)" fg:x="16" fg:w="1"/><text x="0.6337%" y="1023.50"></text></g><g><title>Security`countLegacyAPI (1 samples, 0.02%)</title><rect x="0.3837%" y="997" width="0.0240%" height="15" fill="rgb(209,9,3)" fg:x="16" fg:w="1"/><text x="0.6337%" y="1007.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::activate (1 samples, 0.02%)</title><rect x="0.4077%" y="1093" width="0.0240%" height="15" fill="rgb(230,59,30)" fg:x="17" fg:w="1"/><text x="0.6577%" y="1103.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.02%)</title><rect x="0.4077%" y="1077" width="0.0240%" height="15" fill="rgb(209,121,21)" fg:x="17" fg:w="1"/><text x="0.6577%" y="1087.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::defaultCredentials (1 samples, 0.02%)</title><rect x="0.4077%" y="1061" width="0.0240%" height="15" fill="rgb(220,109,13)" fg:x="17" fg:w="1"/><text x="0.6577%" y="1071.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::keychainSchema (1 samples, 0.02%)</title><rect x="0.4077%" y="1045" width="0.0240%" height="15" fill="rgb(232,18,1)" fg:x="17" fg:w="1"/><text x="0.6577%" y="1055.50"></text></g><g><title>Security`Security::CssmClient::DbDbCursorImpl::next (1 samples, 0.02%)</title><rect x="0.4077%" y="1029" width="0.0240%" height="15" fill="rgb(215,41,42)" fg:x="17" fg:w="1"/><text x="0.6577%" y="1039.50"></text></g><g><title>Security`CSSM_DL_DataGetFirst (1 samples, 0.02%)</title><rect x="0.4077%" y="1013" width="0.0240%" height="15" fill="rgb(224,123,36)" fg:x="17" fg:w="1"/><text x="0.6577%" y="1023.50"></text></g><g><title>Security`cssm_DataGetFirst(cssm_dl_db_handle, cssm_query const*, long*, cssm_db_record_attribute_data*, cssm_data*, cssm_db_unique_record**) (1 samples, 0.02%)</title><rect x="0.4077%" y="997" width="0.0240%" height="15" fill="rgb(240,125,3)" fg:x="17" fg:w="1"/><text x="0.6577%" y="1007.50"></text></g><g><title>Security`SSDLSession::DataGetFirst (1 samples, 0.02%)</title><rect x="0.4077%" y="981" width="0.0240%" height="15" fill="rgb(205,98,50)" fg:x="17" fg:w="1"/><text x="0.6577%" y="991.50"></text></g><g><title>Security`CSSM_DL_DataGetFirst (1 samples, 0.02%)</title><rect x="0.4077%" y="965" width="0.0240%" height="15" fill="rgb(205,185,37)" fg:x="17" fg:w="1"/><text x="0.6577%" y="975.50"></text></g><g><title>Security`cssm_DataGetFirst(cssm_dl_db_handle, cssm_query const*, long*, cssm_db_record_attribute_data*, cssm_data*, cssm_db_unique_record**) (1 samples, 0.02%)</title><rect x="0.4077%" y="949" width="0.0240%" height="15" fill="rgb(238,207,15)" fg:x="17" fg:w="1"/><text x="0.6577%" y="959.50"></text></g><g><title>Security`Security::DatabaseSession::DataGetFirst (1 samples, 0.02%)</title><rect x="0.4077%" y="933" width="0.0240%" height="15" fill="rgb(213,199,42)" fg:x="17" fg:w="1"/><text x="0.6577%" y="943.50"></text></g><g><title>Security`Security::AppleDatabase::dataGetFirst (1 samples, 0.02%)</title><rect x="0.4077%" y="917" width="0.0240%" height="15" fill="rgb(235,201,11)" fg:x="17" fg:w="1"/><text x="0.6577%" y="927.50"></text></g><g><title>Security`Security::LinearCursor::next (1 samples, 0.02%)</title><rect x="0.4077%" y="901" width="0.0240%" height="15" fill="rgb(207,46,11)" fg:x="17" fg:w="1"/><text x="0.6577%" y="911.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.02%)</title><rect x="0.4077%" y="885" width="0.0240%" height="15" fill="rgb(241,35,35)" fg:x="17" fg:w="1"/><text x="0.6577%" y="895.50"></text></g><g><title>Security`Security::MetaAttribute::unpackAttribute (1 samples, 0.02%)</title><rect x="0.4077%" y="869" width="0.0240%" height="15" fill="rgb(243,32,47)" fg:x="17" fg:w="1"/><text x="0.6577%" y="879.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.02%)</title><rect x="0.4077%" y="853" width="0.0240%" height="15" fill="rgb(247,202,23)" fg:x="17" fg:w="1"/><text x="0.6577%" y="863.50"></text></g><g><title>Security`std::__1::pair&lt;std::__1::__tree_iterator&lt;void*, std::__1::__tree_node&lt;void*, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt; &gt;::__emplace_unique_key_args&lt;void*, void* const&amp;&gt; (1 samples, 0.02%)</title><rect x="0.4077%" y="837" width="0.0240%" height="15" fill="rgb(219,102,11)" fg:x="17" fg:w="1"/><text x="0.6577%" y="847.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="0.4077%" y="821" width="0.0240%" height="15" fill="rgb(243,110,44)" fg:x="17" fg:w="1"/><text x="0.6577%" y="831.50"></text></g><g><title>Security`CSSM_DL_PassThrough (1 samples, 0.02%)</title><rect x="0.4317%" y="1061" width="0.0240%" height="15" fill="rgb(222,74,54)" fg:x="18" fg:w="1"/><text x="0.6817%" y="1071.50"></text></g><g><title>Security`cssm_PassThrough(cssm_dl_db_handle, unsigned int, void const*, void**) (1 samples, 0.02%)</title><rect x="0.4317%" y="1045" width="0.0240%" height="15" fill="rgb(216,99,12)" fg:x="18" fg:w="1"/><text x="0.6817%" y="1055.50"></text></g><g><title>Security`SSDLSession::PassThrough (1 samples, 0.02%)</title><rect x="0.4317%" y="1029" width="0.0240%" height="15" fill="rgb(226,22,26)" fg:x="18" fg:w="1"/><text x="0.6817%" y="1039.50"></text></g><g><title>Security`SSDatabaseImpl::dbBlobVersion (1 samples, 0.02%)</title><rect x="0.4317%" y="1013" width="0.0240%" height="15" fill="rgb(217,163,10)" fg:x="18" fg:w="1"/><text x="0.6817%" y="1023.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (1 samples, 0.02%)</title><rect x="0.4317%" y="997" width="0.0240%" height="15" fill="rgb(213,25,53)" fg:x="18" fg:w="1"/><text x="0.6817%" y="1007.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (1 samples, 0.02%)</title><rect x="0.4317%" y="981" width="0.0240%" height="15" fill="rgb(252,105,26)" fg:x="18" fg:w="1"/><text x="0.6817%" y="991.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (1 samples, 0.02%)</title><rect x="0.4317%" y="965" width="0.0240%" height="15" fill="rgb(220,39,43)" fg:x="18" fg:w="1"/><text x="0.6817%" y="975.50"></text></g><g><title>Security`SSUniqueRecordImpl::~SSUniqueRecordImpl (1 samples, 0.02%)</title><rect x="0.4317%" y="949" width="0.0240%" height="15" fill="rgb(229,68,48)" fg:x="18" fg:w="1"/><text x="0.6817%" y="959.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::~DbUniqueRecordImpl (1 samples, 0.02%)</title><rect x="0.4317%" y="933" width="0.0240%" height="15" fill="rgb(252,8,32)" fg:x="18" fg:w="1"/><text x="0.6817%" y="943.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::deactivate (1 samples, 0.02%)</title><rect x="0.4317%" y="917" width="0.0240%" height="15" fill="rgb(223,20,43)" fg:x="18" fg:w="1"/><text x="0.6817%" y="927.50"></text></g><g><title>Security`CSSM_DL_FreeUniqueRecord (1 samples, 0.02%)</title><rect x="0.4317%" y="901" width="0.0240%" height="15" fill="rgb(229,81,49)" fg:x="18" fg:w="1"/><text x="0.6817%" y="911.50"></text></g><g><title>Security`cssm_FreeUniqueRecord(cssm_dl_db_handle, cssm_db_unique_record*) (1 samples, 0.02%)</title><rect x="0.4317%" y="885" width="0.0240%" height="15" fill="rgb(236,28,36)" fg:x="18" fg:w="1"/><text x="0.6817%" y="895.50"></text></g><g><title>Security`Security::DatabaseSession::FreeUniqueRecord (1 samples, 0.02%)</title><rect x="0.4317%" y="869" width="0.0240%" height="15" fill="rgb(249,185,26)" fg:x="18" fg:w="1"/><text x="0.6817%" y="879.50"></text></g><g><title>Security`Security::AppleDatabase::freeUniqueRecord (1 samples, 0.02%)</title><rect x="0.4317%" y="853" width="0.0240%" height="15" fill="rgb(249,174,33)" fg:x="18" fg:w="1"/><text x="0.6817%" y="863.50"></text></g><g><title>Security`non-virtual thunk to Security::DLPluginSession::free (1 samples, 0.02%)</title><rect x="0.4317%" y="837" width="0.0240%" height="15" fill="rgb(233,201,37)" fg:x="18" fg:w="1"/><text x="0.6817%" y="847.50"></text></g><g><title>Security`Security::CssmMemoryFunctionsAllocator::free (1 samples, 0.02%)</title><rect x="0.4317%" y="821" width="0.0240%" height="15" fill="rgb(221,78,26)" fg:x="18" fg:w="1"/><text x="0.6817%" y="831.50"></text></g><g><title>Security`non-virtual thunk to Security::DLPluginSession::free (1 samples, 0.02%)</title><rect x="0.4317%" y="805" width="0.0240%" height="15" fill="rgb(250,127,30)" fg:x="18" fg:w="1"/><text x="0.6817%" y="815.50"></text></g><g><title>Security`Attachment::upcallFree (1 samples, 0.02%)</title><rect x="0.4317%" y="789" width="0.0240%" height="15" fill="rgb(230,49,44)" fg:x="18" fg:w="1"/><text x="0.6817%" y="799.50"></text></g><g><title>Security`std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;long, Security::MappingHandle&lt;long&gt;*&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;long, Security::MappingHandle&lt;long&gt;*&gt;, std::__1::__unordered_map_hasher&lt;long, std::__1::__hash_value_type&lt;long, Security::MappingHandle&lt;long&gt;*&gt;, std::__1::hash&lt;long&gt;, std::__1::equal_to&lt;long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;long, std::__1::__hash_value_type&lt;long, Security::MappingHandle&lt;long&gt;*&gt;, std::__1::equal_to&lt;long&gt;, std::__1::hash&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;long, Security::MappingHandle&lt;long&gt;*&gt; &gt; &gt;::find&lt;long&gt; (1 samples, 0.02%)</title><rect x="0.4317%" y="773" width="0.0240%" height="15" fill="rgb(229,67,23)" fg:x="18" fg:w="1"/><text x="0.6817%" y="783.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.02%)</title><rect x="0.4556%" y="1013" width="0.0240%" height="15" fill="rgb(249,83,47)" fg:x="19" fg:w="1"/><text x="0.7056%" y="1023.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.02%)</title><rect x="0.4556%" y="997" width="0.0240%" height="15" fill="rgb(215,43,3)" fg:x="19" fg:w="1"/><text x="0.7056%" y="1007.50"></text></g><g><title>Security`SSDLSession::DbOpen (1 samples, 0.02%)</title><rect x="0.4556%" y="981" width="0.0240%" height="15" fill="rgb(238,154,13)" fg:x="19" fg:w="1"/><text x="0.7056%" y="991.50"></text></g><g><title>Security`SSDatabaseImpl::load (1 samples, 0.02%)</title><rect x="0.4556%" y="965" width="0.0240%" height="15" fill="rgb(219,56,2)" fg:x="19" fg:w="1"/><text x="0.7056%" y="975.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.02%)</title><rect x="0.4556%" y="949" width="0.0240%" height="15" fill="rgb(233,0,4)" fg:x="19" fg:w="1"/><text x="0.7056%" y="959.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.02%)</title><rect x="0.4556%" y="933" width="0.0240%" height="15" fill="rgb(235,30,7)" fg:x="19" fg:w="1"/><text x="0.7056%" y="943.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.02%)</title><rect x="0.4556%" y="917" width="0.0240%" height="15" fill="rgb(250,79,13)" fg:x="19" fg:w="1"/><text x="0.7056%" y="927.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.02%)</title><rect x="0.4556%" y="901" width="0.0240%" height="15" fill="rgb(211,146,34)" fg:x="19" fg:w="1"/><text x="0.7056%" y="911.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.02%)</title><rect x="0.4556%" y="885" width="0.0240%" height="15" fill="rgb(228,22,38)" fg:x="19" fg:w="1"/><text x="0.7056%" y="895.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.02%)</title><rect x="0.4556%" y="869" width="0.0240%" height="15" fill="rgb(235,168,5)" fg:x="19" fg:w="1"/><text x="0.7056%" y="879.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.02%)</title><rect x="0.4556%" y="853" width="0.0240%" height="15" fill="rgb(221,155,16)" fg:x="19" fg:w="1"/><text x="0.7056%" y="863.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.02%)</title><rect x="0.4556%" y="837" width="0.0240%" height="15" fill="rgb(215,215,53)" fg:x="19" fg:w="1"/><text x="0.7056%" y="847.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.02%)</title><rect x="0.4556%" y="821" width="0.0240%" height="15" fill="rgb(223,4,10)" fg:x="19" fg:w="1"/><text x="0.7056%" y="831.50"></text></g><g><title>Security`Security::MetaRecord::attributeIndex (1 samples, 0.02%)</title><rect x="0.4556%" y="805" width="0.0240%" height="15" fill="rgb(234,103,6)" fg:x="19" fg:w="1"/><text x="0.7056%" y="815.50"></text></g><g><title>Security`std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned int&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;::operator()(std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned int&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.4556%" y="789" width="0.0240%" height="15" fill="rgb(227,97,0)" fg:x="19" fg:w="1"/><text x="0.7056%" y="799.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::performKeychainUpgradeIfNeeded (3 samples, 0.07%)</title><rect x="0.4317%" y="1093" width="0.0719%" height="15" fill="rgb(234,150,53)" fg:x="18" fg:w="3"/><text x="0.6817%" y="1103.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::dbBlobVersion (3 samples, 0.07%)</title><rect x="0.4317%" y="1077" width="0.0719%" height="15" fill="rgb(228,201,54)" fg:x="18" fg:w="3"/><text x="0.6817%" y="1087.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::handle (2 samples, 0.05%)</title><rect x="0.4556%" y="1061" width="0.0480%" height="15" fill="rgb(222,22,37)" fg:x="19" fg:w="2"/><text x="0.7056%" y="1071.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::activate (2 samples, 0.05%)</title><rect x="0.4556%" y="1045" width="0.0480%" height="15" fill="rgb(237,53,32)" fg:x="19" fg:w="2"/><text x="0.7056%" y="1055.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (2 samples, 0.05%)</title><rect x="0.4556%" y="1029" width="0.0480%" height="15" fill="rgb(233,25,53)" fg:x="19" fg:w="2"/><text x="0.7056%" y="1039.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::defaultCredentials (1 samples, 0.02%)</title><rect x="0.4796%" y="1013" width="0.0240%" height="15" fill="rgb(210,40,34)" fg:x="20" fg:w="1"/><text x="0.7296%" y="1023.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::keychainSchema (1 samples, 0.02%)</title><rect x="0.4796%" y="997" width="0.0240%" height="15" fill="rgb(241,220,44)" fg:x="20" fg:w="1"/><text x="0.7296%" y="1007.50"></text></g><g><title>Security`Security::CssmClient::DbDbCursorImpl::next (1 samples, 0.02%)</title><rect x="0.4796%" y="981" width="0.0240%" height="15" fill="rgb(235,28,35)" fg:x="20" fg:w="1"/><text x="0.7296%" y="991.50"></text></g><g><title>Security`Security::CssmDbRecordAttributeData::deleteValues (1 samples, 0.02%)</title><rect x="0.4796%" y="965" width="0.0240%" height="15" fill="rgb(210,56,17)" fg:x="20" fg:w="1"/><text x="0.7296%" y="975.50"></text></g><g><title>Security`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.4796%" y="949" width="0.0240%" height="15" fill="rgb(224,130,29)" fg:x="20" fg:w="1"/><text x="0.7296%" y="959.50"></text></g><g><title>Security`Security::KeychainCore::KCCursorImpl::next (5 samples, 0.12%)</title><rect x="0.4077%" y="1109" width="0.1199%" height="15" fill="rgb(235,212,8)" fg:x="17" fg:w="5"/><text x="0.6577%" y="1119.50"></text></g><g><title>Security`Security::SecPointerBase::operator= (1 samples, 0.02%)</title><rect x="0.5036%" y="1093" width="0.0240%" height="15" fill="rgb(223,33,50)" fg:x="21" fg:w="1"/><text x="0.7536%" y="1103.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.02%)</title><rect x="0.5036%" y="1077" width="0.0240%" height="15" fill="rgb(219,149,13)" fg:x="21" fg:w="1"/><text x="0.7536%" y="1087.50"></text></g><g><title>Security`Security::CFClass::refCountForType (1 samples, 0.02%)</title><rect x="0.5036%" y="1061" width="0.0240%" height="15" fill="rgb(250,156,29)" fg:x="21" fg:w="1"/><text x="0.7536%" y="1071.50"></text></g><g><title>Security`Security::CFClass::cleanupObject (1 samples, 0.02%)</title><rect x="0.5036%" y="1045" width="0.0240%" height="15" fill="rgb(216,193,19)" fg:x="21" fg:w="1"/><text x="0.7536%" y="1055.50"></text></g><g><title>Security`Security::CFClass::finalizeType (1 samples, 0.02%)</title><rect x="0.5036%" y="1029" width="0.0240%" height="15" fill="rgb(216,135,14)" fg:x="21" fg:w="1"/><text x="0.7536%" y="1039.50"></text></g><g><title>Security`void std::__1::__tree_remove&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (1 samples, 0.02%)</title><rect x="0.5036%" y="1013" width="0.0240%" height="15" fill="rgb(241,47,5)" fg:x="21" fg:w="1"/><text x="0.7536%" y="1023.50"></text></g><g><title>Security`SecCertificateCreateItemImplInstance (1 samples, 0.02%)</title><rect x="0.5276%" y="1061" width="0.0240%" height="15" fill="rgb(233,42,35)" fg:x="22" fg:w="1"/><text x="0.7776%" y="1071.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::Certificate (1 samples, 0.02%)</title><rect x="0.5276%" y="1045" width="0.0240%" height="15" fill="rgb(231,13,6)" fg:x="22" fg:w="1"/><text x="0.7776%" y="1055.50"></text></g><g><title>Security`Security::CssmClient::CL::CL (1 samples, 0.02%)</title><rect x="0.5276%" y="1029" width="0.0240%" height="15" fill="rgb(207,181,40)" fg:x="22" fg:w="1"/><text x="0.7776%" y="1039.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="0.5276%" y="1013" width="0.0240%" height="15" fill="rgb(254,173,49)" fg:x="22" fg:w="1"/><text x="0.7776%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="0.5276%" y="997" width="0.0240%" height="15" fill="rgb(221,1,38)" fg:x="22" fg:w="1"/><text x="0.7776%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.5276%" y="981" width="0.0240%" height="15" fill="rgb(206,124,46)" fg:x="22" fg:w="1"/><text x="0.7776%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.5276%" y="965" width="0.0240%" height="15" fill="rgb(249,21,11)" fg:x="22" fg:w="1"/><text x="0.7776%" y="975.50"></text></g><g><title>databend-query`security_framework::trust_settings::TrustSettings::iter (15 samples, 0.36%)</title><rect x="0.2158%" y="1157" width="0.3597%" height="15" fill="rgb(222,201,40)" fg:x="9" fg:w="15"/><text x="0.4658%" y="1167.50"></text></g><g><title>Security`SecTrustSettingsCopyCertificates (15 samples, 0.36%)</title><rect x="0.2158%" y="1141" width="0.3597%" height="15" fill="rgb(235,61,29)" fg:x="9" fg:w="15"/><text x="0.4658%" y="1151.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::findQualifiedCerts(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (10 samples, 0.24%)</title><rect x="0.3357%" y="1125" width="0.2398%" height="15" fill="rgb(219,207,3)" fg:x="14" fg:w="10"/><text x="0.5857%" y="1135.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::findDictionaryForCert (2 samples, 0.05%)</title><rect x="0.5276%" y="1109" width="0.0480%" height="15" fill="rgb(222,56,46)" fg:x="22" fg:w="2"/><text x="0.7776%" y="1119.50"></text></g><g><title>Security`SecTrustSettingsCertHashStrFromCert (2 samples, 0.05%)</title><rect x="0.5276%" y="1093" width="0.0480%" height="15" fill="rgb(239,76,54)" fg:x="22" fg:w="2"/><text x="0.7776%" y="1103.50"></text></g><g><title>Security`SecCertificateGetData (2 samples, 0.05%)</title><rect x="0.5276%" y="1077" width="0.0480%" height="15" fill="rgb(231,124,27)" fg:x="22" fg:w="2"/><text x="0.7776%" y="1087.50"></text></g><g><title>Security`SecCertificateIsItemImplInstance (1 samples, 0.02%)</title><rect x="0.5516%" y="1061" width="0.0240%" height="15" fill="rgb(249,195,6)" fg:x="23" fg:w="1"/><text x="0.8016%" y="1071.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock (1 samples, 0.02%)</title><rect x="0.5516%" y="1045" width="0.0240%" height="15" fill="rgb(237,174,47)" fg:x="23" fg:w="1"/><text x="0.8016%" y="1055.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM objectForKey:] (1 samples, 0.02%)</title><rect x="0.5755%" y="1093" width="0.0240%" height="15" fill="rgb(206,201,31)" fg:x="24" fg:w="1"/><text x="0.8255%" y="1103.50"></text></g><g><title>Security`DYLD-STUB$$CFGetTypeID (1 samples, 0.02%)</title><rect x="0.5995%" y="1093" width="0.0240%" height="15" fill="rgb(231,57,52)" fg:x="25" fg:w="1"/><text x="0.8495%" y="1103.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (1 samples, 0.02%)</title><rect x="0.6235%" y="981" width="0.0240%" height="15" fill="rgb(248,177,22)" fg:x="26" fg:w="1"/><text x="0.8735%" y="991.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.02%)</title><rect x="0.6235%" y="965" width="0.0240%" height="15" fill="rgb(215,211,37)" fg:x="26" fg:w="1"/><text x="0.8735%" y="975.50"></text></g><g><title>CoreFoundation`getContentObject (1 samples, 0.02%)</title><rect x="0.6475%" y="981" width="0.0240%" height="15" fill="rgb(241,128,51)" fg:x="27" fg:w="1"/><text x="0.8975%" y="991.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (3 samples, 0.07%)</title><rect x="0.6954%" y="965" width="0.0719%" height="15" fill="rgb(227,165,31)" fg:x="29" fg:w="3"/><text x="0.9454%" y="975.50"></text></g><g><title>CoreFoundation`-[__NSCFString isEqual:] (1 samples, 0.02%)</title><rect x="0.7434%" y="949" width="0.0240%" height="15" fill="rgb(228,167,24)" fg:x="31" fg:w="1"/><text x="0.9934%" y="959.50"></text></g><g><title>CoreFoundation`__CFStringEqual (1 samples, 0.02%)</title><rect x="0.7434%" y="933" width="0.0240%" height="15" fill="rgb(228,143,12)" fg:x="31" fg:w="1"/><text x="0.9934%" y="943.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM _mutate] (1 samples, 0.02%)</title><rect x="0.7674%" y="965" width="0.0240%" height="15" fill="rgb(249,149,8)" fg:x="32" fg:w="1"/><text x="1.0174%" y="975.50"></text></g><g><title>CoreFoundation`__NSCFDictionaryCreateMutable (1 samples, 0.02%)</title><rect x="0.7914%" y="949" width="0.0240%" height="15" fill="rgb(243,35,44)" fg:x="33" fg:w="1"/><text x="1.0414%" y="959.50"></text></g><g><title>CoreFoundation`_CFGetTSDCreateIfNeeded (1 samples, 0.02%)</title><rect x="0.7914%" y="933" width="0.0240%" height="15" fill="rgb(246,89,9)" fg:x="33" fg:w="1"/><text x="1.0414%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="0.8153%" y="885" width="0.0240%" height="15" fill="rgb(233,213,13)" fg:x="34" fg:w="1"/><text x="1.0653%" y="895.50"></text></g><g><title>CoreFoundation`CFDictionaryCreateMutable (3 samples, 0.07%)</title><rect x="0.7914%" y="965" width="0.0719%" height="15" fill="rgb(233,141,41)" fg:x="33" fg:w="3"/><text x="1.0414%" y="975.50"></text></g><g><title>CoreFoundation`__NSDictionaryM_new (2 samples, 0.05%)</title><rect x="0.8153%" y="949" width="0.0480%" height="15" fill="rgb(239,167,4)" fg:x="34" fg:w="2"/><text x="1.0653%" y="959.50"></text></g><g><title>CoreFoundation`__CFAllocateObject (2 samples, 0.05%)</title><rect x="0.8153%" y="933" width="0.0480%" height="15" fill="rgb(209,217,16)" fg:x="34" fg:w="2"/><text x="1.0653%" y="943.50"></text></g><g><title>libobjc.A.dylib`class_createInstance (2 samples, 0.05%)</title><rect x="0.8153%" y="917" width="0.0480%" height="15" fill="rgb(219,88,35)" fg:x="34" fg:w="2"/><text x="1.0653%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.05%)</title><rect x="0.8153%" y="901" width="0.0480%" height="15" fill="rgb(220,193,23)" fg:x="34" fg:w="2"/><text x="1.0653%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.02%)</title><rect x="0.8393%" y="885" width="0.0240%" height="15" fill="rgb(230,90,52)" fg:x="35" fg:w="1"/><text x="1.0893%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="0.8393%" y="869" width="0.0240%" height="15" fill="rgb(252,106,19)" fg:x="35" fg:w="1"/><text x="1.0893%" y="879.50"></text></g><g><title>CoreFoundation`CFRelease (2 samples, 0.05%)</title><rect x="0.8633%" y="965" width="0.0480%" height="15" fill="rgb(206,74,20)" fg:x="36" fg:w="2"/><text x="1.1133%" y="975.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.02%)</title><rect x="0.9113%" y="965" width="0.0240%" height="15" fill="rgb(230,138,44)" fg:x="38" fg:w="1"/><text x="1.1613%" y="975.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.02%)</title><rect x="0.9353%" y="965" width="0.0240%" height="15" fill="rgb(235,182,43)" fg:x="39" fg:w="1"/><text x="1.1853%" y="975.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (2 samples, 0.05%)</title><rect x="0.9592%" y="933" width="0.0480%" height="15" fill="rgb(242,16,51)" fg:x="40" fg:w="2"/><text x="1.2092%" y="943.50"></text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (2 samples, 0.05%)</title><rect x="1.0072%" y="933" width="0.0480%" height="15" fill="rgb(248,9,4)" fg:x="42" fg:w="2"/><text x="1.2572%" y="943.50"></text></g><g><title>CoreFoundation`__CFStrAllocateMutableContents (2 samples, 0.05%)</title><rect x="1.0072%" y="917" width="0.0480%" height="15" fill="rgb(210,31,22)" fg:x="42" fg:w="2"/><text x="1.2572%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="1.0072%" y="901" width="0.0480%" height="15" fill="rgb(239,54,39)" fg:x="42" fg:w="2"/><text x="1.2572%" y="911.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (6 samples, 0.14%)</title><rect x="0.9592%" y="949" width="0.1439%" height="15" fill="rgb(230,99,41)" fg:x="40" fg:w="6"/><text x="1.2092%" y="959.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="1.0552%" y="933" width="0.0480%" height="15" fill="rgb(253,106,12)" fg:x="44" fg:w="2"/><text x="1.3052%" y="943.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (1 samples, 0.02%)</title><rect x="1.1031%" y="917" width="0.0240%" height="15" fill="rgb(213,46,41)" fg:x="46" fg:w="1"/><text x="1.3531%" y="927.50"></text></g><g><title>CoreFoundation`CFAllocatorAllocate (1 samples, 0.02%)</title><rect x="1.1031%" y="901" width="0.0240%" height="15" fill="rgb(215,133,35)" fg:x="46" fg:w="1"/><text x="1.3531%" y="911.50"></text></g><g><title>CoreFoundation`parseStringTag (8 samples, 0.19%)</title><rect x="0.9592%" y="965" width="0.1918%" height="15" fill="rgb(213,28,5)" fg:x="40" fg:w="8"/><text x="1.2092%" y="975.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (2 samples, 0.05%)</title><rect x="1.1031%" y="949" width="0.0480%" height="15" fill="rgb(215,77,49)" fg:x="46" fg:w="2"/><text x="1.3531%" y="959.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (2 samples, 0.05%)</title><rect x="1.1031%" y="933" width="0.0480%" height="15" fill="rgb(248,100,22)" fg:x="46" fg:w="2"/><text x="1.3531%" y="943.50"></text></g><g><title>CoreFoundation`__CFSearchStringROM (1 samples, 0.02%)</title><rect x="1.1271%" y="917" width="0.0240%" height="15" fill="rgb(208,67,9)" fg:x="47" fg:w="1"/><text x="1.3771%" y="927.50"></text></g><g><title>CoreFoundation` (1 samples, 0.02%)</title><rect x="1.5348%" y="949" width="0.0240%" height="15" fill="rgb(219,133,21)" fg:x="64" fg:w="1"/><text x="1.7848%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="1.5588%" y="933" width="0.0240%" height="15" fill="rgb(246,46,29)" fg:x="65" fg:w="1"/><text x="1.8088%" y="943.50"></text></g><g><title>CoreFoundation`-[__NSArrayM insertObject:atIndex:] (2 samples, 0.05%)</title><rect x="1.5588%" y="949" width="0.0480%" height="15" fill="rgb(246,185,52)" fg:x="65" fg:w="2"/><text x="1.8088%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="1.5827%" y="933" width="0.0240%" height="15" fill="rgb(252,136,11)" fg:x="66" fg:w="1"/><text x="1.8327%" y="943.50"></text></g><g><title>CoreFoundation`__CFDataGrow (2 samples, 0.05%)</title><rect x="1.6067%" y="933" width="0.0480%" height="15" fill="rgb(219,138,53)" fg:x="67" fg:w="2"/><text x="1.8567%" y="943.50"></text></g><g><title>CoreFoundation`__CFSafelyReallocate (2 samples, 0.05%)</title><rect x="1.6067%" y="917" width="0.0480%" height="15" fill="rgb(211,51,23)" fg:x="67" fg:w="2"/><text x="1.8567%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.05%)</title><rect x="1.6067%" y="901" width="0.0480%" height="15" fill="rgb(247,221,28)" fg:x="67" fg:w="2"/><text x="1.8567%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.05%)</title><rect x="1.6067%" y="885" width="0.0480%" height="15" fill="rgb(251,222,45)" fg:x="67" fg:w="2"/><text x="1.8567%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.05%)</title><rect x="1.6067%" y="869" width="0.0480%" height="15" fill="rgb(217,162,53)" fg:x="67" fg:w="2"/><text x="1.8567%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="1.6067%" y="853" width="0.0480%" height="15" fill="rgb(229,93,14)" fg:x="67" fg:w="2"/><text x="1.8567%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="1.6067%" y="837" width="0.0480%" height="15" fill="rgb(209,67,49)" fg:x="67" fg:w="2"/><text x="1.8567%" y="847.50"></text></g><g><title>CoreFoundation`CFDataReplaceBytes (3 samples, 0.07%)</title><rect x="1.6067%" y="949" width="0.0719%" height="15" fill="rgb(213,87,29)" fg:x="67" fg:w="3"/><text x="1.8567%" y="959.50"></text></g><g><title>CoreFoundation`__CFSafelyReallocate (1 samples, 0.02%)</title><rect x="1.6547%" y="933" width="0.0240%" height="15" fill="rgb(205,151,52)" fg:x="69" fg:w="1"/><text x="1.9047%" y="943.50"></text></g><g><title>CoreFoundation`CFRelease (1 samples, 0.02%)</title><rect x="1.6787%" y="949" width="0.0240%" height="15" fill="rgb(253,215,39)" fg:x="70" fg:w="1"/><text x="1.9287%" y="959.50"></text></g><g><title>CoreFoundation`CFDataReplaceBytes (1 samples, 0.02%)</title><rect x="1.7026%" y="933" width="0.0240%" height="15" fill="rgb(221,220,41)" fg:x="71" fg:w="1"/><text x="1.9526%" y="943.50"></text></g><g><title>CoreFoundation`__CFDataInit (4 samples, 0.10%)</title><rect x="1.7026%" y="949" width="0.0959%" height="15" fill="rgb(218,133,21)" fg:x="71" fg:w="4"/><text x="1.9526%" y="959.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (3 samples, 0.07%)</title><rect x="1.7266%" y="933" width="0.0719%" height="15" fill="rgb(221,193,43)" fg:x="72" fg:w="3"/><text x="1.9766%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.02%)</title><rect x="1.7746%" y="917" width="0.0240%" height="15" fill="rgb(240,128,52)" fg:x="74" fg:w="1"/><text x="2.0246%" y="927.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (1 samples, 0.02%)</title><rect x="1.8225%" y="933" width="0.0240%" height="15" fill="rgb(253,114,12)" fg:x="76" fg:w="1"/><text x="2.0725%" y="943.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (1 samples, 0.02%)</title><rect x="1.8225%" y="917" width="0.0240%" height="15" fill="rgb(215,223,47)" fg:x="76" fg:w="1"/><text x="2.0725%" y="927.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (1 samples, 0.02%)</title><rect x="1.8225%" y="901" width="0.0240%" height="15" fill="rgb(248,225,23)" fg:x="76" fg:w="1"/><text x="2.0725%" y="911.50"></text></g><g><title>CoreFoundation`CFRetain (1 samples, 0.02%)</title><rect x="1.8465%" y="917" width="0.0240%" height="15" fill="rgb(250,108,0)" fg:x="77" fg:w="1"/><text x="2.0965%" y="927.50"></text></g><g><title>CoreFoundation`__CFStrHashEightBit2 (1 samples, 0.02%)</title><rect x="1.8705%" y="901" width="0.0240%" height="15" fill="rgb(228,208,7)" fg:x="78" fg:w="1"/><text x="2.1205%" y="911.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (3 samples, 0.07%)</title><rect x="1.8465%" y="933" width="0.0719%" height="15" fill="rgb(244,45,10)" fg:x="77" fg:w="3"/><text x="2.0965%" y="943.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (2 samples, 0.05%)</title><rect x="1.8705%" y="917" width="0.0480%" height="15" fill="rgb(207,125,25)" fg:x="78" fg:w="2"/><text x="2.1205%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="1.8945%" y="901" width="0.0240%" height="15" fill="rgb(210,195,18)" fg:x="79" fg:w="1"/><text x="2.1445%" y="911.50"></text></g><g><title>CoreFoundation`CFStringGetBytes (1 samples, 0.02%)</title><rect x="1.9185%" y="933" width="0.0240%" height="15" fill="rgb(249,80,12)" fg:x="80" fg:w="1"/><text x="2.1685%" y="943.50"></text></g><g><title>Foundation`-[NSPlaceholderMutableString initWithString:] (1 samples, 0.02%)</title><rect x="1.9424%" y="933" width="0.0240%" height="15" fill="rgb(221,65,9)" fg:x="81" fg:w="1"/><text x="2.1924%" y="943.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (1 samples, 0.02%)</title><rect x="1.9424%" y="917" width="0.0240%" height="15" fill="rgb(235,49,36)" fg:x="81" fg:w="1"/><text x="2.1924%" y="927.50"></text></g><g><title>CoreFoundation`__CFAllocatorRespectsHintZeroWhenAllocating (1 samples, 0.02%)</title><rect x="1.9424%" y="901" width="0.0240%" height="15" fill="rgb(225,32,20)" fg:x="81" fg:w="1"/><text x="2.1924%" y="911.50"></text></g><g><title>CoreFoundation`parseStringTag (8 samples, 0.19%)</title><rect x="1.7986%" y="949" width="0.1918%" height="15" fill="rgb(215,141,46)" fg:x="75" fg:w="8"/><text x="2.0486%" y="959.50"></text></g><g><title>libobjc.A.dylib`objc_opt_class (1 samples, 0.02%)</title><rect x="1.9664%" y="933" width="0.0240%" height="15" fill="rgb(250,160,47)" fg:x="82" fg:w="1"/><text x="2.2164%" y="943.50"></text></g><g><title>CoreFoundation`getContentObject (1 samples, 0.02%)</title><rect x="1.9904%" y="933" width="0.0240%" height="15" fill="rgb(216,222,40)" fg:x="83" fg:w="1"/><text x="2.2404%" y="943.50"></text></g><g><title>CoreFoundation`parseXMLElement (2 samples, 0.05%)</title><rect x="1.9904%" y="949" width="0.0480%" height="15" fill="rgb(234,217,39)" fg:x="83" fg:w="2"/><text x="2.2404%" y="959.50"></text></g><g><title>CoreFoundation`parseXMLElement (1 samples, 0.02%)</title><rect x="2.0144%" y="933" width="0.0240%" height="15" fill="rgb(207,178,40)" fg:x="84" fg:w="1"/><text x="2.2644%" y="943.50"></text></g><g><title>CoreFoundation`parseStringTag (1 samples, 0.02%)</title><rect x="2.0144%" y="917" width="0.0240%" height="15" fill="rgb(221,136,13)" fg:x="84" fg:w="1"/><text x="2.2644%" y="927.50"></text></g><g><title>CoreFoundation`CFRelease (1 samples, 0.02%)</title><rect x="2.0144%" y="901" width="0.0240%" height="15" fill="rgb(249,199,10)" fg:x="84" fg:w="1"/><text x="2.2644%" y="911.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (3 samples, 0.07%)</title><rect x="2.0384%" y="949" width="0.0719%" height="15" fill="rgb(249,222,13)" fg:x="85" fg:w="3"/><text x="2.2884%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="2.1103%" y="949" width="0.0240%" height="15" fill="rgb(244,185,38)" fg:x="88" fg:w="1"/><text x="2.3603%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="2.1103%" y="933" width="0.0240%" height="15" fill="rgb(236,202,9)" fg:x="88" fg:w="1"/><text x="2.3603%" y="943.50"></text></g><g><title>CoreFoundation`parseXMLElement (62 samples, 1.49%)</title><rect x="0.6715%" y="981" width="1.4868%" height="15" fill="rgb(250,229,37)" fg:x="28" fg:w="62"/><text x="0.9215%" y="991.50"></text></g><g><title>CoreFoundation`parseXMLElement (42 samples, 1.01%)</title><rect x="1.1511%" y="965" width="1.0072%" height="15" fill="rgb(206,174,23)" fg:x="48" fg:w="42"/><text x="1.4011%" y="975.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="2.1343%" y="949" width="0.0240%" height="15" fill="rgb(211,33,43)" fg:x="89" fg:w="1"/><text x="2.3843%" y="959.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::initFromData (65 samples, 1.56%)</title><rect x="0.6235%" y="1093" width="1.5588%" height="15" fill="rgb(245,58,50)" fg:x="26" fg:w="65"/><text x="0.8735%" y="1103.50"></text></g><g><title>CoreFoundation`CFPropertyListCreateFromXMLData (65 samples, 1.56%)</title><rect x="0.6235%" y="1077" width="1.5588%" height="15" fill="rgb(244,68,36)" fg:x="26" fg:w="65"/><text x="0.8735%" y="1087.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateWithData (65 samples, 1.56%)</title><rect x="0.6235%" y="1061" width="1.5588%" height="15" fill="rgb(232,229,15)" fg:x="26" fg:w="65"/><text x="0.8735%" y="1071.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateFromUTF8Data (65 samples, 1.56%)</title><rect x="0.6235%" y="1045" width="1.5588%" height="15" fill="rgb(254,30,23)" fg:x="26" fg:w="65"/><text x="0.8735%" y="1055.50"></text></g><g><title>CoreFoundation`parseXMLElement (65 samples, 1.56%)</title><rect x="0.6235%" y="1029" width="1.5588%" height="15" fill="rgb(235,160,14)" fg:x="26" fg:w="65"/><text x="0.8735%" y="1039.50"></text></g><g><title>CoreFoundation`parseXMLElement (65 samples, 1.56%)</title><rect x="0.6235%" y="1013" width="1.5588%" height="15" fill="rgb(212,155,44)" fg:x="26" fg:w="65"/><text x="0.8735%" y="1023.50"></text></g><g><title>CoreFoundation`parseXMLElement (65 samples, 1.56%)</title><rect x="0.6235%" y="997" width="1.5588%" height="15" fill="rgb(226,2,50)" fg:x="26" fg:w="65"/><text x="0.8735%" y="1007.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.02%)</title><rect x="2.1583%" y="981" width="0.0240%" height="15" fill="rgb(234,177,6)" fg:x="90" fg:w="1"/><text x="2.4083%" y="991.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM objectForKey:] (3 samples, 0.07%)</title><rect x="2.1823%" y="1077" width="0.0719%" height="15" fill="rgb(217,24,9)" fg:x="91" fg:w="3"/><text x="2.4323%" y="1087.50"></text></g><g><title>CoreFoundation`-[__NSCFString isEqual:] (3 samples, 0.07%)</title><rect x="2.1823%" y="1061" width="0.0719%" height="15" fill="rgb(220,13,46)" fg:x="91" fg:w="3"/><text x="2.4323%" y="1071.50"></text></g><g><title>CoreFoundation`__CFStringEqual (3 samples, 0.07%)</title><rect x="2.1823%" y="1045" width="0.0719%" height="15" fill="rgb(239,221,27)" fg:x="91" fg:w="3"/><text x="2.4323%" y="1055.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.02%)</title><rect x="2.2542%" y="1077" width="0.0240%" height="15" fill="rgb(222,198,25)" fg:x="94" fg:w="1"/><text x="2.5042%" y="1087.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::CreateTrustSettings (72 samples, 1.73%)</title><rect x="0.5755%" y="1109" width="1.7266%" height="15" fill="rgb(211,99,13)" fg:x="24" fg:w="72"/><text x="0.8255%" y="1119.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::validatePropList (5 samples, 0.12%)</title><rect x="2.1823%" y="1093" width="0.1199%" height="15" fill="rgb(232,111,31)" fg:x="91" fg:w="5"/><text x="2.4323%" y="1103.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.02%)</title><rect x="2.2782%" y="1077" width="0.0240%" height="15" fill="rgb(245,82,37)" fg:x="95" fg:w="1"/><text x="2.5282%" y="1087.50"></text></g><g><title>CoreFoundation`CFAllocatorDeallocate (1 samples, 0.02%)</title><rect x="2.3261%" y="1029" width="0.0240%" height="15" fill="rgb(227,149,46)" fg:x="97" fg:w="1"/><text x="2.5761%" y="1039.50"></text></g><g><title>CoreFoundation`CFAllocatorDeallocate (1 samples, 0.02%)</title><rect x="2.3741%" y="1013" width="0.0240%" height="15" fill="rgb(218,36,50)" fg:x="99" fg:w="1"/><text x="2.6241%" y="1023.50"></text></g><g><title>CoreFoundation`__CFDataDeallocate (1 samples, 0.02%)</title><rect x="2.3981%" y="1013" width="0.0240%" height="15" fill="rgb(226,80,48)" fg:x="100" fg:w="1"/><text x="2.6481%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="2.3981%" y="997" width="0.0240%" height="15" fill="rgb(238,224,15)" fg:x="100" fg:w="1"/><text x="2.6481%" y="1007.50"></text></g><g><title>CoreFoundation`__CFStringDeallocate (1 samples, 0.02%)</title><rect x="2.4221%" y="1013" width="0.0240%" height="15" fill="rgb(241,136,10)" fg:x="101" fg:w="1"/><text x="2.6721%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.05%)</title><rect x="2.4460%" y="1013" width="0.0480%" height="15" fill="rgb(208,32,45)" fg:x="102" fg:w="2"/><text x="2.6960%" y="1023.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (9 samples, 0.22%)</title><rect x="2.3022%" y="1093" width="0.2158%" height="15" fill="rgb(207,135,9)" fg:x="96" fg:w="9"/><text x="2.5522%" y="1103.50"></text></g><g><title>CoreFoundation`cow_cleanup (9 samples, 0.22%)</title><rect x="2.3022%" y="1077" width="0.2158%" height="15" fill="rgb(206,86,44)" fg:x="96" fg:w="9"/><text x="2.5522%" y="1087.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (9 samples, 0.22%)</title><rect x="2.3022%" y="1061" width="0.2158%" height="15" fill="rgb(245,177,15)" fg:x="96" fg:w="9"/><text x="2.5522%" y="1071.50"></text></g><g><title>CoreFoundation`cow_cleanup (9 samples, 0.22%)</title><rect x="2.3022%" y="1045" width="0.2158%" height="15" fill="rgb(206,64,50)" fg:x="96" fg:w="9"/><text x="2.5522%" y="1055.50"></text></g><g><title>CoreFoundation`_CFRelease (7 samples, 0.17%)</title><rect x="2.3501%" y="1029" width="0.1679%" height="15" fill="rgb(234,36,40)" fg:x="98" fg:w="7"/><text x="2.6001%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="2.4940%" y="1013" width="0.0240%" height="15" fill="rgb(213,64,8)" fg:x="104" fg:w="1"/><text x="2.7440%" y="1023.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::~TrustSettings (10 samples, 0.24%)</title><rect x="2.3022%" y="1109" width="0.2398%" height="15" fill="rgb(210,75,36)" fg:x="96" fg:w="10"/><text x="2.5522%" y="1119.50"></text></g><g><title>Security`secLogObjForScope (1 samples, 0.02%)</title><rect x="2.5180%" y="1093" width="0.0240%" height="15" fill="rgb(229,88,21)" fg:x="105" fg:w="1"/><text x="2.7680%" y="1103.50"></text></g><g><title>CoreFoundation`CFStringCreateWithCString (1 samples, 0.02%)</title><rect x="2.5180%" y="1077" width="0.0240%" height="15" fill="rgb(252,204,47)" fg:x="105" fg:w="1"/><text x="2.7680%" y="1087.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (1 samples, 0.02%)</title><rect x="2.5180%" y="1061" width="0.0240%" height="15" fill="rgb(208,77,27)" fg:x="105" fg:w="1"/><text x="2.7680%" y="1071.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (1 samples, 0.02%)</title><rect x="2.5180%" y="1045" width="0.0240%" height="15" fill="rgb(221,76,26)" fg:x="105" fg:w="1"/><text x="2.7680%" y="1055.50"></text></g><g><title>libobjc.A.dylib`objc_class::isInitialized (1 samples, 0.02%)</title><rect x="2.5180%" y="1029" width="0.0240%" height="15" fill="rgb(225,139,18)" fg:x="105" fg:w="1"/><text x="2.7680%" y="1039.50"></text></g><g><title>databend-query`common_sharing::share_endpoint::ShareEndpointManager::init (99 samples, 2.37%)</title><rect x="0.1918%" y="1221" width="2.3741%" height="15" fill="rgb(230,137,11)" fg:x="8" fg:w="99"/><text x="0.4418%" y="1231.50">da..</text></g><g><title>databend-query`opendal::raw::http_util::client::HttpClient::build (99 samples, 2.37%)</title><rect x="0.1918%" y="1205" width="2.3741%" height="15" fill="rgb(212,28,1)" fg:x="8" fg:w="99"/><text x="0.4418%" y="1215.50">da..</text></g><g><title>databend-query`reqwest::async_impl::client::ClientBuilder::build (99 samples, 2.37%)</title><rect x="0.1918%" y="1189" width="2.3741%" height="15" fill="rgb(248,164,17)" fg:x="8" fg:w="99"/><text x="0.4418%" y="1199.50">da..</text></g><g><title>databend-query`rustls_native_certs::macos::load_native_certs (99 samples, 2.37%)</title><rect x="0.1918%" y="1173" width="2.3741%" height="15" fill="rgb(222,171,42)" fg:x="8" fg:w="99"/><text x="0.4418%" y="1183.50">da..</text></g><g><title>databend-query`security_framework::trust_settings::TrustSettings::tls_trust_settings_for_certificate (83 samples, 1.99%)</title><rect x="0.5755%" y="1157" width="1.9904%" height="15" fill="rgb(243,84,45)" fg:x="24" fg:w="83"/><text x="0.8255%" y="1167.50">d..</text></g><g><title>Security`SecTrustSettingsCopyTrustSettings (83 samples, 1.99%)</title><rect x="0.5755%" y="1141" width="1.9904%" height="15" fill="rgb(252,49,23)" fg:x="24" fg:w="83"/><text x="0.8255%" y="1151.50">S..</text></g><g><title>Security`tsCopyTrustSettings(__SecCertificate*, SecTrustSettingsDomain, __CFArray const**, __CFDate const**) (83 samples, 1.99%)</title><rect x="0.5755%" y="1125" width="1.9904%" height="15" fill="rgb(215,19,7)" fg:x="24" fg:w="83"/><text x="0.8255%" y="1135.50">S..</text></g><g><title>libsystem_kernel.dylib`fstat (1 samples, 0.02%)</title><rect x="2.5420%" y="1109" width="0.0240%" height="15" fill="rgb(238,81,41)" fg:x="106" fg:w="1"/><text x="2.7920%" y="1119.50"></text></g><g><title>databend-query`tracing_appender::non_blocking::NonBlocking::create (1 samples, 0.02%)</title><rect x="2.5659%" y="1189" width="0.0240%" height="15" fill="rgb(210,199,37)" fg:x="107" fg:w="1"/><text x="2.8159%" y="1199.50"></text></g><g><title>databend-query`crossbeam_channel::channel::bounded (1 samples, 0.02%)</title><rect x="2.5659%" y="1173" width="0.0240%" height="15" fill="rgb(244,192,49)" fg:x="107" fg:w="1"/><text x="2.8159%" y="1183.50"></text></g><g><title>databend-query`crossbeam_channel::flavors::array::Channel&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="2.5659%" y="1157" width="0.0240%" height="15" fill="rgb(226,211,11)" fg:x="107" fg:w="1"/><text x="2.8159%" y="1167.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="2.5659%" y="1141" width="0.0240%" height="15" fill="rgb(236,162,54)" fg:x="107" fg:w="1"/><text x="2.8159%" y="1151.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="2.5659%" y="1125" width="0.0240%" height="15" fill="rgb(220,229,9)" fg:x="107" fg:w="1"/><text x="2.8159%" y="1135.50"></text></g><g><title>databend-query`common_tracing::logging::QueryLogger::init (2 samples, 0.05%)</title><rect x="2.5659%" y="1221" width="0.0480%" height="15" fill="rgb(250,87,22)" fg:x="107" fg:w="2"/><text x="2.8159%" y="1231.50"></text></g><g><title>databend-query`common_tracing::logging::init_logging (2 samples, 0.05%)</title><rect x="2.5659%" y="1205" width="0.0480%" height="15" fill="rgb(239,43,17)" fg:x="107" fg:w="2"/><text x="2.8159%" y="1215.50"></text></g><g><title>databend-query`tracing_subscriber::filter::env::EnvFilter::new (1 samples, 0.02%)</title><rect x="2.5899%" y="1189" width="0.0240%" height="15" fill="rgb(231,177,25)" fg:x="108" fg:w="1"/><text x="2.8399%" y="1199.50"></text></g><g><title>databend-query`tracing_subscriber::filter::env::builder::Builder::parse_lossy (1 samples, 0.02%)</title><rect x="2.5899%" y="1173" width="0.0240%" height="15" fill="rgb(219,179,1)" fg:x="108" fg:w="1"/><text x="2.8399%" y="1183.50"></text></g><g><title>databend-query`tracing_subscriber::filter::env::builder::Builder::from_directives (1 samples, 0.02%)</title><rect x="2.5899%" y="1157" width="0.0240%" height="15" fill="rgb(238,219,53)" fg:x="108" fg:w="1"/><text x="2.8399%" y="1167.50"></text></g><g><title>databend-query`tracing_subscriber::filter::env::directive::Directive::make_tables (1 samples, 0.02%)</title><rect x="2.5899%" y="1141" width="0.0240%" height="15" fill="rgb(232,167,36)" fg:x="108" fg:w="1"/><text x="2.8399%" y="1151.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::filter::directive::DirectiveSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="2.5899%" y="1125" width="0.0240%" height="15" fill="rgb(244,19,51)" fg:x="108" fg:w="1"/><text x="2.8399%" y="1135.50"></text></g><g><title>databend-query`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.02%)</title><rect x="2.5899%" y="1109" width="0.0240%" height="15" fill="rgb(224,6,22)" fg:x="108" fg:w="1"/><text x="2.8399%" y="1119.50"></text></g><g><title>databend-query`databend_query::global_services::GlobalServices::init::_{{closure}} (105 samples, 2.52%)</title><rect x="0.1199%" y="1285" width="2.5180%" height="15" fill="rgb(224,145,5)" fg:x="5" fg:w="105"/><text x="0.3699%" y="1295.50">da..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (105 samples, 2.52%)</title><rect x="0.1199%" y="1269" width="2.5180%" height="15" fill="rgb(234,130,49)" fg:x="5" fg:w="105"/><text x="0.3699%" y="1279.50">da..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (105 samples, 2.52%)</title><rect x="0.1199%" y="1253" width="2.5180%" height="15" fill="rgb(254,6,2)" fg:x="5" fg:w="105"/><text x="0.3699%" y="1263.50">da..</text></g><g><title>databend-query`databend_query::global_services::GlobalServices::init_with::_{{closure}}::_{{closure}} (105 samples, 2.52%)</title><rect x="0.1199%" y="1237" width="2.5180%" height="15" fill="rgb(208,96,46)" fg:x="5" fg:w="105"/><text x="0.3699%" y="1247.50">da..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="2.6139%" y="1221" width="0.0240%" height="15" fill="rgb(239,3,39)" fg:x="109" fg:w="1"/><text x="2.8639%" y="1231.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="2.6139%" y="1205" width="0.0240%" height="15" fill="rgb(233,210,1)" fg:x="109" fg:w="1"/><text x="2.8639%" y="1215.50"></text></g><g><title>databend-query`&lt;async_backtrace::defer::Defer&lt;F,R&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="2.6139%" y="1189" width="0.0240%" height="15" fill="rgb(244,137,37)" fg:x="109" fg:w="1"/><text x="2.8639%" y="1199.50"></text></g><g><title>dyld`start (111 samples, 2.66%)</title><rect x="0.0000%" y="1477" width="2.6619%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="111"/><text x="0.2500%" y="1487.50">dy..</text></g><g><title>databend-query`main (111 samples, 2.66%)</title><rect x="0.0000%" y="1461" width="2.6619%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="111"/><text x="0.2500%" y="1471.50">da..</text></g><g><title>databend-query`std::rt::lang_start_internal (111 samples, 2.66%)</title><rect x="0.0000%" y="1445" width="2.6619%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="111"/><text x="0.2500%" y="1455.50">da..</text></g><g><title>databend-query`std::rt::lang_start::_{{closure}} (111 samples, 2.66%)</title><rect x="0.0000%" y="1429" width="2.6619%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="111"/><text x="0.2500%" y="1439.50">da..</text></g><g><title>databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace (111 samples, 2.66%)</title><rect x="0.0000%" y="1413" width="2.6619%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="111"/><text x="0.2500%" y="1423.50">da..</text></g><g><title>databend-query`databend_query::main (111 samples, 2.66%)</title><rect x="0.0000%" y="1397" width="2.6619%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="111"/><text x="0.2500%" y="1407.50">da..</text></g><g><title>databend-query`tokio::runtime::handle::Handle::block_on (110 samples, 2.64%)</title><rect x="0.0240%" y="1381" width="2.6379%" height="15" fill="rgb(233,99,24)" fg:x="1" fg:w="110"/><text x="0.2740%" y="1391.50">da..</text></g><g><title>databend-query`tokio::runtime::park::CachedParkThread::block_on (110 samples, 2.64%)</title><rect x="0.0240%" y="1365" width="2.6379%" height="15" fill="rgb(234,209,42)" fg:x="1" fg:w="110"/><text x="0.2740%" y="1375.50">da..</text></g><g><title>databend-query`&lt;common_base::runtime::catch_unwind::CatchUnwindFuture&lt;F&gt; as core::future::future::Future&gt;::poll (110 samples, 2.64%)</title><rect x="0.0240%" y="1349" width="2.6379%" height="15" fill="rgb(227,7,12)" fg:x="1" fg:w="110"/><text x="0.2740%" y="1359.50">da..</text></g><g><title>databend-query`std::panicking::try (110 samples, 2.64%)</title><rect x="0.0240%" y="1333" width="2.6379%" height="15" fill="rgb(245,203,43)" fg:x="1" fg:w="110"/><text x="0.2740%" y="1343.50">da..</text></g><g><title>databend-query`&lt;async_backtrace::framed::Framed&lt;F&gt; as core::future::future::Future&gt;::poll{{reify.shim}} (110 samples, 2.64%)</title><rect x="0.0240%" y="1317" width="2.6379%" height="15" fill="rgb(238,205,33)" fg:x="1" fg:w="110"/><text x="0.2740%" y="1327.50">da..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (110 samples, 2.64%)</title><rect x="0.0240%" y="1301" width="2.6379%" height="15" fill="rgb(231,56,7)" fg:x="1" fg:w="110"/><text x="0.2740%" y="1311.50">da..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="2.6379%" y="1285" width="0.0240%" height="15" fill="rgb(244,186,29)" fg:x="110" fg:w="1"/><text x="2.8879%" y="1295.50"></text></g><g><title>databend-query`common_base::base::singleton_instance::GlobalInstance::set (1 samples, 0.02%)</title><rect x="2.6379%" y="1269" width="0.0240%" height="15" fill="rgb(234,111,31)" fg:x="110" fg:w="1"/><text x="2.8879%" y="1279.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.02%)</title><rect x="2.6619%" y="1477" width="0.0240%" height="15" fill="rgb(241,149,10)" fg:x="111" fg:w="1"/><text x="2.9119%" y="1487.50"></text></g><g><title>Security`cssm_DbClose(cssm_dl_db_handle) (1 samples, 0.02%)</title><rect x="2.6859%" y="997" width="0.0240%" height="15" fill="rgb(249,206,44)" fg:x="112" fg:w="1"/><text x="2.9359%" y="1007.50"></text></g><g><title>Security`Security::DatabaseSession::DbClose (1 samples, 0.02%)</title><rect x="2.6859%" y="981" width="0.0240%" height="15" fill="rgb(251,153,30)" fg:x="112" fg:w="1"/><text x="2.9359%" y="991.50"></text></g><g><title>Security`Security::DatabaseManager::dbClose (1 samples, 0.02%)</title><rect x="2.6859%" y="965" width="0.0240%" height="15" fill="rgb(239,152,38)" fg:x="112" fg:w="1"/><text x="2.9359%" y="975.50"></text></g><g><title>Security`Security::Database::_dbClose (1 samples, 0.02%)</title><rect x="2.6859%" y="949" width="0.0240%" height="15" fill="rgb(249,139,47)" fg:x="112" fg:w="1"/><text x="2.9359%" y="959.50"></text></g><g><title>Security`Security::AppleDatabase::dbClose (1 samples, 0.02%)</title><rect x="2.6859%" y="933" width="0.0240%" height="15" fill="rgb(244,64,35)" fg:x="112" fg:w="1"/><text x="2.9359%" y="943.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::DbVersion const&gt;::setPointer (1 samples, 0.02%)</title><rect x="2.6859%" y="917" width="0.0240%" height="15" fill="rgb(216,46,15)" fg:x="112" fg:w="1"/><text x="2.9359%" y="927.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::DbVersion const&gt;::release_internal (1 samples, 0.02%)</title><rect x="2.6859%" y="901" width="0.0240%" height="15" fill="rgb(250,74,19)" fg:x="112" fg:w="1"/><text x="2.9359%" y="911.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::close (2 samples, 0.05%)</title><rect x="2.6859%" y="1029" width="0.0480%" height="15" fill="rgb(249,42,33)" fg:x="112" fg:w="2"/><text x="2.9359%" y="1039.50"></text></g><g><title>Security`CSSM_DL_DbClose (2 samples, 0.05%)</title><rect x="2.6859%" y="1013" width="0.0480%" height="15" fill="rgb(242,149,17)" fg:x="112" fg:w="2"/><text x="2.9359%" y="1023.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.02%)</title><rect x="2.7098%" y="997" width="0.0240%" height="15" fill="rgb(244,29,21)" fg:x="113" fg:w="1"/><text x="2.9598%" y="1007.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.02%)</title><rect x="2.7098%" y="981" width="0.0240%" height="15" fill="rgb(220,130,37)" fg:x="113" fg:w="1"/><text x="2.9598%" y="991.50"></text></g><g><title>Security`Attachment::detach (3 samples, 0.07%)</title><rect x="2.6859%" y="1109" width="0.0719%" height="15" fill="rgb(211,67,2)" fg:x="112" fg:w="3"/><text x="2.9359%" y="1119.50"></text></g><g><title>Security`CSSM_SPI_ModuleDetach__apple_cspdl (3 samples, 0.07%)</title><rect x="2.6859%" y="1093" width="0.0719%" height="15" fill="rgb(235,68,52)" fg:x="112" fg:w="3"/><text x="2.9359%" y="1103.50"></text></g><g><title>Security`Security::CssmPlugin::moduleDetach (3 samples, 0.07%)</title><rect x="2.6859%" y="1077" width="0.0719%" height="15" fill="rgb(246,142,3)" fg:x="112" fg:w="3"/><text x="2.9359%" y="1087.50"></text></g><g><title>Security`SSDLSession::~SSDLSession (3 samples, 0.07%)</title><rect x="2.6859%" y="1061" width="0.0719%" height="15" fill="rgb(241,25,7)" fg:x="112" fg:w="3"/><text x="2.9359%" y="1071.50"></text></g><g><title>Security`SSDLSession::~SSDLSession (3 samples, 0.07%)</title><rect x="2.6859%" y="1045" width="0.0719%" height="15" fill="rgb(242,119,39)" fg:x="112" fg:w="3"/><text x="2.9359%" y="1055.50"></text></g><g><title>Security`std::__1::__tree&lt;std::__1::__value_type&lt;long, SSDatabase&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, SSDatabase&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, SSDatabase&gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type (1 samples, 0.02%)</title><rect x="2.7338%" y="1029" width="0.0240%" height="15" fill="rgb(241,98,45)" fg:x="114" fg:w="1"/><text x="2.9838%" y="1039.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (1 samples, 0.02%)</title><rect x="2.7338%" y="1013" width="0.0240%" height="15" fill="rgb(254,28,30)" fg:x="114" fg:w="1"/><text x="2.9838%" y="1023.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (1 samples, 0.02%)</title><rect x="2.7338%" y="997" width="0.0240%" height="15" fill="rgb(241,142,54)" fg:x="114" fg:w="1"/><text x="2.9838%" y="1007.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (1 samples, 0.02%)</title><rect x="2.7338%" y="981" width="0.0240%" height="15" fill="rgb(222,85,15)" fg:x="114" fg:w="1"/><text x="2.9838%" y="991.50"></text></g><g><title>Security`SSDatabaseImpl::~SSDatabaseImpl (1 samples, 0.02%)</title><rect x="2.7338%" y="965" width="0.0240%" height="15" fill="rgb(210,85,47)" fg:x="114" fg:w="1"/><text x="2.9838%" y="975.50"></text></g><g><title>Security`SSDatabaseImpl::~SSDatabaseImpl (1 samples, 0.02%)</title><rect x="2.7338%" y="949" width="0.0240%" height="15" fill="rgb(224,206,25)" fg:x="114" fg:w="1"/><text x="2.9838%" y="959.50"></text></g><g><title>Security`Security::SecurityServer::ClientSession::releaseDb (1 samples, 0.02%)</title><rect x="2.7338%" y="933" width="0.0240%" height="15" fill="rgb(243,201,19)" fg:x="114" fg:w="1"/><text x="2.9838%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (1 samples, 0.02%)</title><rect x="2.7338%" y="917" width="0.0240%" height="15" fill="rgb(236,59,4)" fg:x="114" fg:w="1"/><text x="2.9838%" y="927.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (4 samples, 0.10%)</title><rect x="2.6859%" y="1477" width="0.0959%" height="15" fill="rgb(254,179,45)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1487.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (4 samples, 0.10%)</title><rect x="2.6859%" y="1461" width="0.0959%" height="15" fill="rgb(226,14,10)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1471.50"></text></g><g><title>libdispatch.dylib`_dispatch_worker_thread2 (4 samples, 0.10%)</title><rect x="2.6859%" y="1445" width="0.0959%" height="15" fill="rgb(244,27,41)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1455.50"></text></g><g><title>libdispatch.dylib`_dispatch_root_queue_drain (4 samples, 0.10%)</title><rect x="2.6859%" y="1429" width="0.0959%" height="15" fill="rgb(235,35,32)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1439.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (4 samples, 0.10%)</title><rect x="2.6859%" y="1413" width="0.0959%" height="15" fill="rgb(218,68,31)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1423.50"></text></g><g><title>libdispatch.dylib`_dispatch_call_block_and_release (4 samples, 0.10%)</title><rect x="2.6859%" y="1397" width="0.0959%" height="15" fill="rgb(207,120,37)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1407.50"></text></g><g><title>CoreFoundation`_CFRelease (4 samples, 0.10%)</title><rect x="2.6859%" y="1381" width="0.0959%" height="15" fill="rgb(227,98,0)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1391.50"></text></g><g><title>Security`Security::CFClass::refCountForType (4 samples, 0.10%)</title><rect x="2.6859%" y="1365" width="0.0959%" height="15" fill="rgb(207,7,3)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1375.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::~KeychainImpl (4 samples, 0.10%)</title><rect x="2.6859%" y="1349" width="0.0959%" height="15" fill="rgb(206,98,19)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1359.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::~KeychainImpl (4 samples, 0.10%)</title><rect x="2.6859%" y="1333" width="0.0959%" height="15" fill="rgb(217,5,26)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1343.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (4 samples, 0.10%)</title><rect x="2.6859%" y="1317" width="0.0959%" height="15" fill="rgb(235,190,38)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1327.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (4 samples, 0.10%)</title><rect x="2.6859%" y="1301" width="0.0959%" height="15" fill="rgb(247,86,24)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1311.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (4 samples, 0.10%)</title><rect x="2.6859%" y="1285" width="0.0959%" height="15" fill="rgb(205,101,16)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1295.50"></text></g><g><title>Security`Security::CssmClient::SSDbImpl::~SSDbImpl (4 samples, 0.10%)</title><rect x="2.6859%" y="1269" width="0.0959%" height="15" fill="rgb(246,168,33)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1279.50"></text></g><g><title>Security`Security::CssmClient::ObjectImpl::~ObjectImpl (4 samples, 0.10%)</title><rect x="2.6859%" y="1253" width="0.0959%" height="15" fill="rgb(231,114,1)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1263.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (4 samples, 0.10%)</title><rect x="2.6859%" y="1237" width="0.0959%" height="15" fill="rgb(207,184,53)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1247.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (4 samples, 0.10%)</title><rect x="2.6859%" y="1221" width="0.0959%" height="15" fill="rgb(224,95,51)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1231.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (4 samples, 0.10%)</title><rect x="2.6859%" y="1205" width="0.0959%" height="15" fill="rgb(212,188,45)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1215.50"></text></g><g><title>Security`non-virtual thunk to Security::CssmClient::SSCSPDLImpl::~SSCSPDLImpl (4 samples, 0.10%)</title><rect x="2.6859%" y="1189" width="0.0959%" height="15" fill="rgb(223,154,38)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1199.50"></text></g><g><title>Security`Security::CssmClient::CSPDLImpl::~CSPDLImpl (4 samples, 0.10%)</title><rect x="2.6859%" y="1173" width="0.0959%" height="15" fill="rgb(251,22,52)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1183.50"></text></g><g><title>Security`Security::CssmClient::AttachmentImpl::~AttachmentImpl (4 samples, 0.10%)</title><rect x="2.6859%" y="1157" width="0.0959%" height="15" fill="rgb(229,209,22)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1167.50"></text></g><g><title>Security`Security::CssmClient::AttachmentImpl::deactivate (4 samples, 0.10%)</title><rect x="2.6859%" y="1141" width="0.0959%" height="15" fill="rgb(234,138,34)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1151.50"></text></g><g><title>Security`CSSM_ModuleDetach (4 samples, 0.10%)</title><rect x="2.6859%" y="1125" width="0.0959%" height="15" fill="rgb(212,95,11)" fg:x="112" fg:w="4"/><text x="2.9359%" y="1135.50"></text></g><g><title>Security`countLegacyAPI (1 samples, 0.02%)</title><rect x="2.7578%" y="1109" width="0.0240%" height="15" fill="rgb(240,179,47)" fg:x="115" fg:w="1"/><text x="3.0078%" y="1119.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="2.7578%" y="1093" width="0.0240%" height="15" fill="rgb(240,163,11)" fg:x="115" fg:w="1"/><text x="3.0078%" y="1103.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="2.7578%" y="1077" width="0.0240%" height="15" fill="rgb(236,37,12)" fg:x="115" fg:w="1"/><text x="3.0078%" y="1087.50"></text></g><g><title>Security`__countLegacyAPI_block_invoke (1 samples, 0.02%)</title><rect x="2.7578%" y="1061" width="0.0240%" height="15" fill="rgb(232,164,16)" fg:x="115" fg:w="1"/><text x="3.0078%" y="1071.50"></text></g><g><title>Security`+[SecCoreAnalytics sendEventLazy:builder:] (1 samples, 0.02%)</title><rect x="2.7578%" y="1045" width="0.0240%" height="15" fill="rgb(244,205,15)" fg:x="115" fg:w="1"/><text x="3.0078%" y="1055.50"></text></g><g><title>CoreAnalytics`AnalyticsSendEventLazy (1 samples, 0.02%)</title><rect x="2.7578%" y="1029" width="0.0240%" height="15" fill="rgb(223,117,47)" fg:x="115" fg:w="1"/><text x="3.0078%" y="1039.50"></text></g><g><title>libsystem_trace.dylib`_os_log_impl (1 samples, 0.02%)</title><rect x="2.7578%" y="1013" width="0.0240%" height="15" fill="rgb(244,107,35)" fg:x="115" fg:w="1"/><text x="3.0078%" y="1023.50"></text></g><g><title>libsystem_trace.dylib`_os_log (1 samples, 0.02%)</title><rect x="2.7578%" y="997" width="0.0240%" height="15" fill="rgb(205,140,8)" fg:x="115" fg:w="1"/><text x="3.0078%" y="1007.50"></text></g><g><title>libsystem_trace.dylib`_os_log_impl_flatten_and_send (1 samples, 0.02%)</title><rect x="2.7578%" y="981" width="0.0240%" height="15" fill="rgb(228,84,46)" fg:x="115" fg:w="1"/><text x="3.0078%" y="991.50"></text></g><g><title>libobjc.A.dylib`-[NSObject isProxy] (1 samples, 0.02%)</title><rect x="2.7578%" y="965" width="0.0240%" height="15" fill="rgb(254,188,9)" fg:x="115" fg:w="1"/><text x="3.0078%" y="975.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="2.8058%" y="1381" width="0.0240%" height="15" fill="rgb(206,112,54)" fg:x="117" fg:w="1"/><text x="3.0558%" y="1391.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="2.8058%" y="1365" width="0.0240%" height="15" fill="rgb(216,84,49)" fg:x="117" fg:w="1"/><text x="3.0558%" y="1375.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::RunningGraph::schedule_queue (1 samples, 0.02%)</title><rect x="2.8297%" y="1333" width="0.0240%" height="15" fill="rgb(214,194,35)" fg:x="118" fg:w="1"/><text x="3.0797%" y="1343.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ScheduleQueue::schedule (1 samples, 0.02%)</title><rect x="2.8537%" y="1333" width="0.0240%" height="15" fill="rgb(249,28,3)" fg:x="119" fg:w="1"/><text x="3.1037%" y="1343.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (5 samples, 0.12%)</title><rect x="2.9976%" y="1317" width="0.1199%" height="15" fill="rgb(222,56,52)" fg:x="125" fg:w="5"/><text x="3.2476%" y="1327.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_pipeline_core::processors::processor::ProcessorPtr]&gt; (1 samples, 0.02%)</title><rect x="3.1175%" y="1317" width="0.0240%" height="15" fill="rgb(245,217,50)" fg:x="130" fg:w="1"/><text x="3.3675%" y="1327.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;common_pipeline_core::processors::processor::ProcessorPtr&gt;&gt; (1 samples, 0.02%)</title><rect x="3.1415%" y="1317" width="0.0240%" height="15" fill="rgb(213,201,24)" fg:x="131" fg:w="1"/><text x="3.3915%" y="1327.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="3.1655%" y="1301" width="0.0240%" height="15" fill="rgb(248,116,28)" fg:x="132" fg:w="1"/><text x="3.4155%" y="1311.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_pipeline_core::processors::processor::ProcessorPtr]&gt; (1 samples, 0.02%)</title><rect x="3.1894%" y="1301" width="0.0240%" height="15" fill="rgb(219,72,43)" fg:x="133" fg:w="1"/><text x="3.4394%" y="1311.50"></text></g><g><title>databend-query`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="3.2134%" y="1285" width="0.0480%" height="15" fill="rgb(209,138,14)" fg:x="134" fg:w="2"/><text x="3.4634%" y="1295.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_pipeline_core::processors::processor::ProcessorPtr]&gt; (1 samples, 0.02%)</title><rect x="3.2374%" y="1269" width="0.0240%" height="15" fill="rgb(222,18,33)" fg:x="135" fg:w="1"/><text x="3.4874%" y="1279.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;common_pipeline_core::processors::processor::ProcessorPtr&gt;&gt; (4 samples, 0.10%)</title><rect x="3.2134%" y="1301" width="0.0959%" height="15" fill="rgb(213,199,7)" fg:x="134" fg:w="4"/><text x="3.4634%" y="1311.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_pipeline_core::processors::processor::ProcessorPtr]&gt; (2 samples, 0.05%)</title><rect x="3.2614%" y="1285" width="0.0480%" height="15" fill="rgb(250,110,10)" fg:x="136" fg:w="2"/><text x="3.5114%" y="1295.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="3.3094%" y="1301" width="0.0240%" height="15" fill="rgb(248,123,6)" fg:x="138" fg:w="1"/><text x="3.5594%" y="1311.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.19%)</title><rect x="3.3333%" y="1301" width="0.1918%" height="15" fill="rgb(206,91,31)" fg:x="139" fg:w="8"/><text x="3.5833%" y="1311.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.12%)</title><rect x="3.4053%" y="1285" width="0.1199%" height="15" fill="rgb(211,154,13)" fg:x="142" fg:w="5"/><text x="3.6553%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.05%)</title><rect x="3.5252%" y="1301" width="0.0480%" height="15" fill="rgb(225,148,7)" fg:x="147" fg:w="2"/><text x="3.7752%" y="1311.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::executor_graph::ScheduleQueue&gt; (19 samples, 0.46%)</title><rect x="3.1655%" y="1317" width="0.4556%" height="15" fill="rgb(220,160,43)" fg:x="132" fg:w="19"/><text x="3.4155%" y="1327.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.05%)</title><rect x="3.5731%" y="1301" width="0.0480%" height="15" fill="rgb(213,52,39)" fg:x="149" fg:w="2"/><text x="3.8231%" y="1311.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::event (21 samples, 0.50%)</title><rect x="3.6451%" y="1301" width="0.5036%" height="15" fill="rgb(243,137,7)" fg:x="152" fg:w="21"/><text x="3.8951%" y="1311.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_compact::TransformCompact&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::event (4 samples, 0.10%)</title><rect x="4.1487%" y="1301" width="0.0959%" height="15" fill="rgb(230,79,13)" fg:x="173" fg:w="4"/><text x="4.3987%" y="1311.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::transform_ie_join::TransformRangeJoinLeft as common_pipeline_core::processors::processor::Processor&gt;::event (11 samples, 0.26%)</title><rect x="4.2446%" y="1301" width="0.2638%" height="15" fill="rgb(247,105,23)" fg:x="177" fg:w="11"/><text x="4.4946%" y="1311.50"></text></g><g><title>databend-query`DYLD-STUB$$pthread_mutex_unlock (2 samples, 0.05%)</title><rect x="4.5084%" y="1301" width="0.0480%" height="15" fill="rgb(223,179,41)" fg:x="188" fg:w="2"/><text x="4.7584%" y="1311.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="4.5564%" y="1301" width="0.0240%" height="15" fill="rgb(218,9,34)" fg:x="190" fg:w="1"/><text x="4.8064%" y="1311.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (6 samples, 0.14%)</title><rect x="4.5803%" y="1301" width="0.1439%" height="15" fill="rgb(222,106,8)" fg:x="191" fg:w="6"/><text x="4.8303%" y="1311.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="4.7242%" y="1301" width="0.0240%" height="15" fill="rgb(211,220,0)" fg:x="197" fg:w="1"/><text x="4.9742%" y="1311.50"></text></g><g><title>databend-query`common_pipeline_core::processors::port_trigger::DirectedEdge::get_target (1 samples, 0.02%)</title><rect x="4.7482%" y="1301" width="0.0240%" height="15" fill="rgb(229,52,16)" fg:x="198" fg:w="1"/><text x="4.9982%" y="1311.50"></text></g><g><title>databend-query`common_pipeline_core::processors::port_trigger::UpdateList::trigger (1 samples, 0.02%)</title><rect x="4.7722%" y="1301" width="0.0240%" height="15" fill="rgb(212,155,18)" fg:x="199" fg:w="1"/><text x="5.0222%" y="1311.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt;::pull_data (6 samples, 0.14%)</title><rect x="4.7962%" y="1301" width="0.1439%" height="15" fill="rgb(242,21,14)" fg:x="200" fg:w="6"/><text x="5.0462%" y="1311.50"></text></g><g><title>databend-query`&lt;common_pipeline_core::processors::resize_processor::ResizeProcessor as common_pipeline_core::processors::processor::Processor&gt;::event (1 samples, 0.02%)</title><rect x="5.8993%" y="1285" width="0.0240%" height="15" fill="rgb(222,19,48)" fg:x="246" fg:w="1"/><text x="6.1493%" y="1295.50"></text></g><g><title>databend-query`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="7.2662%" y="1269" width="0.0240%" height="15" fill="rgb(232,45,27)" fg:x="303" fg:w="1"/><text x="7.5162%" y="1279.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (1 samples, 0.02%)</title><rect x="7.3141%" y="1253" width="0.0240%" height="15" fill="rgb(249,103,42)" fg:x="305" fg:w="1"/><text x="7.5641%" y="1263.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="7.3381%" y="1253" width="0.0480%" height="15" fill="rgb(246,81,33)" fg:x="306" fg:w="2"/><text x="7.5881%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.14%)</title><rect x="7.4580%" y="1221" width="0.1439%" height="15" fill="rgb(252,33,42)" fg:x="311" fg:w="6"/><text x="7.7080%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="7.5060%" y="1205" width="0.0959%" height="15" fill="rgb(209,212,41)" fg:x="313" fg:w="4"/><text x="7.7560%" y="1215.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::event (71 samples, 1.70%)</title><rect x="5.9233%" y="1285" width="1.7026%" height="15" fill="rgb(207,154,6)" fg:x="247" fg:w="71"/><text x="6.1733%" y="1295.50"></text></g><g><title>databend-query`__rust_alloc (14 samples, 0.34%)</title><rect x="7.2902%" y="1269" width="0.3357%" height="15" fill="rgb(223,64,47)" fg:x="304" fg:w="14"/><text x="7.5402%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.24%)</title><rect x="7.3861%" y="1253" width="0.2398%" height="15" fill="rgb(211,161,38)" fg:x="308" fg:w="10"/><text x="7.6361%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.17%)</title><rect x="7.4580%" y="1237" width="0.1679%" height="15" fill="rgb(219,138,40)" fg:x="311" fg:w="7"/><text x="7.7080%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="7.6019%" y="1221" width="0.0240%" height="15" fill="rgb(241,228,46)" fg:x="317" fg:w="1"/><text x="7.8519%" y="1231.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::event (2 samples, 0.05%)</title><rect x="7.6259%" y="1285" width="0.0480%" height="15" fill="rgb(223,209,38)" fg:x="318" fg:w="2"/><text x="7.8759%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="8.0336%" y="1269" width="0.0719%" height="15" fill="rgb(236,164,45)" fg:x="335" fg:w="3"/><text x="8.2836%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="8.0576%" y="1253" width="0.0480%" height="15" fill="rgb(231,15,5)" fg:x="336" fg:w="2"/><text x="8.3076%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.05%)</title><rect x="8.1055%" y="1269" width="0.0480%" height="15" fill="rgb(252,35,15)" fg:x="338" fg:w="2"/><text x="8.3555%" y="1279.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_compact::TransformCompact&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::event (21 samples, 0.50%)</title><rect x="7.6739%" y="1285" width="0.5036%" height="15" fill="rgb(248,181,18)" fg:x="320" fg:w="21"/><text x="7.9239%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="8.1535%" y="1269" width="0.0240%" height="15" fill="rgb(233,39,42)" fg:x="340" fg:w="1"/><text x="8.4035%" y="1279.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_multi_sort_merge::MultiSortMergeProcessor&lt;R&gt; as common_pipeline_core::processors::processor::Processor&gt;::event (16 samples, 0.38%)</title><rect x="8.1775%" y="1285" width="0.3837%" height="15" fill="rgb(238,110,33)" fg:x="341" fg:w="16"/><text x="8.4275%" y="1295.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform_multi_sort_merge::MultiSortMergeProcessor&lt;R&gt;::get_data_blocks (15 samples, 0.36%)</title><rect x="8.2014%" y="1269" width="0.3597%" height="15" fill="rgb(233,195,10)" fg:x="342" fg:w="15"/><text x="8.4514%" y="1279.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::operations::read::parquet_data_source_deserializer::DeserializeDataTransform as common_pipeline_core::processors::processor::Processor&gt;::event (2 samples, 0.05%)</title><rect x="8.5612%" y="1285" width="0.0480%" height="15" fill="rgb(254,105,3)" fg:x="357" fg:w="2"/><text x="8.8112%" y="1295.50"></text></g><g><title>databend-query`common_storages_fuse::io::read::block::decompressor::UncompressedBuffer::clear (2 samples, 0.05%)</title><rect x="8.5612%" y="1269" width="0.0480%" height="15" fill="rgb(221,225,9)" fg:x="357" fg:w="2"/><text x="8.8112%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.05%)</title><rect x="8.5612%" y="1253" width="0.0480%" height="15" fill="rgb(224,227,45)" fg:x="357" fg:w="2"/><text x="8.8112%" y="1263.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="8.5612%" y="1237" width="0.0480%" height="15" fill="rgb(229,198,43)" fg:x="357" fg:w="2"/><text x="8.8112%" y="1247.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::transform_partition_bucket::TransformPartitionBucket&lt;Method,V&gt; as common_pipeline_core::processors::processor::Processor&gt;::event (1 samples, 0.02%)</title><rect x="8.6091%" y="1285" width="0.0240%" height="15" fill="rgb(206,209,35)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1295.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::aggregator::transform_partition_bucket::TransformPartitionBucket&lt;Method,V&gt;::add_bucket (1 samples, 0.02%)</title><rect x="8.6091%" y="1269" width="0.0240%" height="15" fill="rgb(245,195,53)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1279.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="8.6091%" y="1253" width="0.0240%" height="15" fill="rgb(240,92,26)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1263.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="8.6091%" y="1237" width="0.0240%" height="15" fill="rgb(207,40,23)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1247.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="8.6091%" y="1221" width="0.0240%" height="15" fill="rgb(223,111,35)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1231.50"></text></g><g><title>databend-query`__rust_realloc (1 samples, 0.02%)</title><rect x="8.6091%" y="1205" width="0.0240%" height="15" fill="rgb(229,147,28)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1215.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (1 samples, 0.02%)</title><rect x="8.6091%" y="1189" width="0.0240%" height="15" fill="rgb(211,29,28)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1199.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (1 samples, 0.02%)</title><rect x="8.6091%" y="1173" width="0.0240%" height="15" fill="rgb(228,72,33)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="8.6091%" y="1157" width="0.0240%" height="15" fill="rgb(205,214,31)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="8.6091%" y="1141" width="0.0240%" height="15" fill="rgb(224,111,15)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="8.6091%" y="1125" width="0.0240%" height="15" fill="rgb(253,21,26)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="8.6091%" y="1109" width="0.0240%" height="15" fill="rgb(245,139,43)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="8.6091%" y="1093" width="0.0240%" height="15" fill="rgb(252,170,7)" fg:x="359" fg:w="1"/><text x="8.8591%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="9.1607%" y="1237" width="0.0240%" height="15" fill="rgb(231,118,14)" fg:x="382" fg:w="1"/><text x="9.4107%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (5 samples, 0.12%)</title><rect x="9.1127%" y="1269" width="0.1199%" height="15" fill="rgb(238,83,0)" fg:x="380" fg:w="5"/><text x="9.3627%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.12%)</title><rect x="9.1127%" y="1253" width="0.1199%" height="15" fill="rgb(221,39,39)" fg:x="380" fg:w="5"/><text x="9.3627%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="9.1847%" y="1237" width="0.0480%" height="15" fill="rgb(222,119,46)" fg:x="383" fg:w="2"/><text x="9.4347%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="9.1847%" y="1221" width="0.0480%" height="15" fill="rgb(222,165,49)" fg:x="383" fg:w="2"/><text x="9.4347%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="9.2086%" y="1205" width="0.0240%" height="15" fill="rgb(219,113,52)" fg:x="384" fg:w="1"/><text x="9.4586%" y="1215.50"></text></g><g><title>databend-query`common_expression::values::ColumnBuilder::push (1 samples, 0.02%)</title><rect x="9.2326%" y="1253" width="0.0240%" height="15" fill="rgb(214,7,15)" fg:x="385" fg:w="1"/><text x="9.4826%" y="1263.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::transform_ie_join::TransformRangeJoinLeft as common_pipeline_core::processors::processor::Processor&gt;::event (27 samples, 0.65%)</title><rect x="8.6331%" y="1285" width="0.6475%" height="15" fill="rgb(235,32,4)" fg:x="360" fg:w="27"/><text x="8.8831%" y="1295.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::range_join::range_join_state::RangeJoinState::left_detach (2 samples, 0.05%)</title><rect x="9.2326%" y="1269" width="0.0480%" height="15" fill="rgb(238,90,54)" fg:x="385" fg:w="2"/><text x="9.4826%" y="1279.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::range_join::range_join_state::RangeJoinState::partition (1 samples, 0.02%)</title><rect x="9.2566%" y="1253" width="0.0240%" height="15" fill="rgb(213,208,19)" fg:x="386" fg:w="1"/><text x="9.5066%" y="1263.50"></text></g><g><title>databend-query`common_expression::values::ColumnBuilder::push (1 samples, 0.02%)</title><rect x="9.2566%" y="1237" width="0.0240%" height="15" fill="rgb(233,156,4)" fg:x="386" fg:w="1"/><text x="9.5066%" y="1247.50"></text></g><g><title>databend-query`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.02%)</title><rect x="9.2806%" y="1285" width="0.0240%" height="15" fill="rgb(207,194,5)" fg:x="387" fg:w="1"/><text x="9.5306%" y="1295.50"></text></g><g><title>databend-query`__rust_dealloc (2 samples, 0.05%)</title><rect x="9.3046%" y="1285" width="0.0480%" height="15" fill="rgb(206,111,30)" fg:x="388" fg:w="2"/><text x="9.5546%" y="1295.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (3 samples, 0.07%)</title><rect x="9.7842%" y="1189" width="0.0719%" height="15" fill="rgb(243,70,54)" fg:x="408" fg:w="3"/><text x="10.0342%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.10%)</title><rect x="9.8561%" y="1189" width="0.0959%" height="15" fill="rgb(242,28,8)" fg:x="411" fg:w="4"/><text x="10.1061%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.07%)</title><rect x="10.0000%" y="1173" width="0.0719%" height="15" fill="rgb(219,106,18)" fg:x="417" fg:w="3"/><text x="10.2500%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.24%)</title><rect x="10.0719%" y="1157" width="0.2398%" height="15" fill="rgb(244,222,10)" fg:x="420" fg:w="10"/><text x="10.3219%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="10.2158%" y="1141" width="0.0959%" height="15" fill="rgb(236,179,52)" fg:x="426" fg:w="4"/><text x="10.4658%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.38%)</title><rect x="9.9520%" y="1189" width="0.3837%" height="15" fill="rgb(213,23,39)" fg:x="415" fg:w="16"/><text x="10.2020%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.26%)</title><rect x="10.0719%" y="1173" width="0.2638%" height="15" fill="rgb(238,48,10)" fg:x="420" fg:w="11"/><text x="10.3219%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="10.3118%" y="1157" width="0.0240%" height="15" fill="rgb(251,196,23)" fg:x="430" fg:w="1"/><text x="10.5618%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="10.3357%" y="1189" width="0.0240%" height="15" fill="rgb(250,152,24)" fg:x="431" fg:w="1"/><text x="10.5857%" y="1199.50"></text></g><g><title>databend-query`__rust_alloc (27 samples, 0.65%)</title><rect x="9.7362%" y="1205" width="0.6475%" height="15" fill="rgb(209,150,17)" fg:x="406" fg:w="27"/><text x="9.9862%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="10.3597%" y="1189" width="0.0240%" height="15" fill="rgb(234,202,34)" fg:x="432" fg:w="1"/><text x="10.6097%" y="1199.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (44 samples, 1.06%)</title><rect x="9.3525%" y="1285" width="1.0552%" height="15" fill="rgb(253,148,53)" fg:x="390" fg:w="44"/><text x="9.6025%" y="1295.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (41 samples, 0.98%)</title><rect x="9.4245%" y="1269" width="0.9832%" height="15" fill="rgb(218,129,16)" fg:x="393" fg:w="41"/><text x="9.6745%" y="1279.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (36 samples, 0.86%)</title><rect x="9.5444%" y="1253" width="0.8633%" height="15" fill="rgb(216,85,19)" fg:x="398" fg:w="36"/><text x="9.7944%" y="1263.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (31 samples, 0.74%)</title><rect x="9.6643%" y="1237" width="0.7434%" height="15" fill="rgb(235,228,7)" fg:x="403" fg:w="31"/><text x="9.9143%" y="1247.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (29 samples, 0.70%)</title><rect x="9.7122%" y="1221" width="0.6954%" height="15" fill="rgb(245,175,0)" fg:x="405" fg:w="29"/><text x="9.9622%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="10.3837%" y="1205" width="0.0240%" height="15" fill="rgb(208,168,36)" fg:x="433" fg:w="1"/><text x="10.6337%" y="1215.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_front (2 samples, 0.05%)</title><rect x="10.4077%" y="1285" width="0.0480%" height="15" fill="rgb(246,171,24)" fg:x="434" fg:w="2"/><text x="10.6577%" y="1295.50"></text></g><g><title>databend-query`common_pipeline_core::processors::port_trigger::DirectedEdge::get_target (11 samples, 0.26%)</title><rect x="10.4556%" y="1285" width="0.2638%" height="15" fill="rgb(215,142,24)" fg:x="436" fg:w="11"/><text x="10.7056%" y="1295.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="11.0791%" y="1173" width="0.0240%" height="15" fill="rgb(250,187,7)" fg:x="462" fg:w="1"/><text x="11.3291%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.19%)</title><rect x="11.2710%" y="1125" width="0.1918%" height="15" fill="rgb(228,66,33)" fg:x="470" fg:w="8"/><text x="11.5210%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.46%)</title><rect x="11.1751%" y="1141" width="0.4556%" height="15" fill="rgb(234,215,21)" fg:x="466" fg:w="19"/><text x="11.4251%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.17%)</title><rect x="11.4628%" y="1125" width="0.1679%" height="15" fill="rgb(222,191,20)" fg:x="478" fg:w="7"/><text x="11.7128%" y="1135.50"></text></g><g><title>databend-query`__rust_alloc (25 samples, 0.60%)</title><rect x="11.0552%" y="1189" width="0.5995%" height="15" fill="rgb(245,79,54)" fg:x="461" fg:w="25"/><text x="11.3052%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.55%)</title><rect x="11.1031%" y="1173" width="0.5516%" height="15" fill="rgb(240,10,37)" fg:x="463" fg:w="23"/><text x="11.3531%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.53%)</title><rect x="11.1271%" y="1157" width="0.5276%" height="15" fill="rgb(214,192,32)" fg:x="464" fg:w="22"/><text x="11.3771%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="11.6307%" y="1141" width="0.0240%" height="15" fill="rgb(209,36,54)" fg:x="485" fg:w="1"/><text x="11.8807%" y="1151.50"></text></g><g><title>databend-query`common_pipeline_core::processors::port_trigger::UpdateList::trigger (40 samples, 0.96%)</title><rect x="10.7194%" y="1285" width="0.9592%" height="15" fill="rgb(220,10,11)" fg:x="447" fg:w="40"/><text x="10.9694%" y="1295.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_front (30 samples, 0.72%)</title><rect x="10.9592%" y="1269" width="0.7194%" height="15" fill="rgb(221,106,17)" fg:x="457" fg:w="30"/><text x="11.2092%" y="1279.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (29 samples, 0.70%)</title><rect x="10.9832%" y="1253" width="0.6954%" height="15" fill="rgb(251,142,44)" fg:x="458" fg:w="29"/><text x="11.2332%" y="1263.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (29 samples, 0.70%)</title><rect x="10.9832%" y="1237" width="0.6954%" height="15" fill="rgb(238,13,15)" fg:x="458" fg:w="29"/><text x="11.2332%" y="1247.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (28 samples, 0.67%)</title><rect x="11.0072%" y="1221" width="0.6715%" height="15" fill="rgb(208,107,27)" fg:x="459" fg:w="28"/><text x="11.2572%" y="1231.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (28 samples, 0.67%)</title><rect x="11.0072%" y="1205" width="0.6715%" height="15" fill="rgb(205,136,37)" fg:x="459" fg:w="28"/><text x="11.2572%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="11.6547%" y="1189" width="0.0240%" height="15" fill="rgb(250,205,27)" fg:x="486" fg:w="1"/><text x="11.9047%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="13.3094%" y="1269" width="0.0480%" height="15" fill="rgb(210,80,43)" fg:x="555" fg:w="2"/><text x="13.5594%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="13.3573%" y="1269" width="0.0480%" height="15" fill="rgb(247,160,36)" fg:x="557" fg:w="2"/><text x="13.6073%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="13.4053%" y="1269" width="0.0240%" height="15" fill="rgb(234,13,49)" fg:x="559" fg:w="1"/><text x="13.6553%" y="1279.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt;::pull_data (74 samples, 1.77%)</title><rect x="11.6787%" y="1285" width="1.7746%" height="15" fill="rgb(234,122,0)" fg:x="487" fg:w="74"/><text x="11.9287%" y="1295.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="13.4293%" y="1269" width="0.0240%" height="15" fill="rgb(207,146,38)" fg:x="560" fg:w="1"/><text x="13.6793%" y="1279.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform_multi_sort_merge::MultiSortMergeProcessor&lt;R&gt;::get_data_blocks (1 samples, 0.02%)</title><rect x="13.4532%" y="1285" width="0.0240%" height="15" fill="rgb(207,177,25)" fg:x="561" fg:w="1"/><text x="13.7032%" y="1295.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;databend_query::pipelines::executor::executor_graph::State&gt;&gt; (2 samples, 0.05%)</title><rect x="13.4772%" y="1285" width="0.0480%" height="15" fill="rgb(211,178,42)" fg:x="562" fg:w="2"/><text x="13.7272%" y="1295.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.02%)</title><rect x="13.8609%" y="1269" width="0.0240%" height="15" fill="rgb(230,69,54)" fg:x="578" fg:w="1"/><text x="14.1109%" y="1279.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.02%)</title><rect x="13.8609%" y="1253" width="0.0240%" height="15" fill="rgb(214,135,41)" fg:x="578" fg:w="1"/><text x="14.1109%" y="1263.50"></text></g><g><title>databend-query`std::sync::mutex::Mutex&lt;T&gt;::lock (32 samples, 0.77%)</title><rect x="13.5252%" y="1285" width="0.7674%" height="15" fill="rgb(237,67,25)" fg:x="564" fg:w="32"/><text x="13.7752%" y="1295.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (17 samples, 0.41%)</title><rect x="13.8849%" y="1269" width="0.4077%" height="15" fill="rgb(222,189,50)" fg:x="579" fg:w="17"/><text x="14.1349%" y="1279.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.14%)</title><rect x="14.2926%" y="1285" width="0.1439%" height="15" fill="rgb(245,148,34)" fg:x="596" fg:w="6"/><text x="14.5426%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.41%)</title><rect x="14.4365%" y="1285" width="0.4077%" height="15" fill="rgb(222,29,6)" fg:x="602" fg:w="17"/><text x="14.6865%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.29%)</title><rect x="14.5564%" y="1269" width="0.2878%" height="15" fill="rgb(221,189,43)" fg:x="607" fg:w="12"/><text x="14.8064%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.05%)</title><rect x="14.8441%" y="1285" width="0.0480%" height="15" fill="rgb(207,36,27)" fg:x="619" fg:w="2"/><text x="15.0941%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.17%)</title><rect x="14.8921%" y="1285" width="0.1679%" height="15" fill="rgb(217,90,24)" fg:x="621" fg:w="7"/><text x="15.1421%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.05%)</title><rect x="15.0600%" y="1285" width="0.0480%" height="15" fill="rgb(224,66,35)" fg:x="628" fg:w="2"/><text x="15.3100%" y="1295.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (8 samples, 0.19%)</title><rect x="15.1079%" y="1285" width="0.1918%" height="15" fill="rgb(221,13,50)" fg:x="630" fg:w="8"/><text x="15.3579%" y="1295.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ExecutingGraph::schedule_queue (439 samples, 10.53%)</title><rect x="4.9400%" y="1301" width="10.5276%" height="15" fill="rgb(236,68,49)" fg:x="206" fg:w="439"/><text x="5.1900%" y="1311.50">databend-query`..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (7 samples, 0.17%)</title><rect x="15.2998%" y="1285" width="0.1679%" height="15" fill="rgb(229,146,28)" fg:x="638" fg:w="7"/><text x="15.5498%" y="1295.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ScheduleQueue::with_capacity (2 samples, 0.05%)</title><rect x="15.4676%" y="1301" width="0.0480%" height="15" fill="rgb(225,31,38)" fg:x="645" fg:w="2"/><text x="15.7176%" y="1311.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.05%)</title><rect x="15.4676%" y="1285" width="0.0480%" height="15" fill="rgb(250,208,3)" fg:x="645" fg:w="2"/><text x="15.7176%" y="1295.50"></text></g><g><title>databend-query`std::sync::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.07%)</title><rect x="15.5156%" y="1301" width="0.0719%" height="15" fill="rgb(246,54,23)" fg:x="647" fg:w="3"/><text x="15.7656%" y="1311.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.05%)</title><rect x="15.5875%" y="1301" width="0.0480%" height="15" fill="rgb(243,76,11)" fg:x="650" fg:w="2"/><text x="15.8375%" y="1311.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.14%)</title><rect x="15.6355%" y="1301" width="0.1439%" height="15" fill="rgb(245,21,50)" fg:x="652" fg:w="6"/><text x="15.8855%" y="1311.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.10%)</title><rect x="15.7794%" y="1301" width="0.0959%" height="15" fill="rgb(228,9,43)" fg:x="658" fg:w="4"/><text x="16.0294%" y="1311.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::RunningGraph::schedule_queue (520 samples, 12.47%)</title><rect x="3.6211%" y="1317" width="12.4700%" height="15" fill="rgb(208,100,47)" fg:x="151" fg:w="520"/><text x="3.8711%" y="1327.50">databend-query`data..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.22%)</title><rect x="15.8753%" y="1301" width="0.2158%" height="15" fill="rgb(232,26,8)" fg:x="662" fg:w="9"/><text x="16.1253%" y="1311.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ScheduleQueue::schedule (1 samples, 0.02%)</title><rect x="16.0911%" y="1317" width="0.0240%" height="15" fill="rgb(216,166,38)" fg:x="671" fg:w="1"/><text x="16.3411%" y="1327.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ScheduleQueue::schedule_tail (1 samples, 0.02%)</title><rect x="16.0911%" y="1301" width="0.0240%" height="15" fill="rgb(251,202,51)" fg:x="671" fg:w="1"/><text x="16.3411%" y="1311.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_tasks::ExecutorTasksQueue::push_tasks (1 samples, 0.02%)</title><rect x="16.0911%" y="1285" width="0.0240%" height="15" fill="rgb(254,216,34)" fg:x="671" fg:w="1"/><text x="16.3411%" y="1295.50"></text></g><g><title>databend-query`parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.02%)</title><rect x="16.0911%" y="1269" width="0.0240%" height="15" fill="rgb(251,32,27)" fg:x="671" fg:w="1"/><text x="16.3411%" y="1279.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.02%)</title><rect x="16.0911%" y="1253" width="0.0240%" height="15" fill="rgb(208,127,28)" fg:x="671" fg:w="1"/><text x="16.3411%" y="1263.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_tasks::ExecutorTasksQueue::steal_task_to_context (2 samples, 0.05%)</title><rect x="16.1151%" y="1317" width="0.0480%" height="15" fill="rgb(224,137,22)" fg:x="672" fg:w="2"/><text x="16.3651%" y="1327.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_condvar::WorkersCondvar::wait (2 samples, 0.05%)</title><rect x="16.1151%" y="1301" width="0.0480%" height="15" fill="rgb(254,70,32)" fg:x="672" fg:w="2"/><text x="16.3651%" y="1311.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.05%)</title><rect x="16.1151%" y="1285" width="0.0480%" height="15" fill="rgb(229,75,37)" fg:x="672" fg:w="2"/><text x="16.3651%" y="1295.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.05%)</title><rect x="16.1151%" y="1269" width="0.0480%" height="15" fill="rgb(252,64,23)" fg:x="672" fg:w="2"/><text x="16.3651%" y="1279.50"></text></g><g><title>databend-query`&lt;opendal::raw::ops::OpRead as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="16.2350%" y="1109" width="0.0480%" height="15" fill="rgb(232,162,48)" fg:x="677" fg:w="2"/><text x="16.4850%" y="1119.50"></text></g><g><title>databend-query`&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (3 samples, 0.07%)</title><rect x="16.2350%" y="1221" width="0.0719%" height="15" fill="rgb(246,160,12)" fg:x="677" fg:w="3"/><text x="16.4850%" y="1231.50"></text></g><g><title>databend-query`&lt;common_storage::metrics::StorageMetricsAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (3 samples, 0.07%)</title><rect x="16.2350%" y="1205" width="0.0719%" height="15" fill="rgb(247,166,0)" fg:x="677" fg:w="3"/><text x="16.4850%" y="1215.50"></text></g><g><title>databend-query`&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (3 samples, 0.07%)</title><rect x="16.2350%" y="1189" width="0.0719%" height="15" fill="rgb(249,219,21)" fg:x="677" fg:w="3"/><text x="16.4850%" y="1199.50"></text></g><g><title>databend-query`&lt;opendal::layers::tracing::TracingAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (3 samples, 0.07%)</title><rect x="16.2350%" y="1173" width="0.0719%" height="15" fill="rgb(205,209,3)" fg:x="677" fg:w="3"/><text x="16.4850%" y="1183.50"></text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (3 samples, 0.07%)</title><rect x="16.2350%" y="1157" width="0.0719%" height="15" fill="rgb(243,44,1)" fg:x="677" fg:w="3"/><text x="16.4850%" y="1167.50"></text></g><g><title>databend-query`&lt;opendal::layers::metrics::MetricsAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (3 samples, 0.07%)</title><rect x="16.2350%" y="1141" width="0.0719%" height="15" fill="rgb(206,159,16)" fg:x="677" fg:w="3"/><text x="16.4850%" y="1151.50"></text></g><g><title>databend-query`&lt;opendal::layers::retry::RetryAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (3 samples, 0.07%)</title><rect x="16.2350%" y="1125" width="0.0719%" height="15" fill="rgb(244,77,30)" fg:x="677" fg:w="3"/><text x="16.4850%" y="1135.50"></text></g><g><title>databend-query`backon::blocking_retry::BlockingRetry&lt;B,T,E,F&gt;::call (1 samples, 0.02%)</title><rect x="16.2830%" y="1109" width="0.0240%" height="15" fill="rgb(218,69,12)" fg:x="679" fg:w="1"/><text x="16.5330%" y="1119.50"></text></g><g><title>databend-query`opendal::layers::complete::CompleteReaderAccessor&lt;A&gt;::complete_blocking_reader (1 samples, 0.02%)</title><rect x="16.2830%" y="1093" width="0.0240%" height="15" fill="rgb(212,87,7)" fg:x="679" fg:w="1"/><text x="16.5330%" y="1103.50"></text></g><g><title>databend-query`&lt;opendal::layers::error_context::ErrorContextAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (1 samples, 0.02%)</title><rect x="16.2830%" y="1077" width="0.0240%" height="15" fill="rgb(245,114,25)" fg:x="679" fg:w="1"/><text x="16.5330%" y="1087.50"></text></g><g><title>databend-query`&lt;opendal::services::fs::backend::FsBackend as opendal::raw::accessor::Accessor&gt;::blocking_read (1 samples, 0.02%)</title><rect x="16.2830%" y="1061" width="0.0240%" height="15" fill="rgb(210,61,42)" fg:x="679" fg:w="1"/><text x="16.5330%" y="1071.50"></text></g><g><title>databend-query`std::fs::OpenOptions::open (1 samples, 0.02%)</title><rect x="16.2830%" y="1045" width="0.0240%" height="15" fill="rgb(211,52,33)" fg:x="679" fg:w="1"/><text x="16.5330%" y="1055.50"></text></g><g><title>databend-query`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="16.2830%" y="1029" width="0.0240%" height="15" fill="rgb(234,58,33)" fg:x="679" fg:w="1"/><text x="16.5330%" y="1039.50"></text></g><g><title>databend-query`std::sys::unix::fs::File::open_c (1 samples, 0.02%)</title><rect x="16.2830%" y="1013" width="0.0240%" height="15" fill="rgb(220,115,36)" fg:x="679" fg:w="1"/><text x="16.5330%" y="1023.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="16.2830%" y="997" width="0.0240%" height="15" fill="rgb(243,153,54)" fg:x="679" fg:w="1"/><text x="16.5330%" y="1007.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt; (2 samples, 0.05%)</title><rect x="16.3070%" y="1221" width="0.0480%" height="15" fill="rgb(251,47,18)" fg:x="680" fg:w="2"/><text x="16.5570%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_storage::metrics::StorageMetricsWrapper&lt;alloc::boxed::Box&lt;dyn opendal::raw::oio::read::BlockingRead&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="16.3070%" y="1205" width="0.0480%" height="15" fill="rgb(242,102,42)" fg:x="680" fg:w="2"/><text x="16.5570%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;opendal::layers::metrics::MetricWrapper&lt;opendal::layers::retry::RetryWrapper&lt;opendal::layers::complete::CompleteReader&lt;opendal::layers::error_context::ErrorContextAccessor&lt;opendal::services::fs::backend::FsBackend&gt;,opendal::layers::error_context::ErrorContextWrapper&lt;opendal::raw::oio::into_blocking_reader::from_fd::FdReader&lt;std::fs::File&gt;&gt;&gt;&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="16.3070%" y="1189" width="0.0480%" height="15" fill="rgb(234,31,38)" fg:x="680" fg:w="2"/><text x="16.5570%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;opendal::layers::retry::RetryWrapper&lt;opendal::layers::complete::CompleteReader&lt;opendal::layers::error_context::ErrorContextAccessor&lt;opendal::services::fs::backend::FsBackend&gt;,opendal::layers::error_context::ErrorContextWrapper&lt;opendal::raw::oio::into_blocking_reader::from_fd::FdReader&lt;std::fs::File&gt;&gt;&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="16.3070%" y="1173" width="0.0480%" height="15" fill="rgb(221,117,51)" fg:x="680" fg:w="2"/><text x="16.5570%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.05%)</title><rect x="16.3070%" y="1157" width="0.0480%" height="15" fill="rgb(212,20,18)" fg:x="680" fg:w="2"/><text x="16.5570%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="16.3070%" y="1141" width="0.0480%" height="15" fill="rgb(245,133,36)" fg:x="680" fg:w="2"/><text x="16.5570%" y="1151.50"></text></g><g><title>databend-query`std::io::default_read_buf (12 samples, 0.29%)</title><rect x="16.3549%" y="1205" width="0.2878%" height="15" fill="rgb(212,6,19)" fg:x="682" fg:w="12"/><text x="16.6049%" y="1215.50"></text></g><g><title>databend-query`&lt;opendal::layers::tracing::TracingWrapper&lt;R&gt; as opendal::raw::oio::read::BlockingRead&gt;::read (12 samples, 0.29%)</title><rect x="16.3549%" y="1189" width="0.2878%" height="15" fill="rgb(218,1,36)" fg:x="682" fg:w="12"/><text x="16.6049%" y="1199.50"></text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingReader&lt;R&gt; as opendal::raw::oio::read::BlockingRead&gt;::read (12 samples, 0.29%)</title><rect x="16.3549%" y="1173" width="0.2878%" height="15" fill="rgb(246,84,54)" fg:x="682" fg:w="12"/><text x="16.6049%" y="1183.50"></text></g><g><title>databend-query`&lt;opendal::layers::metrics::MetricWrapper&lt;R&gt; as opendal::raw::oio::read::BlockingRead&gt;::read (12 samples, 0.29%)</title><rect x="16.3549%" y="1157" width="0.2878%" height="15" fill="rgb(242,110,6)" fg:x="682" fg:w="12"/><text x="16.6049%" y="1167.50"></text></g><g><title>databend-query`&lt;opendal::layers::retry::RetryWrapper&lt;R&gt; as opendal::raw::oio::read::BlockingRead&gt;::read (12 samples, 0.29%)</title><rect x="16.3549%" y="1141" width="0.2878%" height="15" fill="rgb(214,47,5)" fg:x="682" fg:w="12"/><text x="16.6049%" y="1151.50"></text></g><g><title>databend-query`backon::blocking_retry::BlockingRetry&lt;B,T,E,F&gt;::call (12 samples, 0.29%)</title><rect x="16.3549%" y="1125" width="0.2878%" height="15" fill="rgb(218,159,25)" fg:x="682" fg:w="12"/><text x="16.6049%" y="1135.50"></text></g><g><title>databend-query`&lt;opendal::layers::error_context::ErrorContextWrapper&lt;T&gt; as opendal::raw::oio::read::BlockingRead&gt;::read (12 samples, 0.29%)</title><rect x="16.3549%" y="1109" width="0.2878%" height="15" fill="rgb(215,211,28)" fg:x="682" fg:w="12"/><text x="16.6049%" y="1119.50"></text></g><g><title>databend-query`&lt;opendal::raw::oio::into_blocking_reader::from_fd::FdReader&lt;R&gt; as opendal::raw::oio::read::BlockingRead&gt;::read (12 samples, 0.29%)</title><rect x="16.3549%" y="1093" width="0.2878%" height="15" fill="rgb(238,59,32)" fg:x="682" fg:w="12"/><text x="16.6049%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`read (12 samples, 0.29%)</title><rect x="16.3549%" y="1077" width="0.2878%" height="15" fill="rgb(226,82,3)" fg:x="682" fg:w="12"/><text x="16.6049%" y="1087.50"></text></g><g><title>databend-query`&lt;common_pipeline_sources::sync_source::SyncSourcer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (35 samples, 0.84%)</title><rect x="16.2350%" y="1301" width="0.8393%" height="15" fill="rgb(240,164,32)" fg:x="677" fg:w="35"/><text x="16.4850%" y="1311.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::operations::read::parquet_data_source_reader::ReadParquetDataSource&lt;_&gt; as common_pipeline_sources::sync_source::SyncSource&gt;::generate (35 samples, 0.84%)</title><rect x="16.2350%" y="1285" width="0.8393%" height="15" fill="rgb(232,46,7)" fg:x="677" fg:w="35"/><text x="16.4850%" y="1295.50"></text></g><g><title>databend-query`common_storages_fuse::io::read::block::block_reader_merge_io_sync::_&lt;impl common_storages_fuse::io::read::block::block_reader::BlockReader&gt;::sync_read_columns_data_by_merge_io (35 samples, 0.84%)</title><rect x="16.2350%" y="1269" width="0.8393%" height="15" fill="rgb(229,129,53)" fg:x="677" fg:w="35"/><text x="16.4850%" y="1279.50"></text></g><g><title>databend-query`common_storages_fuse::io::read::block::block_reader_merge_io_sync::_&lt;impl common_storages_fuse::io::read::block::block_reader::BlockReader&gt;::sync_merge_io_read (35 samples, 0.84%)</title><rect x="16.2350%" y="1253" width="0.8393%" height="15" fill="rgb(234,188,29)" fg:x="677" fg:w="35"/><text x="16.4850%" y="1263.50"></text></g><g><title>databend-query`opendal::types::operator::blocking_operator::BlockingOperator::range_read (35 samples, 0.84%)</title><rect x="16.2350%" y="1237" width="0.8393%" height="15" fill="rgb(246,141,4)" fg:x="677" fg:w="35"/><text x="16.4850%" y="1247.50"></text></g><g><title>databend-query`std::io::default_read_to_end (30 samples, 0.72%)</title><rect x="16.3549%" y="1221" width="0.7194%" height="15" fill="rgb(229,23,39)" fg:x="682" fg:w="30"/><text x="16.6049%" y="1231.50"></text></g><g><title>libsystem_platform.dylib`__bzero (18 samples, 0.43%)</title><rect x="16.6427%" y="1205" width="0.4317%" height="15" fill="rgb(206,12,3)" fg:x="694" fg:w="18"/><text x="16.8927%" y="1215.50"></text></g><g><title>databend-query`&lt;common_functions::aggregates::adaptors::aggregate_ornull_adaptor::AggregateFunctionOrNullAdaptor as common_functions::aggregates::aggregate_function::AggregateFunction&gt;::merge (1 samples, 0.02%)</title><rect x="17.0743%" y="1285" width="0.0240%" height="15" fill="rgb(252,226,20)" fg:x="712" fg:w="1"/><text x="17.3243%" y="1295.50"></text></g><g><title>databend-query`&lt;common_hashtable::table0::Table0Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.29%)</title><rect x="17.0983%" y="1285" width="0.2878%" height="15" fill="rgb(216,123,35)" fg:x="713" fg:w="12"/><text x="17.3483%" y="1295.50"></text></g><g><title>databend-query`&lt;common_functions::aggregates::aggregate_sum::AggregateSumFunction&lt;State&gt; as common_functions::aggregates::aggregate_function::AggregateFunction&gt;::merge (2 samples, 0.05%)</title><rect x="17.4341%" y="1269" width="0.0480%" height="15" fill="rgb(212,68,40)" fg:x="727" fg:w="2"/><text x="17.6841%" y="1279.50"></text></g><g><title>databend-query`&lt;common_hashtable::hashtable::Hashtable&lt;K,V,A&gt; as common_hashtable::traits::HashtableLike&gt;::insert (5 samples, 0.12%)</title><rect x="17.4820%" y="1269" width="0.1199%" height="15" fill="rgb(254,125,32)" fg:x="729" fg:w="5"/><text x="17.7320%" y="1279.50"></text></g><g><title>databend-query`common_hashtable::table0::Table0&lt;K,V,C,A&gt;::grow (3 samples, 0.07%)</title><rect x="17.5300%" y="1253" width="0.0719%" height="15" fill="rgb(253,97,22)" fg:x="731" fg:w="3"/><text x="17.7800%" y="1263.50"></text></g><g><title>databend-query`&lt;common_hashtable::container::HeapContainer&lt;T,A&gt; as common_hashtable::container::Container&gt;::grow_zeroed (1 samples, 0.02%)</title><rect x="17.5779%" y="1237" width="0.0240%" height="15" fill="rgb(241,101,14)" fg:x="733" fg:w="1"/><text x="17.8279%" y="1247.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow_zeroed (1 samples, 0.02%)</title><rect x="17.5779%" y="1221" width="0.0240%" height="15" fill="rgb(238,103,29)" fg:x="733" fg:w="1"/><text x="17.8279%" y="1231.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (1 samples, 0.02%)</title><rect x="17.5779%" y="1205" width="0.0240%" height="15" fill="rgb(233,195,47)" fg:x="733" fg:w="1"/><text x="17.8279%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="17.5779%" y="1189" width="0.0240%" height="15" fill="rgb(246,218,30)" fg:x="733" fg:w="1"/><text x="17.8279%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="17.5779%" y="1173" width="0.0240%" height="15" fill="rgb(219,145,47)" fg:x="733" fg:w="1"/><text x="17.8279%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="17.5779%" y="1157" width="0.0240%" height="15" fill="rgb(243,12,26)" fg:x="733" fg:w="1"/><text x="17.8279%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.02%)</title><rect x="17.5779%" y="1141" width="0.0240%" height="15" fill="rgb(214,87,16)" fg:x="733" fg:w="1"/><text x="17.8279%" y="1151.50"></text></g><g><title>databend-query`common_functions::aggregates::aggregate_function::AggregateFunction::batch_merge_result (2 samples, 0.05%)</title><rect x="17.6019%" y="1269" width="0.0480%" height="15" fill="rgb(208,99,42)" fg:x="734" fg:w="2"/><text x="17.8519%" y="1279.50"></text></g><g><title>databend-query`&lt;common_functions::aggregates::adaptors::aggregate_ornull_adaptor::AggregateFunctionOrNullAdaptor as common_functions::aggregates::aggregate_function::AggregateFunction&gt;::merge_result (1 samples, 0.02%)</title><rect x="17.6259%" y="1253" width="0.0240%" height="15" fill="rgb(253,99,2)" fg:x="735" fg:w="1"/><text x="17.8759%" y="1263.50"></text></g><g><title>databend-query`&lt;common_functions::aggregates::aggregate_sum::NumberSumState&lt;T,TSum&gt; as common_functions::aggregates::aggregate_sum::SumState&gt;::merge_result (1 samples, 0.02%)</title><rect x="17.6259%" y="1237" width="0.0240%" height="15" fill="rgb(220,168,23)" fg:x="735" fg:w="1"/><text x="17.8759%" y="1247.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::aggregate_cell::HashTableCell&lt;T,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="17.6499%" y="1253" width="0.0240%" height="15" fill="rgb(242,38,24)" fg:x="736" fg:w="1"/><text x="17.8999%" y="1263.50"></text></g><g><title>databend-query`&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="17.6499%" y="1237" width="0.0240%" height="15" fill="rgb(225,182,9)" fg:x="736" fg:w="1"/><text x="17.8999%" y="1247.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::aggregator::aggregate_cell::HashTableCell&lt;common_expression::kernels::group_by_hash::HashMethodFixedKeys&lt;u64&gt;,usize&gt;&gt; (2 samples, 0.05%)</title><rect x="17.6499%" y="1269" width="0.0480%" height="15" fill="rgb(243,178,37)" fg:x="736" fg:w="2"/><text x="17.8999%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="17.6739%" y="1253" width="0.0240%" height="15" fill="rgb(232,139,19)" fg:x="737" fg:w="1"/><text x="17.9239%" y="1263.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="17.6739%" y="1237" width="0.0240%" height="15" fill="rgb(225,201,24)" fg:x="737" fg:w="1"/><text x="17.9239%" y="1247.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="17.6978%" y="1237" width="0.0240%" height="15" fill="rgb(221,47,46)" fg:x="738" fg:w="1"/><text x="17.9478%" y="1247.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::aggregator::aggregate_meta::HashTablePayload&lt;common_expression::kernels::group_by_hash::HashMethodFixedKeys&lt;u64&gt;,usize&gt;&gt; (2 samples, 0.05%)</title><rect x="17.6978%" y="1269" width="0.0480%" height="15" fill="rgb(249,23,13)" fg:x="738" fg:w="2"/><text x="17.9478%" y="1279.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::aggregator::aggregate_cell::HashTableCell&lt;common_expression::kernels::group_by_hash::HashMethodFixedKeys&lt;u64&gt;,usize&gt;&gt; (2 samples, 0.05%)</title><rect x="17.6978%" y="1253" width="0.0480%" height="15" fill="rgb(219,9,5)" fg:x="738" fg:w="2"/><text x="17.9478%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="17.7218%" y="1237" width="0.0240%" height="15" fill="rgb(254,171,16)" fg:x="739" fg:w="1"/><text x="17.9718%" y="1247.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform::BlockMetaTransformer&lt;B,T&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (29 samples, 0.70%)</title><rect x="17.0743%" y="1301" width="0.6954%" height="15" fill="rgb(230,171,20)" fg:x="712" fg:w="29"/><text x="17.3243%" y="1311.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::transform_aggregate_final::TransformFinalAggregate&lt;Method&gt; as common_pipeline_transforms::processors::transforms::transform::BlockMetaTransform&lt;databend_query::pipelines::processors::transforms::aggregator::aggregate_meta::AggregateMeta&lt;Method,usize&gt;&gt;&gt;::transform (16 samples, 0.38%)</title><rect x="17.3861%" y="1285" width="0.3837%" height="15" fill="rgb(210,71,41)" fg:x="725" fg:w="16"/><text x="17.6361%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="17.7458%" y="1269" width="0.0240%" height="15" fill="rgb(206,173,20)" fg:x="740" fg:w="1"/><text x="17.9958%" y="1279.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (2 samples, 0.05%)</title><rect x="18.0576%" y="1189" width="0.0480%" height="15" fill="rgb(233,88,34)" fg:x="753" fg:w="2"/><text x="18.3076%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="18.1055%" y="1189" width="0.0240%" height="15" fill="rgb(223,209,46)" fg:x="755" fg:w="1"/><text x="18.3555%" y="1199.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (9 samples, 0.22%)</title><rect x="17.9856%" y="1237" width="0.2158%" height="15" fill="rgb(250,43,18)" fg:x="750" fg:w="9"/><text x="18.2356%" y="1247.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (6 samples, 0.14%)</title><rect x="18.0576%" y="1221" width="0.1439%" height="15" fill="rgb(208,13,10)" fg:x="753" fg:w="6"/><text x="18.3076%" y="1231.50"></text></g><g><title>databend-query`__rust_alloc (6 samples, 0.14%)</title><rect x="18.0576%" y="1205" width="0.1439%" height="15" fill="rgb(212,200,36)" fg:x="753" fg:w="6"/><text x="18.3076%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="18.1295%" y="1189" width="0.0719%" height="15" fill="rgb(225,90,30)" fg:x="756" fg:w="3"/><text x="18.3795%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="18.1535%" y="1173" width="0.0480%" height="15" fill="rgb(236,182,39)" fg:x="757" fg:w="2"/><text x="18.4035%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="18.1535%" y="1157" width="0.0480%" height="15" fill="rgb(212,144,35)" fg:x="757" fg:w="2"/><text x="18.4035%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="18.1535%" y="1141" width="0.0480%" height="15" fill="rgb(228,63,44)" fg:x="757" fg:w="2"/><text x="18.4035%" y="1151.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="18.2254%" y="1221" width="0.0240%" height="15" fill="rgb(228,109,6)" fg:x="760" fg:w="1"/><text x="18.4754%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="18.2494%" y="1189" width="0.0240%" height="15" fill="rgb(238,117,24)" fg:x="761" fg:w="1"/><text x="18.4994%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.14%)</title><rect x="18.2734%" y="1157" width="0.1439%" height="15" fill="rgb(242,26,26)" fg:x="762" fg:w="6"/><text x="18.5234%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.07%)</title><rect x="18.3453%" y="1141" width="0.0719%" height="15" fill="rgb(221,92,48)" fg:x="765" fg:w="3"/><text x="18.5953%" y="1151.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (10 samples, 0.24%)</title><rect x="18.2014%" y="1237" width="0.2398%" height="15" fill="rgb(209,209,32)" fg:x="759" fg:w="10"/><text x="18.4514%" y="1247.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (8 samples, 0.19%)</title><rect x="18.2494%" y="1221" width="0.1918%" height="15" fill="rgb(221,70,22)" fg:x="761" fg:w="8"/><text x="18.4994%" y="1231.50"></text></g><g><title>databend-query`__rust_alloc (8 samples, 0.19%)</title><rect x="18.2494%" y="1205" width="0.1918%" height="15" fill="rgb(248,145,5)" fg:x="761" fg:w="8"/><text x="18.4994%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.17%)</title><rect x="18.2734%" y="1189" width="0.1679%" height="15" fill="rgb(226,116,26)" fg:x="762" fg:w="7"/><text x="18.5234%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.17%)</title><rect x="18.2734%" y="1173" width="0.1679%" height="15" fill="rgb(244,5,17)" fg:x="762" fg:w="7"/><text x="18.5234%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="18.4173%" y="1157" width="0.0240%" height="15" fill="rgb(252,159,33)" fg:x="768" fg:w="1"/><text x="18.6673%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="18.7050%" y="1157" width="0.0240%" height="15" fill="rgb(206,71,0)" fg:x="780" fg:w="1"/><text x="18.9550%" y="1167.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 0.82%)</title><rect x="17.9376%" y="1253" width="0.8153%" height="15" fill="rgb(233,118,54)" fg:x="748" fg:w="34"/><text x="18.1876%" y="1263.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.31%)</title><rect x="18.4412%" y="1237" width="0.3118%" height="15" fill="rgb(234,83,48)" fg:x="769" fg:w="13"/><text x="18.6912%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (13 samples, 0.31%)</title><rect x="18.4412%" y="1221" width="0.3118%" height="15" fill="rgb(228,3,54)" fg:x="769" fg:w="13"/><text x="18.6912%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.29%)</title><rect x="18.4652%" y="1205" width="0.2878%" height="15" fill="rgb(226,155,13)" fg:x="770" fg:w="12"/><text x="18.7152%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.29%)</title><rect x="18.4652%" y="1189" width="0.2878%" height="15" fill="rgb(241,28,37)" fg:x="770" fg:w="12"/><text x="18.7152%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.29%)</title><rect x="18.4652%" y="1173" width="0.2878%" height="15" fill="rgb(233,93,10)" fg:x="770" fg:w="12"/><text x="18.7152%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="18.7290%" y="1157" width="0.0240%" height="15" fill="rgb(225,113,19)" fg:x="781" fg:w="1"/><text x="18.9790%" y="1167.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_sort_partial::TransformSortPartial as common_pipeline_transforms::processors::transforms::transform::Transform&gt;::transform (35 samples, 0.84%)</title><rect x="17.9376%" y="1285" width="0.8393%" height="15" fill="rgb(241,2,18)" fg:x="748" fg:w="35"/><text x="18.1876%" y="1295.50"></text></g><g><title>databend-query`common_expression::kernels::sort::_&lt;impl common_expression::block::DataBlock&gt;::sort (35 samples, 0.84%)</title><rect x="17.9376%" y="1269" width="0.8393%" height="15" fill="rgb(228,207,21)" fg:x="748" fg:w="35"/><text x="18.1876%" y="1279.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="18.7530%" y="1253" width="0.0240%" height="15" fill="rgb(213,211,35)" fg:x="782" fg:w="1"/><text x="19.0030%" y="1263.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="18.8489%" y="1269" width="0.0240%" height="15" fill="rgb(209,83,10)" fg:x="786" fg:w="1"/><text x="19.0989%" y="1279.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="18.8729%" y="1269" width="0.0480%" height="15" fill="rgb(209,164,1)" fg:x="787" fg:w="2"/><text x="19.1229%" y="1279.50"></text></g><g><title>databend-query`common_expression::evaluator::Evaluator::partial_run (1 samples, 0.02%)</title><rect x="18.9209%" y="1269" width="0.0240%" height="15" fill="rgb(213,184,43)" fg:x="789" fg:w="1"/><text x="19.1709%" y="1279.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.3046%" y="1237" width="0.0240%" height="15" fill="rgb(231,61,34)" fg:x="805" fg:w="1"/><text x="19.5546%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="19.4005%" y="1189" width="0.0480%" height="15" fill="rgb(235,75,3)" fg:x="809" fg:w="2"/><text x="19.6505%" y="1199.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (20 samples, 0.48%)</title><rect x="19.2086%" y="1253" width="0.4796%" height="15" fill="rgb(220,106,47)" fg:x="801" fg:w="20"/><text x="19.4586%" y="1263.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (15 samples, 0.36%)</title><rect x="19.3285%" y="1237" width="0.3597%" height="15" fill="rgb(210,196,33)" fg:x="806" fg:w="15"/><text x="19.5785%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (15 samples, 0.36%)</title><rect x="19.3285%" y="1221" width="0.3597%" height="15" fill="rgb(229,154,42)" fg:x="806" fg:w="15"/><text x="19.5785%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.36%)</title><rect x="19.3285%" y="1205" width="0.3597%" height="15" fill="rgb(228,114,26)" fg:x="806" fg:w="15"/><text x="19.5785%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.24%)</title><rect x="19.4484%" y="1189" width="0.2398%" height="15" fill="rgb(208,144,1)" fg:x="811" fg:w="10"/><text x="19.6984%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.19%)</title><rect x="19.4964%" y="1173" width="0.1918%" height="15" fill="rgb(239,112,37)" fg:x="813" fg:w="8"/><text x="19.7464%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.12%)</title><rect x="19.5683%" y="1157" width="0.1199%" height="15" fill="rgb(210,96,50)" fg:x="816" fg:w="5"/><text x="19.8183%" y="1167.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.7842%" y="1237" width="0.0240%" height="15" fill="rgb(222,178,2)" fg:x="825" fg:w="1"/><text x="20.0342%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="19.8321%" y="1189" width="0.0240%" height="15" fill="rgb(226,74,18)" fg:x="827" fg:w="1"/><text x="20.0821%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="19.8561%" y="1157" width="0.0480%" height="15" fill="rgb(225,67,54)" fg:x="828" fg:w="2"/><text x="20.1061%" y="1167.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (12 samples, 0.29%)</title><rect x="19.6882%" y="1253" width="0.2878%" height="15" fill="rgb(251,92,32)" fg:x="821" fg:w="12"/><text x="19.9382%" y="1263.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (7 samples, 0.17%)</title><rect x="19.8082%" y="1237" width="0.1679%" height="15" fill="rgb(228,149,22)" fg:x="826" fg:w="7"/><text x="20.0582%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (6 samples, 0.14%)</title><rect x="19.8321%" y="1221" width="0.1439%" height="15" fill="rgb(243,54,13)" fg:x="827" fg:w="6"/><text x="20.0821%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.14%)</title><rect x="19.8321%" y="1205" width="0.1439%" height="15" fill="rgb(243,180,28)" fg:x="827" fg:w="6"/><text x="20.0821%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.12%)</title><rect x="19.8561%" y="1189" width="0.1199%" height="15" fill="rgb(208,167,24)" fg:x="828" fg:w="5"/><text x="20.1061%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.12%)</title><rect x="19.8561%" y="1173" width="0.1199%" height="15" fill="rgb(245,73,45)" fg:x="828" fg:w="5"/><text x="20.1061%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.07%)</title><rect x="19.9041%" y="1157" width="0.0719%" height="15" fill="rgb(237,203,48)" fg:x="830" fg:w="3"/><text x="20.1541%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="19.9520%" y="1141" width="0.0240%" height="15" fill="rgb(211,197,16)" fg:x="832" fg:w="1"/><text x="20.2020%" y="1151.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="20.0959%" y="1141" width="0.0240%" height="15" fill="rgb(243,99,51)" fg:x="838" fg:w="1"/><text x="20.3459%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.10%)</title><rect x="20.1199%" y="1141" width="0.0959%" height="15" fill="rgb(215,123,29)" fg:x="839" fg:w="4"/><text x="20.3699%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.34%)</title><rect x="20.0000%" y="1173" width="0.3357%" height="15" fill="rgb(239,186,37)" fg:x="834" fg:w="14"/><text x="20.2500%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.34%)</title><rect x="20.0000%" y="1157" width="0.3357%" height="15" fill="rgb(252,136,39)" fg:x="834" fg:w="14"/><text x="20.2500%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.12%)</title><rect x="20.2158%" y="1141" width="0.1199%" height="15" fill="rgb(223,213,32)" fg:x="843" fg:w="5"/><text x="20.4658%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.05%)</title><rect x="20.2878%" y="1125" width="0.0480%" height="15" fill="rgb(233,115,5)" fg:x="846" fg:w="2"/><text x="20.5378%" y="1135.50"></text></g><g><title>databend-query`__rust_alloc (15 samples, 0.36%)</title><rect x="20.0000%" y="1205" width="0.3597%" height="15" fill="rgb(207,226,44)" fg:x="834" fg:w="15"/><text x="20.2500%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.36%)</title><rect x="20.0000%" y="1189" width="0.3597%" height="15" fill="rgb(208,126,0)" fg:x="834" fg:w="15"/><text x="20.2500%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="20.3357%" y="1173" width="0.0240%" height="15" fill="rgb(244,66,21)" fg:x="848" fg:w="1"/><text x="20.5857%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="20.3837%" y="1157" width="0.0240%" height="15" fill="rgb(222,97,12)" fg:x="850" fg:w="1"/><text x="20.6337%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.02%)</title><rect x="20.4556%" y="1109" width="0.0240%" height="15" fill="rgb(219,213,19)" fg:x="853" fg:w="1"/><text x="20.7056%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.05%)</title><rect x="20.5755%" y="1077" width="0.0480%" height="15" fill="rgb(252,169,30)" fg:x="858" fg:w="2"/><text x="20.8255%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.19%)</title><rect x="20.4796%" y="1109" width="0.1918%" height="15" fill="rgb(206,32,51)" fg:x="854" fg:w="8"/><text x="20.7296%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.14%)</title><rect x="20.5276%" y="1093" width="0.1439%" height="15" fill="rgb(250,172,42)" fg:x="856" fg:w="6"/><text x="20.7776%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.05%)</title><rect x="20.6235%" y="1077" width="0.0480%" height="15" fill="rgb(209,34,43)" fg:x="860" fg:w="2"/><text x="20.8735%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="20.6715%" y="1109" width="0.0719%" height="15" fill="rgb(223,11,35)" fg:x="862" fg:w="3"/><text x="20.9215%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.07%)</title><rect x="20.6715%" y="1093" width="0.0719%" height="15" fill="rgb(251,219,26)" fg:x="862" fg:w="3"/><text x="20.9215%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.07%)</title><rect x="20.6715%" y="1077" width="0.0719%" height="15" fill="rgb(231,119,3)" fg:x="862" fg:w="3"/><text x="20.9215%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.05%)</title><rect x="20.7434%" y="1109" width="0.0480%" height="15" fill="rgb(216,97,11)" fg:x="865" fg:w="2"/><text x="20.9934%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.05%)</title><rect x="20.7434%" y="1093" width="0.0480%" height="15" fill="rgb(223,59,9)" fg:x="865" fg:w="2"/><text x="20.9934%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="20.7914%" y="1109" width="0.0240%" height="15" fill="rgb(233,93,31)" fg:x="867" fg:w="1"/><text x="21.0414%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (18 samples, 0.43%)</title><rect x="20.4317%" y="1125" width="0.4317%" height="15" fill="rgb(239,81,33)" fg:x="852" fg:w="18"/><text x="20.6817%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.05%)</title><rect x="20.8153%" y="1109" width="0.0480%" height="15" fill="rgb(213,120,34)" fg:x="868" fg:w="2"/><text x="21.0653%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="20.8393%" y="1093" width="0.0240%" height="15" fill="rgb(243,49,53)" fg:x="869" fg:w="1"/><text x="21.0893%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.53%)</title><rect x="20.4077%" y="1141" width="0.5276%" height="15" fill="rgb(247,216,33)" fg:x="851" fg:w="22"/><text x="20.6577%" y="1151.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="20.8633%" y="1125" width="0.0719%" height="15" fill="rgb(226,26,14)" fg:x="870" fg:w="3"/><text x="21.1133%" y="1135.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (25 samples, 0.60%)</title><rect x="20.3837%" y="1173" width="0.5995%" height="15" fill="rgb(215,49,53)" fg:x="850" fg:w="25"/><text x="20.6337%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.58%)</title><rect x="20.4077%" y="1157" width="0.5755%" height="15" fill="rgb(245,162,40)" fg:x="851" fg:w="24"/><text x="20.6577%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.05%)</title><rect x="20.9353%" y="1141" width="0.0480%" height="15" fill="rgb(229,68,17)" fg:x="873" fg:w="2"/><text x="21.1853%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="20.9592%" y="1125" width="0.0240%" height="15" fill="rgb(213,182,10)" fg:x="874" fg:w="1"/><text x="21.2092%" y="1135.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (26 samples, 0.62%)</title><rect x="20.3837%" y="1189" width="0.6235%" height="15" fill="rgb(245,125,30)" fg:x="850" fg:w="26"/><text x="20.6337%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="20.9832%" y="1173" width="0.0240%" height="15" fill="rgb(232,202,2)" fg:x="875" fg:w="1"/><text x="21.2332%" y="1183.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (45 samples, 1.08%)</title><rect x="19.9760%" y="1253" width="1.0791%" height="15" fill="rgb(237,140,51)" fg:x="833" fg:w="45"/><text x="20.2260%" y="1263.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 1.08%)</title><rect x="19.9760%" y="1237" width="1.0791%" height="15" fill="rgb(236,157,25)" fg:x="833" fg:w="45"/><text x="20.2260%" y="1247.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (45 samples, 1.08%)</title><rect x="19.9760%" y="1221" width="1.0791%" height="15" fill="rgb(219,209,0)" fg:x="833" fg:w="45"/><text x="20.2260%" y="1231.50"></text></g><g><title>databend-query`__rust_realloc (29 samples, 0.70%)</title><rect x="20.3597%" y="1205" width="0.6954%" height="15" fill="rgb(240,116,54)" fg:x="849" fg:w="29"/><text x="20.6097%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="21.0072%" y="1189" width="0.0480%" height="15" fill="rgb(216,10,36)" fg:x="876" fg:w="2"/><text x="21.2572%" y="1199.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="21.1511%" y="1221" width="0.0480%" height="15" fill="rgb(222,72,44)" fg:x="882" fg:w="2"/><text x="21.4011%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="21.1990%" y="1189" width="0.0240%" height="15" fill="rgb(232,159,9)" fg:x="884" fg:w="1"/><text x="21.4490%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="21.2230%" y="1173" width="0.0480%" height="15" fill="rgb(210,39,32)" fg:x="885" fg:w="2"/><text x="21.4730%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="21.3189%" y="1141" width="0.0480%" height="15" fill="rgb(216,194,45)" fg:x="889" fg:w="2"/><text x="21.5689%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.19%)</title><rect x="21.2230%" y="1189" width="0.1918%" height="15" fill="rgb(218,18,35)" fg:x="885" fg:w="8"/><text x="21.4730%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.14%)</title><rect x="21.2710%" y="1173" width="0.1439%" height="15" fill="rgb(207,83,51)" fg:x="887" fg:w="6"/><text x="21.5210%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.12%)</title><rect x="21.2950%" y="1157" width="0.1199%" height="15" fill="rgb(225,63,43)" fg:x="888" fg:w="5"/><text x="21.5450%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.05%)</title><rect x="21.3669%" y="1141" width="0.0480%" height="15" fill="rgb(207,57,36)" fg:x="891" fg:w="2"/><text x="21.6169%" y="1151.50"></text></g><g><title>databend-query`common_expression::evaluator::Evaluator::partial_run (16 samples, 0.38%)</title><rect x="21.0552%" y="1253" width="0.3837%" height="15" fill="rgb(216,99,33)" fg:x="878" fg:w="16"/><text x="21.3052%" y="1263.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (15 samples, 0.36%)</title><rect x="21.0791%" y="1237" width="0.3597%" height="15" fill="rgb(225,42,16)" fg:x="879" fg:w="15"/><text x="21.3291%" y="1247.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (10 samples, 0.24%)</title><rect x="21.1990%" y="1221" width="0.2398%" height="15" fill="rgb(220,201,45)" fg:x="884" fg:w="10"/><text x="21.4490%" y="1231.50"></text></g><g><title>databend-query`__rust_alloc (10 samples, 0.24%)</title><rect x="21.1990%" y="1205" width="0.2398%" height="15" fill="rgb(225,33,4)" fg:x="884" fg:w="10"/><text x="21.4490%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="21.4149%" y="1189" width="0.0240%" height="15" fill="rgb(224,33,50)" fg:x="893" fg:w="1"/><text x="21.6649%" y="1199.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="21.4388%" y="1237" width="0.0240%" height="15" fill="rgb(246,198,51)" fg:x="894" fg:w="1"/><text x="21.6888%" y="1247.50"></text></g><g><title>databend-query`__rust_dealloc (4 samples, 0.10%)</title><rect x="21.5108%" y="1205" width="0.0959%" height="15" fill="rgb(205,22,4)" fg:x="897" fg:w="4"/><text x="21.7608%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::DataType&gt; (4 samples, 0.10%)</title><rect x="21.6067%" y="1189" width="0.0959%" height="15" fill="rgb(206,3,8)" fg:x="901" fg:w="4"/><text x="21.8567%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="21.7026%" y="1189" width="0.0480%" height="15" fill="rgb(251,23,15)" fg:x="905" fg:w="2"/><text x="21.9526%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.14%)</title><rect x="21.7506%" y="1189" width="0.1439%" height="15" fill="rgb(252,88,28)" fg:x="907" fg:w="6"/><text x="22.0006%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.12%)</title><rect x="21.7746%" y="1173" width="0.1199%" height="15" fill="rgb(212,127,14)" fg:x="908" fg:w="5"/><text x="22.0246%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 0.72%)</title><rect x="21.8945%" y="1189" width="0.7194%" height="15" fill="rgb(247,145,37)" fg:x="913" fg:w="30"/><text x="22.1445%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::BlockEntry&gt; (45 samples, 1.08%)</title><rect x="21.6067%" y="1205" width="1.0791%" height="15" fill="rgb(209,117,53)" fg:x="901" fg:w="45"/><text x="21.8567%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.07%)</title><rect x="22.6139%" y="1189" width="0.0719%" height="15" fill="rgb(212,90,42)" fg:x="943" fg:w="3"/><text x="22.8639%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::DataType&gt; (1 samples, 0.02%)</title><rect x="22.6859%" y="1205" width="0.0240%" height="15" fill="rgb(218,164,37)" fg:x="946" fg:w="1"/><text x="22.9359%" y="1215.50"></text></g><g><title>databend-query`__rust_dealloc (3 samples, 0.07%)</title><rect x="22.8537%" y="1189" width="0.0719%" height="15" fill="rgb(246,65,34)" fg:x="953" fg:w="3"/><text x="23.1037%" y="1199.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="22.9257%" y="1173" width="0.0240%" height="15" fill="rgb(231,100,33)" fg:x="956" fg:w="1"/><text x="23.1757%" y="1183.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="22.9496%" y="1173" width="0.0240%" height="15" fill="rgb(228,126,14)" fg:x="957" fg:w="1"/><text x="23.1996%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.22%)</title><rect x="23.0695%" y="1157" width="0.2158%" height="15" fill="rgb(215,173,21)" fg:x="962" fg:w="9"/><text x="23.3195%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.34%)</title><rect x="22.9736%" y="1173" width="0.3357%" height="15" fill="rgb(210,6,40)" fg:x="958" fg:w="14"/><text x="23.2236%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="23.2854%" y="1157" width="0.0240%" height="15" fill="rgb(212,48,18)" fg:x="971" fg:w="1"/><text x="23.5354%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.53%)</title><rect x="23.3094%" y="1173" width="0.5276%" height="15" fill="rgb(230,214,11)" fg:x="972" fg:w="22"/><text x="23.5594%" y="1183.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (39 samples, 0.94%)</title><rect x="22.9257%" y="1189" width="0.9353%" height="15" fill="rgb(254,105,39)" fg:x="956" fg:w="39"/><text x="23.1757%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="23.8369%" y="1173" width="0.0240%" height="15" fill="rgb(245,158,5)" fg:x="994" fg:w="1"/><text x="24.0869%" y="1183.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;arrow2::buffer::Bytes&lt;i8&gt;&gt; (1 samples, 0.02%)</title><rect x="23.8609%" y="1189" width="0.0240%" height="15" fill="rgb(249,208,11)" fg:x="995" fg:w="1"/><text x="24.1109%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (1 samples, 0.02%)</title><rect x="23.8849%" y="1189" width="0.0240%" height="15" fill="rgb(210,39,28)" fg:x="996" fg:w="1"/><text x="24.1349%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;foreign_vec::Allocation&lt;arrow2::buffer::BytesAllocator&gt;&gt; (1 samples, 0.02%)</title><rect x="23.9089%" y="1189" width="0.0240%" height="15" fill="rgb(211,56,53)" fg:x="997" fg:w="1"/><text x="24.1589%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="23.9329%" y="1189" width="0.0480%" height="15" fill="rgb(226,201,30)" fg:x="998" fg:w="2"/><text x="24.1829%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="23.9808%" y="1189" width="0.0240%" height="15" fill="rgb(239,101,34)" fg:x="1000" fg:w="1"/><text x="24.2308%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.41%)</title><rect x="24.0048%" y="1189" width="0.4077%" height="15" fill="rgb(226,209,5)" fg:x="1001" fg:w="17"/><text x="24.2548%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.29%)</title><rect x="24.1247%" y="1173" width="0.2878%" height="15" fill="rgb(250,105,47)" fg:x="1006" fg:w="12"/><text x="24.3747%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.07%)</title><rect x="24.4125%" y="1189" width="0.0719%" height="15" fill="rgb(230,72,3)" fg:x="1018" fg:w="3"/><text x="24.6625%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.29%)</title><rect x="24.4844%" y="1189" width="0.2878%" height="15" fill="rgb(232,218,39)" fg:x="1021" fg:w="12"/><text x="24.7344%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (87 samples, 2.09%)</title><rect x="22.7098%" y="1205" width="2.0863%" height="15" fill="rgb(248,166,6)" fg:x="947" fg:w="87"/><text x="22.9598%" y="1215.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="24.7722%" y="1189" width="0.0240%" height="15" fill="rgb(247,89,20)" fg:x="1033" fg:w="1"/><text x="25.0222%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.12%)</title><rect x="24.7962%" y="1205" width="0.1199%" height="15" fill="rgb(248,130,54)" fg:x="1034" fg:w="5"/><text x="25.0462%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.05%)</title><rect x="24.9161%" y="1205" width="0.0480%" height="15" fill="rgb(234,196,4)" fg:x="1039" fg:w="2"/><text x="25.1661%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.19%)</title><rect x="24.9640%" y="1205" width="0.1918%" height="15" fill="rgb(250,143,31)" fg:x="1041" fg:w="8"/><text x="25.2140%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="25.1079%" y="1189" width="0.0480%" height="15" fill="rgb(211,110,34)" fg:x="1047" fg:w="2"/><text x="25.3579%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.10%)</title><rect x="25.1559%" y="1205" width="0.0959%" height="15" fill="rgb(215,124,48)" fg:x="1049" fg:w="4"/><text x="25.4059%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.14%)</title><rect x="25.2518%" y="1205" width="0.1439%" height="15" fill="rgb(216,46,13)" fg:x="1053" fg:w="6"/><text x="25.5018%" y="1215.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (165 samples, 3.96%)</title><rect x="21.4628%" y="1221" width="3.9568%" height="15" fill="rgb(205,184,25)" fg:x="895" fg:w="165"/><text x="21.7128%" y="1231.50">data..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="25.3957%" y="1205" width="0.0240%" height="15" fill="rgb(228,1,10)" fg:x="1059" fg:w="1"/><text x="25.6457%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (1 samples, 0.02%)</title><rect x="25.4197%" y="1221" width="0.0240%" height="15" fill="rgb(213,116,27)" fg:x="1060" fg:w="1"/><text x="25.6697%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="25.4436%" y="1221" width="0.0719%" height="15" fill="rgb(241,95,50)" fg:x="1061" fg:w="3"/><text x="25.6936%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.10%)</title><rect x="25.5156%" y="1221" width="0.0959%" height="15" fill="rgb(238,48,32)" fg:x="1064" fg:w="4"/><text x="25.7656%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (174 samples, 4.17%)</title><rect x="21.4628%" y="1237" width="4.1727%" height="15" fill="rgb(235,113,49)" fg:x="895" fg:w="174"/><text x="21.7128%" y="1247.50">datab..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="25.6115%" y="1221" width="0.0240%" height="15" fill="rgb(205,127,43)" fg:x="1068" fg:w="1"/><text x="25.8615%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="25.6355%" y="1237" width="0.0240%" height="15" fill="rgb(250,162,2)" fg:x="1069" fg:w="1"/><text x="25.8855%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.10%)</title><rect x="25.6595%" y="1237" width="0.0959%" height="15" fill="rgb(220,13,41)" fg:x="1070" fg:w="4"/><text x="25.9095%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.07%)</title><rect x="25.6835%" y="1221" width="0.0719%" height="15" fill="rgb(249,221,25)" fg:x="1071" fg:w="3"/><text x="25.9335%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.05%)</title><rect x="25.7074%" y="1205" width="0.0480%" height="15" fill="rgb(215,208,19)" fg:x="1072" fg:w="2"/><text x="25.9574%" y="1215.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="25.8034%" y="1221" width="0.0240%" height="15" fill="rgb(236,175,2)" fg:x="1076" fg:w="1"/><text x="26.0534%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.10%)</title><rect x="25.7554%" y="1237" width="0.0959%" height="15" fill="rgb(241,52,2)" fg:x="1074" fg:w="4"/><text x="26.0054%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="25.8273%" y="1221" width="0.0240%" height="15" fill="rgb(248,140,14)" fg:x="1077" fg:w="1"/><text x="26.0773%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="25.8513%" y="1237" width="0.0240%" height="15" fill="rgb(253,22,42)" fg:x="1078" fg:w="1"/><text x="26.1013%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="25.8753%" y="1237" width="0.0240%" height="15" fill="rgb(234,61,47)" fg:x="1079" fg:w="1"/><text x="26.1253%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.02%)</title><rect x="25.8993%" y="1237" width="0.0240%" height="15" fill="rgb(208,226,15)" fg:x="1080" fg:w="1"/><text x="26.1493%" y="1247.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::DataBlock&gt; (188 samples, 4.51%)</title><rect x="21.4388%" y="1253" width="4.5084%" height="15" fill="rgb(217,221,4)" fg:x="894" fg:w="188"/><text x="21.6888%" y="1263.50">datab..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="25.9233%" y="1237" width="0.0240%" height="15" fill="rgb(212,174,34)" fg:x="1081" fg:w="1"/><text x="26.1733%" y="1247.50"></text></g><g><title>databend-query`common_sql::evaluator::block_operator::BlockOperator::execute (293 samples, 7.03%)</title><rect x="18.9448%" y="1269" width="7.0264%" height="15" fill="rgb(253,83,4)" fg:x="790" fg:w="293"/><text x="19.1948%" y="1279.50">databend-..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="25.9472%" y="1253" width="0.0240%" height="15" fill="rgb(250,195,49)" fg:x="1082" fg:w="1"/><text x="26.1972%" y="1263.50"></text></g><g><title>databend-query`&lt;common_sql::evaluator::block_operator::CompoundBlockOperator as common_pipeline_transforms::processors::transforms::transform::Transform&gt;::transform (302 samples, 7.24%)</title><rect x="18.7770%" y="1285" width="7.2422%" height="15" fill="rgb(241,192,25)" fg:x="783" fg:w="302"/><text x="19.0270%" y="1295.50">databend-q..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="25.9712%" y="1269" width="0.0480%" height="15" fill="rgb(208,124,10)" fg:x="1083" fg:w="2"/><text x="26.2212%" y="1279.50"></text></g><g><title>databend-query`common_sql::evaluator::block_operator::BlockOperator::execute (1 samples, 0.02%)</title><rect x="26.0192%" y="1285" width="0.0240%" height="15" fill="rgb(222,33,0)" fg:x="1085" fg:w="1"/><text x="26.2692%" y="1295.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::BlockEntry&gt; (4 samples, 0.10%)</title><rect x="26.0432%" y="1237" width="0.0959%" height="15" fill="rgb(234,209,28)" fg:x="1086" fg:w="4"/><text x="26.2932%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="26.0671%" y="1221" width="0.0719%" height="15" fill="rgb(224,11,23)" fg:x="1087" fg:w="3"/><text x="26.3171%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="26.1151%" y="1205" width="0.0240%" height="15" fill="rgb(232,99,1)" fg:x="1089" fg:w="1"/><text x="26.3651%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (1 samples, 0.02%)</title><rect x="26.1391%" y="1237" width="0.0240%" height="15" fill="rgb(237,95,45)" fg:x="1090" fg:w="1"/><text x="26.3891%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="26.1631%" y="1237" width="0.0240%" height="15" fill="rgb(208,109,11)" fg:x="1091" fg:w="1"/><text x="26.4131%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="26.1871%" y="1237" width="0.0240%" height="15" fill="rgb(216,190,48)" fg:x="1092" fg:w="1"/><text x="26.4371%" y="1247.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.22%)</title><rect x="26.0432%" y="1253" width="0.2158%" height="15" fill="rgb(251,171,36)" fg:x="1086" fg:w="9"/><text x="26.2932%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.05%)</title><rect x="26.2110%" y="1237" width="0.0480%" height="15" fill="rgb(230,62,22)" fg:x="1093" fg:w="2"/><text x="26.4610%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="26.2590%" y="1253" width="0.0240%" height="15" fill="rgb(225,114,35)" fg:x="1095" fg:w="1"/><text x="26.5090%" y="1263.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (11 samples, 0.26%)</title><rect x="26.0432%" y="1269" width="0.2638%" height="15" fill="rgb(215,118,42)" fg:x="1086" fg:w="11"/><text x="26.2932%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="26.2830%" y="1253" width="0.0240%" height="15" fill="rgb(243,119,21)" fg:x="1096" fg:w="1"/><text x="26.5330%" y="1263.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="26.3070%" y="1269" width="0.0240%" height="15" fill="rgb(252,177,53)" fg:x="1097" fg:w="1"/><text x="26.5570%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="26.3309%" y="1269" width="0.0240%" height="15" fill="rgb(237,209,29)" fg:x="1098" fg:w="1"/><text x="26.5809%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="26.3549%" y="1269" width="0.1439%" height="15" fill="rgb(212,65,23)" fg:x="1099" fg:w="6"/><text x="26.6049%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.14%)</title><rect x="26.3549%" y="1253" width="0.1439%" height="15" fill="rgb(230,222,46)" fg:x="1099" fg:w="6"/><text x="26.6049%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.05%)</title><rect x="26.4508%" y="1237" width="0.0480%" height="15" fill="rgb(215,135,32)" fg:x="1103" fg:w="2"/><text x="26.7008%" y="1247.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::DataBlock&gt; (20 samples, 0.48%)</title><rect x="26.0432%" y="1285" width="0.4796%" height="15" fill="rgb(246,101,22)" fg:x="1086" fg:w="20"/><text x="26.2932%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="26.4988%" y="1269" width="0.0240%" height="15" fill="rgb(206,107,13)" fg:x="1105" fg:w="1"/><text x="26.7488%" y="1279.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (367 samples, 8.80%)</title><rect x="17.7698%" y="1301" width="8.8010%" height="15" fill="rgb(250,100,44)" fg:x="741" fg:w="367"/><text x="18.0198%" y="1311.50">databend-que..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.05%)</title><rect x="26.5228%" y="1285" width="0.0480%" height="15" fill="rgb(231,147,38)" fg:x="1106" fg:w="2"/><text x="26.7728%" y="1295.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::transform_aggregate_partial::TransformPartialAggregate&lt;Method&gt; as common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransform&gt;::on_finish (2 samples, 0.05%)</title><rect x="26.5707%" y="1285" width="0.0480%" height="15" fill="rgb(229,8,40)" fg:x="1108" fg:w="2"/><text x="26.8207%" y="1295.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="26.5947%" y="1269" width="0.0240%" height="15" fill="rgb(221,135,30)" fg:x="1109" fg:w="1"/><text x="26.8447%" y="1279.50"></text></g><g><title>databend-query`&lt;common_hashtable::table0::Table0Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.10%)</title><rect x="26.6187%" y="1269" width="0.0959%" height="15" fill="rgb(249,193,18)" fg:x="1110" fg:w="4"/><text x="26.8687%" y="1279.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="26.9305%" y="1205" width="0.0240%" height="15" fill="rgb(209,133,39)" fg:x="1123" fg:w="1"/><text x="27.1805%" y="1215.50"></text></g><g><title>databend-query`common_hashtable::table0::Table0&lt;K,V,C,A&gt;::grow (3 samples, 0.07%)</title><rect x="26.9305%" y="1253" width="0.0719%" height="15" fill="rgb(232,100,14)" fg:x="1123" fg:w="3"/><text x="27.1805%" y="1263.50"></text></g><g><title>databend-query`&lt;common_hashtable::container::HeapContainer&lt;T,A&gt; as common_hashtable::container::Container&gt;::grow_zeroed (3 samples, 0.07%)</title><rect x="26.9305%" y="1237" width="0.0719%" height="15" fill="rgb(224,185,1)" fg:x="1123" fg:w="3"/><text x="27.1805%" y="1247.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow_zeroed (3 samples, 0.07%)</title><rect x="26.9305%" y="1221" width="0.0719%" height="15" fill="rgb(223,139,8)" fg:x="1123" fg:w="3"/><text x="27.1805%" y="1231.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.05%)</title><rect x="26.9544%" y="1205" width="0.0480%" height="15" fill="rgb(232,213,38)" fg:x="1124" fg:w="2"/><text x="27.2044%" y="1215.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::transform_aggregate_partial::TransformPartialAggregate&lt;Method&gt; as common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransform&gt;::transform (18 samples, 0.43%)</title><rect x="26.6187%" y="1285" width="0.4317%" height="15" fill="rgb(207,94,22)" fg:x="1110" fg:w="18"/><text x="26.8687%" y="1295.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::aggregator::transform_aggregate_partial::TransformPartialAggregate&lt;Method&gt;::execute_one_block (14 samples, 0.34%)</title><rect x="26.7146%" y="1269" width="0.3357%" height="15" fill="rgb(219,183,54)" fg:x="1114" fg:w="14"/><text x="26.9646%" y="1279.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::aggregator::aggregator_params::AggregatorParams::alloc_layout (2 samples, 0.05%)</title><rect x="27.0024%" y="1253" width="0.0480%" height="15" fill="rgb(216,185,54)" fg:x="1126" fg:w="2"/><text x="27.2524%" y="1263.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::transform_single_key::PartialSingleStateAggregator as common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransform&gt;::transform (1 samples, 0.02%)</title><rect x="27.0504%" y="1285" width="0.0240%" height="15" fill="rgb(254,217,39)" fg:x="1128" fg:w="1"/><text x="27.3004%" y="1295.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::DataBlock&gt; (1 samples, 0.02%)</title><rect x="27.0504%" y="1269" width="0.0240%" height="15" fill="rgb(240,178,23)" fg:x="1128" fg:w="1"/><text x="27.3004%" y="1279.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (1 samples, 0.02%)</title><rect x="27.0504%" y="1253" width="0.0240%" height="15" fill="rgb(218,11,47)" fg:x="1128" fg:w="1"/><text x="27.3004%" y="1263.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="27.0504%" y="1237" width="0.0240%" height="15" fill="rgb(218,51,51)" fg:x="1128" fg:w="1"/><text x="27.3004%" y="1247.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::string::StringColumn&gt; (1 samples, 0.02%)</title><rect x="27.0504%" y="1221" width="0.0240%" height="15" fill="rgb(238,126,27)" fg:x="1128" fg:w="1"/><text x="27.3004%" y="1231.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="27.0504%" y="1205" width="0.0240%" height="15" fill="rgb(249,202,22)" fg:x="1128" fg:w="1"/><text x="27.3004%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="27.0504%" y="1189" width="0.0240%" height="15" fill="rgb(254,195,49)" fg:x="1128" fg:w="1"/><text x="27.3004%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="27.0504%" y="1173" width="0.0240%" height="15" fill="rgb(208,123,14)" fg:x="1128" fg:w="1"/><text x="27.3004%" y="1183.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (22 samples, 0.53%)</title><rect x="26.5707%" y="1301" width="0.5276%" height="15" fill="rgb(224,200,8)" fg:x="1108" fg:w="22"/><text x="26.8207%" y="1311.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::group_by::aggregator_polymorphic_keys::PartitionedHashMethod&lt;Method&gt;::convert_hashtable (1 samples, 0.02%)</title><rect x="27.0743%" y="1285" width="0.0240%" height="15" fill="rgb(217,61,36)" fg:x="1129" fg:w="1"/><text x="27.3243%" y="1295.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="27.1703%" y="1253" width="0.0240%" height="15" fill="rgb(206,35,45)" fg:x="1133" fg:w="1"/><text x="27.4203%" y="1263.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (1 samples, 0.02%)</title><rect x="27.1942%" y="1221" width="0.0240%" height="15" fill="rgb(217,65,33)" fg:x="1134" fg:w="1"/><text x="27.4442%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="27.2182%" y="1221" width="0.0480%" height="15" fill="rgb(222,158,48)" fg:x="1135" fg:w="2"/><text x="27.4682%" y="1231.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.10%)</title><rect x="27.1942%" y="1253" width="0.0959%" height="15" fill="rgb(254,2,54)" fg:x="1134" fg:w="4"/><text x="27.4442%" y="1263.50"></text></g><g><title>databend-query`__rust_alloc (4 samples, 0.10%)</title><rect x="27.1942%" y="1237" width="0.0959%" height="15" fill="rgb(250,143,38)" fg:x="1134" fg:w="4"/><text x="27.4442%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="27.2662%" y="1221" width="0.0240%" height="15" fill="rgb(248,25,0)" fg:x="1137" fg:w="1"/><text x="27.5162%" y="1231.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="27.4341%" y="1189" width="0.0480%" height="15" fill="rgb(206,152,27)" fg:x="1144" fg:w="2"/><text x="27.6841%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="27.5060%" y="1141" width="0.0240%" height="15" fill="rgb(240,77,30)" fg:x="1147" fg:w="1"/><text x="27.7560%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.07%)</title><rect x="27.5300%" y="1125" width="0.0719%" height="15" fill="rgb(231,5,3)" fg:x="1148" fg:w="3"/><text x="27.7800%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="27.5540%" y="1109" width="0.0480%" height="15" fill="rgb(207,226,32)" fg:x="1149" fg:w="2"/><text x="27.8040%" y="1119.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (11 samples, 0.26%)</title><rect x="27.3621%" y="1205" width="0.2638%" height="15" fill="rgb(222,207,47)" fg:x="1141" fg:w="11"/><text x="27.6121%" y="1215.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (6 samples, 0.14%)</title><rect x="27.4820%" y="1189" width="0.1439%" height="15" fill="rgb(229,115,45)" fg:x="1146" fg:w="6"/><text x="27.7320%" y="1199.50"></text></g><g><title>databend-query`__rust_alloc (5 samples, 0.12%)</title><rect x="27.5060%" y="1173" width="0.1199%" height="15" fill="rgb(224,191,6)" fg:x="1147" fg:w="5"/><text x="27.7560%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.12%)</title><rect x="27.5060%" y="1157" width="0.1199%" height="15" fill="rgb(230,227,24)" fg:x="1147" fg:w="5"/><text x="27.7560%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.10%)</title><rect x="27.5300%" y="1141" width="0.0959%" height="15" fill="rgb(228,80,19)" fg:x="1148" fg:w="4"/><text x="27.7800%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="27.6019%" y="1125" width="0.0240%" height="15" fill="rgb(247,229,0)" fg:x="1151" fg:w="1"/><text x="27.8519%" y="1135.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (4 samples, 0.10%)</title><rect x="27.6259%" y="1189" width="0.0959%" height="15" fill="rgb(237,194,15)" fg:x="1152" fg:w="4"/><text x="27.8759%" y="1199.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="27.7218%" y="1189" width="0.0240%" height="15" fill="rgb(219,203,20)" fg:x="1156" fg:w="1"/><text x="27.9718%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="27.7458%" y="1157" width="0.0240%" height="15" fill="rgb(234,128,8)" fg:x="1157" fg:w="1"/><text x="27.9958%" y="1167.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (27 samples, 0.65%)</title><rect x="27.1703%" y="1269" width="0.6475%" height="15" fill="rgb(248,202,8)" fg:x="1133" fg:w="27"/><text x="27.4203%" y="1279.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (22 samples, 0.53%)</title><rect x="27.2902%" y="1253" width="0.5276%" height="15" fill="rgb(206,104,37)" fg:x="1138" fg:w="22"/><text x="27.5402%" y="1263.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.53%)</title><rect x="27.2902%" y="1237" width="0.5276%" height="15" fill="rgb(223,8,27)" fg:x="1138" fg:w="22"/><text x="27.5402%" y="1247.50"></text></g><g><title>databend-query`&lt;common_expression::block::BlockEntry as core::clone::Clone&gt;::clone (20 samples, 0.48%)</title><rect x="27.3381%" y="1221" width="0.4796%" height="15" fill="rgb(216,217,28)" fg:x="1140" fg:w="20"/><text x="27.5881%" y="1231.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (8 samples, 0.19%)</title><rect x="27.6259%" y="1205" width="0.1918%" height="15" fill="rgb(249,199,1)" fg:x="1152" fg:w="8"/><text x="27.8759%" y="1215.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (3 samples, 0.07%)</title><rect x="27.7458%" y="1189" width="0.0719%" height="15" fill="rgb(240,85,17)" fg:x="1157" fg:w="3"/><text x="27.9958%" y="1199.50"></text></g><g><title>databend-query`__rust_alloc (3 samples, 0.07%)</title><rect x="27.7458%" y="1173" width="0.0719%" height="15" fill="rgb(206,108,45)" fg:x="1157" fg:w="3"/><text x="27.9958%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="27.7698%" y="1157" width="0.0480%" height="15" fill="rgb(245,210,41)" fg:x="1158" fg:w="2"/><text x="28.0198%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="27.7938%" y="1141" width="0.0240%" height="15" fill="rgb(206,13,37)" fg:x="1159" fg:w="1"/><text x="28.0438%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="27.7938%" y="1125" width="0.0240%" height="15" fill="rgb(250,61,18)" fg:x="1159" fg:w="1"/><text x="28.0438%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="27.7938%" y="1109" width="0.0240%" height="15" fill="rgb(235,172,48)" fg:x="1159" fg:w="1"/><text x="28.0438%" y="1119.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="27.8177%" y="1269" width="0.0240%" height="15" fill="rgb(249,201,17)" fg:x="1160" fg:w="1"/><text x="28.0677%" y="1279.50"></text></g><g><title>databend-query`__rust_dealloc (2 samples, 0.05%)</title><rect x="27.8417%" y="1269" width="0.0480%" height="15" fill="rgb(219,208,6)" fg:x="1161" fg:w="2"/><text x="28.0917%" y="1279.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.14%)</title><rect x="27.9616%" y="1253" width="0.1439%" height="15" fill="rgb(248,31,23)" fg:x="1166" fg:w="6"/><text x="28.2116%" y="1263.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (22 samples, 0.53%)</title><rect x="28.4652%" y="1237" width="0.5276%" height="15" fill="rgb(245,15,42)" fg:x="1187" fg:w="22"/><text x="28.7152%" y="1247.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumn::index_unchecked (8 samples, 0.19%)</title><rect x="28.8010%" y="1221" width="0.1918%" height="15" fill="rgb(222,217,39)" fg:x="1201" fg:w="8"/><text x="29.0510%" y="1231.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumn::index_unchecked (2 samples, 0.05%)</title><rect x="28.9928%" y="1237" width="0.0480%" height="15" fill="rgb(210,219,27)" fg:x="1209" fg:w="2"/><text x="29.2428%" y="1247.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (72 samples, 1.73%)</title><rect x="28.1055%" y="1253" width="1.7266%" height="15" fill="rgb(252,166,36)" fg:x="1172" fg:w="72"/><text x="28.3555%" y="1263.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (33 samples, 0.79%)</title><rect x="29.0408%" y="1237" width="0.7914%" height="15" fill="rgb(245,132,34)" fg:x="1211" fg:w="33"/><text x="29.2908%" y="1247.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (84 samples, 2.01%)</title><rect x="27.8897%" y="1269" width="2.0144%" height="15" fill="rgb(236,54,3)" fg:x="1163" fg:w="84"/><text x="28.1397%" y="1279.50">d..</text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (3 samples, 0.07%)</title><rect x="29.8321%" y="1253" width="0.0719%" height="15" fill="rgb(241,173,43)" fg:x="1244" fg:w="3"/><text x="30.0821%" y="1263.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="29.8801%" y="1237" width="0.0240%" height="15" fill="rgb(215,190,9)" fg:x="1246" fg:w="1"/><text x="30.1301%" y="1247.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumn::index_unchecked (1 samples, 0.02%)</title><rect x="29.8801%" y="1221" width="0.0240%" height="15" fill="rgb(242,101,16)" fg:x="1246" fg:w="1"/><text x="30.1301%" y="1231.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.05%)</title><rect x="30.0240%" y="1253" width="0.0480%" height="15" fill="rgb(223,190,21)" fg:x="1252" fg:w="2"/><text x="30.2740%" y="1263.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumn::index_unchecked (1 samples, 0.02%)</title><rect x="30.0480%" y="1237" width="0.0240%" height="15" fill="rgb(215,228,25)" fg:x="1253" fg:w="1"/><text x="30.2980%" y="1247.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (12 samples, 0.29%)</title><rect x="29.9041%" y="1269" width="0.2878%" height="15" fill="rgb(225,36,22)" fg:x="1247" fg:w="12"/><text x="30.1541%" y="1279.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.12%)</title><rect x="30.0719%" y="1253" width="0.1199%" height="15" fill="rgb(251,106,46)" fg:x="1254" fg:w="5"/><text x="30.3219%" y="1263.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (1 samples, 0.02%)</title><rect x="30.2878%" y="1189" width="0.0240%" height="15" fill="rgb(208,90,1)" fg:x="1263" fg:w="1"/><text x="30.5378%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="30.3118%" y="1157" width="0.0240%" height="15" fill="rgb(243,10,4)" fg:x="1264" fg:w="1"/><text x="30.5618%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="30.3837%" y="1141" width="0.0240%" height="15" fill="rgb(212,137,27)" fg:x="1267" fg:w="1"/><text x="30.6337%" y="1151.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="30.4077%" y="1109" width="0.0240%" height="15" fill="rgb(231,220,49)" fg:x="1268" fg:w="1"/><text x="30.6577%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.10%)</title><rect x="30.4077%" y="1125" width="0.0959%" height="15" fill="rgb(237,96,20)" fg:x="1268" fg:w="4"/><text x="30.6577%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.07%)</title><rect x="30.4317%" y="1109" width="0.0719%" height="15" fill="rgb(239,229,30)" fg:x="1269" fg:w="3"/><text x="30.6817%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="30.4317%" y="1093" width="0.0719%" height="15" fill="rgb(219,65,33)" fg:x="1269" fg:w="3"/><text x="30.6817%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="30.5036%" y="1125" width="0.0240%" height="15" fill="rgb(243,134,7)" fg:x="1272" fg:w="1"/><text x="30.7536%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.17%)</title><rect x="30.4077%" y="1141" width="0.1679%" height="15" fill="rgb(216,177,54)" fg:x="1268" fg:w="7"/><text x="30.6577%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="30.5276%" y="1125" width="0.0480%" height="15" fill="rgb(211,160,20)" fg:x="1273" fg:w="2"/><text x="30.7776%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="30.5276%" y="1109" width="0.0480%" height="15" fill="rgb(239,85,39)" fg:x="1273" fg:w="2"/><text x="30.7776%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.05%)</title><rect x="30.5276%" y="1093" width="0.0480%" height="15" fill="rgb(232,125,22)" fg:x="1273" fg:w="2"/><text x="30.7776%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.38%)</title><rect x="30.3357%" y="1157" width="0.3837%" height="15" fill="rgb(244,57,34)" fg:x="1265" fg:w="16"/><text x="30.5857%" y="1167.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.14%)</title><rect x="30.5755%" y="1141" width="0.1439%" height="15" fill="rgb(214,203,32)" fg:x="1275" fg:w="6"/><text x="30.8255%" y="1151.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (18 samples, 0.43%)</title><rect x="30.3118%" y="1189" width="0.4317%" height="15" fill="rgb(207,58,43)" fg:x="1264" fg:w="18"/><text x="30.5618%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.43%)</title><rect x="30.3118%" y="1173" width="0.4317%" height="15" fill="rgb(215,193,15)" fg:x="1264" fg:w="18"/><text x="30.5618%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="30.7194%" y="1157" width="0.0240%" height="15" fill="rgb(232,15,44)" fg:x="1281" fg:w="1"/><text x="30.9694%" y="1167.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (21 samples, 0.50%)</title><rect x="30.2878%" y="1205" width="0.5036%" height="15" fill="rgb(212,3,48)" fg:x="1263" fg:w="21"/><text x="30.5378%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.05%)</title><rect x="30.7434%" y="1189" width="0.0480%" height="15" fill="rgb(218,128,7)" fg:x="1282" fg:w="2"/><text x="30.9934%" y="1199.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (1 samples, 0.02%)</title><rect x="30.7914%" y="1205" width="0.0240%" height="15" fill="rgb(226,216,39)" fg:x="1284" fg:w="1"/><text x="31.0414%" y="1215.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (27 samples, 0.65%)</title><rect x="30.1918%" y="1269" width="0.6475%" height="15" fill="rgb(243,47,51)" fg:x="1259" fg:w="27"/><text x="30.4418%" y="1279.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.65%)</title><rect x="30.1918%" y="1253" width="0.6475%" height="15" fill="rgb(241,183,40)" fg:x="1259" fg:w="27"/><text x="30.4418%" y="1263.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (26 samples, 0.62%)</title><rect x="30.2158%" y="1237" width="0.6235%" height="15" fill="rgb(231,217,32)" fg:x="1260" fg:w="26"/><text x="30.4658%" y="1247.50"></text></g><g><title>databend-query`__rust_realloc (26 samples, 0.62%)</title><rect x="30.2158%" y="1221" width="0.6235%" height="15" fill="rgb(229,61,38)" fg:x="1260" fg:w="26"/><text x="30.4658%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="30.8153%" y="1205" width="0.0240%" height="15" fill="rgb(225,210,5)" fg:x="1285" fg:w="1"/><text x="31.0653%" y="1215.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="30.8633%" y="1221" width="0.0240%" height="15" fill="rgb(231,79,45)" fg:x="1287" fg:w="1"/><text x="31.1133%" y="1231.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (3 samples, 0.07%)</title><rect x="30.8873%" y="1221" width="0.0719%" height="15" fill="rgb(224,100,7)" fg:x="1288" fg:w="3"/><text x="31.1373%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="31.5348%" y="1157" width="0.0480%" height="15" fill="rgb(241,198,18)" fg:x="1315" fg:w="2"/><text x="31.7848%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="31.5348%" y="1141" width="0.0480%" height="15" fill="rgb(252,97,53)" fg:x="1315" fg:w="2"/><text x="31.7848%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="31.5348%" y="1125" width="0.0480%" height="15" fill="rgb(220,88,7)" fg:x="1315" fg:w="2"/><text x="31.7848%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.05%)</title><rect x="31.5348%" y="1109" width="0.0480%" height="15" fill="rgb(213,176,14)" fg:x="1315" fg:w="2"/><text x="31.7848%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="31.5588%" y="1093" width="0.0240%" height="15" fill="rgb(246,73,7)" fg:x="1316" fg:w="1"/><text x="31.8088%" y="1103.50"></text></g><g><title>databend-query`__rust_alloc (4 samples, 0.10%)</title><rect x="31.5108%" y="1173" width="0.0959%" height="15" fill="rgb(245,64,36)" fg:x="1314" fg:w="4"/><text x="31.7608%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="31.5827%" y="1157" width="0.0240%" height="15" fill="rgb(245,80,10)" fg:x="1317" fg:w="1"/><text x="31.8327%" y="1167.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (11 samples, 0.26%)</title><rect x="31.3909%" y="1205" width="0.2638%" height="15" fill="rgb(232,107,50)" fg:x="1309" fg:w="11"/><text x="31.6409%" y="1215.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (6 samples, 0.14%)</title><rect x="31.5108%" y="1189" width="0.1439%" height="15" fill="rgb(253,3,0)" fg:x="1314" fg:w="6"/><text x="31.7608%" y="1199.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (2 samples, 0.05%)</title><rect x="31.6067%" y="1173" width="0.0480%" height="15" fill="rgb(212,99,53)" fg:x="1318" fg:w="2"/><text x="31.8567%" y="1183.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="31.8465%" y="1189" width="0.0240%" height="15" fill="rgb(249,111,54)" fg:x="1328" fg:w="1"/><text x="32.0965%" y="1199.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="31.8705%" y="1189" width="0.0240%" height="15" fill="rgb(249,55,30)" fg:x="1329" fg:w="1"/><text x="32.1205%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="31.9424%" y="1157" width="0.0240%" height="15" fill="rgb(237,47,42)" fg:x="1332" fg:w="1"/><text x="32.1924%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.12%)</title><rect x="32.1343%" y="1109" width="0.1199%" height="15" fill="rgb(211,20,18)" fg:x="1340" fg:w="5"/><text x="32.3843%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.31%)</title><rect x="31.9664%" y="1157" width="0.3118%" height="15" fill="rgb(231,203,46)" fg:x="1333" fg:w="13"/><text x="32.2164%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.31%)</title><rect x="31.9664%" y="1141" width="0.3118%" height="15" fill="rgb(237,142,3)" fg:x="1333" fg:w="13"/><text x="32.2164%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.31%)</title><rect x="31.9664%" y="1125" width="0.3118%" height="15" fill="rgb(241,107,1)" fg:x="1333" fg:w="13"/><text x="32.2164%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="32.2542%" y="1109" width="0.0240%" height="15" fill="rgb(229,83,13)" fg:x="1345" fg:w="1"/><text x="32.5042%" y="1119.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (60 samples, 1.44%)</title><rect x="30.8633%" y="1253" width="1.4388%" height="15" fill="rgb(241,91,40)" fg:x="1287" fg:w="60"/><text x="31.1133%" y="1263.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (60 samples, 1.44%)</title><rect x="30.8633%" y="1237" width="1.4388%" height="15" fill="rgb(225,3,45)" fg:x="1287" fg:w="60"/><text x="31.1133%" y="1247.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56 samples, 1.34%)</title><rect x="30.9592%" y="1221" width="1.3429%" height="15" fill="rgb(244,223,14)" fg:x="1291" fg:w="56"/><text x="31.2092%" y="1231.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (27 samples, 0.65%)</title><rect x="31.6547%" y="1205" width="0.6475%" height="15" fill="rgb(224,124,37)" fg:x="1320" fg:w="27"/><text x="31.9047%" y="1215.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (17 samples, 0.41%)</title><rect x="31.8945%" y="1189" width="0.4077%" height="15" fill="rgb(251,171,30)" fg:x="1330" fg:w="17"/><text x="32.1445%" y="1199.50"></text></g><g><title>databend-query`__rust_alloc (16 samples, 0.38%)</title><rect x="31.9185%" y="1173" width="0.3837%" height="15" fill="rgb(236,46,54)" fg:x="1331" fg:w="16"/><text x="32.1685%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="32.2782%" y="1157" width="0.0240%" height="15" fill="rgb(245,213,5)" fg:x="1346" fg:w="1"/><text x="32.5282%" y="1167.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.05%)</title><rect x="32.3022%" y="1253" width="0.0480%" height="15" fill="rgb(230,144,27)" fg:x="1347" fg:w="2"/><text x="32.5522%" y="1263.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="32.4221%" y="1237" width="0.0240%" height="15" fill="rgb(220,86,6)" fg:x="1352" fg:w="1"/><text x="32.6721%" y="1247.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="32.4460%" y="1237" width="0.0240%" height="15" fill="rgb(240,20,13)" fg:x="1353" fg:w="1"/><text x="32.6960%" y="1247.50"></text></g><g><title>databend-query`arrow2::bitmap::mutable::MutableBitmap::extend_aligned (1 samples, 0.02%)</title><rect x="32.4700%" y="1237" width="0.0240%" height="15" fill="rgb(217,89,34)" fg:x="1354" fg:w="1"/><text x="32.7200%" y="1247.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="32.4700%" y="1221" width="0.0240%" height="15" fill="rgb(229,13,5)" fg:x="1354" fg:w="1"/><text x="32.7200%" y="1231.50"></text></g><g><title>databend-query`common_expression::types::nullable::NullableColumn&lt;T&gt;::slice (1 samples, 0.02%)</title><rect x="32.4940%" y="1237" width="0.0240%" height="15" fill="rgb(244,67,35)" fg:x="1355" fg:w="1"/><text x="32.7440%" y="1247.50"></text></g><g><title>databend-query`common_expression::types::nullable::NullableColumnBuilder&lt;T&gt;::append_column (6 samples, 0.14%)</title><rect x="32.5180%" y="1237" width="0.1439%" height="15" fill="rgb(221,40,2)" fg:x="1356" fg:w="6"/><text x="32.7680%" y="1247.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumnBuilder::append_column (2 samples, 0.05%)</title><rect x="32.6619%" y="1237" width="0.0480%" height="15" fill="rgb(237,157,21)" fg:x="1362" fg:w="2"/><text x="32.9119%" y="1247.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="32.7338%" y="1221" width="0.0240%" height="15" fill="rgb(222,94,11)" fg:x="1365" fg:w="1"/><text x="32.9838%" y="1231.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumnBuilder::append_column (3 samples, 0.07%)</title><rect x="32.7098%" y="1237" width="0.0719%" height="15" fill="rgb(249,113,6)" fg:x="1364" fg:w="3"/><text x="32.9598%" y="1247.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="32.7578%" y="1221" width="0.0240%" height="15" fill="rgb(238,137,36)" fg:x="1366" fg:w="1"/><text x="33.0078%" y="1231.50"></text></g><g><title>databend-query`common_expression::values::Column::len (3 samples, 0.07%)</title><rect x="32.7818%" y="1237" width="0.0719%" height="15" fill="rgb(210,102,26)" fg:x="1367" fg:w="3"/><text x="33.0318%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (2 samples, 0.05%)</title><rect x="32.9496%" y="1221" width="0.0480%" height="15" fill="rgb(218,30,30)" fg:x="1374" fg:w="2"/><text x="33.1996%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="32.9496%" y="1205" width="0.0480%" height="15" fill="rgb(214,67,26)" fg:x="1374" fg:w="2"/><text x="33.1996%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="32.9496%" y="1189" width="0.0480%" height="15" fill="rgb(251,9,53)" fg:x="1374" fg:w="2"/><text x="33.1996%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="32.9736%" y="1173" width="0.0240%" height="15" fill="rgb(228,204,25)" fg:x="1375" fg:w="1"/><text x="33.2236%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="32.9736%" y="1157" width="0.0240%" height="15" fill="rgb(207,153,8)" fg:x="1375" fg:w="1"/><text x="33.2236%" y="1167.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumn::len (5 samples, 0.12%)</title><rect x="33.0456%" y="1189" width="0.1199%" height="15" fill="rgb(242,9,16)" fg:x="1378" fg:w="5"/><text x="33.2956%" y="1199.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumn::slice (1 samples, 0.02%)</title><rect x="33.1655%" y="1189" width="0.0240%" height="15" fill="rgb(217,211,10)" fg:x="1383" fg:w="1"/><text x="33.4155%" y="1199.50"></text></g><g><title>databend-query`common_expression::types::nullable::NullableColumn&lt;T&gt;::slice (9 samples, 0.22%)</title><rect x="32.9976%" y="1221" width="0.2158%" height="15" fill="rgb(219,228,52)" fg:x="1376" fg:w="9"/><text x="33.2476%" y="1231.50"></text></g><g><title>databend-query`common_expression::values::Column::slice (9 samples, 0.22%)</title><rect x="32.9976%" y="1205" width="0.2158%" height="15" fill="rgb(231,92,29)" fg:x="1376" fg:w="9"/><text x="33.2476%" y="1215.50"></text></g><g><title>databend-query`common_expression::values::Column::len (1 samples, 0.02%)</title><rect x="33.1894%" y="1189" width="0.0240%" height="15" fill="rgb(232,8,23)" fg:x="1384" fg:w="1"/><text x="33.4394%" y="1199.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumn::len (1 samples, 0.02%)</title><rect x="33.2134%" y="1221" width="0.0240%" height="15" fill="rgb(216,211,34)" fg:x="1385" fg:w="1"/><text x="33.4634%" y="1231.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumn::slice (1 samples, 0.02%)</title><rect x="33.2374%" y="1221" width="0.0240%" height="15" fill="rgb(236,151,0)" fg:x="1386" fg:w="1"/><text x="33.4874%" y="1231.50"></text></g><g><title>databend-query`common_expression::values::Column::slice (19 samples, 0.46%)</title><rect x="32.8537%" y="1237" width="0.4556%" height="15" fill="rgb(209,168,3)" fg:x="1370" fg:w="19"/><text x="33.1037%" y="1247.50"></text></g><g><title>databend-query`common_expression::values::Column::len (2 samples, 0.05%)</title><rect x="33.2614%" y="1221" width="0.0480%" height="15" fill="rgb(208,129,28)" fg:x="1387" fg:w="2"/><text x="33.5114%" y="1231.50"></text></g><g><title>databend-query`common_expression::values::ColumnBuilder::append_column (1 samples, 0.02%)</title><rect x="33.3094%" y="1237" width="0.0240%" height="15" fill="rgb(229,78,22)" fg:x="1389" fg:w="1"/><text x="33.5594%" y="1247.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (7 samples, 0.17%)</title><rect x="33.3333%" y="1237" width="0.1679%" height="15" fill="rgb(228,187,13)" fg:x="1390" fg:w="7"/><text x="33.5833%" y="1247.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::nullable::NullableColumn&lt;common_expression::types::any::AnyType&gt;&gt; (4 samples, 0.10%)</title><rect x="33.4053%" y="1221" width="0.0959%" height="15" fill="rgb(240,119,24)" fg:x="1393" fg:w="4"/><text x="33.6553%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (4 samples, 0.10%)</title><rect x="33.4053%" y="1205" width="0.0959%" height="15" fill="rgb(209,194,42)" fg:x="1393" fg:w="4"/><text x="33.6553%" y="1215.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::block::DataBlock&gt;::take_column_by_slices_limit (50 samples, 1.20%)</title><rect x="32.3501%" y="1253" width="1.1990%" height="15" fill="rgb(247,200,46)" fg:x="1349" fg:w="50"/><text x="32.6001%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="33.5012%" y="1237" width="0.0480%" height="15" fill="rgb(218,76,16)" fg:x="1397" fg:w="2"/><text x="33.7512%" y="1247.50"></text></g><g><title>databend-query`common_expression::types::nullable::NullableColumnBuilder&lt;T&gt;::append_column (1 samples, 0.02%)</title><rect x="33.5492%" y="1253" width="0.0240%" height="15" fill="rgb(225,21,48)" fg:x="1399" fg:w="1"/><text x="33.7992%" y="1263.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="33.6451%" y="1221" width="0.0240%" height="15" fill="rgb(239,223,50)" fg:x="1403" fg:w="1"/><text x="33.8951%" y="1231.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="33.6691%" y="1205" width="0.0240%" height="15" fill="rgb(244,45,21)" fg:x="1404" fg:w="1"/><text x="33.9191%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::DataType&gt; (1 samples, 0.02%)</title><rect x="33.6930%" y="1205" width="0.0240%" height="15" fill="rgb(232,33,43)" fg:x="1405" fg:w="1"/><text x="33.9430%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="33.7170%" y="1205" width="0.0240%" height="15" fill="rgb(209,8,3)" fg:x="1406" fg:w="1"/><text x="33.9670%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="33.7410%" y="1205" width="0.0480%" height="15" fill="rgb(214,25,53)" fg:x="1407" fg:w="2"/><text x="33.9910%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="33.7410%" y="1189" width="0.0480%" height="15" fill="rgb(254,186,54)" fg:x="1407" fg:w="2"/><text x="33.9910%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::BlockEntry&gt; (15 samples, 0.36%)</title><rect x="33.6691%" y="1221" width="0.3597%" height="15" fill="rgb(208,174,49)" fg:x="1404" fg:w="15"/><text x="33.9191%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.24%)</title><rect x="33.7890%" y="1205" width="0.2398%" height="15" fill="rgb(233,191,51)" fg:x="1409" fg:w="10"/><text x="34.0390%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::DataType&gt; (1 samples, 0.02%)</title><rect x="34.0288%" y="1221" width="0.0240%" height="15" fill="rgb(222,134,10)" fg:x="1419" fg:w="1"/><text x="34.2788%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::string::StringColumn&gt; (1 samples, 0.02%)</title><rect x="34.0528%" y="1221" width="0.0240%" height="15" fill="rgb(230,226,20)" fg:x="1420" fg:w="1"/><text x="34.3028%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (4 samples, 0.10%)</title><rect x="34.0767%" y="1221" width="0.0959%" height="15" fill="rgb(251,111,25)" fg:x="1421" fg:w="4"/><text x="34.3267%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (1 samples, 0.02%)</title><rect x="34.1487%" y="1205" width="0.0240%" height="15" fill="rgb(224,40,46)" fg:x="1424" fg:w="1"/><text x="34.3987%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="34.1727%" y="1221" width="0.0480%" height="15" fill="rgb(236,108,47)" fg:x="1425" fg:w="2"/><text x="34.4227%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="34.2206%" y="1221" width="0.0719%" height="15" fill="rgb(234,93,0)" fg:x="1427" fg:w="3"/><text x="34.4706%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="34.2446%" y="1205" width="0.0480%" height="15" fill="rgb(224,213,32)" fg:x="1428" fg:w="2"/><text x="34.4946%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="34.2926%" y="1221" width="0.0240%" height="15" fill="rgb(251,11,48)" fg:x="1430" fg:w="1"/><text x="34.5426%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (34 samples, 0.82%)</title><rect x="33.5731%" y="1253" width="0.8153%" height="15" fill="rgb(236,173,5)" fg:x="1400" fg:w="34"/><text x="33.8231%" y="1263.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.82%)</title><rect x="33.5731%" y="1237" width="0.8153%" height="15" fill="rgb(230,95,12)" fg:x="1400" fg:w="34"/><text x="33.8231%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.07%)</title><rect x="34.3165%" y="1221" width="0.0719%" height="15" fill="rgb(232,209,1)" fg:x="1431" fg:w="3"/><text x="34.5665%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.02%)</title><rect x="34.3645%" y="1205" width="0.0240%" height="15" fill="rgb(232,6,1)" fg:x="1433" fg:w="1"/><text x="34.6145%" y="1215.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="34.3645%" y="1189" width="0.0240%" height="15" fill="rgb(210,224,50)" fg:x="1433" fg:w="1"/><text x="34.6145%" y="1199.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::block::DataBlock&gt;::take_by_slices_limit_from_blocks (149 samples, 3.57%)</title><rect x="30.8393%" y="1269" width="3.5731%" height="15" fill="rgb(228,127,35)" fg:x="1286" fg:w="149"/><text x="31.0893%" y="1279.50">data..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="34.3885%" y="1253" width="0.0240%" height="15" fill="rgb(245,102,45)" fg:x="1434" fg:w="1"/><text x="34.6385%" y="1263.50"></text></g><g><title>databend-query`common_expression::row::row_converter::RowConverter::convert_columns (1 samples, 0.02%)</title><rect x="34.4125%" y="1269" width="0.0240%" height="15" fill="rgb(214,1,49)" fg:x="1435" fg:w="1"/><text x="34.6625%" y="1279.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="34.5084%" y="1237" width="0.0240%" height="15" fill="rgb(226,163,40)" fg:x="1439" fg:w="1"/><text x="34.7584%" y="1247.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.10%)</title><rect x="34.5324%" y="1237" width="0.0959%" height="15" fill="rgb(239,212,28)" fg:x="1440" fg:w="4"/><text x="34.7824%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (4 samples, 0.10%)</title><rect x="34.5324%" y="1221" width="0.0959%" height="15" fill="rgb(220,20,13)" fg:x="1440" fg:w="4"/><text x="34.7824%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.10%)</title><rect x="34.5324%" y="1205" width="0.0959%" height="15" fill="rgb(210,164,35)" fg:x="1440" fg:w="4"/><text x="34.7824%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.10%)</title><rect x="34.5324%" y="1189" width="0.0959%" height="15" fill="rgb(248,109,41)" fg:x="1440" fg:w="4"/><text x="34.7824%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.10%)</title><rect x="34.5324%" y="1173" width="0.0959%" height="15" fill="rgb(238,23,50)" fg:x="1440" fg:w="4"/><text x="34.7824%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="34.5324%" y="1157" width="0.0959%" height="15" fill="rgb(211,48,49)" fg:x="1440" fg:w="4"/><text x="34.7824%" y="1167.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="34.7242%" y="1221" width="0.0480%" height="15" fill="rgb(223,36,21)" fg:x="1448" fg:w="2"/><text x="34.9742%" y="1231.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="34.8201%" y="1173" width="0.0240%" height="15" fill="rgb(207,123,46)" fg:x="1452" fg:w="1"/><text x="35.0701%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="34.8201%" y="1157" width="0.0240%" height="15" fill="rgb(240,218,32)" fg:x="1452" fg:w="1"/><text x="35.0701%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="34.8201%" y="1141" width="0.0240%" height="15" fill="rgb(252,5,43)" fg:x="1452" fg:w="1"/><text x="35.0701%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="34.8201%" y="1125" width="0.0240%" height="15" fill="rgb(252,84,19)" fg:x="1452" fg:w="1"/><text x="35.0701%" y="1135.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (1 samples, 0.02%)</title><rect x="34.8441%" y="1173" width="0.0240%" height="15" fill="rgb(243,152,39)" fg:x="1453" fg:w="1"/><text x="35.0941%" y="1183.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (3 samples, 0.07%)</title><rect x="34.8201%" y="1205" width="0.0719%" height="15" fill="rgb(234,160,15)" fg:x="1452" fg:w="3"/><text x="35.0701%" y="1215.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (3 samples, 0.07%)</title><rect x="34.8201%" y="1189" width="0.0719%" height="15" fill="rgb(237,34,20)" fg:x="1452" fg:w="3"/><text x="35.0701%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="34.8681%" y="1173" width="0.0240%" height="15" fill="rgb(229,97,13)" fg:x="1454" fg:w="1"/><text x="35.1181%" y="1183.50"></text></g><g><title>databend-query`__rust_dealloc (4 samples, 0.10%)</title><rect x="34.8921%" y="1205" width="0.0959%" height="15" fill="rgb(234,71,50)" fg:x="1455" fg:w="4"/><text x="35.1421%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="35.0600%" y="1157" width="0.0480%" height="15" fill="rgb(253,155,4)" fg:x="1462" fg:w="2"/><text x="35.3100%" y="1167.50"></text></g><g><title>databend-query`__rust_alloc (3 samples, 0.07%)</title><rect x="35.0600%" y="1173" width="0.0719%" height="15" fill="rgb(222,185,37)" fg:x="1462" fg:w="3"/><text x="35.3100%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="35.1079%" y="1157" width="0.0240%" height="15" fill="rgb(251,177,13)" fg:x="1464" fg:w="1"/><text x="35.3579%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="35.1079%" y="1141" width="0.0240%" height="15" fill="rgb(250,179,40)" fg:x="1464" fg:w="1"/><text x="35.3579%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="35.1079%" y="1125" width="0.0240%" height="15" fill="rgb(242,44,2)" fg:x="1464" fg:w="1"/><text x="35.3579%" y="1135.50"></text></g><g><title>databend-query`common_expression::types::DataType::wrap_nullable (6 samples, 0.14%)</title><rect x="35.0120%" y="1189" width="0.1439%" height="15" fill="rgb(216,177,13)" fg:x="1460" fg:w="6"/><text x="35.2620%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="35.1319%" y="1173" width="0.0240%" height="15" fill="rgb(216,106,43)" fg:x="1465" fg:w="1"/><text x="35.3819%" y="1183.50"></text></g><g><title>databend-query`common_expression::values::Column::data_type (8 samples, 0.19%)</title><rect x="34.9880%" y="1205" width="0.1918%" height="15" fill="rgb(216,183,2)" fg:x="1459" fg:w="8"/><text x="35.2380%" y="1215.50"></text></g><g><title>databend-query`common_expression::values::Column::data_type (1 samples, 0.02%)</title><rect x="35.1559%" y="1189" width="0.0240%" height="15" fill="rgb(249,75,3)" fg:x="1466" fg:w="1"/><text x="35.4059%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;common_expression::types::DataType&gt;&gt; (1 samples, 0.02%)</title><rect x="35.1799%" y="1205" width="0.0240%" height="15" fill="rgb(219,67,39)" fg:x="1467" fg:w="1"/><text x="35.4299%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::DataType&gt; (1 samples, 0.02%)</title><rect x="35.2038%" y="1205" width="0.0240%" height="15" fill="rgb(253,228,2)" fg:x="1468" fg:w="1"/><text x="35.4538%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.10%)</title><rect x="35.2278%" y="1205" width="0.0959%" height="15" fill="rgb(235,138,27)" fg:x="1469" fg:w="4"/><text x="35.4778%" y="1215.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (36 samples, 0.86%)</title><rect x="34.5084%" y="1253" width="0.8633%" height="15" fill="rgb(236,97,51)" fg:x="1439" fg:w="36"/><text x="34.7584%" y="1263.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (31 samples, 0.74%)</title><rect x="34.6283%" y="1237" width="0.7434%" height="15" fill="rgb(240,80,30)" fg:x="1444" fg:w="31"/><text x="34.8783%" y="1247.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 0.60%)</title><rect x="34.7722%" y="1221" width="0.5995%" height="15" fill="rgb(230,178,19)" fg:x="1450" fg:w="25"/><text x="35.0222%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="35.3237%" y="1205" width="0.0480%" height="15" fill="rgb(210,190,27)" fg:x="1473" fg:w="2"/><text x="35.5737%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="35.3237%" y="1189" width="0.0480%" height="15" fill="rgb(222,107,31)" fg:x="1473" fg:w="2"/><text x="35.5737%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="35.5156%" y="1205" width="0.0240%" height="15" fill="rgb(216,127,34)" fg:x="1481" fg:w="1"/><text x="35.7656%" y="1215.50"></text></g><g><title>databend-query`__rust_alloc (2 samples, 0.05%)</title><rect x="35.5156%" y="1221" width="0.0480%" height="15" fill="rgb(234,116,52)" fg:x="1481" fg:w="2"/><text x="35.7656%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="35.5396%" y="1205" width="0.0240%" height="15" fill="rgb(222,124,15)" fg:x="1482" fg:w="1"/><text x="35.7896%" y="1215.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (1 samples, 0.02%)</title><rect x="35.5635%" y="1205" width="0.0240%" height="15" fill="rgb(231,179,28)" fg:x="1483" fg:w="1"/><text x="35.8135%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="35.5875%" y="1205" width="0.0240%" height="15" fill="rgb(226,93,45)" fg:x="1484" fg:w="1"/><text x="35.8375%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.07%)</title><rect x="35.6835%" y="1173" width="0.0719%" height="15" fill="rgb(215,8,51)" fg:x="1488" fg:w="3"/><text x="35.9335%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="35.7314%" y="1157" width="0.0240%" height="15" fill="rgb(223,106,5)" fg:x="1490" fg:w="1"/><text x="35.9814%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.19%)</title><rect x="35.6115%" y="1205" width="0.1918%" height="15" fill="rgb(250,191,5)" fg:x="1485" fg:w="8"/><text x="35.8615%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (6 samples, 0.14%)</title><rect x="35.6595%" y="1189" width="0.1439%" height="15" fill="rgb(242,132,44)" fg:x="1487" fg:w="6"/><text x="35.9095%" y="1199.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.05%)</title><rect x="35.7554%" y="1173" width="0.0480%" height="15" fill="rgb(251,152,29)" fg:x="1491" fg:w="2"/><text x="36.0054%" y="1183.50"></text></g><g><title>databend-query`__rust_alloc_zeroed (11 samples, 0.26%)</title><rect x="35.5635%" y="1221" width="0.2638%" height="15" fill="rgb(218,179,5)" fg:x="1483" fg:w="11"/><text x="35.8135%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.02%)</title><rect x="35.8034%" y="1205" width="0.0240%" height="15" fill="rgb(227,67,19)" fg:x="1493" fg:w="1"/><text x="36.0534%" y="1215.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.34%)</title><rect x="35.5156%" y="1237" width="0.3357%" height="15" fill="rgb(233,119,31)" fg:x="1481" fg:w="14"/><text x="35.7656%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.02%)</title><rect x="35.8273%" y="1221" width="0.0240%" height="15" fill="rgb(241,120,22)" fg:x="1494" fg:w="1"/><text x="36.0773%" y="1231.50"></text></g><g><title>databend-query`common_expression::row::fixed::encode (18 samples, 0.43%)</title><rect x="35.8513%" y="1237" width="0.4317%" height="15" fill="rgb(224,102,30)" fg:x="1495" fg:w="18"/><text x="36.1013%" y="1247.50"></text></g><g><title>databend-query`arrow2::bitmap::utils::iterator::BitmapIter::new (1 samples, 0.02%)</title><rect x="36.2590%" y="1221" width="0.0240%" height="15" fill="rgb(210,164,37)" fg:x="1512" fg:w="1"/><text x="36.5090%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.07%)</title><rect x="36.2830%" y="1205" width="0.0719%" height="15" fill="rgb(226,191,16)" fg:x="1513" fg:w="3"/><text x="36.5330%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="36.4748%" y="1157" width="0.0240%" height="15" fill="rgb(214,40,45)" fg:x="1521" fg:w="1"/><text x="36.7248%" y="1167.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumnBuilder::build (16 samples, 0.38%)</title><rect x="36.2830%" y="1237" width="0.3837%" height="15" fill="rgb(244,29,26)" fg:x="1513" fg:w="16"/><text x="36.5330%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (16 samples, 0.38%)</title><rect x="36.2830%" y="1221" width="0.3837%" height="15" fill="rgb(216,16,5)" fg:x="1513" fg:w="16"/><text x="36.5330%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.31%)</title><rect x="36.3549%" y="1205" width="0.3118%" height="15" fill="rgb(249,76,35)" fg:x="1516" fg:w="13"/><text x="36.6049%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.31%)</title><rect x="36.3549%" y="1189" width="0.3118%" height="15" fill="rgb(207,11,44)" fg:x="1516" fg:w="13"/><text x="36.6049%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.31%)</title><rect x="36.3549%" y="1173" width="0.3118%" height="15" fill="rgb(228,190,49)" fg:x="1516" fg:w="13"/><text x="36.6049%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.17%)</title><rect x="36.4988%" y="1157" width="0.1679%" height="15" fill="rgb(214,173,12)" fg:x="1522" fg:w="7"/><text x="36.7488%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="36.6427%" y="1141" width="0.0240%" height="15" fill="rgb(218,26,35)" fg:x="1528" fg:w="1"/><text x="36.8927%" y="1151.50"></text></g><g><title>databend-query`common_expression::row::row_converter::RowConverter::convert_columns (55 samples, 1.32%)</title><rect x="35.3717%" y="1253" width="1.3189%" height="15" fill="rgb(220,200,19)" fg:x="1475" fg:w="55"/><text x="35.6217%" y="1263.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="36.6667%" y="1237" width="0.0240%" height="15" fill="rgb(239,95,49)" fg:x="1529" fg:w="1"/><text x="36.9167%" y="1247.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_expression::values::Column]&gt; (1 samples, 0.02%)</title><rect x="36.6906%" y="1253" width="0.0240%" height="15" fill="rgb(235,85,53)" fg:x="1530" fg:w="1"/><text x="36.9406%" y="1263.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (1 samples, 0.02%)</title><rect x="36.7146%" y="1221" width="0.0240%" height="15" fill="rgb(233,133,31)" fg:x="1531" fg:w="1"/><text x="36.9646%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (1 samples, 0.02%)</title><rect x="36.7146%" y="1205" width="0.0240%" height="15" fill="rgb(218,25,20)" fg:x="1531" fg:w="1"/><text x="36.9646%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="36.7386%" y="1221" width="0.0240%" height="15" fill="rgb(252,210,38)" fg:x="1532" fg:w="1"/><text x="36.9886%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_expression::values::Column]&gt; (3 samples, 0.07%)</title><rect x="36.7146%" y="1237" width="0.0719%" height="15" fill="rgb(242,134,21)" fg:x="1531" fg:w="3"/><text x="36.9646%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="36.7626%" y="1221" width="0.0240%" height="15" fill="rgb(213,28,48)" fg:x="1533" fg:w="1"/><text x="37.0126%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::values::Column&gt;&gt; (4 samples, 0.10%)</title><rect x="36.7146%" y="1253" width="0.0959%" height="15" fill="rgb(250,196,2)" fg:x="1531" fg:w="4"/><text x="36.9646%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="36.7866%" y="1237" width="0.0240%" height="15" fill="rgb(227,5,17)" fg:x="1534" fg:w="1"/><text x="37.0366%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="36.8106%" y="1237" width="0.0240%" height="15" fill="rgb(221,226,24)" fg:x="1535" fg:w="1"/><text x="37.0606%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="36.8106%" y="1253" width="0.0480%" height="15" fill="rgb(211,5,48)" fg:x="1535" fg:w="2"/><text x="37.0606%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="36.8345%" y="1237" width="0.0240%" height="15" fill="rgb(219,150,6)" fg:x="1536" fg:w="1"/><text x="37.0845%" y="1247.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::sort::rows::common::_&lt;impl common_pipeline_transforms::processors::transforms::sort::rows::RowConverter&lt;common_expression::types::string::StringColumn&gt; for common_expression::row::row_converter::RowConverter&gt;::convert (102 samples, 2.45%)</title><rect x="34.4365%" y="1269" width="2.4460%" height="15" fill="rgb(251,46,16)" fg:x="1436" fg:w="102"/><text x="34.6865%" y="1279.50">da..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="36.8585%" y="1253" width="0.0240%" height="15" fill="rgb(220,204,40)" fg:x="1537" fg:w="1"/><text x="37.1085%" y="1263.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="36.8825%" y="1221" width="0.0240%" height="15" fill="rgb(211,85,2)" fg:x="1538" fg:w="1"/><text x="37.1325%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="36.9065%" y="1221" width="0.0240%" height="15" fill="rgb(229,17,7)" fg:x="1539" fg:w="1"/><text x="37.1565%" y="1231.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.10%)</title><rect x="36.8825%" y="1253" width="0.0959%" height="15" fill="rgb(239,72,28)" fg:x="1538" fg:w="4"/><text x="37.1325%" y="1263.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::BlockEntry&gt; (4 samples, 0.10%)</title><rect x="36.8825%" y="1237" width="0.0959%" height="15" fill="rgb(230,47,54)" fg:x="1538" fg:w="4"/><text x="37.1325%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="36.9305%" y="1221" width="0.0480%" height="15" fill="rgb(214,50,8)" fg:x="1540" fg:w="2"/><text x="37.1805%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="36.9305%" y="1205" width="0.0480%" height="15" fill="rgb(216,198,43)" fg:x="1540" fg:w="2"/><text x="37.1805%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (5 samples, 0.12%)</title><rect x="36.8825%" y="1269" width="0.1199%" height="15" fill="rgb(234,20,35)" fg:x="1538" fg:w="5"/><text x="37.1325%" y="1279.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="36.9784%" y="1253" width="0.0240%" height="15" fill="rgb(254,45,19)" fg:x="1542" fg:w="1"/><text x="37.2284%" y="1263.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="37.0264%" y="1189" width="0.0240%" height="15" fill="rgb(219,14,44)" fg:x="1544" fg:w="1"/><text x="37.2764%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="37.0504%" y="1173" width="0.0480%" height="15" fill="rgb(217,220,26)" fg:x="1545" fg:w="2"/><text x="37.3004%" y="1183.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.14%)</title><rect x="37.0504%" y="1189" width="0.1439%" height="15" fill="rgb(213,158,28)" fg:x="1545" fg:w="6"/><text x="37.3004%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.10%)</title><rect x="37.0983%" y="1173" width="0.0959%" height="15" fill="rgb(252,51,52)" fg:x="1547" fg:w="4"/><text x="37.3483%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.07%)</title><rect x="37.1223%" y="1157" width="0.0719%" height="15" fill="rgb(246,89,16)" fg:x="1548" fg:w="3"/><text x="37.3723%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="37.1223%" y="1141" width="0.0719%" height="15" fill="rgb(216,158,49)" fg:x="1548" fg:w="3"/><text x="37.3723%" y="1151.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="37.1942%" y="1173" width="0.0240%" height="15" fill="rgb(236,107,19)" fg:x="1551" fg:w="1"/><text x="37.4442%" y="1183.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::DataType&gt; (1 samples, 0.02%)</title><rect x="37.2182%" y="1173" width="0.0240%" height="15" fill="rgb(228,185,30)" fg:x="1552" fg:w="1"/><text x="37.4682%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="37.2422%" y="1173" width="0.0480%" height="15" fill="rgb(246,134,8)" fg:x="1553" fg:w="2"/><text x="37.4922%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="37.2422%" y="1157" width="0.0480%" height="15" fill="rgb(214,143,50)" fg:x="1553" fg:w="2"/><text x="37.4922%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::BlockEntry&gt; (5 samples, 0.12%)</title><rect x="37.1942%" y="1189" width="0.1199%" height="15" fill="rgb(228,75,8)" fg:x="1551" fg:w="5"/><text x="37.4442%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="37.2902%" y="1173" width="0.0240%" height="15" fill="rgb(207,175,4)" fg:x="1555" fg:w="1"/><text x="37.5402%" y="1183.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::DataType&gt; (1 samples, 0.02%)</title><rect x="37.3141%" y="1189" width="0.0240%" height="15" fill="rgb(205,108,24)" fg:x="1556" fg:w="1"/><text x="37.5641%" y="1199.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="37.3381%" y="1173" width="0.0240%" height="15" fill="rgb(244,120,49)" fg:x="1557" fg:w="1"/><text x="37.5881%" y="1183.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="37.3381%" y="1157" width="0.0240%" height="15" fill="rgb(223,47,38)" fg:x="1557" fg:w="1"/><text x="37.5881%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::string::StringColumn&gt; (3 samples, 0.07%)</title><rect x="37.3381%" y="1189" width="0.0719%" height="15" fill="rgb(229,179,11)" fg:x="1557" fg:w="3"/><text x="37.5881%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.05%)</title><rect x="37.3621%" y="1173" width="0.0480%" height="15" fill="rgb(231,122,1)" fg:x="1558" fg:w="2"/><text x="37.6121%" y="1183.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="37.3861%" y="1157" width="0.0240%" height="15" fill="rgb(245,119,9)" fg:x="1559" fg:w="1"/><text x="37.6361%" y="1167.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="37.4820%" y="1157" width="0.0240%" height="15" fill="rgb(241,163,25)" fg:x="1563" fg:w="1"/><text x="37.7320%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.10%)</title><rect x="37.5060%" y="1157" width="0.0959%" height="15" fill="rgb(217,214,3)" fg:x="1564" fg:w="4"/><text x="37.7560%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.10%)</title><rect x="37.5060%" y="1141" width="0.0959%" height="15" fill="rgb(240,86,28)" fg:x="1564" fg:w="4"/><text x="37.7560%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.07%)</title><rect x="37.6019%" y="1157" width="0.0719%" height="15" fill="rgb(215,47,9)" fg:x="1568" fg:w="3"/><text x="37.8519%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="37.6499%" y="1141" width="0.0240%" height="15" fill="rgb(252,25,45)" fg:x="1570" fg:w="1"/><text x="37.8999%" y="1151.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (9 samples, 0.22%)</title><rect x="37.4820%" y="1173" width="0.2158%" height="15" fill="rgb(251,164,9)" fg:x="1563" fg:w="9"/><text x="37.7320%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="37.6739%" y="1157" width="0.0240%" height="15" fill="rgb(233,194,0)" fg:x="1571" fg:w="1"/><text x="37.9239%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.17%)</title><rect x="37.6978%" y="1173" width="0.1679%" height="15" fill="rgb(249,111,24)" fg:x="1572" fg:w="7"/><text x="37.9478%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.10%)</title><rect x="37.7698%" y="1157" width="0.0959%" height="15" fill="rgb(250,223,3)" fg:x="1575" fg:w="4"/><text x="38.0198%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (4 samples, 0.10%)</title><rect x="38.0576%" y="1157" width="0.0959%" height="15" fill="rgb(236,178,37)" fg:x="1587" fg:w="4"/><text x="38.3076%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (35 samples, 0.84%)</title><rect x="37.4101%" y="1189" width="0.8393%" height="15" fill="rgb(241,158,50)" fg:x="1560" fg:w="35"/><text x="37.6601%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.38%)</title><rect x="37.8657%" y="1173" width="0.3837%" height="15" fill="rgb(213,121,41)" fg:x="1579" fg:w="16"/><text x="38.1157%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (4 samples, 0.10%)</title><rect x="38.1535%" y="1157" width="0.0959%" height="15" fill="rgb(240,92,3)" fg:x="1591" fg:w="4"/><text x="38.4035%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.10%)</title><rect x="38.1535%" y="1141" width="0.0959%" height="15" fill="rgb(205,123,3)" fg:x="1591" fg:w="4"/><text x="38.4035%" y="1151.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="38.2494%" y="1189" width="0.0240%" height="15" fill="rgb(205,97,47)" fg:x="1595" fg:w="1"/><text x="38.4994%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.14%)</title><rect x="38.2974%" y="1173" width="0.1439%" height="15" fill="rgb(247,152,14)" fg:x="1597" fg:w="6"/><text x="38.5474%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.19%)</title><rect x="38.2734%" y="1189" width="0.1918%" height="15" fill="rgb(248,195,53)" fg:x="1596" fg:w="8"/><text x="38.5234%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="38.4412%" y="1173" width="0.0240%" height="15" fill="rgb(226,201,16)" fg:x="1603" fg:w="1"/><text x="38.6912%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.05%)</title><rect x="38.4652%" y="1189" width="0.0480%" height="15" fill="rgb(205,98,0)" fg:x="1604" fg:w="2"/><text x="38.7152%" y="1199.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (3 samples, 0.07%)</title><rect x="38.7530%" y="1173" width="0.0719%" height="15" fill="rgb(214,191,48)" fg:x="1616" fg:w="3"/><text x="39.0030%" y="1183.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 2.01%)</title><rect x="37.0024%" y="1205" width="2.0144%" height="15" fill="rgb(237,112,39)" fg:x="1543" fg:w="84"/><text x="37.2524%" y="1215.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.50%)</title><rect x="38.5132%" y="1189" width="0.5036%" height="15" fill="rgb(247,203,27)" fg:x="1606" fg:w="21"/><text x="38.7632%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (8 samples, 0.19%)</title><rect x="38.8249%" y="1173" width="0.1918%" height="15" fill="rgb(235,124,28)" fg:x="1619" fg:w="8"/><text x="39.0749%" y="1183.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.19%)</title><rect x="38.8249%" y="1157" width="0.1918%" height="15" fill="rgb(208,207,46)" fg:x="1619" fg:w="8"/><text x="39.0749%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (85 samples, 2.04%)</title><rect x="37.0024%" y="1221" width="2.0384%" height="15" fill="rgb(234,176,4)" fg:x="1543" fg:w="85"/><text x="37.2524%" y="1231.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="39.0168%" y="1205" width="0.0240%" height="15" fill="rgb(230,133,28)" fg:x="1627" fg:w="1"/><text x="39.2668%" y="1215.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (2 samples, 0.05%)</title><rect x="39.0408%" y="1221" width="0.0480%" height="15" fill="rgb(211,137,40)" fg:x="1628" fg:w="2"/><text x="39.2908%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="39.0887%" y="1221" width="0.0480%" height="15" fill="rgb(254,35,13)" fg:x="1630" fg:w="2"/><text x="39.3387%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="39.1127%" y="1205" width="0.0240%" height="15" fill="rgb(225,49,51)" fg:x="1631" fg:w="1"/><text x="39.3627%" y="1215.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (4 samples, 0.10%)</title><rect x="39.1847%" y="1205" width="0.0959%" height="15" fill="rgb(251,10,15)" fg:x="1634" fg:w="4"/><text x="39.4347%" y="1215.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.02%)</title><rect x="39.3525%" y="1189" width="0.0240%" height="15" fill="rgb(228,207,15)" fg:x="1641" fg:w="1"/><text x="39.6025%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.05%)</title><rect x="39.3765%" y="1189" width="0.0480%" height="15" fill="rgb(241,99,19)" fg:x="1642" fg:w="2"/><text x="39.6265%" y="1199.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.05%)</title><rect x="39.3765%" y="1173" width="0.0480%" height="15" fill="rgb(207,104,49)" fg:x="1642" fg:w="2"/><text x="39.6265%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.10%)</title><rect x="39.4245%" y="1189" width="0.0959%" height="15" fill="rgb(234,99,18)" fg:x="1644" fg:w="4"/><text x="39.6745%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="39.5204%" y="1189" width="0.0240%" height="15" fill="rgb(213,191,49)" fg:x="1648" fg:w="1"/><text x="39.7704%" y="1199.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="39.5204%" y="1173" width="0.0240%" height="15" fill="rgb(210,226,19)" fg:x="1648" fg:w="1"/><text x="39.7704%" y="1183.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.02%)</title><rect x="39.5444%" y="1173" width="0.0240%" height="15" fill="rgb(229,97,18)" fg:x="1649" fg:w="1"/><text x="39.7944%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.41%)</title><rect x="39.2806%" y="1205" width="0.4077%" height="15" fill="rgb(211,167,15)" fg:x="1638" fg:w="17"/><text x="39.5306%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (6 samples, 0.14%)</title><rect x="39.5444%" y="1189" width="0.1439%" height="15" fill="rgb(210,169,34)" fg:x="1649" fg:w="6"/><text x="39.7944%" y="1199.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.12%)</title><rect x="39.5683%" y="1173" width="0.1199%" height="15" fill="rgb(241,121,31)" fg:x="1650" fg:w="5"/><text x="39.8183%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.60%)</title><rect x="39.1367%" y="1221" width="0.5995%" height="15" fill="rgb(232,40,11)" fg:x="1632" fg:w="25"/><text x="39.3867%" y="1231.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (2 samples, 0.05%)</title><rect x="39.6882%" y="1205" width="0.0480%" height="15" fill="rgb(205,86,26)" fg:x="1655" fg:w="2"/><text x="39.9382%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="39.7362%" y="1221" width="0.0240%" height="15" fill="rgb(231,126,28)" fg:x="1657" fg:w="1"/><text x="39.9862%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="39.7602%" y="1221" width="0.0240%" height="15" fill="rgb(219,221,18)" fg:x="1658" fg:w="1"/><text x="40.0102%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::DataBlock&gt; (117 samples, 2.81%)</title><rect x="37.0024%" y="1237" width="2.8058%" height="15" fill="rgb(211,40,0)" fg:x="1543" fg:w="117"/><text x="37.2524%" y="1247.50">da..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (1 samples, 0.02%)</title><rect x="39.7842%" y="1221" width="0.0240%" height="15" fill="rgb(239,85,43)" fg:x="1659" fg:w="1"/><text x="40.0342%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;dyn common_expression::block::BlockMetaInfo&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="39.8082%" y="1237" width="0.0240%" height="15" fill="rgb(231,55,21)" fg:x="1660" fg:w="1"/><text x="40.0582%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="39.8321%" y="1237" width="0.0240%" height="15" fill="rgb(225,184,43)" fg:x="1661" fg:w="1"/><text x="40.0821%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="39.8561%" y="1237" width="0.0240%" height="15" fill="rgb(251,158,41)" fg:x="1662" fg:w="1"/><text x="40.1061%" y="1247.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::DataBlock&gt;&gt; (121 samples, 2.90%)</title><rect x="37.0024%" y="1269" width="2.9017%" height="15" fill="rgb(234,159,37)" fg:x="1543" fg:w="121"/><text x="37.2524%" y="1279.50">da..</text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 samples, 2.90%)</title><rect x="37.0024%" y="1253" width="2.9017%" height="15" fill="rgb(216,204,22)" fg:x="1543" fg:w="121"/><text x="37.2524%" y="1263.50">da..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.02%)</title><rect x="39.8801%" y="1237" width="0.0240%" height="15" fill="rgb(214,17,3)" fg:x="1663" fg:w="1"/><text x="40.1301%" y="1247.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="39.9041%" y="1269" width="0.0240%" height="15" fill="rgb(212,111,17)" fg:x="1664" fg:w="1"/><text x="40.1541%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="39.9281%" y="1269" width="0.0240%" height="15" fill="rgb(221,157,24)" fg:x="1665" fg:w="1"/><text x="40.1781%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="39.9281%" y="1253" width="0.0240%" height="15" fill="rgb(252,16,13)" fg:x="1665" fg:w="1"/><text x="40.1781%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.05%)</title><rect x="39.9520%" y="1269" width="0.0480%" height="15" fill="rgb(221,62,2)" fg:x="1666" fg:w="2"/><text x="40.2020%" y="1279.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="39.9520%" y="1253" width="0.0480%" height="15" fill="rgb(247,87,22)" fg:x="1666" fg:w="2"/><text x="40.2020%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.05%)</title><rect x="40.0000%" y="1269" width="0.0480%" height="15" fill="rgb(215,73,9)" fg:x="1668" fg:w="2"/><text x="40.2500%" y="1279.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_sort_merge::SortMergeCompactor&lt;R,Converter&gt; as common_pipeline_transforms::processors::transforms::transform_compact::Compactor&gt;::compact_final (541 samples, 12.97%)</title><rect x="27.0983%" y="1285" width="12.9736%" height="15" fill="rgb(207,175,33)" fg:x="1130" fg:w="541"/><text x="27.3483%" y="1295.50">databend-query`&lt;com..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="40.0480%" y="1269" width="0.0240%" height="15" fill="rgb(243,129,54)" fg:x="1670" fg:w="1"/><text x="40.2980%" y="1279.50"></text></g><g><title>databend-query`common_expression::values::Column::data_type (1 samples, 0.02%)</title><rect x="40.0719%" y="1285" width="0.0240%" height="15" fill="rgb(227,119,45)" fg:x="1671" fg:w="1"/><text x="40.3219%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="40.0959%" y="1285" width="0.0240%" height="15" fill="rgb(205,109,36)" fg:x="1672" fg:w="1"/><text x="40.3459%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.05%)</title><rect x="40.1199%" y="1285" width="0.0480%" height="15" fill="rgb(205,6,39)" fg:x="1673" fg:w="2"/><text x="40.3699%" y="1295.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="40.1679%" y="1285" width="0.0240%" height="15" fill="rgb(221,32,16)" fg:x="1675" fg:w="1"/><text x="40.4179%" y="1295.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_compact::TransformCompact&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (549 samples, 13.17%)</title><rect x="27.0983%" y="1301" width="13.1655%" height="15" fill="rgb(228,144,50)" fg:x="1130" fg:w="549"/><text x="27.3483%" y="1311.50">databend-query`&lt;comm..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="40.1918%" y="1285" width="0.0719%" height="15" fill="rgb(229,201,53)" fg:x="1676" fg:w="3"/><text x="40.4418%" y="1295.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="40.2638%" y="1285" width="0.0240%" height="15" fill="rgb(249,153,27)" fg:x="1679" fg:w="1"/><text x="40.5138%" y="1295.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="40.2878%" y="1253" width="0.0240%" height="15" fill="rgb(227,106,25)" fg:x="1680" fg:w="1"/><text x="40.5378%" y="1263.50"></text></g><g><title>databend-query`common_expression::types::nullable::NullableColumnBuilder&lt;T&gt;::append_column (1 samples, 0.02%)</title><rect x="40.3357%" y="1237" width="0.0240%" height="15" fill="rgb(230,65,29)" fg:x="1682" fg:w="1"/><text x="40.5857%" y="1247.50"></text></g><g><title>databend-query`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="40.3357%" y="1221" width="0.0240%" height="15" fill="rgb(221,57,46)" fg:x="1682" fg:w="1"/><text x="40.5857%" y="1231.50"></text></g><g><title>databend-query`__rust_alloc (2 samples, 0.05%)</title><rect x="40.3837%" y="1221" width="0.0480%" height="15" fill="rgb(229,161,17)" fg:x="1684" fg:w="2"/><text x="40.6337%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="40.3837%" y="1205" width="0.0480%" height="15" fill="rgb(222,213,11)" fg:x="1684" fg:w="2"/><text x="40.6337%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="40.3837%" y="1189" width="0.0480%" height="15" fill="rgb(235,35,13)" fg:x="1684" fg:w="2"/><text x="40.6337%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="40.4077%" y="1173" width="0.0240%" height="15" fill="rgb(233,158,34)" fg:x="1685" fg:w="1"/><text x="40.6577%" y="1183.50"></text></g><g><title>databend-query`arrow2::bitmap::utils::count_zeros (1 samples, 0.02%)</title><rect x="40.4317%" y="1221" width="0.0240%" height="15" fill="rgb(215,151,48)" fg:x="1686" fg:w="1"/><text x="40.6817%" y="1231.50"></text></g><g><title>databend-query`common_expression::types::nullable::NullableColumn&lt;T&gt;::slice (1 samples, 0.02%)</title><rect x="40.4556%" y="1221" width="0.0240%" height="15" fill="rgb(229,84,14)" fg:x="1687" fg:w="1"/><text x="40.7056%" y="1231.50"></text></g><g><title>databend-query`common_expression::values::Column::slice (1 samples, 0.02%)</title><rect x="40.4556%" y="1205" width="0.0240%" height="15" fill="rgb(229,68,14)" fg:x="1687" fg:w="1"/><text x="40.7056%" y="1215.50"></text></g><g><title>databend-query`common_expression::values::Column::len (1 samples, 0.02%)</title><rect x="40.4556%" y="1189" width="0.0240%" height="15" fill="rgb(243,106,26)" fg:x="1687" fg:w="1"/><text x="40.7056%" y="1199.50"></text></g><g><title>databend-query`common_expression::values::Column::slice (6 samples, 0.14%)</title><rect x="40.3597%" y="1237" width="0.1439%" height="15" fill="rgb(206,45,38)" fg:x="1683" fg:w="6"/><text x="40.6097%" y="1247.50"></text></g><g><title>databend-query`common_expression::values::Column::slice (1 samples, 0.02%)</title><rect x="40.4796%" y="1221" width="0.0240%" height="15" fill="rgb(226,6,15)" fg:x="1688" fg:w="1"/><text x="40.7296%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (1 samples, 0.02%)</title><rect x="40.5036%" y="1237" width="0.0240%" height="15" fill="rgb(232,22,54)" fg:x="1689" fg:w="1"/><text x="40.7536%" y="1247.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="40.5276%" y="1237" width="0.0240%" height="15" fill="rgb(229,222,32)" fg:x="1690" fg:w="1"/><text x="40.7776%" y="1247.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::block::DataBlock&gt;::take_column_by_slices_limit (11 samples, 0.26%)</title><rect x="40.3118%" y="1253" width="0.2638%" height="15" fill="rgb(228,62,29)" fg:x="1681" fg:w="11"/><text x="40.5618%" y="1263.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="40.5516%" y="1237" width="0.0240%" height="15" fill="rgb(251,103,34)" fg:x="1691" fg:w="1"/><text x="40.8016%" y="1247.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform_multi_sort_merge::MultiSortMergeProcessor&lt;R&gt;::build_block (13 samples, 0.31%)</title><rect x="40.2878%" y="1285" width="0.3118%" height="15" fill="rgb(233,12,30)" fg:x="1680" fg:w="13"/><text x="40.5378%" y="1295.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::block::DataBlock&gt;::take_by_slices_limit_from_blocks (13 samples, 0.31%)</title><rect x="40.2878%" y="1269" width="0.3118%" height="15" fill="rgb(238,52,0)" fg:x="1680" fg:w="13"/><text x="40.5378%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="40.5755%" y="1253" width="0.0240%" height="15" fill="rgb(223,98,5)" fg:x="1692" fg:w="1"/><text x="40.8255%" y="1263.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.05%)</title><rect x="40.6475%" y="1269" width="0.0480%" height="15" fill="rgb(228,75,37)" fg:x="1695" fg:w="2"/><text x="40.8975%" y="1279.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumn::index_unchecked (1 samples, 0.02%)</title><rect x="40.6715%" y="1253" width="0.0240%" height="15" fill="rgb(205,115,49)" fg:x="1696" fg:w="1"/><text x="40.9215%" y="1263.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="40.7194%" y="1253" width="0.0240%" height="15" fill="rgb(250,154,43)" fg:x="1698" fg:w="1"/><text x="40.9694%" y="1263.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (3 samples, 0.07%)</title><rect x="40.7434%" y="1253" width="0.0719%" height="15" fill="rgb(226,43,29)" fg:x="1699" fg:w="3"/><text x="40.9934%" y="1263.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.05%)</title><rect x="40.7674%" y="1237" width="0.0480%" height="15" fill="rgb(249,228,39)" fg:x="1700" fg:w="2"/><text x="41.0174%" y="1247.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="40.8633%" y="1237" width="0.0240%" height="15" fill="rgb(216,79,43)" fg:x="1704" fg:w="1"/><text x="41.1133%" y="1247.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumn::index_unchecked (1 samples, 0.02%)</title><rect x="40.8633%" y="1221" width="0.0240%" height="15" fill="rgb(228,95,12)" fg:x="1704" fg:w="1"/><text x="41.1133%" y="1231.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (9 samples, 0.22%)</title><rect x="40.6954%" y="1269" width="0.2158%" height="15" fill="rgb(249,221,15)" fg:x="1697" fg:w="9"/><text x="40.9454%" y="1279.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (4 samples, 0.10%)</title><rect x="40.8153%" y="1253" width="0.0959%" height="15" fill="rgb(233,34,13)" fg:x="1702" fg:w="4"/><text x="41.0653%" y="1263.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="40.8873%" y="1237" width="0.0240%" height="15" fill="rgb(214,103,39)" fg:x="1705" fg:w="1"/><text x="41.1373%" y="1247.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (3 samples, 0.07%)</title><rect x="40.9113%" y="1269" width="0.0719%" height="15" fill="rgb(251,126,39)" fg:x="1706" fg:w="3"/><text x="41.1613%" y="1279.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="40.9592%" y="1253" width="0.0240%" height="15" fill="rgb(214,216,36)" fg:x="1708" fg:w="1"/><text x="41.2092%" y="1263.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumn::index_unchecked (1 samples, 0.02%)</title><rect x="40.9592%" y="1237" width="0.0240%" height="15" fill="rgb(220,221,8)" fg:x="1708" fg:w="1"/><text x="41.2092%" y="1247.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumn::index_unchecked (1 samples, 0.02%)</title><rect x="40.9832%" y="1269" width="0.0240%" height="15" fill="rgb(240,216,3)" fg:x="1709" fg:w="1"/><text x="41.2332%" y="1279.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform_multi_sort_merge::MultiSortMergeProcessor&lt;R&gt;::drain_cursor (1 samples, 0.02%)</title><rect x="41.0072%" y="1269" width="0.0240%" height="15" fill="rgb(232,218,17)" fg:x="1710" fg:w="1"/><text x="41.2572%" y="1279.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="41.0072%" y="1253" width="0.0240%" height="15" fill="rgb(229,163,45)" fg:x="1710" fg:w="1"/><text x="41.2572%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="41.0072%" y="1237" width="0.0240%" height="15" fill="rgb(231,110,42)" fg:x="1710" fg:w="1"/><text x="41.2572%" y="1247.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="41.0072%" y="1221" width="0.0240%" height="15" fill="rgb(208,170,48)" fg:x="1710" fg:w="1"/><text x="41.2572%" y="1231.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="41.0312%" y="1269" width="0.0240%" height="15" fill="rgb(239,116,25)" fg:x="1711" fg:w="1"/><text x="41.2812%" y="1279.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_multi_sort_merge::MultiSortMergeProcessor&lt;R&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (34 samples, 0.82%)</title><rect x="40.2638%" y="1301" width="0.8153%" height="15" fill="rgb(219,200,50)" fg:x="1679" fg:w="34"/><text x="40.5138%" y="1311.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform_multi_sort_merge::MultiSortMergeProcessor&lt;R&gt;::drain_heap (20 samples, 0.48%)</title><rect x="40.5995%" y="1285" width="0.4796%" height="15" fill="rgb(245,200,0)" fg:x="1693" fg:w="20"/><text x="40.8495%" y="1295.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="41.0552%" y="1269" width="0.0240%" height="15" fill="rgb(245,119,33)" fg:x="1712" fg:w="1"/><text x="41.3052%" y="1279.50"></text></g><g><title>databend-query`&lt;common_sql::evaluator::block_operator::CompoundBlockOperator as common_pipeline_transforms::processors::transforms::transform::Transform&gt;::transform (1 samples, 0.02%)</title><rect x="41.0791%" y="1301" width="0.0240%" height="15" fill="rgb(231,125,12)" fg:x="1713" fg:w="1"/><text x="41.3291%" y="1311.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (2 samples, 0.05%)</title><rect x="41.1031%" y="1109" width="0.0480%" height="15" fill="rgb(216,96,41)" fg:x="1714" fg:w="2"/><text x="41.3531%" y="1119.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.05%)</title><rect x="41.1031%" y="1093" width="0.0480%" height="15" fill="rgb(248,43,45)" fg:x="1714" fg:w="2"/><text x="41.3531%" y="1103.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.05%)</title><rect x="41.1031%" y="1077" width="0.0480%" height="15" fill="rgb(217,222,7)" fg:x="1714" fg:w="2"/><text x="41.3531%" y="1087.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="41.1031%" y="1125" width="0.0719%" height="15" fill="rgb(233,28,6)" fg:x="1714" fg:w="3"/><text x="41.3531%" y="1135.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (1 samples, 0.02%)</title><rect x="41.1511%" y="1109" width="0.0240%" height="15" fill="rgb(231,218,15)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="1119.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (1 samples, 0.02%)</title><rect x="41.1511%" y="1093" width="0.0240%" height="15" fill="rgb(226,171,48)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="1103.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (1 samples, 0.02%)</title><rect x="41.1511%" y="1077" width="0.0240%" height="15" fill="rgb(235,201,9)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="1087.50"></text></g><g><title>databend-query`parquet2::compression::decompress (1 samples, 0.02%)</title><rect x="41.1511%" y="1061" width="0.0240%" height="15" fill="rgb(217,80,15)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="1071.50"></text></g><g><title>databend-query`std::io::default_read_exact (1 samples, 0.02%)</title><rect x="41.1511%" y="1045" width="0.0240%" height="15" fill="rgb(219,152,8)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="1055.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="41.1511%" y="1029" width="0.0240%" height="15" fill="rgb(243,107,38)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="1039.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (1 samples, 0.02%)</title><rect x="41.1511%" y="1013" width="0.0240%" height="15" fill="rgb(231,17,5)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decompressStream (1 samples, 0.02%)</title><rect x="41.1511%" y="997" width="0.0240%" height="15" fill="rgb(209,25,54)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="1007.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (1 samples, 0.02%)</title><rect x="41.1511%" y="981" width="0.0240%" height="15" fill="rgb(219,0,2)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="991.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (1 samples, 0.02%)</title><rect x="41.1511%" y="965" width="0.0240%" height="15" fill="rgb(246,9,5)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="975.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (1 samples, 0.02%)</title><rect x="41.1511%" y="949" width="0.0240%" height="15" fill="rgb(226,159,4)" fg:x="1716" fg:w="1"/><text x="41.4011%" y="959.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (8 samples, 0.19%)</title><rect x="41.1751%" y="1125" width="0.1918%" height="15" fill="rgb(219,175,34)" fg:x="1717" fg:w="8"/><text x="41.4251%" y="1135.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (8 samples, 0.19%)</title><rect x="41.1751%" y="1109" width="0.1918%" height="15" fill="rgb(236,10,46)" fg:x="1717" fg:w="8"/><text x="41.4251%" y="1119.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.19%)</title><rect x="41.1751%" y="1093" width="0.1918%" height="15" fill="rgb(240,211,16)" fg:x="1717" fg:w="8"/><text x="41.4251%" y="1103.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="41.3669%" y="1109" width="0.0240%" height="15" fill="rgb(205,3,43)" fg:x="1725" fg:w="1"/><text x="41.6169%" y="1119.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (1 samples, 0.02%)</title><rect x="41.3669%" y="1093" width="0.0240%" height="15" fill="rgb(245,7,22)" fg:x="1725" fg:w="1"/><text x="41.6169%" y="1103.50"></text></g><g><title>databend-query`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="41.3669%" y="1077" width="0.0240%" height="15" fill="rgb(239,132,32)" fg:x="1725" fg:w="1"/><text x="41.6169%" y="1087.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="41.3669%" y="1061" width="0.0240%" height="15" fill="rgb(228,202,34)" fg:x="1725" fg:w="1"/><text x="41.6169%" y="1071.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (2 samples, 0.05%)</title><rect x="41.3909%" y="1061" width="0.0480%" height="15" fill="rgb(254,200,22)" fg:x="1726" fg:w="2"/><text x="41.6409%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.05%)</title><rect x="41.3909%" y="1045" width="0.0480%" height="15" fill="rgb(219,10,39)" fg:x="1726" fg:w="2"/><text x="41.6409%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="41.3909%" y="1029" width="0.0480%" height="15" fill="rgb(226,210,39)" fg:x="1726" fg:w="2"/><text x="41.6409%" y="1039.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.84%)</title><rect x="41.1031%" y="1141" width="0.8393%" height="15" fill="rgb(208,219,16)" fg:x="1714" fg:w="35"/><text x="41.3531%" y="1151.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (24 samples, 0.58%)</title><rect x="41.3669%" y="1125" width="0.5755%" height="15" fill="rgb(216,158,51)" fg:x="1725" fg:w="24"/><text x="41.6169%" y="1135.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (23 samples, 0.55%)</title><rect x="41.3909%" y="1109" width="0.5516%" height="15" fill="rgb(233,14,44)" fg:x="1726" fg:w="23"/><text x="41.6409%" y="1119.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (23 samples, 0.55%)</title><rect x="41.3909%" y="1093" width="0.5516%" height="15" fill="rgb(237,97,39)" fg:x="1726" fg:w="23"/><text x="41.6409%" y="1103.50"></text></g><g><title>databend-query`parquet2::compression::decompress (23 samples, 0.55%)</title><rect x="41.3909%" y="1077" width="0.5516%" height="15" fill="rgb(218,198,43)" fg:x="1726" fg:w="23"/><text x="41.6409%" y="1087.50"></text></g><g><title>databend-query`std::io::default_read_exact (21 samples, 0.50%)</title><rect x="41.4388%" y="1061" width="0.5036%" height="15" fill="rgb(231,104,20)" fg:x="1728" fg:w="21"/><text x="41.6888%" y="1071.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (21 samples, 0.50%)</title><rect x="41.4388%" y="1045" width="0.5036%" height="15" fill="rgb(254,36,13)" fg:x="1728" fg:w="21"/><text x="41.6888%" y="1055.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (21 samples, 0.50%)</title><rect x="41.4388%" y="1029" width="0.5036%" height="15" fill="rgb(248,14,50)" fg:x="1728" fg:w="21"/><text x="41.6888%" y="1039.50"></text></g><g><title>databend-query`ZSTD_decompressStream (21 samples, 0.50%)</title><rect x="41.4388%" y="1013" width="0.5036%" height="15" fill="rgb(217,107,29)" fg:x="1728" fg:w="21"/><text x="41.6888%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (21 samples, 0.50%)</title><rect x="41.4388%" y="997" width="0.5036%" height="15" fill="rgb(251,169,33)" fg:x="1728" fg:w="21"/><text x="41.6888%" y="1007.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (21 samples, 0.50%)</title><rect x="41.4388%" y="981" width="0.5036%" height="15" fill="rgb(217,108,32)" fg:x="1728" fg:w="21"/><text x="41.6888%" y="991.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (21 samples, 0.50%)</title><rect x="41.4388%" y="965" width="0.5036%" height="15" fill="rgb(219,66,42)" fg:x="1728" fg:w="21"/><text x="41.6888%" y="975.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (4 samples, 0.10%)</title><rect x="41.9424%" y="1141" width="0.0959%" height="15" fill="rgb(206,180,7)" fg:x="1749" fg:w="4"/><text x="42.1924%" y="1151.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 0.10%)</title><rect x="41.9424%" y="1125" width="0.0959%" height="15" fill="rgb(208,226,31)" fg:x="1749" fg:w="4"/><text x="42.1924%" y="1135.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.10%)</title><rect x="41.9424%" y="1109" width="0.0959%" height="15" fill="rgb(218,26,49)" fg:x="1749" fg:w="4"/><text x="42.1924%" y="1119.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="42.0384%" y="1125" width="0.0240%" height="15" fill="rgb(233,197,48)" fg:x="1753" fg:w="1"/><text x="42.2884%" y="1135.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (1 samples, 0.02%)</title><rect x="42.0384%" y="1109" width="0.0240%" height="15" fill="rgb(252,181,51)" fg:x="1753" fg:w="1"/><text x="42.2884%" y="1119.50"></text></g><g><title>databend-query`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="42.0384%" y="1093" width="0.0240%" height="15" fill="rgb(253,90,19)" fg:x="1753" fg:w="1"/><text x="42.2884%" y="1103.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="42.0384%" y="1077" width="0.0240%" height="15" fill="rgb(215,171,30)" fg:x="1753" fg:w="1"/><text x="42.2884%" y="1087.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (3 samples, 0.07%)</title><rect x="42.0624%" y="1077" width="0.0719%" height="15" fill="rgb(214,222,9)" fg:x="1754" fg:w="3"/><text x="42.3124%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.07%)</title><rect x="42.0624%" y="1061" width="0.0719%" height="15" fill="rgb(223,3,22)" fg:x="1754" fg:w="3"/><text x="42.3124%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="42.0624%" y="1045" width="0.0719%" height="15" fill="rgb(225,196,46)" fg:x="1754" fg:w="3"/><text x="42.3124%" y="1055.50"></text></g><g><title>databend-query`ZSTD_decompressStream (32 samples, 0.77%)</title><rect x="42.1343%" y="1029" width="0.7674%" height="15" fill="rgb(209,110,37)" fg:x="1757" fg:w="32"/><text x="42.3843%" y="1039.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (32 samples, 0.77%)</title><rect x="42.1343%" y="1013" width="0.7674%" height="15" fill="rgb(249,89,12)" fg:x="1757" fg:w="32"/><text x="42.3843%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (32 samples, 0.77%)</title><rect x="42.1343%" y="997" width="0.7674%" height="15" fill="rgb(226,27,33)" fg:x="1757" fg:w="32"/><text x="42.3843%" y="1007.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (32 samples, 0.77%)</title><rect x="42.1343%" y="981" width="0.7674%" height="15" fill="rgb(213,82,22)" fg:x="1757" fg:w="32"/><text x="42.3843%" y="991.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (1 samples, 0.02%)</title><rect x="42.8777%" y="965" width="0.0240%" height="15" fill="rgb(248,140,0)" fg:x="1788" fg:w="1"/><text x="43.1277%" y="975.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (1 samples, 0.02%)</title><rect x="42.8777%" y="949" width="0.0240%" height="15" fill="rgb(228,106,3)" fg:x="1788" fg:w="1"/><text x="43.1277%" y="959.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (1 samples, 0.02%)</title><rect x="42.8777%" y="933" width="0.0240%" height="15" fill="rgb(209,23,37)" fg:x="1788" fg:w="1"/><text x="43.1277%" y="943.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 1.82%)</title><rect x="41.1031%" y="1157" width="1.8225%" height="15" fill="rgb(241,93,50)" fg:x="1714" fg:w="76"/><text x="41.3531%" y="1167.50">d..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (37 samples, 0.89%)</title><rect x="42.0384%" y="1141" width="0.8873%" height="15" fill="rgb(253,46,43)" fg:x="1753" fg:w="37"/><text x="42.2884%" y="1151.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (36 samples, 0.86%)</title><rect x="42.0624%" y="1125" width="0.8633%" height="15" fill="rgb(226,206,43)" fg:x="1754" fg:w="36"/><text x="42.3124%" y="1135.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (36 samples, 0.86%)</title><rect x="42.0624%" y="1109" width="0.8633%" height="15" fill="rgb(217,54,7)" fg:x="1754" fg:w="36"/><text x="42.3124%" y="1119.50"></text></g><g><title>databend-query`parquet2::compression::decompress (36 samples, 0.86%)</title><rect x="42.0624%" y="1093" width="0.8633%" height="15" fill="rgb(223,5,52)" fg:x="1754" fg:w="36"/><text x="42.3124%" y="1103.50"></text></g><g><title>databend-query`std::io::default_read_exact (33 samples, 0.79%)</title><rect x="42.1343%" y="1077" width="0.7914%" height="15" fill="rgb(206,52,46)" fg:x="1757" fg:w="33"/><text x="42.3843%" y="1087.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (33 samples, 0.79%)</title><rect x="42.1343%" y="1061" width="0.7914%" height="15" fill="rgb(253,136,11)" fg:x="1757" fg:w="33"/><text x="42.3843%" y="1071.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (33 samples, 0.79%)</title><rect x="42.1343%" y="1045" width="0.7914%" height="15" fill="rgb(208,106,33)" fg:x="1757" fg:w="33"/><text x="42.3843%" y="1055.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="42.9017%" y="1029" width="0.0240%" height="15" fill="rgb(206,54,4)" fg:x="1789" fg:w="1"/><text x="43.1517%" y="1039.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (8 samples, 0.19%)</title><rect x="42.9257%" y="1157" width="0.1918%" height="15" fill="rgb(213,3,15)" fg:x="1790" fg:w="8"/><text x="43.1757%" y="1167.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (8 samples, 0.19%)</title><rect x="42.9257%" y="1141" width="0.1918%" height="15" fill="rgb(252,211,39)" fg:x="1790" fg:w="8"/><text x="43.1757%" y="1151.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.19%)</title><rect x="42.9257%" y="1125" width="0.1918%" height="15" fill="rgb(223,6,36)" fg:x="1790" fg:w="8"/><text x="43.1757%" y="1135.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="43.1175%" y="1141" width="0.0240%" height="15" fill="rgb(252,169,45)" fg:x="1798" fg:w="1"/><text x="43.3675%" y="1151.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (1 samples, 0.02%)</title><rect x="43.1175%" y="1125" width="0.0240%" height="15" fill="rgb(212,48,26)" fg:x="1798" fg:w="1"/><text x="43.3675%" y="1135.50"></text></g><g><title>databend-query`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="43.1175%" y="1109" width="0.0240%" height="15" fill="rgb(251,102,48)" fg:x="1798" fg:w="1"/><text x="43.3675%" y="1119.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="43.1175%" y="1093" width="0.0240%" height="15" fill="rgb(243,208,16)" fg:x="1798" fg:w="1"/><text x="43.3675%" y="1103.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (1 samples, 0.02%)</title><rect x="43.1415%" y="1093" width="0.0240%" height="15" fill="rgb(219,96,24)" fg:x="1799" fg:w="1"/><text x="43.3915%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="43.1415%" y="1077" width="0.0240%" height="15" fill="rgb(219,33,29)" fg:x="1799" fg:w="1"/><text x="43.3915%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="43.1415%" y="1061" width="0.0240%" height="15" fill="rgb(223,176,5)" fg:x="1799" fg:w="1"/><text x="43.3915%" y="1071.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (28 samples, 0.67%)</title><rect x="43.1655%" y="1061" width="0.6715%" height="15" fill="rgb(228,140,14)" fg:x="1800" fg:w="28"/><text x="43.4155%" y="1071.50"></text></g><g><title>databend-query`ZSTD_decompressStream (28 samples, 0.67%)</title><rect x="43.1655%" y="1045" width="0.6715%" height="15" fill="rgb(217,179,31)" fg:x="1800" fg:w="28"/><text x="43.4155%" y="1055.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (27 samples, 0.65%)</title><rect x="43.1894%" y="1029" width="0.6475%" height="15" fill="rgb(230,9,30)" fg:x="1801" fg:w="27"/><text x="43.4394%" y="1039.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (27 samples, 0.65%)</title><rect x="43.1894%" y="1013" width="0.6475%" height="15" fill="rgb(230,136,20)" fg:x="1801" fg:w="27"/><text x="43.4394%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (27 samples, 0.65%)</title><rect x="43.1894%" y="997" width="0.6475%" height="15" fill="rgb(215,210,22)" fg:x="1801" fg:w="27"/><text x="43.4394%" y="1007.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (1 samples, 0.02%)</title><rect x="43.8129%" y="981" width="0.0240%" height="15" fill="rgb(218,43,5)" fg:x="1827" fg:w="1"/><text x="44.0629%" y="991.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (1 samples, 0.02%)</title><rect x="43.8129%" y="965" width="0.0240%" height="15" fill="rgb(216,11,5)" fg:x="1827" fg:w="1"/><text x="44.0629%" y="975.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 2.78%)</title><rect x="41.1031%" y="1173" width="2.7818%" height="15" fill="rgb(209,82,29)" fg:x="1714" fg:w="116"/><text x="41.3531%" y="1183.50">da..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (32 samples, 0.77%)</title><rect x="43.1175%" y="1157" width="0.7674%" height="15" fill="rgb(244,115,12)" fg:x="1798" fg:w="32"/><text x="43.3675%" y="1167.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (31 samples, 0.74%)</title><rect x="43.1415%" y="1141" width="0.7434%" height="15" fill="rgb(222,82,18)" fg:x="1799" fg:w="31"/><text x="43.3915%" y="1151.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (31 samples, 0.74%)</title><rect x="43.1415%" y="1125" width="0.7434%" height="15" fill="rgb(249,227,8)" fg:x="1799" fg:w="31"/><text x="43.3915%" y="1135.50"></text></g><g><title>databend-query`parquet2::compression::decompress (31 samples, 0.74%)</title><rect x="43.1415%" y="1109" width="0.7434%" height="15" fill="rgb(253,141,45)" fg:x="1799" fg:w="31"/><text x="43.3915%" y="1119.50"></text></g><g><title>databend-query`std::io::default_read_exact (30 samples, 0.72%)</title><rect x="43.1655%" y="1093" width="0.7194%" height="15" fill="rgb(234,184,4)" fg:x="1800" fg:w="30"/><text x="43.4155%" y="1103.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (30 samples, 0.72%)</title><rect x="43.1655%" y="1077" width="0.7194%" height="15" fill="rgb(218,194,23)" fg:x="1800" fg:w="30"/><text x="43.4155%" y="1087.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="43.8369%" y="1061" width="0.0480%" height="15" fill="rgb(235,66,41)" fg:x="1828" fg:w="2"/><text x="44.0869%" y="1071.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (10 samples, 0.24%)</title><rect x="43.8849%" y="1173" width="0.2398%" height="15" fill="rgb(245,217,1)" fg:x="1830" fg:w="10"/><text x="44.1349%" y="1183.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (10 samples, 0.24%)</title><rect x="43.8849%" y="1157" width="0.2398%" height="15" fill="rgb(229,91,1)" fg:x="1830" fg:w="10"/><text x="44.1349%" y="1167.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.24%)</title><rect x="43.8849%" y="1141" width="0.2398%" height="15" fill="rgb(207,101,30)" fg:x="1830" fg:w="10"/><text x="44.1349%" y="1151.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (27 samples, 0.65%)</title><rect x="44.1247%" y="1077" width="0.6475%" height="15" fill="rgb(223,82,49)" fg:x="1840" fg:w="27"/><text x="44.3747%" y="1087.50"></text></g><g><title>databend-query`ZSTD_decompressStream (27 samples, 0.65%)</title><rect x="44.1247%" y="1061" width="0.6475%" height="15" fill="rgb(218,167,17)" fg:x="1840" fg:w="27"/><text x="44.3747%" y="1071.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (27 samples, 0.65%)</title><rect x="44.1247%" y="1045" width="0.6475%" height="15" fill="rgb(208,103,14)" fg:x="1840" fg:w="27"/><text x="44.3747%" y="1055.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (27 samples, 0.65%)</title><rect x="44.1247%" y="1029" width="0.6475%" height="15" fill="rgb(238,20,8)" fg:x="1840" fg:w="27"/><text x="44.3747%" y="1039.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (27 samples, 0.65%)</title><rect x="44.1247%" y="1013" width="0.6475%" height="15" fill="rgb(218,80,54)" fg:x="1840" fg:w="27"/><text x="44.3747%" y="1023.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (154 samples, 3.69%)</title><rect x="41.1031%" y="1189" width="3.6930%" height="15" fill="rgb(240,144,17)" fg:x="1714" fg:w="154"/><text x="41.3531%" y="1199.50">data..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (28 samples, 0.67%)</title><rect x="44.1247%" y="1173" width="0.6715%" height="15" fill="rgb(245,27,50)" fg:x="1840" fg:w="28"/><text x="44.3747%" y="1183.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (28 samples, 0.67%)</title><rect x="44.1247%" y="1157" width="0.6715%" height="15" fill="rgb(251,51,7)" fg:x="1840" fg:w="28"/><text x="44.3747%" y="1167.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (28 samples, 0.67%)</title><rect x="44.1247%" y="1141" width="0.6715%" height="15" fill="rgb(245,217,29)" fg:x="1840" fg:w="28"/><text x="44.3747%" y="1151.50"></text></g><g><title>databend-query`parquet2::compression::decompress (28 samples, 0.67%)</title><rect x="44.1247%" y="1125" width="0.6715%" height="15" fill="rgb(221,176,29)" fg:x="1840" fg:w="28"/><text x="44.3747%" y="1135.50"></text></g><g><title>databend-query`std::io::default_read_exact (28 samples, 0.67%)</title><rect x="44.1247%" y="1109" width="0.6715%" height="15" fill="rgb(212,180,24)" fg:x="1840" fg:w="28"/><text x="44.3747%" y="1119.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (28 samples, 0.67%)</title><rect x="44.1247%" y="1093" width="0.6715%" height="15" fill="rgb(254,24,2)" fg:x="1840" fg:w="28"/><text x="44.3747%" y="1103.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="44.7722%" y="1077" width="0.0240%" height="15" fill="rgb(230,100,2)" fg:x="1867" fg:w="1"/><text x="45.0222%" y="1087.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="44.7962%" y="1173" width="0.0240%" height="15" fill="rgb(219,142,25)" fg:x="1868" fg:w="1"/><text x="45.0462%" y="1183.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (8 samples, 0.19%)</title><rect x="44.7962%" y="1189" width="0.1918%" height="15" fill="rgb(240,73,43)" fg:x="1868" fg:w="8"/><text x="45.0462%" y="1199.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (7 samples, 0.17%)</title><rect x="44.8201%" y="1173" width="0.1679%" height="15" fill="rgb(214,114,15)" fg:x="1869" fg:w="7"/><text x="45.0701%" y="1183.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.17%)</title><rect x="44.8201%" y="1157" width="0.1679%" height="15" fill="rgb(207,130,4)" fg:x="1869" fg:w="7"/><text x="45.0701%" y="1167.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (2 samples, 0.05%)</title><rect x="44.9880%" y="1125" width="0.0480%" height="15" fill="rgb(221,25,40)" fg:x="1876" fg:w="2"/><text x="45.2380%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.05%)</title><rect x="44.9880%" y="1109" width="0.0480%" height="15" fill="rgb(241,184,7)" fg:x="1876" fg:w="2"/><text x="45.2380%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="44.9880%" y="1093" width="0.0480%" height="15" fill="rgb(235,159,4)" fg:x="1876" fg:w="2"/><text x="45.2380%" y="1103.50"></text></g><g><title>databend-query`ZSTD_decompressStream (29 samples, 0.70%)</title><rect x="45.0360%" y="1077" width="0.6954%" height="15" fill="rgb(214,87,48)" fg:x="1878" fg:w="29"/><text x="45.2860%" y="1087.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (29 samples, 0.70%)</title><rect x="45.0360%" y="1061" width="0.6954%" height="15" fill="rgb(246,198,24)" fg:x="1878" fg:w="29"/><text x="45.2860%" y="1071.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (29 samples, 0.70%)</title><rect x="45.0360%" y="1045" width="0.6954%" height="15" fill="rgb(209,66,40)" fg:x="1878" fg:w="29"/><text x="45.2860%" y="1055.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (29 samples, 0.70%)</title><rect x="45.0360%" y="1029" width="0.6954%" height="15" fill="rgb(233,147,39)" fg:x="1878" fg:w="29"/><text x="45.2860%" y="1039.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 4.65%)</title><rect x="41.1031%" y="1205" width="4.6523%" height="15" fill="rgb(231,145,52)" fg:x="1714" fg:w="194"/><text x="41.3531%" y="1215.50">datab..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (32 samples, 0.77%)</title><rect x="44.9880%" y="1189" width="0.7674%" height="15" fill="rgb(206,20,26)" fg:x="1876" fg:w="32"/><text x="45.2380%" y="1199.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (32 samples, 0.77%)</title><rect x="44.9880%" y="1173" width="0.7674%" height="15" fill="rgb(238,220,4)" fg:x="1876" fg:w="32"/><text x="45.2380%" y="1183.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (32 samples, 0.77%)</title><rect x="44.9880%" y="1157" width="0.7674%" height="15" fill="rgb(252,195,42)" fg:x="1876" fg:w="32"/><text x="45.2380%" y="1167.50"></text></g><g><title>databend-query`parquet2::compression::decompress (32 samples, 0.77%)</title><rect x="44.9880%" y="1141" width="0.7674%" height="15" fill="rgb(209,10,6)" fg:x="1876" fg:w="32"/><text x="45.2380%" y="1151.50"></text></g><g><title>databend-query`std::io::default_read_exact (30 samples, 0.72%)</title><rect x="45.0360%" y="1125" width="0.7194%" height="15" fill="rgb(229,3,52)" fg:x="1878" fg:w="30"/><text x="45.2860%" y="1135.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (30 samples, 0.72%)</title><rect x="45.0360%" y="1109" width="0.7194%" height="15" fill="rgb(253,49,37)" fg:x="1878" fg:w="30"/><text x="45.2860%" y="1119.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (30 samples, 0.72%)</title><rect x="45.0360%" y="1093" width="0.7194%" height="15" fill="rgb(240,103,49)" fg:x="1878" fg:w="30"/><text x="45.2860%" y="1103.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="45.7314%" y="1077" width="0.0240%" height="15" fill="rgb(250,182,30)" fg:x="1907" fg:w="1"/><text x="45.9814%" y="1087.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (9 samples, 0.22%)</title><rect x="45.7554%" y="1205" width="0.2158%" height="15" fill="rgb(248,8,30)" fg:x="1908" fg:w="9"/><text x="46.0054%" y="1215.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (9 samples, 0.22%)</title><rect x="45.7554%" y="1189" width="0.2158%" height="15" fill="rgb(237,120,30)" fg:x="1908" fg:w="9"/><text x="46.0054%" y="1199.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.22%)</title><rect x="45.7554%" y="1173" width="0.2158%" height="15" fill="rgb(221,146,34)" fg:x="1908" fg:w="9"/><text x="46.0054%" y="1183.50"></text></g><g><title>databend-query`ZSTD_decompressStream (29 samples, 0.70%)</title><rect x="45.9712%" y="1093" width="0.6954%" height="15" fill="rgb(242,55,13)" fg:x="1917" fg:w="29"/><text x="46.2212%" y="1103.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (29 samples, 0.70%)</title><rect x="45.9712%" y="1077" width="0.6954%" height="15" fill="rgb(242,112,31)" fg:x="1917" fg:w="29"/><text x="46.2212%" y="1087.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (29 samples, 0.70%)</title><rect x="45.9712%" y="1061" width="0.6954%" height="15" fill="rgb(249,192,27)" fg:x="1917" fg:w="29"/><text x="46.2212%" y="1071.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (29 samples, 0.70%)</title><rect x="45.9712%" y="1045" width="0.6954%" height="15" fill="rgb(208,204,44)" fg:x="1917" fg:w="29"/><text x="46.2212%" y="1055.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (1 samples, 0.02%)</title><rect x="46.6427%" y="1029" width="0.0240%" height="15" fill="rgb(208,93,54)" fg:x="1945" fg:w="1"/><text x="46.8927%" y="1039.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (1 samples, 0.02%)</title><rect x="46.6427%" y="1013" width="0.0240%" height="15" fill="rgb(242,1,31)" fg:x="1945" fg:w="1"/><text x="46.8927%" y="1023.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (1 samples, 0.02%)</title><rect x="46.6427%" y="997" width="0.0240%" height="15" fill="rgb(241,83,25)" fg:x="1945" fg:w="1"/><text x="46.8927%" y="1007.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (233 samples, 5.59%)</title><rect x="41.1031%" y="1221" width="5.5875%" height="15" fill="rgb(205,169,50)" fg:x="1714" fg:w="233"/><text x="41.3531%" y="1231.50">databen..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (30 samples, 0.72%)</title><rect x="45.9712%" y="1205" width="0.7194%" height="15" fill="rgb(239,186,37)" fg:x="1917" fg:w="30"/><text x="46.2212%" y="1215.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (30 samples, 0.72%)</title><rect x="45.9712%" y="1189" width="0.7194%" height="15" fill="rgb(205,221,10)" fg:x="1917" fg:w="30"/><text x="46.2212%" y="1199.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (30 samples, 0.72%)</title><rect x="45.9712%" y="1173" width="0.7194%" height="15" fill="rgb(218,196,15)" fg:x="1917" fg:w="30"/><text x="46.2212%" y="1183.50"></text></g><g><title>databend-query`parquet2::compression::decompress (30 samples, 0.72%)</title><rect x="45.9712%" y="1157" width="0.7194%" height="15" fill="rgb(218,196,35)" fg:x="1917" fg:w="30"/><text x="46.2212%" y="1167.50"></text></g><g><title>databend-query`std::io::default_read_exact (30 samples, 0.72%)</title><rect x="45.9712%" y="1141" width="0.7194%" height="15" fill="rgb(233,63,24)" fg:x="1917" fg:w="30"/><text x="46.2212%" y="1151.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (30 samples, 0.72%)</title><rect x="45.9712%" y="1125" width="0.7194%" height="15" fill="rgb(225,8,4)" fg:x="1917" fg:w="30"/><text x="46.2212%" y="1135.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (30 samples, 0.72%)</title><rect x="45.9712%" y="1109" width="0.7194%" height="15" fill="rgb(234,105,35)" fg:x="1917" fg:w="30"/><text x="46.2212%" y="1119.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="46.6667%" y="1093" width="0.0240%" height="15" fill="rgb(236,21,32)" fg:x="1946" fg:w="1"/><text x="46.9167%" y="1103.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (1 samples, 0.02%)</title><rect x="46.6906%" y="1093" width="0.0240%" height="15" fill="rgb(228,109,6)" fg:x="1947" fg:w="1"/><text x="46.9406%" y="1103.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="46.6906%" y="1077" width="0.0240%" height="15" fill="rgb(229,215,31)" fg:x="1947" fg:w="1"/><text x="46.9406%" y="1087.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="46.6906%" y="1061" width="0.0240%" height="15" fill="rgb(221,52,54)" fg:x="1947" fg:w="1"/><text x="46.9406%" y="1071.50"></text></g><g><title>databend-query`ZSTD_decompressStream (6 samples, 0.14%)</title><rect x="46.7146%" y="981" width="0.1439%" height="15" fill="rgb(252,129,43)" fg:x="1948" fg:w="6"/><text x="46.9646%" y="991.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (6 samples, 0.14%)</title><rect x="46.7146%" y="965" width="0.1439%" height="15" fill="rgb(248,183,27)" fg:x="1948" fg:w="6"/><text x="46.9646%" y="975.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (6 samples, 0.14%)</title><rect x="46.7146%" y="949" width="0.1439%" height="15" fill="rgb(250,0,22)" fg:x="1948" fg:w="6"/><text x="46.9646%" y="959.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (6 samples, 0.14%)</title><rect x="46.7146%" y="933" width="0.1439%" height="15" fill="rgb(213,166,10)" fg:x="1948" fg:w="6"/><text x="46.9646%" y="943.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.19%)</title><rect x="46.6906%" y="1125" width="0.1918%" height="15" fill="rgb(207,163,36)" fg:x="1947" fg:w="8"/><text x="46.9406%" y="1135.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::next (8 samples, 0.19%)</title><rect x="46.6906%" y="1109" width="0.1918%" height="15" fill="rgb(208,122,22)" fg:x="1947" fg:w="8"/><text x="46.9406%" y="1119.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (7 samples, 0.17%)</title><rect x="46.7146%" y="1093" width="0.1679%" height="15" fill="rgb(207,104,49)" fg:x="1948" fg:w="7"/><text x="46.9646%" y="1103.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (7 samples, 0.17%)</title><rect x="46.7146%" y="1077" width="0.1679%" height="15" fill="rgb(248,211,50)" fg:x="1948" fg:w="7"/><text x="46.9646%" y="1087.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (7 samples, 0.17%)</title><rect x="46.7146%" y="1061" width="0.1679%" height="15" fill="rgb(217,13,45)" fg:x="1948" fg:w="7"/><text x="46.9646%" y="1071.50"></text></g><g><title>databend-query`parquet2::compression::decompress (7 samples, 0.17%)</title><rect x="46.7146%" y="1045" width="0.1679%" height="15" fill="rgb(211,216,49)" fg:x="1948" fg:w="7"/><text x="46.9646%" y="1055.50"></text></g><g><title>databend-query`std::io::default_read_exact (7 samples, 0.17%)</title><rect x="46.7146%" y="1029" width="0.1679%" height="15" fill="rgb(221,58,53)" fg:x="1948" fg:w="7"/><text x="46.9646%" y="1039.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (7 samples, 0.17%)</title><rect x="46.7146%" y="1013" width="0.1679%" height="15" fill="rgb(220,112,41)" fg:x="1948" fg:w="7"/><text x="46.9646%" y="1023.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (7 samples, 0.17%)</title><rect x="46.7146%" y="997" width="0.1679%" height="15" fill="rgb(236,38,28)" fg:x="1948" fg:w="7"/><text x="46.9646%" y="1007.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="46.8585%" y="981" width="0.0240%" height="15" fill="rgb(227,195,22)" fg:x="1954" fg:w="1"/><text x="47.1085%" y="991.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (18 samples, 0.43%)</title><rect x="46.8825%" y="1109" width="0.4317%" height="15" fill="rgb(214,55,33)" fg:x="1955" fg:w="18"/><text x="47.1325%" y="1119.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (18 samples, 0.43%)</title><rect x="46.8825%" y="1093" width="0.4317%" height="15" fill="rgb(248,80,13)" fg:x="1955" fg:w="18"/><text x="47.1325%" y="1103.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 0.43%)</title><rect x="46.8825%" y="1077" width="0.4317%" height="15" fill="rgb(238,52,6)" fg:x="1955" fg:w="18"/><text x="47.1325%" y="1087.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (5 samples, 0.12%)</title><rect x="47.3141%" y="1045" width="0.1199%" height="15" fill="rgb(224,198,47)" fg:x="1973" fg:w="5"/><text x="47.5641%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.12%)</title><rect x="47.3141%" y="1029" width="0.1199%" height="15" fill="rgb(233,171,20)" fg:x="1973" fg:w="5"/><text x="47.5641%" y="1039.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.12%)</title><rect x="47.3141%" y="1013" width="0.1199%" height="15" fill="rgb(241,30,25)" fg:x="1973" fg:w="5"/><text x="47.5641%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (3 samples, 0.07%)</title><rect x="48.3453%" y="933" width="0.0719%" height="15" fill="rgb(207,171,38)" fg:x="2016" fg:w="3"/><text x="48.5953%" y="943.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (3 samples, 0.07%)</title><rect x="48.3453%" y="917" width="0.0719%" height="15" fill="rgb(234,70,1)" fg:x="2016" fg:w="3"/><text x="48.5953%" y="927.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 1.80%)</title><rect x="46.6906%" y="1141" width="1.7986%" height="15" fill="rgb(232,178,18)" fg:x="1947" fg:w="75"/><text x="46.9406%" y="1151.50">d..</text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::next (67 samples, 1.61%)</title><rect x="46.8825%" y="1125" width="1.6067%" height="15" fill="rgb(241,78,40)" fg:x="1955" fg:w="67"/><text x="47.1325%" y="1135.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (49 samples, 1.18%)</title><rect x="47.3141%" y="1109" width="1.1751%" height="15" fill="rgb(222,35,25)" fg:x="1973" fg:w="49"/><text x="47.5641%" y="1119.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (49 samples, 1.18%)</title><rect x="47.3141%" y="1093" width="1.1751%" height="15" fill="rgb(207,92,16)" fg:x="1973" fg:w="49"/><text x="47.5641%" y="1103.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (49 samples, 1.18%)</title><rect x="47.3141%" y="1077" width="1.1751%" height="15" fill="rgb(216,59,51)" fg:x="1973" fg:w="49"/><text x="47.5641%" y="1087.50"></text></g><g><title>databend-query`parquet2::compression::decompress (49 samples, 1.18%)</title><rect x="47.3141%" y="1061" width="1.1751%" height="15" fill="rgb(213,80,28)" fg:x="1973" fg:w="49"/><text x="47.5641%" y="1071.50"></text></g><g><title>databend-query`std::io::default_read_exact (44 samples, 1.06%)</title><rect x="47.4341%" y="1045" width="1.0552%" height="15" fill="rgb(220,93,7)" fg:x="1978" fg:w="44"/><text x="47.6841%" y="1055.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (44 samples, 1.06%)</title><rect x="47.4341%" y="1029" width="1.0552%" height="15" fill="rgb(225,24,44)" fg:x="1978" fg:w="44"/><text x="47.6841%" y="1039.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (44 samples, 1.06%)</title><rect x="47.4341%" y="1013" width="1.0552%" height="15" fill="rgb(243,74,40)" fg:x="1978" fg:w="44"/><text x="47.6841%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decompressStream (44 samples, 1.06%)</title><rect x="47.4341%" y="997" width="1.0552%" height="15" fill="rgb(228,39,7)" fg:x="1978" fg:w="44"/><text x="47.6841%" y="1007.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (44 samples, 1.06%)</title><rect x="47.4341%" y="981" width="1.0552%" height="15" fill="rgb(227,79,8)" fg:x="1978" fg:w="44"/><text x="47.6841%" y="991.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (44 samples, 1.06%)</title><rect x="47.4341%" y="965" width="1.0552%" height="15" fill="rgb(236,58,11)" fg:x="1978" fg:w="44"/><text x="47.6841%" y="975.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (44 samples, 1.06%)</title><rect x="47.4341%" y="949" width="1.0552%" height="15" fill="rgb(249,63,35)" fg:x="1978" fg:w="44"/><text x="47.6841%" y="959.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (3 samples, 0.07%)</title><rect x="48.4173%" y="933" width="0.0719%" height="15" fill="rgb(252,114,16)" fg:x="2019" fg:w="3"/><text x="48.6673%" y="943.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (3 samples, 0.07%)</title><rect x="48.4173%" y="917" width="0.0719%" height="15" fill="rgb(254,151,24)" fg:x="2019" fg:w="3"/><text x="48.6673%" y="927.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (3 samples, 0.07%)</title><rect x="48.4173%" y="901" width="0.0719%" height="15" fill="rgb(253,54,39)" fg:x="2019" fg:w="3"/><text x="48.6673%" y="911.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (22 samples, 0.53%)</title><rect x="48.4892%" y="1125" width="0.5276%" height="15" fill="rgb(243,25,45)" fg:x="2022" fg:w="22"/><text x="48.7392%" y="1135.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (22 samples, 0.53%)</title><rect x="48.4892%" y="1109" width="0.5276%" height="15" fill="rgb(234,134,9)" fg:x="2022" fg:w="22"/><text x="48.7392%" y="1119.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.53%)</title><rect x="48.4892%" y="1093" width="0.5276%" height="15" fill="rgb(227,166,31)" fg:x="2022" fg:w="22"/><text x="48.7392%" y="1103.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (3 samples, 0.07%)</title><rect x="49.0168%" y="1061" width="0.0719%" height="15" fill="rgb(245,143,41)" fg:x="2044" fg:w="3"/><text x="49.2668%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.07%)</title><rect x="49.0168%" y="1045" width="0.0719%" height="15" fill="rgb(238,181,32)" fg:x="2044" fg:w="3"/><text x="49.2668%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="49.0168%" y="1029" width="0.0719%" height="15" fill="rgb(224,113,18)" fg:x="2044" fg:w="3"/><text x="49.2668%" y="1039.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (5 samples, 0.12%)</title><rect x="50.4077%" y="949" width="0.1199%" height="15" fill="rgb(240,229,28)" fg:x="2102" fg:w="5"/><text x="50.6577%" y="959.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (5 samples, 0.12%)</title><rect x="50.4077%" y="933" width="0.1199%" height="15" fill="rgb(250,185,3)" fg:x="2102" fg:w="5"/><text x="50.6577%" y="943.50"></text></g><g><title>databend-query`ZSTD_decompressStream (61 samples, 1.46%)</title><rect x="49.0887%" y="1013" width="1.4628%" height="15" fill="rgb(212,59,25)" fg:x="2047" fg:w="61"/><text x="49.3387%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (61 samples, 1.46%)</title><rect x="49.0887%" y="997" width="1.4628%" height="15" fill="rgb(221,87,20)" fg:x="2047" fg:w="61"/><text x="49.3387%" y="1007.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (61 samples, 1.46%)</title><rect x="49.0887%" y="981" width="1.4628%" height="15" fill="rgb(213,74,28)" fg:x="2047" fg:w="61"/><text x="49.3387%" y="991.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (61 samples, 1.46%)</title><rect x="49.0887%" y="965" width="1.4628%" height="15" fill="rgb(224,132,34)" fg:x="2047" fg:w="61"/><text x="49.3387%" y="975.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (1 samples, 0.02%)</title><rect x="50.5276%" y="949" width="0.0240%" height="15" fill="rgb(222,101,24)" fg:x="2107" fg:w="1"/><text x="50.7776%" y="959.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (1 samples, 0.02%)</title><rect x="50.5276%" y="933" width="0.0240%" height="15" fill="rgb(254,142,4)" fg:x="2107" fg:w="1"/><text x="50.7776%" y="943.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="50.5276%" y="917" width="0.0240%" height="15" fill="rgb(230,229,49)" fg:x="2107" fg:w="1"/><text x="50.7776%" y="927.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (62 samples, 1.49%)</title><rect x="49.0887%" y="1029" width="1.4868%" height="15" fill="rgb(238,70,47)" fg:x="2047" fg:w="62"/><text x="49.3387%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="50.5516%" y="1013" width="0.0240%" height="15" fill="rgb(231,160,17)" fg:x="2108" fg:w="1"/><text x="50.8016%" y="1023.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 3.91%)</title><rect x="46.6906%" y="1157" width="3.9089%" height="15" fill="rgb(218,68,53)" fg:x="1947" fg:w="163"/><text x="46.9406%" y="1167.50">data..</text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::next (88 samples, 2.11%)</title><rect x="48.4892%" y="1141" width="2.1103%" height="15" fill="rgb(236,111,10)" fg:x="2022" fg:w="88"/><text x="48.7392%" y="1151.50">d..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (66 samples, 1.58%)</title><rect x="49.0168%" y="1125" width="1.5827%" height="15" fill="rgb(224,34,41)" fg:x="2044" fg:w="66"/><text x="49.2668%" y="1135.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (66 samples, 1.58%)</title><rect x="49.0168%" y="1109" width="1.5827%" height="15" fill="rgb(241,118,19)" fg:x="2044" fg:w="66"/><text x="49.2668%" y="1119.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (66 samples, 1.58%)</title><rect x="49.0168%" y="1093" width="1.5827%" height="15" fill="rgb(238,129,25)" fg:x="2044" fg:w="66"/><text x="49.2668%" y="1103.50"></text></g><g><title>databend-query`parquet2::compression::decompress (66 samples, 1.58%)</title><rect x="49.0168%" y="1077" width="1.5827%" height="15" fill="rgb(238,22,31)" fg:x="2044" fg:w="66"/><text x="49.2668%" y="1087.50"></text></g><g><title>databend-query`std::io::default_read_exact (63 samples, 1.51%)</title><rect x="49.0887%" y="1061" width="1.5108%" height="15" fill="rgb(222,174,48)" fg:x="2047" fg:w="63"/><text x="49.3387%" y="1071.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (63 samples, 1.51%)</title><rect x="49.0887%" y="1045" width="1.5108%" height="15" fill="rgb(206,152,40)" fg:x="2047" fg:w="63"/><text x="49.3387%" y="1055.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="50.5755%" y="1029" width="0.0240%" height="15" fill="rgb(218,99,54)" fg:x="2109" fg:w="1"/><text x="50.8255%" y="1039.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (29 samples, 0.70%)</title><rect x="50.5995%" y="1141" width="0.6954%" height="15" fill="rgb(220,174,26)" fg:x="2110" fg:w="29"/><text x="50.8495%" y="1151.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (29 samples, 0.70%)</title><rect x="50.5995%" y="1125" width="0.6954%" height="15" fill="rgb(245,116,9)" fg:x="2110" fg:w="29"/><text x="50.8495%" y="1135.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (29 samples, 0.70%)</title><rect x="50.5995%" y="1109" width="0.6954%" height="15" fill="rgb(209,72,35)" fg:x="2110" fg:w="29"/><text x="50.8495%" y="1119.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="51.2950%" y="1125" width="0.0240%" height="15" fill="rgb(226,126,21)" fg:x="2139" fg:w="1"/><text x="51.5450%" y="1135.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (1 samples, 0.02%)</title><rect x="51.2950%" y="1109" width="0.0240%" height="15" fill="rgb(227,192,1)" fg:x="2139" fg:w="1"/><text x="51.5450%" y="1119.50"></text></g><g><title>databend-query`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="51.2950%" y="1093" width="0.0240%" height="15" fill="rgb(237,180,29)" fg:x="2139" fg:w="1"/><text x="51.5450%" y="1103.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="51.2950%" y="1077" width="0.0240%" height="15" fill="rgb(230,197,35)" fg:x="2139" fg:w="1"/><text x="51.5450%" y="1087.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (3 samples, 0.07%)</title><rect x="51.3189%" y="1077" width="0.0719%" height="15" fill="rgb(246,193,31)" fg:x="2140" fg:w="3"/><text x="51.5689%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.07%)</title><rect x="51.3189%" y="1061" width="0.0719%" height="15" fill="rgb(241,36,4)" fg:x="2140" fg:w="3"/><text x="51.5689%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="51.3189%" y="1045" width="0.0719%" height="15" fill="rgb(241,130,17)" fg:x="2140" fg:w="3"/><text x="51.5689%" y="1055.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (3 samples, 0.07%)</title><rect x="52.7818%" y="965" width="0.0719%" height="15" fill="rgb(206,137,32)" fg:x="2201" fg:w="3"/><text x="53.0318%" y="975.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (3 samples, 0.07%)</title><rect x="52.7818%" y="949" width="0.0719%" height="15" fill="rgb(237,228,51)" fg:x="2201" fg:w="3"/><text x="53.0318%" y="959.50"></text></g><g><title>databend-query`ZSTD_decompressStream (64 samples, 1.53%)</title><rect x="51.3909%" y="1029" width="1.5348%" height="15" fill="rgb(243,6,42)" fg:x="2143" fg:w="64"/><text x="51.6409%" y="1039.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (64 samples, 1.53%)</title><rect x="51.3909%" y="1013" width="1.5348%" height="15" fill="rgb(251,74,28)" fg:x="2143" fg:w="64"/><text x="51.6409%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (64 samples, 1.53%)</title><rect x="51.3909%" y="997" width="1.5348%" height="15" fill="rgb(218,20,49)" fg:x="2143" fg:w="64"/><text x="51.6409%" y="1007.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (64 samples, 1.53%)</title><rect x="51.3909%" y="981" width="1.5348%" height="15" fill="rgb(238,28,14)" fg:x="2143" fg:w="64"/><text x="51.6409%" y="991.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (3 samples, 0.07%)</title><rect x="52.8537%" y="965" width="0.0719%" height="15" fill="rgb(229,40,46)" fg:x="2204" fg:w="3"/><text x="53.1037%" y="975.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (3 samples, 0.07%)</title><rect x="52.8537%" y="949" width="0.0719%" height="15" fill="rgb(244,195,20)" fg:x="2204" fg:w="3"/><text x="53.1037%" y="959.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (3 samples, 0.07%)</title><rect x="52.8537%" y="933" width="0.0719%" height="15" fill="rgb(253,56,35)" fg:x="2204" fg:w="3"/><text x="53.1037%" y="943.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (65 samples, 1.56%)</title><rect x="51.3909%" y="1045" width="1.5588%" height="15" fill="rgb(210,149,44)" fg:x="2143" fg:w="65"/><text x="51.6409%" y="1055.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="52.9257%" y="1029" width="0.0240%" height="15" fill="rgb(240,135,12)" fg:x="2207" fg:w="1"/><text x="53.1757%" y="1039.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (262 samples, 6.28%)</title><rect x="46.6906%" y="1173" width="6.2830%" height="15" fill="rgb(251,24,50)" fg:x="1947" fg:w="262"/><text x="46.9406%" y="1183.50">databend..</text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::next (99 samples, 2.37%)</title><rect x="50.5995%" y="1157" width="2.3741%" height="15" fill="rgb(243,200,47)" fg:x="2110" fg:w="99"/><text x="50.8495%" y="1167.50">da..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (70 samples, 1.68%)</title><rect x="51.2950%" y="1141" width="1.6787%" height="15" fill="rgb(224,166,26)" fg:x="2139" fg:w="70"/><text x="51.5450%" y="1151.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (69 samples, 1.65%)</title><rect x="51.3189%" y="1125" width="1.6547%" height="15" fill="rgb(233,0,47)" fg:x="2140" fg:w="69"/><text x="51.5689%" y="1135.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (69 samples, 1.65%)</title><rect x="51.3189%" y="1109" width="1.6547%" height="15" fill="rgb(253,80,5)" fg:x="2140" fg:w="69"/><text x="51.5689%" y="1119.50"></text></g><g><title>databend-query`parquet2::compression::decompress (69 samples, 1.65%)</title><rect x="51.3189%" y="1093" width="1.6547%" height="15" fill="rgb(214,133,25)" fg:x="2140" fg:w="69"/><text x="51.5689%" y="1103.50"></text></g><g><title>databend-query`std::io::default_read_exact (66 samples, 1.58%)</title><rect x="51.3909%" y="1077" width="1.5827%" height="15" fill="rgb(209,27,14)" fg:x="2143" fg:w="66"/><text x="51.6409%" y="1087.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (66 samples, 1.58%)</title><rect x="51.3909%" y="1061" width="1.5827%" height="15" fill="rgb(219,102,51)" fg:x="2143" fg:w="66"/><text x="51.6409%" y="1071.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="52.9496%" y="1045" width="0.0240%" height="15" fill="rgb(237,18,16)" fg:x="2208" fg:w="1"/><text x="53.1996%" y="1055.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (22 samples, 0.53%)</title><rect x="52.9736%" y="1157" width="0.5276%" height="15" fill="rgb(241,85,17)" fg:x="2209" fg:w="22"/><text x="53.2236%" y="1167.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (22 samples, 0.53%)</title><rect x="52.9736%" y="1141" width="0.5276%" height="15" fill="rgb(236,90,42)" fg:x="2209" fg:w="22"/><text x="53.2236%" y="1151.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.53%)</title><rect x="52.9736%" y="1125" width="0.5276%" height="15" fill="rgb(249,57,21)" fg:x="2209" fg:w="22"/><text x="53.2236%" y="1135.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (3 samples, 0.07%)</title><rect x="53.5012%" y="1093" width="0.0719%" height="15" fill="rgb(243,12,36)" fg:x="2231" fg:w="3"/><text x="53.7512%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.07%)</title><rect x="53.5012%" y="1077" width="0.0719%" height="15" fill="rgb(253,128,47)" fg:x="2231" fg:w="3"/><text x="53.7512%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="53.5012%" y="1061" width="0.0719%" height="15" fill="rgb(207,33,20)" fg:x="2231" fg:w="3"/><text x="53.7512%" y="1071.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (4 samples, 0.10%)</title><rect x="55.1079%" y="981" width="0.0959%" height="15" fill="rgb(233,215,35)" fg:x="2298" fg:w="4"/><text x="55.3579%" y="991.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (4 samples, 0.10%)</title><rect x="55.1079%" y="965" width="0.0959%" height="15" fill="rgb(249,188,52)" fg:x="2298" fg:w="4"/><text x="55.3579%" y="975.50"></text></g><g><title>databend-query`ZSTD_decompressStream (69 samples, 1.65%)</title><rect x="53.5731%" y="1045" width="1.6547%" height="15" fill="rgb(225,12,32)" fg:x="2234" fg:w="69"/><text x="53.8231%" y="1055.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (69 samples, 1.65%)</title><rect x="53.5731%" y="1029" width="1.6547%" height="15" fill="rgb(247,98,14)" fg:x="2234" fg:w="69"/><text x="53.8231%" y="1039.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (69 samples, 1.65%)</title><rect x="53.5731%" y="1013" width="1.6547%" height="15" fill="rgb(247,219,48)" fg:x="2234" fg:w="69"/><text x="53.8231%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (69 samples, 1.65%)</title><rect x="53.5731%" y="997" width="1.6547%" height="15" fill="rgb(253,60,48)" fg:x="2234" fg:w="69"/><text x="53.8231%" y="1007.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (1 samples, 0.02%)</title><rect x="55.2038%" y="981" width="0.0240%" height="15" fill="rgb(245,15,52)" fg:x="2302" fg:w="1"/><text x="55.4538%" y="991.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (1 samples, 0.02%)</title><rect x="55.2038%" y="965" width="0.0240%" height="15" fill="rgb(220,133,28)" fg:x="2302" fg:w="1"/><text x="55.4538%" y="975.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (1 samples, 0.02%)</title><rect x="55.2038%" y="949" width="0.0240%" height="15" fill="rgb(217,180,4)" fg:x="2302" fg:w="1"/><text x="55.4538%" y="959.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (357 samples, 8.56%)</title><rect x="46.6906%" y="1189" width="8.5612%" height="15" fill="rgb(251,24,1)" fg:x="1947" fg:w="357"/><text x="46.9406%" y="1199.50">databend-que..</text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::next (95 samples, 2.28%)</title><rect x="52.9736%" y="1173" width="2.2782%" height="15" fill="rgb(212,185,49)" fg:x="2209" fg:w="95"/><text x="53.2236%" y="1183.50">d..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (73 samples, 1.75%)</title><rect x="53.5012%" y="1157" width="1.7506%" height="15" fill="rgb(215,175,22)" fg:x="2231" fg:w="73"/><text x="53.7512%" y="1167.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (73 samples, 1.75%)</title><rect x="53.5012%" y="1141" width="1.7506%" height="15" fill="rgb(250,205,14)" fg:x="2231" fg:w="73"/><text x="53.7512%" y="1151.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (73 samples, 1.75%)</title><rect x="53.5012%" y="1125" width="1.7506%" height="15" fill="rgb(225,211,22)" fg:x="2231" fg:w="73"/><text x="53.7512%" y="1135.50"></text></g><g><title>databend-query`parquet2::compression::decompress (73 samples, 1.75%)</title><rect x="53.5012%" y="1109" width="1.7506%" height="15" fill="rgb(251,179,42)" fg:x="2231" fg:w="73"/><text x="53.7512%" y="1119.50"></text></g><g><title>databend-query`std::io::default_read_exact (70 samples, 1.68%)</title><rect x="53.5731%" y="1093" width="1.6787%" height="15" fill="rgb(208,216,51)" fg:x="2234" fg:w="70"/><text x="53.8231%" y="1103.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (70 samples, 1.68%)</title><rect x="53.5731%" y="1077" width="1.6787%" height="15" fill="rgb(235,36,11)" fg:x="2234" fg:w="70"/><text x="53.8231%" y="1087.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (70 samples, 1.68%)</title><rect x="53.5731%" y="1061" width="1.6787%" height="15" fill="rgb(213,189,28)" fg:x="2234" fg:w="70"/><text x="53.8231%" y="1071.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="55.2278%" y="1045" width="0.0240%" height="15" fill="rgb(227,203,42)" fg:x="2303" fg:w="1"/><text x="55.4778%" y="1055.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (27 samples, 0.65%)</title><rect x="55.2518%" y="1173" width="0.6475%" height="15" fill="rgb(244,72,36)" fg:x="2304" fg:w="27"/><text x="55.5018%" y="1183.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (27 samples, 0.65%)</title><rect x="55.2518%" y="1157" width="0.6475%" height="15" fill="rgb(213,53,17)" fg:x="2304" fg:w="27"/><text x="55.5018%" y="1167.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 0.65%)</title><rect x="55.2518%" y="1141" width="0.6475%" height="15" fill="rgb(207,167,3)" fg:x="2304" fg:w="27"/><text x="55.5018%" y="1151.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="55.8993%" y="1157" width="0.0480%" height="15" fill="rgb(216,98,30)" fg:x="2331" fg:w="2"/><text x="56.1493%" y="1167.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (2 samples, 0.05%)</title><rect x="55.8993%" y="1141" width="0.0480%" height="15" fill="rgb(236,123,15)" fg:x="2331" fg:w="2"/><text x="56.1493%" y="1151.50"></text></g><g><title>databend-query`std::io::default_read_to_end (2 samples, 0.05%)</title><rect x="55.8993%" y="1125" width="0.0480%" height="15" fill="rgb(248,81,50)" fg:x="2331" fg:w="2"/><text x="56.1493%" y="1135.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="55.8993%" y="1109" width="0.0480%" height="15" fill="rgb(214,120,4)" fg:x="2331" fg:w="2"/><text x="56.1493%" y="1119.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (3 samples, 0.07%)</title><rect x="55.9472%" y="1109" width="0.0719%" height="15" fill="rgb(208,179,34)" fg:x="2333" fg:w="3"/><text x="56.1972%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.07%)</title><rect x="55.9472%" y="1093" width="0.0719%" height="15" fill="rgb(227,140,7)" fg:x="2333" fg:w="3"/><text x="56.1972%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="55.9472%" y="1077" width="0.0719%" height="15" fill="rgb(214,22,6)" fg:x="2333" fg:w="3"/><text x="56.1972%" y="1087.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (5 samples, 0.12%)</title><rect x="57.2422%" y="997" width="0.1199%" height="15" fill="rgb(207,137,27)" fg:x="2387" fg:w="5"/><text x="57.4922%" y="1007.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (5 samples, 0.12%)</title><rect x="57.2422%" y="981" width="0.1199%" height="15" fill="rgb(210,8,46)" fg:x="2387" fg:w="5"/><text x="57.4922%" y="991.50"></text></g><g><title>databend-query`ZSTD_decompressStream (59 samples, 1.41%)</title><rect x="56.0192%" y="1061" width="1.4149%" height="15" fill="rgb(240,16,54)" fg:x="2336" fg:w="59"/><text x="56.2692%" y="1071.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (59 samples, 1.41%)</title><rect x="56.0192%" y="1045" width="1.4149%" height="15" fill="rgb(211,209,29)" fg:x="2336" fg:w="59"/><text x="56.2692%" y="1055.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (59 samples, 1.41%)</title><rect x="56.0192%" y="1029" width="1.4149%" height="15" fill="rgb(226,228,24)" fg:x="2336" fg:w="59"/><text x="56.2692%" y="1039.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (59 samples, 1.41%)</title><rect x="56.0192%" y="1013" width="1.4149%" height="15" fill="rgb(222,84,9)" fg:x="2336" fg:w="59"/><text x="56.2692%" y="1023.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (3 samples, 0.07%)</title><rect x="57.3621%" y="997" width="0.0719%" height="15" fill="rgb(234,203,30)" fg:x="2392" fg:w="3"/><text x="57.6121%" y="1007.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (3 samples, 0.07%)</title><rect x="57.3621%" y="981" width="0.0719%" height="15" fill="rgb(238,109,14)" fg:x="2392" fg:w="3"/><text x="57.6121%" y="991.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (3 samples, 0.07%)</title><rect x="57.3621%" y="965" width="0.0719%" height="15" fill="rgb(233,206,34)" fg:x="2392" fg:w="3"/><text x="57.6121%" y="975.50"></text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (449 samples, 10.77%)</title><rect x="46.6906%" y="1205" width="10.7674%" height="15" fill="rgb(220,167,47)" fg:x="1947" fg:w="449"/><text x="46.9406%" y="1215.50">databend-query`&lt;..</text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::next (92 samples, 2.21%)</title><rect x="55.2518%" y="1189" width="2.2062%" height="15" fill="rgb(238,105,10)" fg:x="2304" fg:w="92"/><text x="55.5018%" y="1199.50">d..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (65 samples, 1.56%)</title><rect x="55.8993%" y="1173" width="1.5588%" height="15" fill="rgb(213,227,17)" fg:x="2331" fg:w="65"/><text x="56.1493%" y="1183.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (63 samples, 1.51%)</title><rect x="55.9472%" y="1157" width="1.5108%" height="15" fill="rgb(217,132,38)" fg:x="2333" fg:w="63"/><text x="56.1972%" y="1167.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (63 samples, 1.51%)</title><rect x="55.9472%" y="1141" width="1.5108%" height="15" fill="rgb(242,146,4)" fg:x="2333" fg:w="63"/><text x="56.1972%" y="1151.50"></text></g><g><title>databend-query`parquet2::compression::decompress (63 samples, 1.51%)</title><rect x="55.9472%" y="1125" width="1.5108%" height="15" fill="rgb(212,61,9)" fg:x="2333" fg:w="63"/><text x="56.1972%" y="1135.50"></text></g><g><title>databend-query`std::io::default_read_exact (60 samples, 1.44%)</title><rect x="56.0192%" y="1109" width="1.4388%" height="15" fill="rgb(247,126,22)" fg:x="2336" fg:w="60"/><text x="56.2692%" y="1119.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (60 samples, 1.44%)</title><rect x="56.0192%" y="1093" width="1.4388%" height="15" fill="rgb(220,196,2)" fg:x="2336" fg:w="60"/><text x="56.2692%" y="1103.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (60 samples, 1.44%)</title><rect x="56.0192%" y="1077" width="1.4388%" height="15" fill="rgb(208,46,4)" fg:x="2336" fg:w="60"/><text x="56.2692%" y="1087.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="57.4341%" y="1061" width="0.0240%" height="15" fill="rgb(252,104,46)" fg:x="2395" fg:w="1"/><text x="57.6841%" y="1071.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.02%)</title><rect x="57.4580%" y="1173" width="0.0240%" height="15" fill="rgb(237,152,48)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1183.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.02%)</title><rect x="57.4580%" y="1157" width="0.0240%" height="15" fill="rgb(221,59,37)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1167.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="57.4580%" y="1141" width="0.0240%" height="15" fill="rgb(209,202,51)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1151.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="57.4580%" y="1125" width="0.0240%" height="15" fill="rgb(228,81,30)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1135.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="57.4580%" y="1109" width="0.0240%" height="15" fill="rgb(227,42,39)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1119.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="57.4580%" y="1093" width="0.0240%" height="15" fill="rgb(221,26,2)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="57.4580%" y="1077" width="0.0240%" height="15" fill="rgb(254,61,31)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="57.4580%" y="1061" width="0.0240%" height="15" fill="rgb(222,173,38)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="57.4580%" y="1045" width="0.0240%" height="15" fill="rgb(218,50,12)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="57.4580%" y="1029" width="0.0240%" height="15" fill="rgb(223,88,40)" fg:x="2396" fg:w="1"/><text x="57.7080%" y="1039.50"></text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::extend_from_new_page (24 samples, 0.58%)</title><rect x="57.4580%" y="1189" width="0.5755%" height="15" fill="rgb(237,54,19)" fg:x="2396" fg:w="24"/><text x="57.7080%" y="1199.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (23 samples, 0.55%)</title><rect x="57.4820%" y="1173" width="0.5516%" height="15" fill="rgb(251,129,25)" fg:x="2397" fg:w="23"/><text x="57.7320%" y="1183.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (23 samples, 0.55%)</title><rect x="57.4820%" y="1157" width="0.5516%" height="15" fill="rgb(238,97,19)" fg:x="2397" fg:w="23"/><text x="57.7320%" y="1167.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="58.0336%" y="1173" width="0.0240%" height="15" fill="rgb(240,169,18)" fg:x="2420" fg:w="1"/><text x="58.2836%" y="1183.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (1 samples, 0.02%)</title><rect x="58.0336%" y="1157" width="0.0240%" height="15" fill="rgb(230,187,49)" fg:x="2420" fg:w="1"/><text x="58.2836%" y="1167.50"></text></g><g><title>databend-query`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="58.0336%" y="1141" width="0.0240%" height="15" fill="rgb(209,44,26)" fg:x="2420" fg:w="1"/><text x="58.2836%" y="1151.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="58.0336%" y="1125" width="0.0240%" height="15" fill="rgb(244,0,6)" fg:x="2420" fg:w="1"/><text x="58.2836%" y="1135.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (8 samples, 0.19%)</title><rect x="58.0576%" y="1125" width="0.1918%" height="15" fill="rgb(248,18,21)" fg:x="2421" fg:w="8"/><text x="58.3076%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.19%)</title><rect x="58.0576%" y="1109" width="0.1918%" height="15" fill="rgb(245,180,19)" fg:x="2421" fg:w="8"/><text x="58.3076%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.19%)</title><rect x="58.0576%" y="1093" width="0.1918%" height="15" fill="rgb(252,118,36)" fg:x="2421" fg:w="8"/><text x="58.3076%" y="1103.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (3 samples, 0.07%)</title><rect x="59.8082%" y="1013" width="0.0719%" height="15" fill="rgb(210,224,19)" fg:x="2494" fg:w="3"/><text x="60.0582%" y="1023.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (3 samples, 0.07%)</title><rect x="59.8082%" y="997" width="0.0719%" height="15" fill="rgb(218,30,24)" fg:x="2494" fg:w="3"/><text x="60.0582%" y="1007.50"></text></g><g><title>databend-query`ZSTD_decompressStream (69 samples, 1.65%)</title><rect x="58.2494%" y="1077" width="1.6547%" height="15" fill="rgb(219,75,50)" fg:x="2429" fg:w="69"/><text x="58.4994%" y="1087.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (69 samples, 1.65%)</title><rect x="58.2494%" y="1061" width="1.6547%" height="15" fill="rgb(234,72,50)" fg:x="2429" fg:w="69"/><text x="58.4994%" y="1071.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (69 samples, 1.65%)</title><rect x="58.2494%" y="1045" width="1.6547%" height="15" fill="rgb(219,100,48)" fg:x="2429" fg:w="69"/><text x="58.4994%" y="1055.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (69 samples, 1.65%)</title><rect x="58.2494%" y="1029" width="1.6547%" height="15" fill="rgb(253,5,41)" fg:x="2429" fg:w="69"/><text x="58.4994%" y="1039.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (1 samples, 0.02%)</title><rect x="59.8801%" y="1013" width="0.0240%" height="15" fill="rgb(247,181,11)" fg:x="2497" fg:w="1"/><text x="60.1301%" y="1023.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (1 samples, 0.02%)</title><rect x="59.8801%" y="997" width="0.0240%" height="15" fill="rgb(222,223,25)" fg:x="2497" fg:w="1"/><text x="60.1301%" y="1007.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="59.8801%" y="981" width="0.0240%" height="15" fill="rgb(214,198,28)" fg:x="2497" fg:w="1"/><text x="60.1301%" y="991.50"></text></g><g><title>databend-query`common_storages_fuse::io::read::block::block_reader_parquet_deserialize::_&lt;impl common_storages_fuse::io::read::block::block_reader::BlockReader&gt;::deserialize_parquet_chunks_with_buffer (787 samples, 18.87%)</title><rect x="41.1031%" y="1285" width="18.8729%" height="15" fill="rgb(230,46,43)" fg:x="1714" fg:w="787"/><text x="41.3531%" y="1295.50">databend-query`common_storage..</text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (787 samples, 18.87%)</title><rect x="41.1031%" y="1269" width="18.8729%" height="15" fill="rgb(233,65,53)" fg:x="1714" fg:w="787"/><text x="41.3531%" y="1279.50">databend-query`&lt;core::iter::a..</text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (787 samples, 18.87%)</title><rect x="41.1031%" y="1253" width="18.8729%" height="15" fill="rgb(221,121,27)" fg:x="1714" fg:w="787"/><text x="41.3531%" y="1263.50">databend-query`&lt;core::iter::a..</text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (787 samples, 18.87%)</title><rect x="41.1031%" y="1237" width="18.8729%" height="15" fill="rgb(247,70,47)" fg:x="1714" fg:w="787"/><text x="41.3531%" y="1247.50">databend-query`&lt;core::iter::a..</text></g><g><title>databend-query`&lt;arrow2::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (554 samples, 13.29%)</title><rect x="46.6906%" y="1221" width="13.2854%" height="15" fill="rgb(228,85,35)" fg:x="1947" fg:w="554"/><text x="46.9406%" y="1231.50">databend-query`&lt;arro..</text></g><g><title>databend-query`arrow2::io::parquet::read::deserialize::utils::next (105 samples, 2.52%)</title><rect x="57.4580%" y="1205" width="2.5180%" height="15" fill="rgb(209,50,18)" fg:x="2396" fg:w="105"/><text x="57.7080%" y="1215.50">da..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (81 samples, 1.94%)</title><rect x="58.0336%" y="1189" width="1.9424%" height="15" fill="rgb(250,19,35)" fg:x="2420" fg:w="81"/><text x="58.2836%" y="1199.50">d..</text></g><g><title>databend-query`parquet2::read::compression::decompress (80 samples, 1.92%)</title><rect x="58.0576%" y="1173" width="1.9185%" height="15" fill="rgb(253,107,29)" fg:x="2421" fg:w="80"/><text x="58.3076%" y="1183.50">d..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (80 samples, 1.92%)</title><rect x="58.0576%" y="1157" width="1.9185%" height="15" fill="rgb(252,179,29)" fg:x="2421" fg:w="80"/><text x="58.3076%" y="1167.50">d..</text></g><g><title>databend-query`parquet2::compression::decompress (80 samples, 1.92%)</title><rect x="58.0576%" y="1141" width="1.9185%" height="15" fill="rgb(238,194,6)" fg:x="2421" fg:w="80"/><text x="58.3076%" y="1151.50">d..</text></g><g><title>databend-query`std::io::default_read_exact (72 samples, 1.73%)</title><rect x="58.2494%" y="1125" width="1.7266%" height="15" fill="rgb(238,164,29)" fg:x="2429" fg:w="72"/><text x="58.4994%" y="1135.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (72 samples, 1.73%)</title><rect x="58.2494%" y="1109" width="1.7266%" height="15" fill="rgb(224,25,9)" fg:x="2429" fg:w="72"/><text x="58.4994%" y="1119.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (72 samples, 1.73%)</title><rect x="58.2494%" y="1093" width="1.7266%" height="15" fill="rgb(244,153,23)" fg:x="2429" fg:w="72"/><text x="58.4994%" y="1103.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="59.9041%" y="1077" width="0.0719%" height="15" fill="rgb(212,203,14)" fg:x="2498" fg:w="3"/><text x="60.1541%" y="1087.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::operations::read::parquet_data_source_deserializer::DeserializeDataTransform as common_pipeline_core::processors::processor::Processor&gt;::process (788 samples, 18.90%)</title><rect x="41.1031%" y="1301" width="18.8969%" height="15" fill="rgb(220,164,20)" fg:x="1714" fg:w="788"/><text x="41.3531%" y="1311.50">databend-query`&lt;common_storage..</text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_storages_fuse::io::read::block::block_reader_merge_io::MergeIOReadResult&gt; (1 samples, 0.02%)</title><rect x="59.9760%" y="1285" width="0.0240%" height="15" fill="rgb(222,203,48)" fg:x="2501" fg:w="1"/><text x="60.2260%" y="1295.50"></text></g><g><title>databend-query`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="59.9760%" y="1269" width="0.0240%" height="15" fill="rgb(215,159,22)" fg:x="2501" fg:w="1"/><text x="60.2260%" y="1279.50"></text></g><g><title>databend-query`hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.02%)</title><rect x="59.9760%" y="1253" width="0.0240%" height="15" fill="rgb(216,183,47)" fg:x="2501" fg:w="1"/><text x="60.2260%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="59.9760%" y="1237" width="0.0240%" height="15" fill="rgb(229,195,25)" fg:x="2501" fg:w="1"/><text x="60.2260%" y="1247.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="59.9760%" y="1221" width="0.0240%" height="15" fill="rgb(224,132,51)" fg:x="2501" fg:w="1"/><text x="60.2260%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::DataBlock&gt; (8 samples, 0.19%)</title><rect x="60.0000%" y="1285" width="0.1918%" height="15" fill="rgb(240,63,7)" fg:x="2502" fg:w="8"/><text x="60.2500%" y="1295.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (8 samples, 0.19%)</title><rect x="60.0000%" y="1269" width="0.1918%" height="15" fill="rgb(249,182,41)" fg:x="2502" fg:w="8"/><text x="60.2500%" y="1279.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.19%)</title><rect x="60.0000%" y="1253" width="0.1918%" height="15" fill="rgb(243,47,26)" fg:x="2502" fg:w="8"/><text x="60.2500%" y="1263.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 0.19%)</title><rect x="60.0000%" y="1237" width="0.1918%" height="15" fill="rgb(233,48,2)" fg:x="2502" fg:w="8"/><text x="60.2500%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.19%)</title><rect x="60.0000%" y="1221" width="0.1918%" height="15" fill="rgb(244,165,34)" fg:x="2502" fg:w="8"/><text x="60.2500%" y="1231.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.19%)</title><rect x="60.0000%" y="1205" width="0.1918%" height="15" fill="rgb(207,89,7)" fg:x="2502" fg:w="8"/><text x="60.2500%" y="1215.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="60.1918%" y="1269" width="0.0240%" height="15" fill="rgb(244,117,36)" fg:x="2510" fg:w="1"/><text x="60.4418%" y="1279.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="60.1918%" y="1253" width="0.0240%" height="15" fill="rgb(226,144,34)" fg:x="2510" fg:w="1"/><text x="60.4418%" y="1263.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="60.1918%" y="1237" width="0.0240%" height="15" fill="rgb(213,23,19)" fg:x="2510" fg:w="1"/><text x="60.4418%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="60.1918%" y="1221" width="0.0240%" height="15" fill="rgb(217,75,12)" fg:x="2510" fg:w="1"/><text x="60.4418%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="60.1918%" y="1205" width="0.0240%" height="15" fill="rgb(224,159,17)" fg:x="2510" fg:w="1"/><text x="60.4418%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="60.1918%" y="1189" width="0.0240%" height="15" fill="rgb(217,118,1)" fg:x="2510" fg:w="1"/><text x="60.4418%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="60.1918%" y="1173" width="0.0240%" height="15" fill="rgb(232,180,48)" fg:x="2510" fg:w="1"/><text x="60.4418%" y="1183.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="60.8633%" y="1253" width="0.0240%" height="15" fill="rgb(230,27,33)" fg:x="2538" fg:w="1"/><text x="61.1133%" y="1263.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="60.8633%" y="1237" width="0.0240%" height="15" fill="rgb(205,31,21)" fg:x="2538" fg:w="1"/><text x="61.1133%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="60.8633%" y="1221" width="0.0240%" height="15" fill="rgb(253,59,4)" fg:x="2538" fg:w="1"/><text x="61.1133%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="60.8633%" y="1205" width="0.0240%" height="15" fill="rgb(224,201,9)" fg:x="2538" fg:w="1"/><text x="61.1133%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="60.8633%" y="1189" width="0.0240%" height="15" fill="rgb(229,206,30)" fg:x="2538" fg:w="1"/><text x="61.1133%" y="1199.50"></text></g><g><title>databend-query`&lt;common_hashtable::hashjoin_hashtable::HashJoinHashTable&lt;K,A&gt; as common_hashtable::traits::HashJoinHashtableLike&gt;::probe_hash_table (135 samples, 3.24%)</title><rect x="60.8873%" y="1253" width="3.2374%" height="15" fill="rgb(212,67,47)" fg:x="2539" fg:w="135"/><text x="61.1373%" y="1263.50">dat..</text></g><g><title>databend-query`&lt;common_expression::types::number::NumberType&lt;Num&gt; as common_expression::types::ValueType&gt;::push_item (9 samples, 0.22%)</title><rect x="64.1247%" y="1189" width="0.2158%" height="15" fill="rgb(211,96,50)" fg:x="2674" fg:w="9"/><text x="64.3747%" y="1199.50"></text></g><g><title>databend-query`common_expression::kernels::take_compact::_&lt;impl common_expression::block::DataBlock&gt;::take_compacted_indices (21 samples, 0.50%)</title><rect x="64.1247%" y="1253" width="0.5036%" height="15" fill="rgb(252,114,18)" fg:x="2674" fg:w="21"/><text x="64.3747%" y="1263.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (21 samples, 0.50%)</title><rect x="64.1247%" y="1237" width="0.5036%" height="15" fill="rgb(223,58,37)" fg:x="2674" fg:w="21"/><text x="64.3747%" y="1247.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (21 samples, 0.50%)</title><rect x="64.1247%" y="1221" width="0.5036%" height="15" fill="rgb(237,70,4)" fg:x="2674" fg:w="21"/><text x="64.3747%" y="1231.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.50%)</title><rect x="64.1247%" y="1205" width="0.5036%" height="15" fill="rgb(244,85,46)" fg:x="2674" fg:w="21"/><text x="64.3747%" y="1215.50"></text></g><g><title>databend-query`common_expression::kernels::take_compact::_&lt;impl common_expression::values::Column&gt;::take_compacted_arg_types (12 samples, 0.29%)</title><rect x="64.3405%" y="1189" width="0.2878%" height="15" fill="rgb(223,39,52)" fg:x="2683" fg:w="12"/><text x="64.5905%" y="1199.50"></text></g><g><title>databend-query`&lt;common_expression::types::number::NumberType&lt;Num&gt; as common_expression::types::ValueType&gt;::push_item (3 samples, 0.07%)</title><rect x="64.5564%" y="1173" width="0.0719%" height="15" fill="rgb(218,200,14)" fg:x="2692" fg:w="3"/><text x="64.8064%" y="1183.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="64.6763%" y="1173" width="0.0240%" height="15" fill="rgb(208,171,16)" fg:x="2697" fg:w="1"/><text x="64.9263%" y="1183.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="64.7722%" y="1141" width="0.0240%" height="15" fill="rgb(234,200,18)" fg:x="2701" fg:w="1"/><text x="65.0222%" y="1151.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="64.7722%" y="1125" width="0.0240%" height="15" fill="rgb(228,45,11)" fg:x="2701" fg:w="1"/><text x="65.0222%" y="1135.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="64.7722%" y="1109" width="0.0240%" height="15" fill="rgb(237,182,11)" fg:x="2701" fg:w="1"/><text x="65.0222%" y="1119.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="64.7722%" y="1093" width="0.0240%" height="15" fill="rgb(241,175,49)" fg:x="2701" fg:w="1"/><text x="65.0222%" y="1103.50"></text></g><g><title>databend-query`__rust_realloc (1 samples, 0.02%)</title><rect x="64.7722%" y="1077" width="0.0240%" height="15" fill="rgb(247,38,35)" fg:x="2701" fg:w="1"/><text x="65.0222%" y="1087.50"></text></g><g><title>databend-query`&lt;common_expression::types::string::StringType as common_expression::types::ValueType&gt;::push_item (6 samples, 0.14%)</title><rect x="64.7482%" y="1157" width="0.1439%" height="15" fill="rgb(228,39,49)" fg:x="2700" fg:w="6"/><text x="64.9982%" y="1167.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.10%)</title><rect x="64.7962%" y="1141" width="0.0959%" height="15" fill="rgb(226,101,26)" fg:x="2702" fg:w="4"/><text x="65.0462%" y="1151.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::block::DataBlock&gt;::take_blocks (12 samples, 0.29%)</title><rect x="64.6763%" y="1237" width="0.2878%" height="15" fill="rgb(206,141,19)" fg:x="2697" fg:w="12"/><text x="64.9263%" y="1247.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (12 samples, 0.29%)</title><rect x="64.6763%" y="1221" width="0.2878%" height="15" fill="rgb(211,200,13)" fg:x="2697" fg:w="12"/><text x="64.9263%" y="1231.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (12 samples, 0.29%)</title><rect x="64.6763%" y="1205" width="0.2878%" height="15" fill="rgb(241,121,6)" fg:x="2697" fg:w="12"/><text x="64.9263%" y="1215.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.29%)</title><rect x="64.6763%" y="1189" width="0.2878%" height="15" fill="rgb(234,221,29)" fg:x="2697" fg:w="12"/><text x="64.9263%" y="1199.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::values::Column&gt;::take_column_indices (11 samples, 0.26%)</title><rect x="64.7002%" y="1173" width="0.2638%" height="15" fill="rgb(229,136,5)" fg:x="2698" fg:w="11"/><text x="64.9502%" y="1183.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::values::Column&gt;::take_block_value_types (3 samples, 0.07%)</title><rect x="64.8921%" y="1157" width="0.0719%" height="15" fill="rgb(238,36,11)" fg:x="2706" fg:w="3"/><text x="65.1421%" y="1167.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::transform_hash_join::TransformHashJoinProbe as common_pipeline_core::processors::processor::Processor&gt;::process (212 samples, 5.08%)</title><rect x="60.0000%" y="1301" width="5.0839%" height="15" fill="rgb(251,55,41)" fg:x="2502" fg:w="212"/><text x="60.2500%" y="1311.50">databe..</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_state_impl::_&lt;impl databend_query::pipelines::processors::transforms::hash_join::hash_join_state::HashJoinState for databend_query::pipelines::processors::transforms::hash_join::join_hash_table::JoinHashTable&gt;::probe (204 samples, 4.89%)</title><rect x="60.1918%" y="1285" width="4.8921%" height="15" fill="rgb(242,34,40)" fg:x="2510" fg:w="204"/><text x="60.4418%" y="1295.50">databe..</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::result_blocks::_&lt;impl databend_query::pipelines::processors::transforms::hash_join::join_hash_table::JoinHashTable&gt;::result_blocks (203 samples, 4.87%)</title><rect x="60.2158%" y="1269" width="4.8681%" height="15" fill="rgb(215,42,17)" fg:x="2511" fg:w="203"/><text x="60.4658%" y="1279.50">databe..</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::row::RowSpace::gather (19 samples, 0.46%)</title><rect x="64.6283%" y="1253" width="0.4556%" height="15" fill="rgb(207,44,46)" fg:x="2695" fg:w="19"/><text x="64.8783%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.12%)</title><rect x="64.9640%" y="1237" width="0.1199%" height="15" fill="rgb(211,206,28)" fg:x="2709" fg:w="5"/><text x="65.2140%" y="1247.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.12%)</title><rect x="64.9640%" y="1221" width="0.1199%" height="15" fill="rgb(237,167,16)" fg:x="2709" fg:w="5"/><text x="65.2140%" y="1231.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="65.0839%" y="1285" width="0.0240%" height="15" fill="rgb(233,66,6)" fg:x="2714" fg:w="1"/><text x="65.3339%" y="1295.50"></text></g><g><title>databend-query`common_expression::values::Column::index_unchecked (1 samples, 0.02%)</title><rect x="65.1079%" y="1285" width="0.0240%" height="15" fill="rgb(246,123,29)" fg:x="2715" fg:w="1"/><text x="65.3579%" y="1295.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (2 samples, 0.05%)</title><rect x="65.3477%" y="1221" width="0.0480%" height="15" fill="rgb(209,62,40)" fg:x="2725" fg:w="2"/><text x="65.5977%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.19%)</title><rect x="65.3957%" y="1205" width="0.1918%" height="15" fill="rgb(218,4,25)" fg:x="2727" fg:w="8"/><text x="65.6457%" y="1215.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.31%)</title><rect x="65.3477%" y="1253" width="0.3118%" height="15" fill="rgb(253,91,49)" fg:x="2725" fg:w="13"/><text x="65.5977%" y="1263.50"></text></g><g><title>databend-query`__rust_alloc (13 samples, 0.31%)</title><rect x="65.3477%" y="1237" width="0.3118%" height="15" fill="rgb(228,155,29)" fg:x="2725" fg:w="13"/><text x="65.5977%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.26%)</title><rect x="65.3957%" y="1221" width="0.2638%" height="15" fill="rgb(243,57,37)" fg:x="2727" fg:w="11"/><text x="65.6457%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="65.5875%" y="1205" width="0.0719%" height="15" fill="rgb(244,167,17)" fg:x="2735" fg:w="3"/><text x="65.8375%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.07%)</title><rect x="65.5875%" y="1189" width="0.0719%" height="15" fill="rgb(207,181,38)" fg:x="2735" fg:w="3"/><text x="65.8375%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="65.6355%" y="1173" width="0.0240%" height="15" fill="rgb(211,8,23)" fg:x="2737" fg:w="1"/><text x="65.8855%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="66.0192%" y="1125" width="0.0480%" height="15" fill="rgb(235,11,44)" fg:x="2753" fg:w="2"/><text x="66.2692%" y="1135.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (7 samples, 0.17%)</title><rect x="65.9233%" y="1221" width="0.1679%" height="15" fill="rgb(248,18,52)" fg:x="2749" fg:w="7"/><text x="66.1733%" y="1231.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (7 samples, 0.17%)</title><rect x="65.9233%" y="1205" width="0.1679%" height="15" fill="rgb(208,4,7)" fg:x="2749" fg:w="7"/><text x="66.1733%" y="1215.50"></text></g><g><title>databend-query`__rust_alloc (6 samples, 0.14%)</title><rect x="65.9472%" y="1189" width="0.1439%" height="15" fill="rgb(240,17,39)" fg:x="2750" fg:w="6"/><text x="66.1972%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.14%)</title><rect x="65.9472%" y="1173" width="0.1439%" height="15" fill="rgb(207,170,3)" fg:x="2750" fg:w="6"/><text x="66.1972%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.10%)</title><rect x="65.9952%" y="1157" width="0.0959%" height="15" fill="rgb(236,100,52)" fg:x="2752" fg:w="4"/><text x="66.2452%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.10%)</title><rect x="65.9952%" y="1141" width="0.0959%" height="15" fill="rgb(246,78,51)" fg:x="2752" fg:w="4"/><text x="66.2452%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="66.0671%" y="1125" width="0.0240%" height="15" fill="rgb(211,17,15)" fg:x="2755" fg:w="1"/><text x="66.3171%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="66.2110%" y="1125" width="0.0480%" height="15" fill="rgb(209,59,46)" fg:x="2761" fg:w="2"/><text x="66.4610%" y="1135.50"></text></g><g><title>databend-query`&lt;common_expression::types::number::NumberType&lt;Num&gt; as common_expression::types::ValueType&gt;::build_column (9 samples, 0.22%)</title><rect x="66.1391%" y="1205" width="0.2158%" height="15" fill="rgb(210,92,25)" fg:x="2758" fg:w="9"/><text x="66.3891%" y="1215.50"></text></g><g><title>databend-query`__rust_alloc (9 samples, 0.22%)</title><rect x="66.1391%" y="1189" width="0.2158%" height="15" fill="rgb(238,174,52)" fg:x="2758" fg:w="9"/><text x="66.3891%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.19%)</title><rect x="66.1631%" y="1173" width="0.1918%" height="15" fill="rgb(230,73,7)" fg:x="2759" fg:w="8"/><text x="66.4131%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.19%)</title><rect x="66.1631%" y="1157" width="0.1918%" height="15" fill="rgb(243,124,40)" fg:x="2759" fg:w="8"/><text x="66.4131%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.17%)</title><rect x="66.1871%" y="1141" width="0.1679%" height="15" fill="rgb(244,170,11)" fg:x="2760" fg:w="7"/><text x="66.4371%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="66.2590%" y="1125" width="0.0959%" height="15" fill="rgb(207,114,54)" fg:x="2763" fg:w="4"/><text x="66.5090%" y="1135.50"></text></g><g><title>databend-query`&lt;common_expression::types::number::NumberType&lt;Num&gt; as common_expression::types::ValueType&gt;::push_item (1 samples, 0.02%)</title><rect x="66.3549%" y="1205" width="0.0240%" height="15" fill="rgb(205,42,20)" fg:x="2767" fg:w="1"/><text x="66.6049%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="66.3789%" y="1157" width="0.0240%" height="15" fill="rgb(230,30,28)" fg:x="2768" fg:w="1"/><text x="66.6289%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="66.4029%" y="1125" width="0.0959%" height="15" fill="rgb(205,73,54)" fg:x="2769" fg:w="4"/><text x="66.6529%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.14%)</title><rect x="66.3789%" y="1173" width="0.1439%" height="15" fill="rgb(254,227,23)" fg:x="2768" fg:w="6"/><text x="66.6289%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.12%)</title><rect x="66.4029%" y="1157" width="0.1199%" height="15" fill="rgb(228,202,34)" fg:x="2769" fg:w="5"/><text x="66.6529%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.12%)</title><rect x="66.4029%" y="1141" width="0.1199%" height="15" fill="rgb(222,225,37)" fg:x="2769" fg:w="5"/><text x="66.6529%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="66.4988%" y="1125" width="0.0240%" height="15" fill="rgb(221,14,54)" fg:x="2773" fg:w="1"/><text x="66.7488%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="66.5228%" y="1173" width="0.0240%" height="15" fill="rgb(254,102,2)" fg:x="2774" fg:w="1"/><text x="66.7728%" y="1183.50"></text></g><g><title>databend-query`common_expression::kernels::take_compact::_&lt;impl common_expression::values::Column&gt;::take_compacted_arg_types (20 samples, 0.48%)</title><rect x="66.0911%" y="1221" width="0.4796%" height="15" fill="rgb(232,104,17)" fg:x="2756" fg:w="20"/><text x="66.3411%" y="1231.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.19%)</title><rect x="66.3789%" y="1205" width="0.1918%" height="15" fill="rgb(250,220,14)" fg:x="2768" fg:w="8"/><text x="66.6289%" y="1215.50"></text></g><g><title>databend-query`__rust_alloc (8 samples, 0.19%)</title><rect x="66.3789%" y="1189" width="0.1918%" height="15" fill="rgb(241,158,9)" fg:x="2768" fg:w="8"/><text x="66.6289%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="66.5468%" y="1173" width="0.0240%" height="15" fill="rgb(246,9,43)" fg:x="2775" fg:w="1"/><text x="66.7968%" y="1183.50"></text></g><g><title>databend-query`&lt;common_expression::types::boolean::BooleanType as common_expression::types::ValueType&gt;::push_item (2 samples, 0.05%)</title><rect x="66.6427%" y="1205" width="0.0480%" height="15" fill="rgb(206,73,33)" fg:x="2779" fg:w="2"/><text x="66.8927%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="66.6906%" y="1189" width="0.0240%" height="15" fill="rgb(222,79,8)" fg:x="2781" fg:w="1"/><text x="66.9406%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="66.7866%" y="1141" width="0.0240%" height="15" fill="rgb(234,8,54)" fg:x="2785" fg:w="1"/><text x="67.0366%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.07%)</title><rect x="66.7626%" y="1157" width="0.0719%" height="15" fill="rgb(209,134,38)" fg:x="2784" fg:w="3"/><text x="67.0126%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="66.8106%" y="1141" width="0.0240%" height="15" fill="rgb(230,127,29)" fg:x="2786" fg:w="1"/><text x="67.0606%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="66.8106%" y="1125" width="0.0240%" height="15" fill="rgb(242,44,41)" fg:x="2786" fg:w="1"/><text x="67.0606%" y="1135.50"></text></g><g><title>databend-query`__rust_alloc (7 samples, 0.17%)</title><rect x="66.6906%" y="1205" width="0.1679%" height="15" fill="rgb(222,56,43)" fg:x="2781" fg:w="7"/><text x="66.9406%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.14%)</title><rect x="66.7146%" y="1189" width="0.1439%" height="15" fill="rgb(238,39,47)" fg:x="2782" fg:w="6"/><text x="66.9646%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.10%)</title><rect x="66.7626%" y="1173" width="0.0959%" height="15" fill="rgb(226,79,43)" fg:x="2784" fg:w="4"/><text x="67.0126%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="66.8345%" y="1157" width="0.0240%" height="15" fill="rgb(242,105,53)" fg:x="2787" fg:w="1"/><text x="67.0845%" y="1167.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="66.8585%" y="1205" width="0.0240%" height="15" fill="rgb(251,132,46)" fg:x="2788" fg:w="1"/><text x="67.1085%" y="1215.50"></text></g><g><title>databend-query`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (7 samples, 0.17%)</title><rect x="66.9544%" y="1189" width="0.1679%" height="15" fill="rgb(231,77,14)" fg:x="2792" fg:w="7"/><text x="67.2044%" y="1199.50"></text></g><g><title>databend-query`__rust_alloc (7 samples, 0.17%)</title><rect x="66.9544%" y="1173" width="0.1679%" height="15" fill="rgb(240,135,9)" fg:x="2792" fg:w="7"/><text x="67.2044%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.17%)</title><rect x="66.9544%" y="1157" width="0.1679%" height="15" fill="rgb(248,109,14)" fg:x="2792" fg:w="7"/><text x="67.2044%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.17%)</title><rect x="66.9544%" y="1141" width="0.1679%" height="15" fill="rgb(227,146,52)" fg:x="2792" fg:w="7"/><text x="67.2044%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.17%)</title><rect x="66.9544%" y="1125" width="0.1679%" height="15" fill="rgb(232,54,3)" fg:x="2792" fg:w="7"/><text x="67.2044%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 0.12%)</title><rect x="67.0024%" y="1109" width="0.1199%" height="15" fill="rgb(229,201,43)" fg:x="2794" fg:w="5"/><text x="67.2524%" y="1119.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (1 samples, 0.02%)</title><rect x="67.1223%" y="1157" width="0.0240%" height="15" fill="rgb(252,161,33)" fg:x="2799" fg:w="1"/><text x="67.3723%" y="1167.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="67.1463%" y="1157" width="0.0480%" height="15" fill="rgb(226,146,40)" fg:x="2800" fg:w="2"/><text x="67.3963%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="67.2662%" y="1109" width="0.0959%" height="15" fill="rgb(219,47,25)" fg:x="2805" fg:w="4"/><text x="67.5162%" y="1119.50"></text></g><g><title>databend-query`&lt;common_expression::types::number::NumberType&lt;Num&gt; as common_expression::types::ValueType&gt;::build_column (13 samples, 0.31%)</title><rect x="67.1223%" y="1189" width="0.3118%" height="15" fill="rgb(250,135,13)" fg:x="2799" fg:w="13"/><text x="67.3723%" y="1199.50"></text></g><g><title>databend-query`__rust_alloc (13 samples, 0.31%)</title><rect x="67.1223%" y="1173" width="0.3118%" height="15" fill="rgb(219,229,18)" fg:x="2799" fg:w="13"/><text x="67.3723%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.24%)</title><rect x="67.1942%" y="1157" width="0.2398%" height="15" fill="rgb(217,152,27)" fg:x="2802" fg:w="10"/><text x="67.4442%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.22%)</title><rect x="67.2182%" y="1141" width="0.2158%" height="15" fill="rgb(225,71,47)" fg:x="2803" fg:w="9"/><text x="67.4682%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.22%)</title><rect x="67.2182%" y="1125" width="0.2158%" height="15" fill="rgb(220,139,14)" fg:x="2803" fg:w="9"/><text x="67.4682%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.07%)</title><rect x="67.3621%" y="1109" width="0.0719%" height="15" fill="rgb(247,54,32)" fg:x="2809" fg:w="3"/><text x="67.6121%" y="1119.50"></text></g><g><title>databend-query`&lt;common_expression::types::number::NumberType&lt;Num&gt; as common_expression::types::ValueType&gt;::push_item (2 samples, 0.05%)</title><rect x="67.4341%" y="1189" width="0.0480%" height="15" fill="rgb(252,131,39)" fg:x="2812" fg:w="2"/><text x="67.6841%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="67.5060%" y="1157" width="0.0480%" height="15" fill="rgb(210,108,39)" fg:x="2815" fg:w="2"/><text x="67.7560%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="67.6259%" y="1141" width="0.0240%" height="15" fill="rgb(205,23,29)" fg:x="2820" fg:w="1"/><text x="67.8759%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.19%)</title><rect x="67.5540%" y="1157" width="0.1918%" height="15" fill="rgb(246,139,46)" fg:x="2817" fg:w="8"/><text x="67.8040%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.10%)</title><rect x="67.6499%" y="1141" width="0.0959%" height="15" fill="rgb(250,81,26)" fg:x="2821" fg:w="4"/><text x="67.8999%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.10%)</title><rect x="67.6499%" y="1125" width="0.0959%" height="15" fill="rgb(214,104,7)" fg:x="2821" fg:w="4"/><text x="67.8999%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.07%)</title><rect x="67.6739%" y="1109" width="0.0719%" height="15" fill="rgb(233,189,8)" fg:x="2822" fg:w="3"/><text x="67.9239%" y="1119.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (81 samples, 1.94%)</title><rect x="65.8273%" y="1237" width="1.9424%" height="15" fill="rgb(228,141,17)" fg:x="2745" fg:w="81"/><text x="66.0773%" y="1247.50">d..</text></g><g><title>databend-query`common_expression::kernels::take_compact::_&lt;impl common_expression::values::Column&gt;::take_compacted_indices (50 samples, 1.20%)</title><rect x="66.5707%" y="1221" width="1.1990%" height="15" fill="rgb(247,157,1)" fg:x="2776" fg:w="50"/><text x="66.8207%" y="1231.50"></text></g><g><title>databend-query`common_expression::kernels::take_compact::_&lt;impl common_expression::values::Column&gt;::take_compacted_arg_types (37 samples, 0.89%)</title><rect x="66.8825%" y="1205" width="0.8873%" height="15" fill="rgb(249,225,5)" fg:x="2789" fg:w="37"/><text x="67.1325%" y="1215.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.29%)</title><rect x="67.4820%" y="1189" width="0.2878%" height="15" fill="rgb(242,55,13)" fg:x="2814" fg:w="12"/><text x="67.7320%" y="1199.50"></text></g><g><title>databend-query`__rust_alloc (12 samples, 0.29%)</title><rect x="67.4820%" y="1173" width="0.2878%" height="15" fill="rgb(230,49,50)" fg:x="2814" fg:w="12"/><text x="67.7320%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="67.7458%" y="1157" width="0.0240%" height="15" fill="rgb(241,111,38)" fg:x="2825" fg:w="1"/><text x="67.9958%" y="1167.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (103 samples, 2.47%)</title><rect x="65.3237%" y="1269" width="2.4700%" height="15" fill="rgb(252,155,4)" fg:x="2724" fg:w="103"/><text x="65.5737%" y="1279.50">da..</text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (89 samples, 2.13%)</title><rect x="65.6595%" y="1253" width="2.1343%" height="15" fill="rgb(212,69,32)" fg:x="2738" fg:w="89"/><text x="65.9095%" y="1263.50">d..</text></g><g><title>databend-query`common_expression::kernels::take_compact::_&lt;impl common_expression::values::Column&gt;::take_compacted_arg_types (1 samples, 0.02%)</title><rect x="67.7698%" y="1237" width="0.0240%" height="15" fill="rgb(243,107,47)" fg:x="2826" fg:w="1"/><text x="68.0198%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="67.8657%" y="1253" width="0.0240%" height="15" fill="rgb(247,130,12)" fg:x="2830" fg:w="1"/><text x="68.1157%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="67.9137%" y="1205" width="0.0240%" height="15" fill="rgb(233,74,16)" fg:x="2832" fg:w="1"/><text x="68.1637%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.26%)</title><rect x="67.9856%" y="1173" width="0.2638%" height="15" fill="rgb(208,58,18)" fg:x="2835" fg:w="11"/><text x="68.2356%" y="1183.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (21 samples, 0.50%)</title><rect x="67.7938%" y="1269" width="0.5036%" height="15" fill="rgb(242,225,1)" fg:x="2827" fg:w="21"/><text x="68.0438%" y="1279.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (17 samples, 0.41%)</title><rect x="67.8897%" y="1253" width="0.4077%" height="15" fill="rgb(249,39,40)" fg:x="2831" fg:w="17"/><text x="68.1397%" y="1263.50"></text></g><g><title>databend-query`__rust_alloc (17 samples, 0.41%)</title><rect x="67.8897%" y="1237" width="0.4077%" height="15" fill="rgb(207,72,44)" fg:x="2831" fg:w="17"/><text x="68.1397%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.41%)</title><rect x="67.8897%" y="1221" width="0.4077%" height="15" fill="rgb(215,193,12)" fg:x="2831" fg:w="17"/><text x="68.1397%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.36%)</title><rect x="67.9376%" y="1205" width="0.3597%" height="15" fill="rgb(248,41,39)" fg:x="2833" fg:w="15"/><text x="68.1876%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.34%)</title><rect x="67.9616%" y="1189" width="0.3357%" height="15" fill="rgb(253,85,4)" fg:x="2834" fg:w="14"/><text x="68.2116%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.05%)</title><rect x="68.2494%" y="1173" width="0.0480%" height="15" fill="rgb(243,70,31)" fg:x="2846" fg:w="2"/><text x="68.4994%" y="1183.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="68.3213%" y="1253" width="0.0480%" height="15" fill="rgb(253,195,26)" fg:x="2849" fg:w="2"/><text x="68.5713%" y="1263.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (1 samples, 0.02%)</title><rect x="68.3933%" y="1221" width="0.0240%" height="15" fill="rgb(243,42,11)" fg:x="2852" fg:w="1"/><text x="68.6433%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.14%)</title><rect x="68.5132%" y="1173" width="0.1439%" height="15" fill="rgb(239,66,17)" fg:x="2857" fg:w="6"/><text x="68.7632%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.41%)</title><rect x="68.4173%" y="1221" width="0.4077%" height="15" fill="rgb(217,132,21)" fg:x="2853" fg:w="17"/><text x="68.6673%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.41%)</title><rect x="68.4173%" y="1205" width="0.4077%" height="15" fill="rgb(252,202,21)" fg:x="2853" fg:w="17"/><text x="68.6673%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.41%)</title><rect x="68.4173%" y="1189" width="0.4077%" height="15" fill="rgb(233,98,36)" fg:x="2853" fg:w="17"/><text x="68.6673%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.17%)</title><rect x="68.6571%" y="1173" width="0.1679%" height="15" fill="rgb(216,153,54)" fg:x="2863" fg:w="7"/><text x="68.9071%" y="1183.50"></text></g><g><title>databend-query`__rust_alloc (20 samples, 0.48%)</title><rect x="68.3933%" y="1237" width="0.4796%" height="15" fill="rgb(250,99,7)" fg:x="2852" fg:w="20"/><text x="68.6433%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.05%)</title><rect x="68.8249%" y="1221" width="0.0480%" height="15" fill="rgb(207,56,50)" fg:x="2870" fg:w="2"/><text x="69.0749%" y="1231.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (25 samples, 0.60%)</title><rect x="68.2974%" y="1269" width="0.5995%" height="15" fill="rgb(244,61,34)" fg:x="2848" fg:w="25"/><text x="68.5474%" y="1279.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (22 samples, 0.53%)</title><rect x="68.3693%" y="1253" width="0.5276%" height="15" fill="rgb(241,50,38)" fg:x="2851" fg:w="22"/><text x="68.6193%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="68.8729%" y="1237" width="0.0240%" height="15" fill="rgb(212,166,30)" fg:x="2872" fg:w="1"/><text x="69.1229%" y="1247.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="68.8969%" y="1269" width="0.0240%" height="15" fill="rgb(249,127,32)" fg:x="2873" fg:w="1"/><text x="69.1469%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="69.0168%" y="1189" width="0.0240%" height="15" fill="rgb(209,103,0)" fg:x="2878" fg:w="1"/><text x="69.2668%" y="1199.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.14%)</title><rect x="68.9209%" y="1269" width="0.1439%" height="15" fill="rgb(238,209,51)" fg:x="2874" fg:w="6"/><text x="69.1709%" y="1279.50"></text></g><g><title>databend-query`__rust_alloc (4 samples, 0.10%)</title><rect x="68.9688%" y="1253" width="0.0959%" height="15" fill="rgb(237,56,23)" fg:x="2876" fg:w="4"/><text x="69.2188%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.10%)</title><rect x="68.9688%" y="1237" width="0.0959%" height="15" fill="rgb(215,153,46)" fg:x="2876" fg:w="4"/><text x="69.2188%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="69.0168%" y="1221" width="0.0480%" height="15" fill="rgb(224,49,31)" fg:x="2878" fg:w="2"/><text x="69.2668%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="69.0168%" y="1205" width="0.0480%" height="15" fill="rgb(250,18,42)" fg:x="2878" fg:w="2"/><text x="69.2668%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="69.0408%" y="1189" width="0.0240%" height="15" fill="rgb(215,176,39)" fg:x="2879" fg:w="1"/><text x="69.2908%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="69.1367%" y="1205" width="0.0719%" height="15" fill="rgb(223,77,29)" fg:x="2883" fg:w="3"/><text x="69.3867%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="69.1607%" y="1189" width="0.0480%" height="15" fill="rgb(234,94,52)" fg:x="2884" fg:w="2"/><text x="69.4107%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="69.1607%" y="1173" width="0.0480%" height="15" fill="rgb(220,154,50)" fg:x="2884" fg:w="2"/><text x="69.4107%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="69.1607%" y="1157" width="0.0480%" height="15" fill="rgb(212,11,10)" fg:x="2884" fg:w="2"/><text x="69.4107%" y="1167.50"></text></g><g><title>databend-query`__rust_alloc (4 samples, 0.10%)</title><rect x="69.1367%" y="1221" width="0.0959%" height="15" fill="rgb(205,166,19)" fg:x="2883" fg:w="4"/><text x="69.3867%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="69.2086%" y="1205" width="0.0240%" height="15" fill="rgb(244,198,16)" fg:x="2886" fg:w="1"/><text x="69.4586%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="69.3046%" y="1141" width="0.0480%" height="15" fill="rgb(219,69,12)" fg:x="2890" fg:w="2"/><text x="69.5546%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="69.3525%" y="1125" width="0.0240%" height="15" fill="rgb(245,30,7)" fg:x="2892" fg:w="1"/><text x="69.6025%" y="1135.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="69.4005%" y="1093" width="0.0240%" height="15" fill="rgb(218,221,48)" fg:x="2894" fg:w="1"/><text x="69.6505%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="69.4245%" y="1093" width="0.0240%" height="15" fill="rgb(216,66,15)" fg:x="2895" fg:w="1"/><text x="69.6745%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.14%)</title><rect x="69.3765%" y="1125" width="0.1439%" height="15" fill="rgb(226,122,50)" fg:x="2893" fg:w="6"/><text x="69.6265%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.14%)</title><rect x="69.3765%" y="1109" width="0.1439%" height="15" fill="rgb(239,156,16)" fg:x="2893" fg:w="6"/><text x="69.6265%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.07%)</title><rect x="69.4484%" y="1093" width="0.0719%" height="15" fill="rgb(224,27,38)" fg:x="2896" fg:w="3"/><text x="69.6984%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.19%)</title><rect x="69.3525%" y="1141" width="0.1918%" height="15" fill="rgb(224,39,27)" fg:x="2892" fg:w="8"/><text x="69.6025%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="69.5204%" y="1125" width="0.0240%" height="15" fill="rgb(215,92,29)" fg:x="2899" fg:w="1"/><text x="69.7704%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="69.5444%" y="1125" width="0.0240%" height="15" fill="rgb(207,159,16)" fg:x="2900" fg:w="1"/><text x="69.7944%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="69.5444%" y="1109" width="0.0240%" height="15" fill="rgb(238,163,47)" fg:x="2900" fg:w="1"/><text x="69.7944%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.05%)</title><rect x="69.5444%" y="1141" width="0.0480%" height="15" fill="rgb(219,91,49)" fg:x="2900" fg:w="2"/><text x="69.7944%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="69.5683%" y="1125" width="0.0240%" height="15" fill="rgb(227,167,31)" fg:x="2901" fg:w="1"/><text x="69.8183%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="69.5683%" y="1109" width="0.0240%" height="15" fill="rgb(234,80,54)" fg:x="2901" fg:w="1"/><text x="69.8183%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.36%)</title><rect x="69.2566%" y="1157" width="0.3597%" height="15" fill="rgb(212,114,2)" fg:x="2888" fg:w="15"/><text x="69.5066%" y="1167.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="69.5923%" y="1141" width="0.0240%" height="15" fill="rgb(234,50,24)" fg:x="2902" fg:w="1"/><text x="69.8423%" y="1151.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (17 samples, 0.41%)</title><rect x="69.2326%" y="1189" width="0.4077%" height="15" fill="rgb(221,68,8)" fg:x="2887" fg:w="17"/><text x="69.4826%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`realloc (17 samples, 0.41%)</title><rect x="69.2326%" y="1173" width="0.4077%" height="15" fill="rgb(254,180,31)" fg:x="2887" fg:w="17"/><text x="69.4826%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="69.6163%" y="1157" width="0.0240%" height="15" fill="rgb(247,130,50)" fg:x="2903" fg:w="1"/><text x="69.8663%" y="1167.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (18 samples, 0.43%)</title><rect x="69.2326%" y="1205" width="0.4317%" height="15" fill="rgb(211,109,4)" fg:x="2887" fg:w="18"/><text x="69.4826%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="69.6403%" y="1189" width="0.0240%" height="15" fill="rgb(238,50,21)" fg:x="2904" fg:w="1"/><text x="69.8903%" y="1199.50"></text></g><g><title>databend-query`__rust_realloc (20 samples, 0.48%)</title><rect x="69.2326%" y="1221" width="0.4796%" height="15" fill="rgb(225,57,45)" fg:x="2887" fg:w="20"/><text x="69.4826%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="69.6643%" y="1205" width="0.0480%" height="15" fill="rgb(209,196,50)" fg:x="2905" fg:w="2"/><text x="69.9143%" y="1215.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (28 samples, 0.67%)</title><rect x="69.0647%" y="1269" width="0.6715%" height="15" fill="rgb(242,140,13)" fg:x="2880" fg:w="28"/><text x="69.3147%" y="1279.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.65%)</title><rect x="69.0887%" y="1253" width="0.6475%" height="15" fill="rgb(217,111,7)" fg:x="2881" fg:w="27"/><text x="69.3387%" y="1263.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (25 samples, 0.60%)</title><rect x="69.1367%" y="1237" width="0.5995%" height="15" fill="rgb(253,193,51)" fg:x="2883" fg:w="25"/><text x="69.3867%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="69.7122%" y="1221" width="0.0240%" height="15" fill="rgb(252,70,29)" fg:x="2907" fg:w="1"/><text x="69.9622%" y="1231.50"></text></g><g><title>databend-query`arrow2::array::primitive::PrimitiveArray&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="69.7842%" y="1205" width="0.0240%" height="15" fill="rgb(232,127,12)" fg:x="2910" fg:w="1"/><text x="70.0342%" y="1215.50"></text></g><g><title>databend-query`arrow2::array::primitive::check (1 samples, 0.02%)</title><rect x="69.7842%" y="1189" width="0.0240%" height="15" fill="rgb(211,180,21)" fg:x="2910" fg:w="1"/><text x="70.0342%" y="1199.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.02%)</title><rect x="69.8082%" y="1189" width="0.0240%" height="15" fill="rgb(229,72,13)" fg:x="2911" fg:w="1"/><text x="70.0582%" y="1199.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.02%)</title><rect x="69.8321%" y="1173" width="0.0240%" height="15" fill="rgb(240,211,49)" fg:x="2912" fg:w="1"/><text x="70.0821%" y="1183.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (2 samples, 0.05%)</title><rect x="69.8561%" y="1173" width="0.0480%" height="15" fill="rgb(219,149,40)" fg:x="2913" fg:w="2"/><text x="70.1061%" y="1183.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (2 samples, 0.05%)</title><rect x="69.9041%" y="1157" width="0.0480%" height="15" fill="rgb(210,127,46)" fg:x="2915" fg:w="2"/><text x="70.1541%" y="1167.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (1 samples, 0.02%)</title><rect x="69.9520%" y="1157" width="0.0240%" height="15" fill="rgb(220,106,7)" fg:x="2917" fg:w="1"/><text x="70.2020%" y="1167.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot (1 samples, 0.02%)</title><rect x="69.9760%" y="1141" width="0.0240%" height="15" fill="rgb(249,31,22)" fg:x="2918" fg:w="1"/><text x="70.2260%" y="1151.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (2 samples, 0.05%)</title><rect x="70.0000%" y="1141" width="0.0480%" height="15" fill="rgb(253,1,49)" fg:x="2919" fg:w="2"/><text x="70.2500%" y="1151.50"></text></g><g><title>databend-query`common_expression::kernels::sort::_&lt;impl common_expression::block::DataBlock&gt;::sort (14 samples, 0.34%)</title><rect x="69.7362%" y="1269" width="0.3357%" height="15" fill="rgb(227,144,33)" fg:x="2908" fg:w="14"/><text x="69.9862%" y="1279.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::lexsort_to_indices_impl (14 samples, 0.34%)</title><rect x="69.7362%" y="1253" width="0.3357%" height="15" fill="rgb(249,163,44)" fg:x="2908" fg:w="14"/><text x="69.9862%" y="1263.50"></text></g><g><title>databend-query`arrow2::compute::sort::sort_to_indices (14 samples, 0.34%)</title><rect x="69.7362%" y="1237" width="0.3357%" height="15" fill="rgb(234,15,39)" fg:x="2908" fg:w="14"/><text x="69.9862%" y="1247.50"></text></g><g><title>databend-query`arrow2::compute::sort::primitive::indices::indices_sorted_unstable_by (14 samples, 0.34%)</title><rect x="69.7362%" y="1221" width="0.3357%" height="15" fill="rgb(207,66,16)" fg:x="2908" fg:w="14"/><text x="69.9862%" y="1231.50"></text></g><g><title>databend-query`arrow2::compute::sort::common::sort_unstable_by (11 samples, 0.26%)</title><rect x="69.8082%" y="1205" width="0.2638%" height="15" fill="rgb(233,112,24)" fg:x="2911" fg:w="11"/><text x="70.0582%" y="1215.50"></text></g><g><title>databend-query`core::slice::sort::recurse (10 samples, 0.24%)</title><rect x="69.8321%" y="1189" width="0.2398%" height="15" fill="rgb(230,90,22)" fg:x="2912" fg:w="10"/><text x="70.0821%" y="1199.50"></text></g><g><title>databend-query`core::slice::sort::recurse (7 samples, 0.17%)</title><rect x="69.9041%" y="1173" width="0.1679%" height="15" fill="rgb(229,61,13)" fg:x="2915" fg:w="7"/><text x="70.1541%" y="1183.50"></text></g><g><title>databend-query`core::slice::sort::recurse (4 samples, 0.10%)</title><rect x="69.9760%" y="1157" width="0.0959%" height="15" fill="rgb(225,57,24)" fg:x="2918" fg:w="4"/><text x="70.2260%" y="1167.50"></text></g><g><title>databend-query`core::slice::sort::recurse (1 samples, 0.02%)</title><rect x="70.0480%" y="1141" width="0.0240%" height="15" fill="rgb(208,169,48)" fg:x="2921" fg:w="1"/><text x="70.2980%" y="1151.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (1 samples, 0.02%)</title><rect x="70.0480%" y="1125" width="0.0240%" height="15" fill="rgb(244,218,51)" fg:x="2921" fg:w="1"/><text x="70.2980%" y="1135.50"></text></g><g><title>databend-query`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="70.0959%" y="1221" width="0.0240%" height="15" fill="rgb(214,148,10)" fg:x="2923" fg:w="1"/><text x="70.3459%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="70.1199%" y="1205" width="0.0240%" height="15" fill="rgb(225,174,27)" fg:x="2924" fg:w="1"/><text x="70.3699%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="70.1439%" y="1205" width="0.0719%" height="15" fill="rgb(230,96,26)" fg:x="2925" fg:w="3"/><text x="70.3939%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="70.1918%" y="1189" width="0.0240%" height="15" fill="rgb(232,10,30)" fg:x="2927" fg:w="1"/><text x="70.4418%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="70.1918%" y="1173" width="0.0240%" height="15" fill="rgb(222,8,50)" fg:x="2927" fg:w="1"/><text x="70.4418%" y="1183.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.17%)</title><rect x="70.0719%" y="1237" width="0.1679%" height="15" fill="rgb(213,81,27)" fg:x="2922" fg:w="7"/><text x="70.3219%" y="1247.50"></text></g><g><title>databend-query`__rust_alloc (5 samples, 0.12%)</title><rect x="70.1199%" y="1221" width="0.1199%" height="15" fill="rgb(245,50,10)" fg:x="2924" fg:w="5"/><text x="70.3699%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="70.2158%" y="1205" width="0.0240%" height="15" fill="rgb(216,100,18)" fg:x="2928" fg:w="1"/><text x="70.4658%" y="1215.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="70.5036%" y="1189" width="0.0480%" height="15" fill="rgb(236,147,54)" fg:x="2940" fg:w="2"/><text x="70.7536%" y="1199.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (2 samples, 0.05%)</title><rect x="70.6235%" y="1157" width="0.0480%" height="15" fill="rgb(205,143,26)" fg:x="2945" fg:w="2"/><text x="70.8735%" y="1167.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="70.6715%" y="1157" width="0.0480%" height="15" fill="rgb(236,26,9)" fg:x="2947" fg:w="2"/><text x="70.9215%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="70.7434%" y="1141" width="0.0240%" height="15" fill="rgb(221,165,53)" fg:x="2950" fg:w="1"/><text x="70.9934%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.19%)</title><rect x="70.8393%" y="1109" width="0.1918%" height="15" fill="rgb(214,110,17)" fg:x="2954" fg:w="8"/><text x="71.0893%" y="1119.50"></text></g><g><title>databend-query`__rust_alloc (20 samples, 0.48%)</title><rect x="70.5995%" y="1173" width="0.4796%" height="15" fill="rgb(237,197,12)" fg:x="2944" fg:w="20"/><text x="70.8495%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.36%)</title><rect x="70.7194%" y="1157" width="0.3597%" height="15" fill="rgb(205,84,17)" fg:x="2949" fg:w="15"/><text x="70.9694%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.31%)</title><rect x="70.7674%" y="1141" width="0.3118%" height="15" fill="rgb(237,18,45)" fg:x="2951" fg:w="13"/><text x="71.0174%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.31%)</title><rect x="70.7674%" y="1125" width="0.3118%" height="15" fill="rgb(221,87,14)" fg:x="2951" fg:w="13"/><text x="71.0174%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.05%)</title><rect x="71.0312%" y="1109" width="0.0480%" height="15" fill="rgb(238,186,15)" fg:x="2962" fg:w="2"/><text x="71.2812%" y="1119.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.60%)</title><rect x="70.5516%" y="1189" width="0.5995%" height="15" fill="rgb(208,115,11)" fg:x="2942" fg:w="25"/><text x="70.8016%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="71.0791%" y="1173" width="0.0719%" height="15" fill="rgb(254,175,0)" fg:x="2964" fg:w="3"/><text x="71.3291%" y="1183.50"></text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (28 samples, 0.67%)</title><rect x="72.9257%" y="1141" width="0.6715%" height="15" fill="rgb(227,24,42)" fg:x="3041" fg:w="28"/><text x="73.1757%" y="1151.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="73.5971%" y="1109" width="0.0240%" height="15" fill="rgb(223,211,37)" fg:x="3069" fg:w="1"/><text x="73.8471%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.17%)</title><rect x="73.6211%" y="1109" width="0.1679%" height="15" fill="rgb(235,49,27)" fg:x="3070" fg:w="7"/><text x="73.8711%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.14%)</title><rect x="73.6451%" y="1093" width="0.1439%" height="15" fill="rgb(254,97,51)" fg:x="3071" fg:w="6"/><text x="73.8951%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.10%)</title><rect x="73.6930%" y="1077" width="0.0959%" height="15" fill="rgb(249,51,40)" fg:x="3073" fg:w="4"/><text x="73.9430%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.07%)</title><rect x="73.7170%" y="1061" width="0.0719%" height="15" fill="rgb(210,128,45)" fg:x="3074" fg:w="3"/><text x="73.9670%" y="1071.50"></text></g><g><title>databend-query`__rust_alloc (9 samples, 0.22%)</title><rect x="73.5971%" y="1125" width="0.2158%" height="15" fill="rgb(224,137,50)" fg:x="3069" fg:w="9"/><text x="73.8471%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="73.7890%" y="1109" width="0.0240%" height="15" fill="rgb(242,15,9)" fg:x="3077" fg:w="1"/><text x="74.0390%" y="1119.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (141 samples, 3.38%)</title><rect x="70.4556%" y="1205" width="3.3813%" height="15" fill="rgb(233,187,41)" fg:x="2938" fg:w="141"/><text x="70.7056%" y="1215.50">dat..</text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (112 samples, 2.69%)</title><rect x="71.1511%" y="1189" width="2.6859%" height="15" fill="rgb(227,2,29)" fg:x="2967" fg:w="112"/><text x="71.4011%" y="1199.50">da..</text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (109 samples, 2.61%)</title><rect x="71.2230%" y="1173" width="2.6139%" height="15" fill="rgb(222,70,3)" fg:x="2970" fg:w="109"/><text x="71.4730%" y="1183.50">da..</text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (107 samples, 2.57%)</title><rect x="71.2710%" y="1157" width="2.5659%" height="15" fill="rgb(213,11,42)" fg:x="2972" fg:w="107"/><text x="71.5210%" y="1167.50">da..</text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (10 samples, 0.24%)</title><rect x="73.5971%" y="1141" width="0.2398%" height="15" fill="rgb(225,150,9)" fg:x="3069" fg:w="10"/><text x="73.8471%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="73.8129%" y="1125" width="0.0240%" height="15" fill="rgb(230,162,45)" fg:x="3078" fg:w="1"/><text x="74.0629%" y="1135.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="73.8609%" y="1189" width="0.0240%" height="15" fill="rgb(222,14,52)" fg:x="3080" fg:w="1"/><text x="74.1109%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="73.8849%" y="1157" width="0.0240%" height="15" fill="rgb(254,198,14)" fg:x="3081" fg:w="1"/><text x="74.1349%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.29%)</title><rect x="74.0767%" y="1109" width="0.2878%" height="15" fill="rgb(220,217,30)" fg:x="3089" fg:w="12"/><text x="74.3267%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.43%)</title><rect x="74.0288%" y="1125" width="0.4317%" height="15" fill="rgb(215,146,41)" fg:x="3087" fg:w="18"/><text x="74.2788%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="74.3645%" y="1109" width="0.0959%" height="15" fill="rgb(217,27,36)" fg:x="3101" fg:w="4"/><text x="74.6145%" y="1119.50"></text></g><g><title>databend-query`__rust_alloc (25 samples, 0.60%)</title><rect x="73.8849%" y="1173" width="0.5995%" height="15" fill="rgb(219,218,39)" fg:x="3081" fg:w="25"/><text x="74.1349%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.58%)</title><rect x="73.9089%" y="1157" width="0.5755%" height="15" fill="rgb(219,4,42)" fg:x="3082" fg:w="24"/><text x="74.1589%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.53%)</title><rect x="73.9568%" y="1141" width="0.5276%" height="15" fill="rgb(249,119,36)" fg:x="3084" fg:w="22"/><text x="74.2068%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="74.4604%" y="1125" width="0.0240%" height="15" fill="rgb(209,23,33)" fg:x="3105" fg:w="1"/><text x="74.7104%" y="1135.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (28 samples, 0.67%)</title><rect x="73.8369%" y="1205" width="0.6715%" height="15" fill="rgb(211,10,0)" fg:x="3079" fg:w="28"/><text x="74.0869%" y="1215.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (26 samples, 0.62%)</title><rect x="73.8849%" y="1189" width="0.6235%" height="15" fill="rgb(208,99,37)" fg:x="3081" fg:w="26"/><text x="74.1349%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="74.4844%" y="1173" width="0.0240%" height="15" fill="rgb(213,132,31)" fg:x="3106" fg:w="1"/><text x="74.7344%" y="1183.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="74.5084%" y="1205" width="0.0240%" height="15" fill="rgb(243,129,40)" fg:x="3107" fg:w="1"/><text x="74.7584%" y="1215.50"></text></g><g><title>databend-query`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="74.8441%" y="1189" width="0.0240%" height="15" fill="rgb(210,66,33)" fg:x="3121" fg:w="1"/><text x="75.0941%" y="1199.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="74.8921%" y="1173" width="0.0240%" height="15" fill="rgb(209,189,4)" fg:x="3123" fg:w="1"/><text x="75.1421%" y="1183.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="74.9161%" y="1173" width="0.0240%" height="15" fill="rgb(214,107,37)" fg:x="3124" fg:w="1"/><text x="75.1661%" y="1183.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.07%)</title><rect x="74.9640%" y="1141" width="0.0719%" height="15" fill="rgb(245,88,54)" fg:x="3126" fg:w="3"/><text x="75.2140%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.14%)</title><rect x="75.1319%" y="1125" width="0.1439%" height="15" fill="rgb(205,146,20)" fg:x="3133" fg:w="6"/><text x="75.3819%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.29%)</title><rect x="75.0360%" y="1141" width="0.2878%" height="15" fill="rgb(220,161,25)" fg:x="3129" fg:w="12"/><text x="75.2860%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="75.2758%" y="1125" width="0.0480%" height="15" fill="rgb(215,152,15)" fg:x="3139" fg:w="2"/><text x="75.5258%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="75.2758%" y="1109" width="0.0480%" height="15" fill="rgb(233,192,44)" fg:x="3139" fg:w="2"/><text x="75.5258%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="75.2998%" y="1093" width="0.0240%" height="15" fill="rgb(240,170,46)" fg:x="3140" fg:w="1"/><text x="75.5498%" y="1103.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.55%)</title><rect x="74.9400%" y="1173" width="0.5516%" height="15" fill="rgb(207,104,33)" fg:x="3125" fg:w="23"/><text x="75.1900%" y="1183.50"></text></g><g><title>databend-query`__rust_alloc (22 samples, 0.53%)</title><rect x="74.9640%" y="1157" width="0.5276%" height="15" fill="rgb(219,21,39)" fg:x="3126" fg:w="22"/><text x="75.2140%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.17%)</title><rect x="75.3237%" y="1141" width="0.1679%" height="15" fill="rgb(214,133,29)" fg:x="3141" fg:w="7"/><text x="75.5737%" y="1151.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (116 samples, 2.78%)</title><rect x="74.8681%" y="1189" width="2.7818%" height="15" fill="rgb(226,93,6)" fg:x="3122" fg:w="116"/><text x="75.1181%" y="1199.50">da..</text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (90 samples, 2.16%)</title><rect x="75.4916%" y="1173" width="2.1583%" height="15" fill="rgb(252,222,34)" fg:x="3148" fg:w="90"/><text x="75.7416%" y="1183.50">d..</text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (84 samples, 2.01%)</title><rect x="75.6355%" y="1157" width="2.0144%" height="15" fill="rgb(252,92,48)" fg:x="3154" fg:w="84"/><text x="75.8855%" y="1167.50">d..</text></g><g><title>databend-query`&lt;common_expression::values::Column as core::clone::Clone&gt;::clone (20 samples, 0.48%)</title><rect x="77.1703%" y="1141" width="0.4796%" height="15" fill="rgb(245,223,24)" fg:x="3218" fg:w="20"/><text x="77.4203%" y="1151.50"></text></g><g><title>databend-query`&lt;common_expression::types::DataType as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="77.6499%" y="1189" width="0.0480%" height="15" fill="rgb(205,176,3)" fg:x="3238" fg:w="2"/><text x="77.8999%" y="1199.50"></text></g><g><title>databend-query`&lt;common_expression::types::boolean::BooleanType as common_expression::types::ValueType&gt;::push_item (1 samples, 0.02%)</title><rect x="77.6978%" y="1189" width="0.0240%" height="15" fill="rgb(235,151,15)" fg:x="3240" fg:w="1"/><text x="77.9478%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="77.7218%" y="1173" width="0.0480%" height="15" fill="rgb(237,209,11)" fg:x="3241" fg:w="2"/><text x="77.9718%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="77.8177%" y="1157" width="0.0240%" height="15" fill="rgb(243,227,24)" fg:x="3245" fg:w="1"/><text x="78.0677%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="78.0815%" y="1125" width="0.0959%" height="15" fill="rgb(239,193,16)" fg:x="3256" fg:w="4"/><text x="78.3315%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.62%)</title><rect x="77.7698%" y="1173" width="0.6235%" height="15" fill="rgb(231,27,9)" fg:x="3243" fg:w="26"/><text x="78.0198%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.55%)</title><rect x="77.8417%" y="1157" width="0.5516%" height="15" fill="rgb(219,169,10)" fg:x="3246" fg:w="23"/><text x="78.0917%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.43%)</title><rect x="77.9616%" y="1141" width="0.4317%" height="15" fill="rgb(244,229,43)" fg:x="3251" fg:w="18"/><text x="78.2116%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.22%)</title><rect x="78.1775%" y="1125" width="0.2158%" height="15" fill="rgb(254,38,20)" fg:x="3260" fg:w="9"/><text x="78.4275%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="78.3933%" y="1173" width="0.0240%" height="15" fill="rgb(250,47,30)" fg:x="3269" fg:w="1"/><text x="78.6433%" y="1183.50"></text></g><g><title>databend-query`__rust_alloc (32 samples, 0.77%)</title><rect x="77.7218%" y="1189" width="0.7674%" height="15" fill="rgb(224,124,36)" fg:x="3241" fg:w="32"/><text x="77.9718%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="78.4173%" y="1173" width="0.0719%" height="15" fill="rgb(246,68,51)" fg:x="3270" fg:w="3"/><text x="78.6673%" y="1183.50"></text></g><g><title>databend-query`__rust_dealloc (3 samples, 0.07%)</title><rect x="78.4892%" y="1189" width="0.0719%" height="15" fill="rgb(253,43,49)" fg:x="3273" fg:w="3"/><text x="78.7392%" y="1199.50"></text></g><g><title>databend-query`DYLD-STUB$$malloc (3 samples, 0.07%)</title><rect x="78.5612%" y="1173" width="0.0719%" height="15" fill="rgb(219,54,36)" fg:x="3276" fg:w="3"/><text x="78.8112%" y="1183.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (1 samples, 0.02%)</title><rect x="78.6331%" y="1157" width="0.0240%" height="15" fill="rgb(227,133,34)" fg:x="3279" fg:w="1"/><text x="78.8831%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.14%)</title><rect x="78.7290%" y="1109" width="0.1439%" height="15" fill="rgb(247,227,15)" fg:x="3283" fg:w="6"/><text x="78.9790%" y="1119.50"></text></g><g><title>databend-query`__rust_alloc (14 samples, 0.34%)</title><rect x="78.6331%" y="1173" width="0.3357%" height="15" fill="rgb(229,96,14)" fg:x="3279" fg:w="14"/><text x="78.8831%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.31%)</title><rect x="78.6571%" y="1157" width="0.3118%" height="15" fill="rgb(220,79,17)" fg:x="3280" fg:w="13"/><text x="78.9071%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.31%)</title><rect x="78.6571%" y="1141" width="0.3118%" height="15" fill="rgb(205,131,53)" fg:x="3280" fg:w="13"/><text x="78.9071%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.31%)</title><rect x="78.6571%" y="1125" width="0.3118%" height="15" fill="rgb(209,50,29)" fg:x="3280" fg:w="13"/><text x="78.9071%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="78.8729%" y="1109" width="0.0959%" height="15" fill="rgb(245,86,46)" fg:x="3289" fg:w="4"/><text x="79.1229%" y="1119.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (18 samples, 0.43%)</title><rect x="78.5612%" y="1189" width="0.4317%" height="15" fill="rgb(235,66,46)" fg:x="3276" fg:w="18"/><text x="78.8112%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="78.9688%" y="1173" width="0.0240%" height="15" fill="rgb(232,148,31)" fg:x="3293" fg:w="1"/><text x="79.2188%" y="1183.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="79.3765%" y="1141" width="0.0480%" height="15" fill="rgb(217,149,8)" fg:x="3310" fg:w="2"/><text x="79.6265%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.12%)</title><rect x="79.4964%" y="1093" width="0.1199%" height="15" fill="rgb(209,183,11)" fg:x="3315" fg:w="5"/><text x="79.7464%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.31%)</title><rect x="79.4484%" y="1109" width="0.3118%" height="15" fill="rgb(208,55,20)" fg:x="3313" fg:w="13"/><text x="79.6984%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.14%)</title><rect x="79.6163%" y="1093" width="0.1439%" height="15" fill="rgb(218,39,14)" fg:x="3320" fg:w="6"/><text x="79.8663%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.36%)</title><rect x="79.4245%" y="1141" width="0.3597%" height="15" fill="rgb(216,169,33)" fg:x="3312" fg:w="15"/><text x="79.6745%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.34%)</title><rect x="79.4484%" y="1125" width="0.3357%" height="15" fill="rgb(233,80,24)" fg:x="3313" fg:w="14"/><text x="79.6984%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="79.7602%" y="1109" width="0.0240%" height="15" fill="rgb(213,179,31)" fg:x="3326" fg:w="1"/><text x="80.0102%" y="1119.50"></text></g><g><title>databend-query`__rust_alloc (19 samples, 0.46%)</title><rect x="79.3765%" y="1157" width="0.4556%" height="15" fill="rgb(209,19,5)" fg:x="3310" fg:w="19"/><text x="79.6265%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.05%)</title><rect x="79.7842%" y="1141" width="0.0480%" height="15" fill="rgb(219,18,35)" fg:x="3327" fg:w="2"/><text x="80.0342%" y="1151.50"></text></g><g><title>databend-query`arrow2::bitmap::immutable::check (1 samples, 0.02%)</title><rect x="79.8321%" y="1157" width="0.0240%" height="15" fill="rgb(209,169,16)" fg:x="3329" fg:w="1"/><text x="80.0821%" y="1167.50"></text></g><g><title>databend-query`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (21 samples, 0.50%)</title><rect x="79.3765%" y="1173" width="0.5036%" height="15" fill="rgb(245,90,51)" fg:x="3310" fg:w="21"/><text x="79.6265%" y="1183.50"></text></g><g><title>databend-query`arrow2::bitmap::utils::count_zeros (1 samples, 0.02%)</title><rect x="79.8561%" y="1157" width="0.0240%" height="15" fill="rgb(220,99,45)" fg:x="3330" fg:w="1"/><text x="80.1061%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="79.9281%" y="1109" width="0.0240%" height="15" fill="rgb(249,89,25)" fg:x="3333" fg:w="1"/><text x="80.1781%" y="1119.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.24%)</title><rect x="79.8801%" y="1157" width="0.2398%" height="15" fill="rgb(239,193,0)" fg:x="3331" fg:w="10"/><text x="80.1301%" y="1167.50"></text></g><g><title>databend-query`__rust_alloc (8 samples, 0.19%)</title><rect x="79.9281%" y="1141" width="0.1918%" height="15" fill="rgb(231,126,1)" fg:x="3333" fg:w="8"/><text x="80.1781%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.19%)</title><rect x="79.9281%" y="1125" width="0.1918%" height="15" fill="rgb(243,166,3)" fg:x="3333" fg:w="8"/><text x="80.1781%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.17%)</title><rect x="79.9520%" y="1109" width="0.1679%" height="15" fill="rgb(223,22,34)" fg:x="3334" fg:w="7"/><text x="80.2020%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.17%)</title><rect x="79.9520%" y="1093" width="0.1679%" height="15" fill="rgb(251,52,51)" fg:x="3334" fg:w="7"/><text x="80.2020%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.12%)</title><rect x="80.0000%" y="1077" width="0.1199%" height="15" fill="rgb(221,165,28)" fg:x="3336" fg:w="5"/><text x="80.2500%" y="1087.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (72 samples, 1.73%)</title><rect x="79.8801%" y="1173" width="1.7266%" height="15" fill="rgb(218,121,47)" fg:x="3331" fg:w="72"/><text x="80.1301%" y="1183.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (62 samples, 1.49%)</title><rect x="80.1199%" y="1157" width="1.4868%" height="15" fill="rgb(209,120,9)" fg:x="3341" fg:w="62"/><text x="80.3699%" y="1167.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61 samples, 1.46%)</title><rect x="80.1439%" y="1141" width="1.4628%" height="15" fill="rgb(236,68,12)" fg:x="3342" fg:w="61"/><text x="80.3939%" y="1151.50"></text></g><g><title>databend-query`&lt;common_expression::types::boolean::BooleanType as common_expression::types::ValueType&gt;::push_item (4 samples, 0.10%)</title><rect x="81.6067%" y="1173" width="0.0959%" height="15" fill="rgb(225,194,26)" fg:x="3403" fg:w="4"/><text x="81.8567%" y="1183.50"></text></g><g><title>databend-query`&lt;common_expression::types::number::NumberType&lt;Num&gt; as common_expression::types::ValueType&gt;::push_item (1 samples, 0.02%)</title><rect x="81.7026%" y="1173" width="0.0240%" height="15" fill="rgb(231,84,39)" fg:x="3407" fg:w="1"/><text x="81.9526%" y="1183.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="81.7266%" y="1173" width="0.0240%" height="15" fill="rgb(210,11,45)" fg:x="3408" fg:w="1"/><text x="81.9766%" y="1183.50"></text></g><g><title>databend-query`common_base::runtime::runtime_tracker::ThreadTracker::alloc (4 samples, 0.10%)</title><rect x="81.8225%" y="1141" width="0.0959%" height="15" fill="rgb(224,54,52)" fg:x="3412" fg:w="4"/><text x="82.0725%" y="1151.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="81.9185%" y="1141" width="0.0480%" height="15" fill="rgb(238,102,14)" fg:x="3416" fg:w="2"/><text x="82.1685%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="82.0863%" y="1125" width="0.0240%" height="15" fill="rgb(243,160,52)" fg:x="3423" fg:w="1"/><text x="82.3363%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.22%)</title><rect x="82.1583%" y="1093" width="0.2158%" height="15" fill="rgb(216,114,19)" fg:x="3426" fg:w="9"/><text x="82.4083%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.29%)</title><rect x="82.1103%" y="1109" width="0.2878%" height="15" fill="rgb(244,166,37)" fg:x="3424" fg:w="12"/><text x="82.3603%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="82.3741%" y="1093" width="0.0240%" height="15" fill="rgb(246,29,44)" fg:x="3435" fg:w="1"/><text x="82.6241%" y="1103.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.74%)</title><rect x="81.7506%" y="1173" width="0.7434%" height="15" fill="rgb(215,56,53)" fg:x="3409" fg:w="31"/><text x="82.0006%" y="1183.50"></text></g><g><title>databend-query`__rust_alloc (30 samples, 0.72%)</title><rect x="81.7746%" y="1157" width="0.7194%" height="15" fill="rgb(217,60,2)" fg:x="3410" fg:w="30"/><text x="82.0246%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.53%)</title><rect x="81.9664%" y="1141" width="0.5276%" height="15" fill="rgb(207,26,24)" fg:x="3418" fg:w="22"/><text x="82.2164%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.38%)</title><rect x="82.1103%" y="1125" width="0.3837%" height="15" fill="rgb(252,210,15)" fg:x="3424" fg:w="16"/><text x="82.3603%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="82.3981%" y="1109" width="0.0959%" height="15" fill="rgb(253,209,26)" fg:x="3436" fg:w="4"/><text x="82.6481%" y="1119.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="82.7338%" y="1109" width="0.0480%" height="15" fill="rgb(238,170,14)" fg:x="3450" fg:w="2"/><text x="82.9838%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="82.8537%" y="1061" width="0.0959%" height="15" fill="rgb(216,178,15)" fg:x="3455" fg:w="4"/><text x="83.1037%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.31%)</title><rect x="82.7818%" y="1109" width="0.3118%" height="15" fill="rgb(250,197,2)" fg:x="3452" fg:w="13"/><text x="83.0318%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.26%)</title><rect x="82.8297%" y="1093" width="0.2638%" height="15" fill="rgb(212,70,42)" fg:x="3454" fg:w="11"/><text x="83.0797%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.26%)</title><rect x="82.8297%" y="1077" width="0.2638%" height="15" fill="rgb(227,213,9)" fg:x="3454" fg:w="11"/><text x="83.0797%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.14%)</title><rect x="82.9496%" y="1061" width="0.1439%" height="15" fill="rgb(245,99,25)" fg:x="3459" fg:w="6"/><text x="83.1996%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.12%)</title><rect x="83.0935%" y="1109" width="0.1199%" height="15" fill="rgb(250,82,29)" fg:x="3465" fg:w="5"/><text x="83.3435%" y="1119.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.53%)</title><rect x="82.7098%" y="1141" width="0.5276%" height="15" fill="rgb(241,226,54)" fg:x="3449" fg:w="22"/><text x="82.9598%" y="1151.50"></text></g><g><title>databend-query`__rust_alloc (22 samples, 0.53%)</title><rect x="82.7098%" y="1125" width="0.5276%" height="15" fill="rgb(221,99,41)" fg:x="3449" fg:w="22"/><text x="82.9598%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="83.2134%" y="1109" width="0.0240%" height="15" fill="rgb(213,90,21)" fg:x="3470" fg:w="1"/><text x="83.4634%" y="1119.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (47 samples, 1.13%)</title><rect x="82.7098%" y="1157" width="1.1271%" height="15" fill="rgb(205,208,24)" fg:x="3449" fg:w="47"/><text x="82.9598%" y="1167.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (25 samples, 0.60%)</title><rect x="83.2374%" y="1141" width="0.5995%" height="15" fill="rgb(246,31,12)" fg:x="3471" fg:w="25"/><text x="83.4874%" y="1151.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 0.60%)</title><rect x="83.2374%" y="1125" width="0.5995%" height="15" fill="rgb(213,154,6)" fg:x="3471" fg:w="25"/><text x="83.4874%" y="1135.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="83.9089%" y="1125" width="0.0240%" height="15" fill="rgb(222,163,29)" fg:x="3499" fg:w="1"/><text x="84.1589%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="83.9568%" y="1109" width="0.0240%" height="15" fill="rgb(227,201,8)" fg:x="3501" fg:w="1"/><text x="84.2068%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.07%)</title><rect x="84.1487%" y="1077" width="0.0719%" height="15" fill="rgb(233,9,32)" fg:x="3509" fg:w="3"/><text x="84.3987%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.38%)</title><rect x="83.9808%" y="1093" width="0.3837%" height="15" fill="rgb(217,54,24)" fg:x="3502" fg:w="16"/><text x="84.2308%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.14%)</title><rect x="84.2206%" y="1077" width="0.1439%" height="15" fill="rgb(235,192,0)" fg:x="3512" fg:w="6"/><text x="84.4706%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.46%)</title><rect x="83.9329%" y="1125" width="0.4556%" height="15" fill="rgb(235,45,9)" fg:x="3500" fg:w="19"/><text x="84.1829%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.41%)</title><rect x="83.9808%" y="1109" width="0.4077%" height="15" fill="rgb(246,42,40)" fg:x="3502" fg:w="17"/><text x="84.2308%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="84.3645%" y="1093" width="0.0240%" height="15" fill="rgb(248,111,24)" fg:x="3518" fg:w="1"/><text x="84.6145%" y="1103.50"></text></g><g><title>databend-query`&lt;common_expression::types::number::NumberType&lt;Num&gt; as common_expression::types::ValueType&gt;::build_column (24 samples, 0.58%)</title><rect x="83.8369%" y="1157" width="0.5755%" height="15" fill="rgb(249,65,22)" fg:x="3496" fg:w="24"/><text x="84.0869%" y="1167.50"></text></g><g><title>databend-query`__rust_alloc (21 samples, 0.50%)</title><rect x="83.9089%" y="1141" width="0.5036%" height="15" fill="rgb(238,111,51)" fg:x="3499" fg:w="21"/><text x="84.1589%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="84.3885%" y="1125" width="0.0240%" height="15" fill="rgb(250,118,22)" fg:x="3519" fg:w="1"/><text x="84.6385%" y="1135.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="84.4125%" y="1157" width="0.0240%" height="15" fill="rgb(234,84,26)" fg:x="3520" fg:w="1"/><text x="84.6625%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow2::buffer::immutable::Buffer&lt;ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt;&gt; (29 samples, 0.70%)</title><rect x="84.4365%" y="1157" width="0.6954%" height="15" fill="rgb(243,172,12)" fg:x="3521" fg:w="29"/><text x="84.6865%" y="1167.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.70%)</title><rect x="84.4365%" y="1141" width="0.6954%" height="15" fill="rgb(236,150,49)" fg:x="3521" fg:w="29"/><text x="84.6865%" y="1151.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="85.1319%" y="1157" width="0.0480%" height="15" fill="rgb(225,197,26)" fg:x="3550" fg:w="2"/><text x="85.3819%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.24%)</title><rect x="85.1799%" y="1157" width="0.2398%" height="15" fill="rgb(214,17,42)" fg:x="3552" fg:w="10"/><text x="85.4299%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="85.3717%" y="1141" width="0.0480%" height="15" fill="rgb(224,165,40)" fg:x="3560" fg:w="2"/><text x="85.6217%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="85.4197%" y="1157" width="0.0240%" height="15" fill="rgb(246,100,4)" fg:x="3562" fg:w="1"/><text x="85.6697%" y="1167.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::values::Column&gt;::take_block_value_types (127 samples, 3.05%)</title><rect x="82.4940%" y="1173" width="3.0456%" height="15" fill="rgb(222,103,0)" fg:x="3440" fg:w="127"/><text x="82.7440%" y="1183.50">dat..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.10%)</title><rect x="85.4436%" y="1157" width="0.0959%" height="15" fill="rgb(227,189,26)" fg:x="3563" fg:w="4"/><text x="85.6936%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow2::bitmap::immutable::Bitmap&gt;&gt; (67 samples, 1.61%)</title><rect x="85.5396%" y="1173" width="1.6067%" height="15" fill="rgb(214,202,17)" fg:x="3567" fg:w="67"/><text x="85.7896%" y="1183.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 1.53%)</title><rect x="85.6115%" y="1157" width="1.5348%" height="15" fill="rgb(229,111,3)" fg:x="3570" fg:w="64"/><text x="85.8615%" y="1167.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="87.1463%" y="1173" width="0.0240%" height="15" fill="rgb(229,172,15)" fg:x="3634" fg:w="1"/><text x="87.3963%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="87.1703%" y="1173" width="0.0240%" height="15" fill="rgb(230,224,35)" fg:x="3635" fg:w="1"/><text x="87.4203%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.10%)</title><rect x="87.1942%" y="1173" width="0.0959%" height="15" fill="rgb(251,141,6)" fg:x="3636" fg:w="4"/><text x="87.4442%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.07%)</title><rect x="87.2182%" y="1157" width="0.0719%" height="15" fill="rgb(225,208,6)" fg:x="3637" fg:w="3"/><text x="87.4682%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="87.2902%" y="1173" width="0.0240%" height="15" fill="rgb(246,181,16)" fg:x="3640" fg:w="1"/><text x="87.5402%" y="1183.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::values::Column&gt;::take_column_indices (350 samples, 8.39%)</title><rect x="78.9928%" y="1189" width="8.3933%" height="15" fill="rgb(227,129,36)" fg:x="3294" fg:w="350"/><text x="79.2428%" y="1199.50">databend-que..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.07%)</title><rect x="87.3141%" y="1173" width="0.0719%" height="15" fill="rgb(248,117,24)" fg:x="3641" fg:w="3"/><text x="87.5641%" y="1183.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_expression::values::Column]&gt; (1 samples, 0.02%)</title><rect x="87.3861%" y="1189" width="0.0240%" height="15" fill="rgb(214,185,35)" fg:x="3644" fg:w="1"/><text x="87.6361%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow2::bitmap::immutable::Bitmap&gt;&gt; (2 samples, 0.05%)</title><rect x="87.4101%" y="1189" width="0.0480%" height="15" fill="rgb(236,150,34)" fg:x="3645" fg:w="2"/><text x="87.6601%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_expression::values::Column]&gt; (90 samples, 2.16%)</title><rect x="87.4820%" y="1173" width="2.1583%" height="15" fill="rgb(243,228,27)" fg:x="3648" fg:w="90"/><text x="87.7320%" y="1183.50">d..</text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (90 samples, 2.16%)</title><rect x="87.4820%" y="1157" width="2.1583%" height="15" fill="rgb(245,77,44)" fg:x="3648" fg:w="90"/><text x="87.7320%" y="1167.50">d..</text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::values::Column&gt;&gt; (93 samples, 2.23%)</title><rect x="87.4580%" y="1189" width="2.2302%" height="15" fill="rgb(235,214,42)" fg:x="3647" fg:w="93"/><text x="87.7080%" y="1199.50">d..</text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (2 samples, 0.05%)</title><rect x="89.6403%" y="1173" width="0.0480%" height="15" fill="rgb(221,74,3)" fg:x="3738" fg:w="2"/><text x="89.8903%" y="1183.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::DataType&gt; (3 samples, 0.07%)</title><rect x="89.6882%" y="1189" width="0.0719%" height="15" fill="rgb(206,121,29)" fg:x="3740" fg:w="3"/><text x="89.9382%" y="1199.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.07%)</title><rect x="89.7602%" y="1189" width="0.0719%" height="15" fill="rgb(249,131,53)" fg:x="3743" fg:w="3"/><text x="90.0102%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="89.8321%" y="1189" width="0.0240%" height="15" fill="rgb(236,170,29)" fg:x="3746" fg:w="1"/><text x="90.0821%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="89.8561%" y="1189" width="0.0240%" height="15" fill="rgb(247,96,15)" fg:x="3747" fg:w="1"/><text x="90.1061%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.48%)</title><rect x="89.8801%" y="1189" width="0.4796%" height="15" fill="rgb(211,210,7)" fg:x="3748" fg:w="20"/><text x="90.1301%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.26%)</title><rect x="90.0959%" y="1173" width="0.2638%" height="15" fill="rgb(240,88,50)" fg:x="3757" fg:w="11"/><text x="90.3459%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.10%)</title><rect x="90.3597%" y="1189" width="0.0959%" height="15" fill="rgb(209,229,26)" fg:x="3768" fg:w="4"/><text x="90.6097%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (24 samples, 0.58%)</title><rect x="90.4556%" y="1189" width="0.5755%" height="15" fill="rgb(210,68,23)" fg:x="3772" fg:w="24"/><text x="90.7056%" y="1199.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::values::Column&gt;::take_column_indices (689 samples, 16.52%)</title><rect x="74.5324%" y="1205" width="16.5228%" height="15" fill="rgb(229,180,13)" fg:x="3108" fg:w="689"/><text x="74.7824%" y="1215.50">databend-query`common_expr..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="91.0312%" y="1189" width="0.0240%" height="15" fill="rgb(236,53,44)" fg:x="3796" fg:w="1"/><text x="91.2812%" y="1199.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="91.0552%" y="1173" width="0.0240%" height="15" fill="rgb(244,214,29)" fg:x="3797" fg:w="1"/><text x="91.3052%" y="1183.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (64 samples, 1.53%)</title><rect x="91.0791%" y="1173" width="1.5348%" height="15" fill="rgb(220,75,29)" fg:x="3798" fg:w="64"/><text x="91.3291%" y="1183.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (12 samples, 0.29%)</title><rect x="92.3261%" y="1157" width="0.2878%" height="15" fill="rgb(214,183,37)" fg:x="3850" fg:w="12"/><text x="92.5761%" y="1167.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="92.6139%" y="1173" width="0.0480%" height="15" fill="rgb(239,117,29)" fg:x="3862" fg:w="2"/><text x="92.8639%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.12%)</title><rect x="92.6619%" y="1173" width="0.1199%" height="15" fill="rgb(237,171,35)" fg:x="3864" fg:w="5"/><text x="92.9119%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.07%)</title><rect x="92.7098%" y="1157" width="0.0719%" height="15" fill="rgb(229,178,53)" fg:x="3866" fg:w="3"/><text x="92.9598%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_expression::values::Column]&gt; (74 samples, 1.77%)</title><rect x="91.0552%" y="1189" width="1.7746%" height="15" fill="rgb(210,102,19)" fg:x="3797" fg:w="74"/><text x="91.3052%" y="1199.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.05%)</title><rect x="92.7818%" y="1173" width="0.0480%" height="15" fill="rgb(235,127,22)" fg:x="3869" fg:w="2"/><text x="93.0318%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="92.8297%" y="1189" width="0.0240%" height="15" fill="rgb(244,31,31)" fg:x="3871" fg:w="1"/><text x="93.0797%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::values::Column&gt;&gt; (76 samples, 1.82%)</title><rect x="91.0552%" y="1205" width="1.8225%" height="15" fill="rgb(231,43,21)" fg:x="3797" fg:w="76"/><text x="91.3052%" y="1215.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="92.8537%" y="1189" width="0.0240%" height="15" fill="rgb(217,131,35)" fg:x="3872" fg:w="1"/><text x="93.1037%" y="1199.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (2 samples, 0.05%)</title><rect x="92.8777%" y="1205" width="0.0480%" height="15" fill="rgb(221,149,4)" fg:x="3873" fg:w="2"/><text x="93.1277%" y="1215.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.10%)</title><rect x="92.9257%" y="1205" width="0.0959%" height="15" fill="rgb(232,170,28)" fg:x="3875" fg:w="4"/><text x="93.1757%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="93.0216%" y="1205" width="0.0240%" height="15" fill="rgb(238,56,10)" fg:x="3879" fg:w="1"/><text x="93.2716%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.36%)</title><rect x="93.0456%" y="1205" width="0.3597%" height="15" fill="rgb(235,196,14)" fg:x="3880" fg:w="15"/><text x="93.2956%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.14%)</title><rect x="93.2614%" y="1189" width="0.1439%" height="15" fill="rgb(216,45,48)" fg:x="3889" fg:w="6"/><text x="93.5114%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.19%)</title><rect x="93.4053%" y="1205" width="0.1918%" height="15" fill="rgb(238,213,17)" fg:x="3895" fg:w="8"/><text x="93.6553%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.84%)</title><rect x="93.5971%" y="1205" width="0.8393%" height="15" fill="rgb(212,13,2)" fg:x="3903" fg:w="35"/><text x="93.8471%" y="1215.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,010 samples, 24.22%)</title><rect x="70.2398%" y="1221" width="24.2206%" height="15" fill="rgb(240,114,20)" fg:x="2929" fg:w="1010"/><text x="70.4898%" y="1231.50">databend-query`&lt;core::iter::adapters::m..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="94.4365%" y="1205" width="0.0240%" height="15" fill="rgb(228,41,40)" fg:x="3938" fg:w="1"/><text x="94.6865%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.05%)</title><rect x="94.4604%" y="1221" width="0.0480%" height="15" fill="rgb(244,132,35)" fg:x="3939" fg:w="2"/><text x="94.7104%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="94.5084%" y="1221" width="0.0240%" height="15" fill="rgb(253,189,4)" fg:x="3941" fg:w="1"/><text x="94.7584%" y="1231.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::block::DataBlock&gt;::take_blocks (1,021 samples, 24.48%)</title><rect x="70.0719%" y="1269" width="24.4844%" height="15" fill="rgb(224,37,19)" fg:x="2922" fg:w="1021"/><text x="70.3219%" y="1279.50">databend-query`common_expression::kerne..</text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,021 samples, 24.48%)</title><rect x="70.0719%" y="1253" width="24.4844%" height="15" fill="rgb(235,223,18)" fg:x="2922" fg:w="1021"/><text x="70.3219%" y="1263.50">databend-query`&lt;alloc::vec::Vec&lt;T&gt; as a..</text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,014 samples, 24.32%)</title><rect x="70.2398%" y="1237" width="24.3165%" height="15" fill="rgb(235,163,25)" fg:x="2929" fg:w="1014"/><text x="70.4898%" y="1247.50">databend-query`alloc::vec::Vec&lt;T,A&gt;::ex..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="94.5324%" y="1221" width="0.0240%" height="15" fill="rgb(217,145,28)" fg:x="3942" fg:w="1"/><text x="94.7824%" y="1231.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumn::index_unchecked (2 samples, 0.05%)</title><rect x="94.5564%" y="1269" width="0.0480%" height="15" fill="rgb(223,223,32)" fg:x="3943" fg:w="2"/><text x="94.8064%" y="1279.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumn::index (1 samples, 0.02%)</title><rect x="94.7482%" y="1237" width="0.0240%" height="15" fill="rgb(227,189,39)" fg:x="3951" fg:w="1"/><text x="94.9982%" y="1247.50"></text></g><g><title>databend-query`common_expression::values::Column::index_unchecked (8 samples, 0.19%)</title><rect x="94.6043%" y="1269" width="0.1918%" height="15" fill="rgb(248,10,22)" fg:x="3945" fg:w="8"/><text x="94.8543%" y="1279.50"></text></g><g><title>databend-query`common_expression::types::nullable::NullableColumn&lt;T&gt;::index_unchecked (6 samples, 0.14%)</title><rect x="94.6523%" y="1253" width="0.1439%" height="15" fill="rgb(248,46,39)" fg:x="3947" fg:w="6"/><text x="94.9023%" y="1263.50"></text></g><g><title>databend-query`common_expression::values::Column::index (1 samples, 0.02%)</title><rect x="94.7722%" y="1237" width="0.0240%" height="15" fill="rgb(248,113,48)" fg:x="3952" fg:w="1"/><text x="95.0222%" y="1247.50"></text></g><g><title>databend-query`__rust_dealloc (1 samples, 0.02%)</title><rect x="94.7962%" y="1221" width="0.0240%" height="15" fill="rgb(245,16,25)" fg:x="3953" fg:w="1"/><text x="95.0462%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::types::DataType&gt; (1 samples, 0.02%)</title><rect x="94.8201%" y="1205" width="0.0240%" height="15" fill="rgb(249,152,16)" fg:x="3954" fg:w="1"/><text x="95.0701%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.14%)</title><rect x="94.8441%" y="1205" width="0.1439%" height="15" fill="rgb(250,16,1)" fg:x="3955" fg:w="6"/><text x="95.0941%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="94.9640%" y="1189" width="0.0240%" height="15" fill="rgb(249,138,3)" fg:x="3960" fg:w="1"/><text x="95.2140%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.10%)</title><rect x="94.9880%" y="1205" width="0.0959%" height="15" fill="rgb(227,71,41)" fg:x="3961" fg:w="4"/><text x="95.2380%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::BlockEntry&gt; (12 samples, 0.29%)</title><rect x="94.8201%" y="1221" width="0.2878%" height="15" fill="rgb(209,184,23)" fg:x="3954" fg:w="12"/><text x="95.0701%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="95.0839%" y="1205" width="0.0240%" height="15" fill="rgb(223,215,31)" fg:x="3965" fg:w="1"/><text x="95.3339%" y="1215.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (2 samples, 0.05%)</title><rect x="95.1079%" y="1221" width="0.0480%" height="15" fill="rgb(210,146,28)" fg:x="3966" fg:w="2"/><text x="95.3579%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.10%)</title><rect x="95.1559%" y="1221" width="0.0959%" height="15" fill="rgb(209,183,41)" fg:x="3968" fg:w="4"/><text x="95.4059%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="95.2518%" y="1221" width="0.0719%" height="15" fill="rgb(209,224,45)" fg:x="3972" fg:w="3"/><text x="95.5018%" y="1231.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.58%)</title><rect x="94.7962%" y="1237" width="0.5755%" height="15" fill="rgb(224,209,51)" fg:x="3953" fg:w="24"/><text x="95.0462%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.05%)</title><rect x="95.3237%" y="1221" width="0.0480%" height="15" fill="rgb(223,17,39)" fg:x="3975" fg:w="2"/><text x="95.5737%" y="1231.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (25 samples, 0.60%)</title><rect x="94.7962%" y="1253" width="0.5995%" height="15" fill="rgb(234,204,37)" fg:x="3953" fg:w="25"/><text x="95.0462%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="95.3717%" y="1237" width="0.0240%" height="15" fill="rgb(236,120,5)" fg:x="3977" fg:w="1"/><text x="95.6217%" y="1247.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="95.3957%" y="1253" width="0.0240%" height="15" fill="rgb(248,97,27)" fg:x="3978" fg:w="1"/><text x="95.6457%" y="1263.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::DataBlock&gt; (28 samples, 0.67%)</title><rect x="94.7962%" y="1269" width="0.6715%" height="15" fill="rgb(240,66,17)" fg:x="3953" fg:w="28"/><text x="95.0462%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="95.4197%" y="1253" width="0.0480%" height="15" fill="rgb(210,79,3)" fg:x="3979" fg:w="2"/><text x="95.6697%" y="1263.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::ScalarRef&gt; (3 samples, 0.07%)</title><rect x="95.4676%" y="1269" width="0.0719%" height="15" fill="rgb(214,176,27)" fg:x="3981" fg:w="3"/><text x="95.7176%" y="1279.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::range_join::merge_join_state::compare_scalar (1 samples, 0.02%)</title><rect x="95.5396%" y="1269" width="0.0240%" height="15" fill="rgb(235,185,3)" fg:x="3984" fg:w="1"/><text x="95.7896%" y="1279.50"></text></g><g><title>databend-query`&lt;common_expression::values::ScalarRef as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.02%)</title><rect x="95.5396%" y="1253" width="0.0240%" height="15" fill="rgb(227,24,12)" fg:x="3984" fg:w="1"/><text x="95.7896%" y="1263.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="95.5635%" y="1269" width="0.0240%" height="15" fill="rgb(252,169,48)" fg:x="3985" fg:w="1"/><text x="95.8135%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.14%)</title><rect x="95.5875%" y="1269" width="0.1439%" height="15" fill="rgb(212,65,1)" fg:x="3986" fg:w="6"/><text x="95.8375%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.10%)</title><rect x="95.6355%" y="1253" width="0.0959%" height="15" fill="rgb(242,39,24)" fg:x="3988" fg:w="4"/><text x="95.8855%" y="1263.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.05%)</title><rect x="95.7314%" y="1269" width="0.0480%" height="15" fill="rgb(249,32,23)" fg:x="3992" fg:w="2"/><text x="95.9814%" y="1279.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::range_join::merge_join_state::_&lt;impl databend_query::pipelines::processors::transforms::range_join::range_join_state::RangeJoinState&gt;::merge_join (1,279 samples, 30.67%)</title><rect x="65.1319%" y="1285" width="30.6715%" height="15" fill="rgb(251,195,23)" fg:x="2716" fg:w="1279"/><text x="65.3819%" y="1295.50">databend-query`databend_query::pipelines::process..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="95.7794%" y="1269" width="0.0240%" height="15" fill="rgb(236,174,8)" fg:x="3994" fg:w="1"/><text x="96.0294%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="95.8034%" y="1285" width="0.0240%" height="15" fill="rgb(220,197,8)" fg:x="3995" fg:w="1"/><text x="96.0534%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="95.8273%" y="1285" width="0.0240%" height="15" fill="rgb(240,108,37)" fg:x="3996" fg:w="1"/><text x="96.0773%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="95.8513%" y="1285" width="0.0240%" height="15" fill="rgb(232,176,24)" fg:x="3997" fg:w="1"/><text x="96.1013%" y="1295.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="95.8513%" y="1269" width="0.0240%" height="15" fill="rgb(243,35,29)" fg:x="3997" fg:w="1"/><text x="96.1013%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="95.8753%" y="1285" width="0.0240%" height="15" fill="rgb(210,37,18)" fg:x="3998" fg:w="1"/><text x="96.1253%" y="1295.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="95.8993%" y="1285" width="0.0240%" height="15" fill="rgb(224,184,40)" fg:x="3999" fg:w="1"/><text x="96.1493%" y="1295.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::transform_ie_join::TransformRangeJoinLeft as common_pipeline_core::processors::processor::Processor&gt;::process (1,289 samples, 30.91%)</title><rect x="65.0839%" y="1301" width="30.9113%" height="15" fill="rgb(236,39,29)" fg:x="2714" fg:w="1289"/><text x="65.3339%" y="1311.50">databend-query`&lt;databend_query::pipelines::process..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="95.9233%" y="1285" width="0.0719%" height="15" fill="rgb(232,48,39)" fg:x="4000" fg:w="3"/><text x="96.1733%" y="1295.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_worker_context::ExecutorWorkerContext::execute_task (3,330 samples, 79.86%)</title><rect x="16.1631%" y="1317" width="79.8561%" height="15" fill="rgb(236,34,42)" fg:x="674" fg:w="3330"/><text x="16.4131%" y="1327.50">databend-query`databend_query::pipelines::executor::executor_worker_context::ExecutorWorkerContext::execute_task</text></g><g><title>databend-query`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;dyn common_expression::block::BlockMetaInfo&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="95.9952%" y="1301" width="0.0240%" height="15" fill="rgb(243,106,37)" fg:x="4003" fg:w="1"/><text x="96.2452%" y="1311.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_worker_context::ExecutorWorkerContext::set_task (1 samples, 0.02%)</title><rect x="96.0192%" y="1317" width="0.0240%" height="15" fill="rgb(218,96,6)" fg:x="4004" fg:w="1"/><text x="96.2692%" y="1327.50"></text></g><g><title>databend-query`common_base::runtime::catch_unwind::catch_unwind (3,888 samples, 93.24%)</title><rect x="2.8297%" y="1381" width="93.2374%" height="15" fill="rgb(235,130,12)" fg:x="118" fg:w="3888"/><text x="3.0797%" y="1391.50">databend-query`common_base::runtime::catch_unwind::catch_unwind</text></g><g><title>databend-query`std::panicking::try (3,888 samples, 93.24%)</title><rect x="2.8297%" y="1365" width="93.2374%" height="15" fill="rgb(231,95,0)" fg:x="118" fg:w="3888"/><text x="3.0797%" y="1375.50">databend-query`std::panicking::try</text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,888 samples, 93.24%)</title><rect x="2.8297%" y="1349" width="93.2374%" height="15" fill="rgb(228,12,23)" fg:x="118" fg:w="3888"/><text x="3.0797%" y="1359.50">databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_single_thread (3,886 samples, 93.19%)</title><rect x="2.8777%" y="1333" width="93.1894%" height="15" fill="rgb(216,12,1)" fg:x="120" fg:w="3886"/><text x="3.1277%" y="1343.50">databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_single_thread</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="96.0432%" y="1317" width="0.0240%" height="15" fill="rgb(219,59,3)" fg:x="4005" fg:w="1"/><text x="96.2932%" y="1327.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (1 samples, 0.02%)</title><rect x="96.0671%" y="1381" width="0.0240%" height="15" fill="rgb(215,208,46)" fg:x="4006" fg:w="1"/><text x="96.3171%" y="1391.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::BlockingPool::shutdown (1 samples, 0.02%)</title><rect x="96.0671%" y="1365" width="0.0240%" height="15" fill="rgb(254,224,29)" fg:x="4006" fg:w="1"/><text x="96.3171%" y="1375.50"></text></g><g><title>databend-query`tokio::runtime::blocking::shutdown::Receiver::wait (1 samples, 0.02%)</title><rect x="96.0671%" y="1349" width="0.0240%" height="15" fill="rgb(232,14,29)" fg:x="4006" fg:w="1"/><text x="96.3171%" y="1359.50"></text></g><g><title>databend-query`tokio::runtime::park::CachedParkThread::block_on (1 samples, 0.02%)</title><rect x="96.0671%" y="1333" width="0.0240%" height="15" fill="rgb(208,45,52)" fg:x="4006" fg:w="1"/><text x="96.3171%" y="1343.50"></text></g><g><title>databend-query`tokio::runtime::park::Inner::park (1 samples, 0.02%)</title><rect x="96.0671%" y="1317" width="0.0240%" height="15" fill="rgb(234,191,28)" fg:x="4006" fg:w="1"/><text x="96.3171%" y="1327.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.02%)</title><rect x="96.0671%" y="1301" width="0.0240%" height="15" fill="rgb(244,67,43)" fg:x="4006" fg:w="1"/><text x="96.3171%" y="1311.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.02%)</title><rect x="96.0671%" y="1285" width="0.0240%" height="15" fill="rgb(236,189,24)" fg:x="4006" fg:w="1"/><text x="96.3171%" y="1295.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (1 samples, 0.02%)</title><rect x="96.0911%" y="1317" width="0.0240%" height="15" fill="rgb(239,214,33)" fg:x="4007" fg:w="1"/><text x="96.3411%" y="1327.50"></text></g><g><title>databend-query`common_base::runtime::thread::Thread::named_spawn (3 samples, 0.07%)</title><rect x="96.0911%" y="1365" width="0.0719%" height="15" fill="rgb(226,176,41)" fg:x="4007" fg:w="3"/><text x="96.3411%" y="1375.50"></text></g><g><title>databend-query`std::thread::Builder::spawn_unchecked_ (3 samples, 0.07%)</title><rect x="96.0911%" y="1349" width="0.0719%" height="15" fill="rgb(248,47,8)" fg:x="4007" fg:w="3"/><text x="96.3411%" y="1359.50"></text></g><g><title>databend-query`std::sys::unix::thread::Thread::new (3 samples, 0.07%)</title><rect x="96.0911%" y="1333" width="0.0719%" height="15" fill="rgb(218,81,44)" fg:x="4007" fg:w="3"/><text x="96.3411%" y="1343.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (2 samples, 0.05%)</title><rect x="96.1151%" y="1317" width="0.0480%" height="15" fill="rgb(213,98,6)" fg:x="4008" fg:w="2"/><text x="96.3651%" y="1327.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (1 samples, 0.02%)</title><rect x="96.1391%" y="1301" width="0.0240%" height="15" fill="rgb(222,85,22)" fg:x="4009" fg:w="1"/><text x="96.3891%" y="1311.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute (4 samples, 0.10%)</title><rect x="96.0911%" y="1381" width="0.0959%" height="15" fill="rgb(239,46,39)" fg:x="4007" fg:w="4"/><text x="96.3411%" y="1391.50"></text></g><g><title>databend-query`common_base::runtime::thread::ThreadJoinHandle&lt;T&gt;::join (1 samples, 0.02%)</title><rect x="96.1631%" y="1365" width="0.0240%" height="15" fill="rgb(237,12,29)" fg:x="4010" fg:w="1"/><text x="96.4131%" y="1375.50"></text></g><g><title>databend-query`std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.02%)</title><rect x="96.1631%" y="1349" width="0.0240%" height="15" fill="rgb(214,77,8)" fg:x="4010" fg:w="1"/><text x="96.4131%" y="1359.50"></text></g><g><title>databend-query`std::sys::unix::thread::Thread::join (1 samples, 0.02%)</title><rect x="96.1631%" y="1333" width="0.0240%" height="15" fill="rgb(217,168,37)" fg:x="4010" fg:w="1"/><text x="96.4131%" y="1343.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (1 samples, 0.02%)</title><rect x="96.1631%" y="1317" width="0.0240%" height="15" fill="rgb(221,217,23)" fg:x="4010" fg:w="1"/><text x="96.4131%" y="1327.50"></text></g><g><title>databend-query`parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="96.1871%" y="1365" width="0.0240%" height="15" fill="rgb(243,229,36)" fg:x="4011" fg:w="1"/><text x="96.4371%" y="1375.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.02%)</title><rect x="96.1871%" y="1349" width="0.0240%" height="15" fill="rgb(251,163,40)" fg:x="4011" fg:w="1"/><text x="96.4371%" y="1359.50"></text></g><g><title>databend-query`tokio::runtime::process::Driver::park (1 samples, 0.02%)</title><rect x="96.2110%" y="1141" width="0.0240%" height="15" fill="rgb(237,222,12)" fg:x="4012" fg:w="1"/><text x="96.4610%" y="1151.50"></text></g><g><title>databend-query`tokio::runtime::io::Driver::turn (1 samples, 0.02%)</title><rect x="96.2110%" y="1125" width="0.0240%" height="15" fill="rgb(248,132,6)" fg:x="4012" fg:w="1"/><text x="96.4610%" y="1135.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.02%)</title><rect x="96.2110%" y="1109" width="0.0240%" height="15" fill="rgb(227,167,50)" fg:x="4012" fg:w="1"/><text x="96.4610%" y="1119.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3 samples, 0.07%)</title><rect x="96.2110%" y="1189" width="0.0719%" height="15" fill="rgb(242,84,37)" fg:x="4012" fg:w="3"/><text x="96.4610%" y="1199.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::park::Parker::park (3 samples, 0.07%)</title><rect x="96.2110%" y="1173" width="0.0719%" height="15" fill="rgb(212,4,50)" fg:x="4012" fg:w="3"/><text x="96.4610%" y="1183.50"></text></g><g><title>databend-query`tokio::runtime::time::Driver::park_internal (3 samples, 0.07%)</title><rect x="96.2110%" y="1157" width="0.0719%" height="15" fill="rgb(230,228,32)" fg:x="4012" fg:w="3"/><text x="96.4610%" y="1167.50"></text></g><g><title>databend-query`tokio::runtime::process::Driver::park_timeout (2 samples, 0.05%)</title><rect x="96.2350%" y="1141" width="0.0480%" height="15" fill="rgb(248,217,23)" fg:x="4013" fg:w="2"/><text x="96.4850%" y="1151.50"></text></g><g><title>databend-query`tokio::runtime::io::Driver::turn (2 samples, 0.05%)</title><rect x="96.2350%" y="1125" width="0.0480%" height="15" fill="rgb(238,197,32)" fg:x="4013" fg:w="2"/><text x="96.4850%" y="1135.50"></text></g><g><title>libsystem_kernel.dylib`kevent (2 samples, 0.05%)</title><rect x="96.2350%" y="1109" width="0.0480%" height="15" fill="rgb(236,106,1)" fg:x="4013" fg:w="2"/><text x="96.4850%" y="1119.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;async_backtrace::framed::Framed&lt;common_storages_fuse::pruning::fuse_pruner::FusePruner::pruning::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (3 samples, 0.07%)</title><rect x="96.2830%" y="1077" width="0.0719%" height="15" fill="rgb(219,228,13)" fg:x="4015" fg:w="3"/><text x="96.5330%" y="1087.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="96.3549%" y="1061" width="0.0240%" height="15" fill="rgb(238,30,35)" fg:x="4018" fg:w="1"/><text x="96.6049%" y="1071.50"></text></g><g><title>databend-query`std::path::Path::_join (1 samples, 0.02%)</title><rect x="96.4029%" y="901" width="0.0240%" height="15" fill="rgb(236,70,23)" fg:x="4020" fg:w="1"/><text x="96.6529%" y="911.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="96.4029%" y="885" width="0.0240%" height="15" fill="rgb(249,104,48)" fg:x="4020" fg:w="1"/><text x="96.6529%" y="895.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="96.4029%" y="869" width="0.0240%" height="15" fill="rgb(254,117,50)" fg:x="4020" fg:w="1"/><text x="96.6529%" y="879.50"></text></g><g><title>databend-query`__rust_realloc (1 samples, 0.02%)</title><rect x="96.4029%" y="853" width="0.0240%" height="15" fill="rgb(223,152,4)" fg:x="4020" fg:w="1"/><text x="96.6529%" y="863.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (1 samples, 0.02%)</title><rect x="96.4029%" y="837" width="0.0240%" height="15" fill="rgb(245,6,2)" fg:x="4020" fg:w="1"/><text x="96.6529%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="96.4029%" y="821" width="0.0240%" height="15" fill="rgb(249,150,24)" fg:x="4020" fg:w="1"/><text x="96.6529%" y="831.50"></text></g><g><title>databend-query`&lt;common_base::runtime::runtime_tracker::TrackedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="96.3789%" y="1061" width="0.0719%" height="15" fill="rgb(228,185,42)" fg:x="4019" fg:w="3"/><text x="96.6289%" y="1071.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (3 samples, 0.07%)</title><rect x="96.3789%" y="1045" width="0.0719%" height="15" fill="rgb(226,39,33)" fg:x="4019" fg:w="3"/><text x="96.6289%" y="1055.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (3 samples, 0.07%)</title><rect x="96.3789%" y="1029" width="0.0719%" height="15" fill="rgb(221,166,19)" fg:x="4019" fg:w="3"/><text x="96.6289%" y="1039.50"></text></g><g><title>databend-query`&lt;opendal::layers::complete::CompleteReaderAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (3 samples, 0.07%)</title><rect x="96.3789%" y="1013" width="0.0719%" height="15" fill="rgb(209,109,2)" fg:x="4019" fg:w="3"/><text x="96.6289%" y="1023.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (2 samples, 0.05%)</title><rect x="96.4029%" y="997" width="0.0480%" height="15" fill="rgb(252,216,26)" fg:x="4020" fg:w="2"/><text x="96.6529%" y="1007.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (2 samples, 0.05%)</title><rect x="96.4029%" y="981" width="0.0480%" height="15" fill="rgb(227,173,36)" fg:x="4020" fg:w="2"/><text x="96.6529%" y="991.50"></text></g><g><title>databend-query`&lt;opendal::layers::error_context::ErrorContextAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (2 samples, 0.05%)</title><rect x="96.4029%" y="965" width="0.0480%" height="15" fill="rgb(209,90,7)" fg:x="4020" fg:w="2"/><text x="96.6529%" y="975.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="96.4029%" y="949" width="0.0480%" height="15" fill="rgb(250,194,11)" fg:x="4020" fg:w="2"/><text x="96.6529%" y="959.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="96.4029%" y="933" width="0.0480%" height="15" fill="rgb(220,72,50)" fg:x="4020" fg:w="2"/><text x="96.6529%" y="943.50"></text></g><g><title>databend-query`&lt;opendal::services::fs::backend::FsBackend as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (2 samples, 0.05%)</title><rect x="96.4029%" y="917" width="0.0480%" height="15" fill="rgb(222,106,48)" fg:x="4020" fg:w="2"/><text x="96.6529%" y="927.50"></text></g><g><title>databend-query`tokio::fs::open_options::OpenOptions::open::_{{closure}} (1 samples, 0.02%)</title><rect x="96.4269%" y="901" width="0.0240%" height="15" fill="rgb(216,220,45)" fg:x="4021" fg:w="1"/><text x="96.6769%" y="911.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.02%)</title><rect x="96.4269%" y="885" width="0.0240%" height="15" fill="rgb(234,112,18)" fg:x="4021" fg:w="1"/><text x="96.6769%" y="895.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.02%)</title><rect x="96.4269%" y="869" width="0.0240%" height="15" fill="rgb(206,179,9)" fg:x="4021" fg:w="1"/><text x="96.6769%" y="879.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (1 samples, 0.02%)</title><rect x="96.4269%" y="853" width="0.0240%" height="15" fill="rgb(215,115,40)" fg:x="4021" fg:w="1"/><text x="96.6769%" y="863.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.02%)</title><rect x="96.4269%" y="837" width="0.0240%" height="15" fill="rgb(222,69,34)" fg:x="4021" fg:w="1"/><text x="96.6769%" y="847.50"></text></g><g><title>databend-query`std::thread::Builder::spawn_unchecked_ (1 samples, 0.02%)</title><rect x="96.4269%" y="821" width="0.0240%" height="15" fill="rgb(209,161,10)" fg:x="4021" fg:w="1"/><text x="96.6769%" y="831.50"></text></g><g><title>databend-query`std::sys::unix::thread::Thread::new (1 samples, 0.02%)</title><rect x="96.4269%" y="805" width="0.0240%" height="15" fill="rgb(217,6,38)" fg:x="4021" fg:w="1"/><text x="96.6769%" y="815.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (1 samples, 0.02%)</title><rect x="96.4269%" y="789" width="0.0240%" height="15" fill="rgb(229,229,48)" fg:x="4021" fg:w="1"/><text x="96.6769%" y="799.50"></text></g><g><title>databend-query`&lt;tower::buffer::worker::Worker&lt;T,Request&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="96.4508%" y="1061" width="0.0240%" height="15" fill="rgb(225,21,28)" fg:x="4022" fg:w="1"/><text x="96.7008%" y="1071.50"></text></g><g><title>databend-query`tower::buffer::worker::Worker&lt;T,Request&gt;::poll_next_msg (1 samples, 0.02%)</title><rect x="96.4508%" y="1045" width="0.0240%" height="15" fill="rgb(206,33,13)" fg:x="4022" fg:w="1"/><text x="96.7008%" y="1055.50"></text></g><g><title>databend-query`async_backtrace::frame::active_frame::ACTIVE_FRAME::__getit (1 samples, 0.02%)</title><rect x="96.4748%" y="1061" width="0.0240%" height="15" fill="rgb(242,178,17)" fg:x="4023" fg:w="1"/><text x="96.7248%" y="1071.50"></text></g><g><title>databend-query`hyper::client::dispatch::Callback&lt;T,U&gt;::send_when::_{{closure}} (1 samples, 0.02%)</title><rect x="96.4988%" y="1061" width="0.0240%" height="15" fill="rgb(220,162,5)" fg:x="4024" fg:w="1"/><text x="96.7488%" y="1071.50"></text></g><g><title>databend-query`&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="96.4988%" y="1045" width="0.0240%" height="15" fill="rgb(210,33,43)" fg:x="4024" fg:w="1"/><text x="96.7488%" y="1055.50"></text></g><g><title>databend-query`hyper::client::dispatch::Callback&lt;T,U&gt;::send (1 samples, 0.02%)</title><rect x="96.4988%" y="1029" width="0.0240%" height="15" fill="rgb(216,116,54)" fg:x="4024" fg:w="1"/><text x="96.7488%" y="1039.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;hyper::client::dispatch::Callback&lt;http::request::Request&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,tonic::status::Status&gt;&gt;,http::response::Response&lt;hyper::body::body::Body&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="96.4988%" y="1013" width="0.0240%" height="15" fill="rgb(249,92,24)" fg:x="4024" fg:w="1"/><text x="96.7488%" y="1023.50"></text></g><g><title>databend-query`&lt;hyper::client::dispatch::Callback&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="96.4988%" y="997" width="0.0240%" height="15" fill="rgb(231,189,14)" fg:x="4024" fg:w="1"/><text x="96.7488%" y="1007.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;hyper::error::Error&gt; (1 samples, 0.02%)</title><rect x="96.4988%" y="981" width="0.0240%" height="15" fill="rgb(230,8,41)" fg:x="4024" fg:w="1"/><text x="96.7488%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="96.4988%" y="965" width="0.0240%" height="15" fill="rgb(249,7,27)" fg:x="4024" fg:w="1"/><text x="96.7488%" y="975.50"></text></g><g><title>databend-query`h2::proto::streams::prioritize::Prioritize::poll_complete (2 samples, 0.05%)</title><rect x="96.5228%" y="949" width="0.0480%" height="15" fill="rgb(232,86,5)" fg:x="4025" fg:w="2"/><text x="96.7728%" y="959.50"></text></g><g><title>databend-query`h2::codec::framed_write::FramedWrite&lt;T,B&gt;::flush (2 samples, 0.05%)</title><rect x="96.5228%" y="933" width="0.0480%" height="15" fill="rgb(224,175,18)" fg:x="4025" fg:w="2"/><text x="96.7728%" y="943.50"></text></g><g><title>databend-query`h2::codec::framed_write::write (2 samples, 0.05%)</title><rect x="96.5228%" y="917" width="0.0480%" height="15" fill="rgb(220,129,12)" fg:x="4025" fg:w="2"/><text x="96.7728%" y="927.50"></text></g><g><title>databend-query`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (2 samples, 0.05%)</title><rect x="96.5228%" y="901" width="0.0480%" height="15" fill="rgb(210,19,36)" fg:x="4025" fg:w="2"/><text x="96.7728%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.05%)</title><rect x="96.5228%" y="885" width="0.0480%" height="15" fill="rgb(219,96,14)" fg:x="4025" fg:w="2"/><text x="96.7728%" y="895.50"></text></g><g><title>databend-query`hyper::proto::h2::client::conn_task::_{{closure}} (3 samples, 0.07%)</title><rect x="96.5228%" y="1061" width="0.0719%" height="15" fill="rgb(249,106,1)" fg:x="4025" fg:w="3"/><text x="96.7728%" y="1071.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="96.5228%" y="1045" width="0.0719%" height="15" fill="rgb(249,155,20)" fg:x="4025" fg:w="3"/><text x="96.7728%" y="1055.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="96.5228%" y="1029" width="0.0719%" height="15" fill="rgb(244,168,9)" fg:x="4025" fg:w="3"/><text x="96.7728%" y="1039.50"></text></g><g><title>databend-query`&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="96.5228%" y="1013" width="0.0719%" height="15" fill="rgb(216,23,50)" fg:x="4025" fg:w="3"/><text x="96.7728%" y="1023.50"></text></g><g><title>databend-query`h2::proto::connection::Connection&lt;T,P,B&gt;::poll (3 samples, 0.07%)</title><rect x="96.5228%" y="997" width="0.0719%" height="15" fill="rgb(224,219,20)" fg:x="4025" fg:w="3"/><text x="96.7728%" y="1007.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Streams&lt;B,P&gt;::poll_complete (3 samples, 0.07%)</title><rect x="96.5228%" y="981" width="0.0719%" height="15" fill="rgb(222,156,15)" fg:x="4025" fg:w="3"/><text x="96.7728%" y="991.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Inner::poll_complete (3 samples, 0.07%)</title><rect x="96.5228%" y="965" width="0.0719%" height="15" fill="rgb(231,97,17)" fg:x="4025" fg:w="3"/><text x="96.7728%" y="975.50"></text></g><g><title>databend-query`std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="96.5707%" y="949" width="0.0240%" height="15" fill="rgb(218,70,48)" fg:x="4027" fg:w="1"/><text x="96.8207%" y="959.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="96.5707%" y="933" width="0.0240%" height="15" fill="rgb(212,196,52)" fg:x="4027" fg:w="1"/><text x="96.8207%" y="943.50"></text></g><g><title>databend-query`poem::listener::AcceptorExt::boxed (1 samples, 0.02%)</title><rect x="96.5947%" y="1061" width="0.0240%" height="15" fill="rgb(243,203,18)" fg:x="4028" fg:w="1"/><text x="96.8447%" y="1071.50"></text></g><g><title>databend-query`&lt;common_pipeline_sources::async_source::AsyncSourcer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::async_process::_{{closure}} (1 samples, 0.02%)</title><rect x="96.6187%" y="901" width="0.0240%" height="15" fill="rgb(252,125,41)" fg:x="4029" fg:w="1"/><text x="96.8687%" y="911.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="96.6187%" y="885" width="0.0240%" height="15" fill="rgb(223,180,33)" fg:x="4029" fg:w="1"/><text x="96.8687%" y="895.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="96.6187%" y="869" width="0.0240%" height="15" fill="rgb(254,159,46)" fg:x="4029" fg:w="1"/><text x="96.8687%" y="879.50"></text></g><g><title>databend-query`&lt;common_storages_system::databases_table::DatabasesTable as common_storages_system::table::AsyncSystemTable&gt;::get_full_data::_{{closure}} (1 samples, 0.02%)</title><rect x="96.6187%" y="853" width="0.0240%" height="15" fill="rgb(254,38,10)" fg:x="4029" fg:w="1"/><text x="96.8687%" y="863.50"></text></g><g><title>databend-query`&lt;databend_query::databases::information_schema::information_schema_database::InformationSchemaDatabase as common_catalog::database::Database&gt;::name (1 samples, 0.02%)</title><rect x="96.6187%" y="837" width="0.0240%" height="15" fill="rgb(208,217,32)" fg:x="4029" fg:w="1"/><text x="96.8687%" y="847.50"></text></g><g><title>databend-query`&lt;common_base::runtime::runtime_tracker::TrackedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="96.6187%" y="1045" width="0.0719%" height="15" fill="rgb(221,120,13)" fg:x="4029" fg:w="3"/><text x="96.8687%" y="1055.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="96.6187%" y="1029" width="0.0719%" height="15" fill="rgb(246,54,52)" fg:x="4029" fg:w="3"/><text x="96.8687%" y="1039.50"></text></g><g><title>databend-query`common_base::runtime::catch_unwind::catch_unwind (3 samples, 0.07%)</title><rect x="96.6187%" y="1013" width="0.0719%" height="15" fill="rgb(242,34,25)" fg:x="4029" fg:w="3"/><text x="96.8687%" y="1023.50"></text></g><g><title>databend-query`std::panicking::try (3 samples, 0.07%)</title><rect x="96.6187%" y="997" width="0.0719%" height="15" fill="rgb(247,209,9)" fg:x="4029" fg:w="3"/><text x="96.8687%" y="1007.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask::create::_{{closure}} (3 samples, 0.07%)</title><rect x="96.6187%" y="981" width="0.0719%" height="15" fill="rgb(228,71,26)" fg:x="4029" fg:w="3"/><text x="96.8687%" y="991.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="96.6187%" y="965" width="0.0719%" height="15" fill="rgb(222,145,49)" fg:x="4029" fg:w="3"/><text x="96.8687%" y="975.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask::create::_{{closure}} (3 samples, 0.07%)</title><rect x="96.6187%" y="949" width="0.0719%" height="15" fill="rgb(218,121,17)" fg:x="4029" fg:w="3"/><text x="96.8687%" y="959.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="96.6187%" y="933" width="0.0719%" height="15" fill="rgb(244,50,7)" fg:x="4029" fg:w="3"/><text x="96.8687%" y="943.50"></text></g><g><title>databend-query`&lt;alloc::boxed::Box&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::async_process::_{{closure}} (3 samples, 0.07%)</title><rect x="96.6187%" y="917" width="0.0719%" height="15" fill="rgb(246,229,37)" fg:x="4029" fg:w="3"/><text x="96.8687%" y="927.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="96.6427%" y="901" width="0.0480%" height="15" fill="rgb(225,18,5)" fg:x="4030" fg:w="2"/><text x="96.8927%" y="911.50"></text></g><g><title>databend-query`&lt;common_base::future::TimingFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="96.6906%" y="1013" width="0.0240%" height="15" fill="rgb(213,204,8)" fg:x="4032" fg:w="1"/><text x="96.9406%" y="1023.50"></text></g><g><title>databend-query`&lt;tonic::service::interceptor::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="96.7146%" y="965" width="0.0240%" height="15" fill="rgb(238,103,6)" fg:x="4033" fg:w="1"/><text x="96.9646%" y="975.50"></text></g><g><title>databend-query`&lt;tonic::transport::channel::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="96.7146%" y="949" width="0.0240%" height="15" fill="rgb(222,25,35)" fg:x="4033" fg:w="1"/><text x="96.9646%" y="959.50"></text></g><g><title>databend-query`&lt;tower::buffer::future::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="96.7146%" y="933" width="0.0240%" height="15" fill="rgb(213,203,35)" fg:x="4033" fg:w="1"/><text x="96.9646%" y="943.50"></text></g><g><title>databend-query`&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="96.7146%" y="917" width="0.0240%" height="15" fill="rgb(221,79,53)" fg:x="4033" fg:w="1"/><text x="96.9646%" y="927.50"></text></g><g><title>databend-query`&lt;common_meta_client::grpc_client::MetaChannelManager as common_base::containers::pool::ItemManager&gt;::build::_{{closure}} (1 samples, 0.02%)</title><rect x="96.7386%" y="933" width="0.0240%" height="15" fill="rgb(243,200,35)" fg:x="4034" fg:w="1"/><text x="96.9886%" y="943.50"></text></g><g><title>databend-query`&lt;tower::util::ready::ReadyOneshot&lt;T,Request&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="96.7386%" y="917" width="0.0240%" height="15" fill="rgb(248,60,25)" fg:x="4034" fg:w="1"/><text x="96.9886%" y="927.50"></text></g><g><title>databend-query`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (1 samples, 0.02%)</title><rect x="96.7386%" y="901" width="0.0240%" height="15" fill="rgb(227,53,46)" fg:x="4034" fg:w="1"/><text x="96.9886%" y="911.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.02%)</title><rect x="96.7386%" y="885" width="0.0240%" height="15" fill="rgb(216,120,32)" fg:x="4034" fg:w="1"/><text x="96.9886%" y="895.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.02%)</title><rect x="96.7386%" y="869" width="0.0240%" height="15" fill="rgb(220,134,1)" fg:x="4034" fg:w="1"/><text x="96.9886%" y="879.50"></text></g><g><title>databend-query`&lt;http::uri::Uri as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="96.7386%" y="853" width="0.0240%" height="15" fill="rgb(237,168,5)" fg:x="4034" fg:w="1"/><text x="96.9886%" y="863.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::make_client::_{{closure}} (2 samples, 0.05%)</title><rect x="96.7386%" y="965" width="0.0480%" height="15" fill="rgb(231,100,33)" fg:x="4034" fg:w="2"/><text x="96.9886%" y="975.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::make_client::_{{closure}}::_{{closure}} (2 samples, 0.05%)</title><rect x="96.7386%" y="949" width="0.0480%" height="15" fill="rgb(236,177,47)" fg:x="4034" fg:w="2"/><text x="96.9886%" y="959.50"></text></g><g><title>databend-query`tonic::client::grpc::GrpcConfig::prepare_request (1 samples, 0.02%)</title><rect x="96.7626%" y="933" width="0.0240%" height="15" fill="rgb(235,7,49)" fg:x="4035" fg:w="1"/><text x="97.0126%" y="943.50"></text></g><g><title>databend-query`http::header::map::HeaderMap&lt;T&gt;::insert (1 samples, 0.02%)</title><rect x="96.7626%" y="917" width="0.0240%" height="15" fill="rgb(232,119,22)" fg:x="4035" fg:w="1"/><text x="97.0126%" y="927.50"></text></g><g><title>databend-query`http::header::map::hash_elem_using (1 samples, 0.02%)</title><rect x="96.7626%" y="901" width="0.0240%" height="15" fill="rgb(254,73,53)" fg:x="4035" fg:w="1"/><text x="97.0126%" y="911.50"></text></g><g><title>databend-query`&lt;common_base::future::TimingFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.10%)</title><rect x="96.7146%" y="981" width="0.0959%" height="15" fill="rgb(251,35,20)" fg:x="4033" fg:w="4"/><text x="96.9646%" y="991.50"></text></g><g><title>databend-query`tonic::client::grpc::Grpc&lt;T&gt;::create_response (1 samples, 0.02%)</title><rect x="96.7866%" y="965" width="0.0240%" height="15" fill="rgb(241,119,20)" fg:x="4036" fg:w="1"/><text x="97.0366%" y="975.50"></text></g><g><title>databend-query`tonic::codec::compression::CompressionEncoding::from_encoding_header (1 samples, 0.02%)</title><rect x="96.7866%" y="949" width="0.0240%" height="15" fill="rgb(207,102,14)" fg:x="4036" fg:w="1"/><text x="97.0366%" y="959.50"></text></g><g><title>databend-query`http::header::map::HeaderMap&lt;T&gt;::get2 (1 samples, 0.02%)</title><rect x="96.7866%" y="933" width="0.0240%" height="15" fill="rgb(248,201,50)" fg:x="4036" fg:w="1"/><text x="97.0366%" y="943.50"></text></g><g><title>databend-query`http::header::name::HdrName::from_bytes (1 samples, 0.02%)</title><rect x="96.7866%" y="917" width="0.0240%" height="15" fill="rgb(222,185,44)" fg:x="4036" fg:w="1"/><text x="97.0366%" y="927.50"></text></g><g><title>databend-query`http::header::map::hash_elem_using (1 samples, 0.02%)</title><rect x="96.7866%" y="901" width="0.0240%" height="15" fill="rgb(218,107,18)" fg:x="4036" fg:w="1"/><text x="97.0366%" y="911.50"></text></g><g><title>databend-query`&lt;common_base::future::TimingFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (5 samples, 0.12%)</title><rect x="96.7146%" y="997" width="0.1199%" height="15" fill="rgb(237,177,39)" fg:x="4033" fg:w="5"/><text x="96.9646%" y="1007.50"></text></g><g><title>databend-query`common_meta_api::reply::reply_to_api_result (1 samples, 0.02%)</title><rect x="96.8106%" y="981" width="0.0240%" height="15" fill="rgb(246,69,6)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="991.50"></text></g><g><title>databend-query`serde_json::de::from_trait (1 samples, 0.02%)</title><rect x="96.8106%" y="965" width="0.0240%" height="15" fill="rgb(234,208,37)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="975.50"></text></g><g><title>databend-query`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.02%)</title><rect x="96.8106%" y="949" width="0.0240%" height="15" fill="rgb(225,4,6)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="959.50"></text></g><g><title>databend-query`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect x="96.8106%" y="933" width="0.0240%" height="15" fill="rgb(233,45,0)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="943.50"></text></g><g><title>databend-query`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.02%)</title><rect x="96.8106%" y="917" width="0.0240%" height="15" fill="rgb(226,136,5)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="927.50"></text></g><g><title>databend-query`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect x="96.8106%" y="901" width="0.0240%" height="15" fill="rgb(211,91,47)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="911.50"></text></g><g><title>databend-query`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect x="96.8106%" y="885" width="0.0240%" height="15" fill="rgb(242,88,51)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="895.50"></text></g><g><title>databend-query`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.02%)</title><rect x="96.8106%" y="869" width="0.0240%" height="15" fill="rgb(230,91,28)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="879.50"></text></g><g><title>databend-query`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect x="96.8106%" y="853" width="0.0240%" height="15" fill="rgb(254,186,29)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="863.50"></text></g><g><title>databend-query`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.02%)</title><rect x="96.8106%" y="837" width="0.0240%" height="15" fill="rgb(238,6,4)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="847.50"></text></g><g><title>databend-query`serde_json::de::Deserializer&lt;R&gt;::deserialize_number (1 samples, 0.02%)</title><rect x="96.8106%" y="821" width="0.0240%" height="15" fill="rgb(221,151,16)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="831.50"></text></g><g><title>databend-query`serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.02%)</title><rect x="96.8106%" y="805" width="0.0240%" height="15" fill="rgb(251,143,52)" fg:x="4037" fg:w="1"/><text x="97.0606%" y="815.50"></text></g><g><title>databend-query`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.17%)</title><rect x="96.6906%" y="1029" width="0.1679%" height="15" fill="rgb(206,90,15)" fg:x="4032" fg:w="7"/><text x="96.9406%" y="1039.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::worker_loop::_{{closure}}::_{{closure}} (6 samples, 0.14%)</title><rect x="96.7146%" y="1013" width="0.1439%" height="15" fill="rgb(218,35,8)" fg:x="4033" fg:w="6"/><text x="96.9646%" y="1023.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::get_client_info::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="96.8345%" y="997" width="0.0240%" height="15" fill="rgb(239,215,6)" fg:x="4038" fg:w="1"/><text x="97.0845%" y="1007.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::make_client::_{{closure}} (1 samples, 0.02%)</title><rect x="96.8345%" y="981" width="0.0240%" height="15" fill="rgb(245,116,39)" fg:x="4038" fg:w="1"/><text x="97.0845%" y="991.50"></text></g><g><title>databend-query`&lt;common_base::runtime::runtime_tracker::UnlimitedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.19%)</title><rect x="96.6906%" y="1045" width="0.1918%" height="15" fill="rgb(242,65,28)" fg:x="4032" fg:w="8"/><text x="96.9406%" y="1055.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::worker_loop::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="96.8585%" y="1029" width="0.0240%" height="15" fill="rgb(252,132,53)" fg:x="4039" fg:w="1"/><text x="97.1085%" y="1039.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_join_probe (1 samples, 0.02%)</title><rect x="96.9065%" y="693" width="0.0240%" height="15" fill="rgb(224,159,50)" fg:x="4041" fg:w="1"/><text x="97.1565%" y="703.50"></text></g><g><title>databend-query`common_pipeline_core::pipeline::Pipeline::add_transform (1 samples, 0.02%)</title><rect x="96.9065%" y="677" width="0.0240%" height="15" fill="rgb(224,93,4)" fg:x="4041" fg:w="1"/><text x="97.1565%" y="687.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::transform_hash_join::TransformHashJoinProbe::create (1 samples, 0.02%)</title><rect x="96.9065%" y="661" width="0.0240%" height="15" fill="rgb(208,81,34)" fg:x="4041" fg:w="1"/><text x="97.1565%" y="671.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::probe_state::ProbeState::create (1 samples, 0.02%)</title><rect x="96.9065%" y="645" width="0.0240%" height="15" fill="rgb(233,92,54)" fg:x="4041" fg:w="1"/><text x="97.1565%" y="655.50"></text></g><g><title>databend-query`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="96.9065%" y="629" width="0.0240%" height="15" fill="rgb(237,21,14)" fg:x="4041" fg:w="1"/><text x="97.1565%" y="639.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="96.9065%" y="613" width="0.0240%" height="15" fill="rgb(249,128,51)" fg:x="4041" fg:w="1"/><text x="97.1565%" y="623.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_aggregate_final (2 samples, 0.05%)</title><rect x="96.9065%" y="757" width="0.0480%" height="15" fill="rgb(223,129,24)" fg:x="4041" fg:w="2"/><text x="97.1565%" y="767.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_aggregate_partial (2 samples, 0.05%)</title><rect x="96.9065%" y="741" width="0.0480%" height="15" fill="rgb(231,168,25)" fg:x="4041" fg:w="2"/><text x="97.1565%" y="751.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_eval_scalar (2 samples, 0.05%)</title><rect x="96.9065%" y="725" width="0.0480%" height="15" fill="rgb(224,39,20)" fg:x="4041" fg:w="2"/><text x="97.1565%" y="735.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (2 samples, 0.05%)</title><rect x="96.9065%" y="709" width="0.0480%" height="15" fill="rgb(225,152,53)" fg:x="4041" fg:w="2"/><text x="97.1565%" y="719.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::expand_build_side_pipeline (1 samples, 0.02%)</title><rect x="96.9305%" y="693" width="0.0240%" height="15" fill="rgb(252,17,24)" fg:x="4042" fg:w="1"/><text x="97.1805%" y="703.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (1 samples, 0.02%)</title><rect x="96.9305%" y="677" width="0.0240%" height="15" fill="rgb(250,114,30)" fg:x="4042" fg:w="1"/><text x="97.1805%" y="687.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="96.9305%" y="661" width="0.0240%" height="15" fill="rgb(229,5,4)" fg:x="4042" fg:w="1"/><text x="97.1805%" y="671.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_join_probe (1 samples, 0.02%)</title><rect x="96.9305%" y="645" width="0.0240%" height="15" fill="rgb(225,176,49)" fg:x="4042" fg:w="1"/><text x="97.1805%" y="655.50"></text></g><g><title>databend-query`common_pipeline_core::pipeline::Pipeline::add_transform (1 samples, 0.02%)</title><rect x="96.9305%" y="629" width="0.0240%" height="15" fill="rgb(224,221,49)" fg:x="4042" fg:w="1"/><text x="97.1805%" y="639.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::transform_hash_join::TransformHashJoinProbe::create (1 samples, 0.02%)</title><rect x="96.9305%" y="613" width="0.0240%" height="15" fill="rgb(253,169,27)" fg:x="4042" fg:w="1"/><text x="97.1805%" y="623.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::probe_state::ProbeState::create (1 samples, 0.02%)</title><rect x="96.9305%" y="597" width="0.0240%" height="15" fill="rgb(211,206,16)" fg:x="4042" fg:w="1"/><text x="97.1805%" y="607.50"></text></g><g><title>databend-query`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="96.9305%" y="581" width="0.0240%" height="15" fill="rgb(244,87,35)" fg:x="4042" fg:w="1"/><text x="97.1805%" y="591.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="96.9305%" y="565" width="0.0240%" height="15" fill="rgb(246,28,10)" fg:x="4042" fg:w="1"/><text x="97.1805%" y="575.50"></text></g><g><title>databend-query`common_pipeline_core::pipeline::Pipeline::add_transform (1 samples, 0.02%)</title><rect x="96.9544%" y="709" width="0.0240%" height="15" fill="rgb(229,12,44)" fg:x="4043" fg:w="1"/><text x="97.2044%" y="719.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::transform_limit::TransformLimit::try_create (1 samples, 0.02%)</title><rect x="96.9544%" y="693" width="0.0240%" height="15" fill="rgb(210,145,37)" fg:x="4043" fg:w="1"/><text x="97.2044%" y="703.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_join_probe (1 samples, 0.02%)</title><rect x="96.9784%" y="645" width="0.0240%" height="15" fill="rgb(227,112,52)" fg:x="4044" fg:w="1"/><text x="97.2284%" y="655.50"></text></g><g><title>databend-query`common_pipeline_core::pipeline::Pipeline::add_transform (1 samples, 0.02%)</title><rect x="96.9784%" y="629" width="0.0240%" height="15" fill="rgb(238,155,34)" fg:x="4044" fg:w="1"/><text x="97.2284%" y="639.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::transform_hash_join::TransformHashJoinProbe::create (1 samples, 0.02%)</title><rect x="96.9784%" y="613" width="0.0240%" height="15" fill="rgb(239,226,36)" fg:x="4044" fg:w="1"/><text x="97.2284%" y="623.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::probe_state::ProbeState::create (1 samples, 0.02%)</title><rect x="96.9784%" y="597" width="0.0240%" height="15" fill="rgb(230,16,23)" fg:x="4044" fg:w="1"/><text x="97.2284%" y="607.50"></text></g><g><title>databend-query`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="96.9784%" y="581" width="0.0240%" height="15" fill="rgb(236,171,36)" fg:x="4044" fg:w="1"/><text x="97.2284%" y="591.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="96.9784%" y="565" width="0.0240%" height="15" fill="rgb(221,22,14)" fg:x="4044" fg:w="1"/><text x="97.2284%" y="575.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::expand_build_side_pipeline (1 samples, 0.02%)</title><rect x="97.0024%" y="645" width="0.0240%" height="15" fill="rgb(242,43,11)" fg:x="4045" fg:w="1"/><text x="97.2524%" y="655.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (1 samples, 0.02%)</title><rect x="97.0024%" y="629" width="0.0240%" height="15" fill="rgb(232,69,23)" fg:x="4045" fg:w="1"/><text x="97.2524%" y="639.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="97.0024%" y="613" width="0.0240%" height="15" fill="rgb(216,180,54)" fg:x="4045" fg:w="1"/><text x="97.2524%" y="623.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_join_probe (1 samples, 0.02%)</title><rect x="97.0024%" y="597" width="0.0240%" height="15" fill="rgb(216,5,24)" fg:x="4045" fg:w="1"/><text x="97.2524%" y="607.50"></text></g><g><title>databend-query`common_pipeline_core::pipeline::Pipeline::add_transform (1 samples, 0.02%)</title><rect x="97.0024%" y="581" width="0.0240%" height="15" fill="rgb(225,89,9)" fg:x="4045" fg:w="1"/><text x="97.2524%" y="591.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::transform_hash_join::TransformHashJoinProbe::create (1 samples, 0.02%)</title><rect x="97.0024%" y="565" width="0.0240%" height="15" fill="rgb(243,75,33)" fg:x="4045" fg:w="1"/><text x="97.2524%" y="575.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::probe_state::ProbeState::create (1 samples, 0.02%)</title><rect x="97.0024%" y="549" width="0.0240%" height="15" fill="rgb(247,141,45)" fg:x="4045" fg:w="1"/><text x="97.2524%" y="559.50"></text></g><g><title>databend-query`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="97.0024%" y="533" width="0.0240%" height="15" fill="rgb(232,177,36)" fg:x="4045" fg:w="1"/><text x="97.2524%" y="543.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="97.0024%" y="517" width="0.0240%" height="15" fill="rgb(219,125,36)" fg:x="4045" fg:w="1"/><text x="97.2524%" y="527.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_eval_scalar (6 samples, 0.14%)</title><rect x="96.9065%" y="789" width="0.1439%" height="15" fill="rgb(227,94,9)" fg:x="4041" fg:w="6"/><text x="97.1565%" y="799.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_range_join (6 samples, 0.14%)</title><rect x="96.9065%" y="773" width="0.1439%" height="15" fill="rgb(240,34,52)" fg:x="4041" fg:w="6"/><text x="97.1565%" y="783.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (4 samples, 0.10%)</title><rect x="96.9544%" y="757" width="0.0959%" height="15" fill="rgb(216,45,12)" fg:x="4043" fg:w="4"/><text x="97.2044%" y="767.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_eval_scalar (4 samples, 0.10%)</title><rect x="96.9544%" y="741" width="0.0959%" height="15" fill="rgb(246,21,19)" fg:x="4043" fg:w="4"/><text x="97.2044%" y="751.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (4 samples, 0.10%)</title><rect x="96.9544%" y="725" width="0.0959%" height="15" fill="rgb(213,98,42)" fg:x="4043" fg:w="4"/><text x="97.2044%" y="735.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_aggregate_final (3 samples, 0.07%)</title><rect x="96.9784%" y="709" width="0.0719%" height="15" fill="rgb(250,136,47)" fg:x="4044" fg:w="3"/><text x="97.2284%" y="719.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_aggregate_partial (3 samples, 0.07%)</title><rect x="96.9784%" y="693" width="0.0719%" height="15" fill="rgb(251,124,27)" fg:x="4044" fg:w="3"/><text x="97.2284%" y="703.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_eval_scalar (3 samples, 0.07%)</title><rect x="96.9784%" y="677" width="0.0719%" height="15" fill="rgb(229,180,14)" fg:x="4044" fg:w="3"/><text x="97.2284%" y="687.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (3 samples, 0.07%)</title><rect x="96.9784%" y="661" width="0.0719%" height="15" fill="rgb(245,216,25)" fg:x="4044" fg:w="3"/><text x="97.2284%" y="671.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::join_hash_table::JoinHashTable::create_join_state (1 samples, 0.02%)</title><rect x="97.0264%" y="645" width="0.0240%" height="15" fill="rgb(251,43,5)" fg:x="4046" fg:w="1"/><text x="97.2764%" y="655.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::join_hash_table::JoinHashTable::try_create (1 samples, 0.02%)</title><rect x="97.0264%" y="629" width="0.0240%" height="15" fill="rgb(250,128,24)" fg:x="4046" fg:w="1"/><text x="97.2764%" y="639.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_settings (1 samples, 0.02%)</title><rect x="97.0264%" y="613" width="0.0240%" height="15" fill="rgb(217,117,27)" fg:x="4046" fg:w="1"/><text x="97.2764%" y="623.50"></text></g><g><title>databend-query`common_settings::settings::Settings::get_changes (1 samples, 0.02%)</title><rect x="97.0264%" y="597" width="0.0240%" height="15" fill="rgb(245,147,4)" fg:x="4046" fg:w="1"/><text x="97.2764%" y="607.50"></text></g><g><title>databend-query`&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="97.0264%" y="581" width="0.0240%" height="15" fill="rgb(242,201,35)" fg:x="4046" fg:w="1"/><text x="97.2764%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="97.0264%" y="565" width="0.0240%" height="15" fill="rgb(218,181,1)" fg:x="4046" fg:w="1"/><text x="97.2764%" y="575.50"></text></g><g><title>databend-query`&lt;databend_query::interpreters::interpreter_select::SelectInterpreter as databend_query::interpreters::interpreter::Interpreter&gt;::execute2::_{{closure}} (7 samples, 0.17%)</title><rect x="96.9065%" y="997" width="0.1679%" height="15" fill="rgb(222,6,29)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="1007.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.17%)</title><rect x="96.9065%" y="981" width="0.1679%" height="15" fill="rgb(208,186,3)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="991.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_select::SelectInterpreter::build_pipeline::_{{closure}} (7 samples, 0.17%)</title><rect x="96.9065%" y="965" width="0.1679%" height="15" fill="rgb(216,36,26)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="975.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.17%)</title><rect x="96.9065%" y="949" width="0.1679%" height="15" fill="rgb(248,201,23)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="959.50"></text></g><g><title>databend-query`databend_query::schedulers::scheduler::build_query_pipeline::_{{closure}} (7 samples, 0.17%)</title><rect x="96.9065%" y="933" width="0.1679%" height="15" fill="rgb(251,170,31)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.17%)</title><rect x="96.9065%" y="917" width="0.1679%" height="15" fill="rgb(207,110,25)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="927.50"></text></g><g><title>databend-query`databend_query::schedulers::scheduler::build_query_pipeline_without_render_result_set::_{{closure}} (7 samples, 0.17%)</title><rect x="96.9065%" y="901" width="0.1679%" height="15" fill="rgb(250,54,15)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="911.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.17%)</title><rect x="96.9065%" y="885" width="0.1679%" height="15" fill="rgb(227,68,33)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="895.50"></text></g><g><title>databend-query`databend_query::schedulers::scheduler::build_local_pipeline::_{{closure}} (7 samples, 0.17%)</title><rect x="96.9065%" y="869" width="0.1679%" height="15" fill="rgb(238,34,41)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="879.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.17%)</title><rect x="96.9065%" y="853" width="0.1679%" height="15" fill="rgb(220,11,15)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="863.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (7 samples, 0.17%)</title><rect x="96.9065%" y="837" width="0.1679%" height="15" fill="rgb(246,111,35)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="847.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_eval_scalar (7 samples, 0.17%)</title><rect x="96.9065%" y="821" width="0.1679%" height="15" fill="rgb(209,88,53)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="831.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (7 samples, 0.17%)</title><rect x="96.9065%" y="805" width="0.1679%" height="15" fill="rgb(231,185,47)" fg:x="4041" fg:w="7"/><text x="97.1565%" y="815.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="97.0504%" y="789" width="0.0240%" height="15" fill="rgb(233,154,1)" fg:x="4047" fg:w="1"/><text x="97.3004%" y="799.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="97.0504%" y="773" width="0.0240%" height="15" fill="rgb(225,15,46)" fg:x="4047" fg:w="1"/><text x="97.3004%" y="783.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::set_partitions (1 samples, 0.02%)</title><rect x="97.0504%" y="757" width="0.0240%" height="15" fill="rgb(211,135,41)" fg:x="4047" fg:w="1"/><text x="97.3004%" y="767.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.02%)</title><rect x="97.0504%" y="741" width="0.0240%" height="15" fill="rgb(208,54,0)" fg:x="4047" fg:w="1"/><text x="97.3004%" y="751.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="97.0504%" y="725" width="0.0240%" height="15" fill="rgb(244,136,14)" fg:x="4047" fg:w="1"/><text x="97.3004%" y="735.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter::log_query_start (1 samples, 0.02%)</title><rect x="97.0743%" y="997" width="0.0240%" height="15" fill="rgb(241,56,14)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="1007.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_query_log::InterpreterQueryLog::log_start (1 samples, 0.02%)</title><rect x="97.0743%" y="981" width="0.0240%" height="15" fill="rgb(205,80,24)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="991.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_query_log::InterpreterQueryLog::write_log (1 samples, 0.02%)</title><rect x="97.0743%" y="965" width="0.0240%" height="15" fill="rgb(220,57,4)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="975.50"></text></g><g><title>databend-query`tracing::subscriber::with_default (1 samples, 0.02%)</title><rect x="97.0743%" y="949" width="0.0240%" height="15" fill="rgb(226,193,50)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="959.50"></text></g><g><title>databend-query`tracing_core::dispatcher::with_default (1 samples, 0.02%)</title><rect x="97.0743%" y="933" width="0.0240%" height="15" fill="rgb(231,168,22)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="943.50"></text></g><g><title>databend-query`tracing_core::dispatcher::get_default (1 samples, 0.02%)</title><rect x="97.0743%" y="917" width="0.0240%" height="15" fill="rgb(254,215,14)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="927.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.02%)</title><rect x="97.0743%" y="901" width="0.0240%" height="15" fill="rgb(211,115,16)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="911.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.0743%" y="885" width="0.0240%" height="15" fill="rgb(236,210,16)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="895.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Compact,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (1 samples, 0.02%)</title><rect x="97.0743%" y="869" width="0.0240%" height="15" fill="rgb(221,94,12)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="879.50"></text></g><g><title>databend-query`&lt;&amp;mut W as core::fmt::Write&gt;::write_fmt (1 samples, 0.02%)</title><rect x="97.0743%" y="853" width="0.0240%" height="15" fill="rgb(235,218,49)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="863.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.02%)</title><rect x="97.0743%" y="837" width="0.0240%" height="15" fill="rgb(217,114,14)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="847.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::fmt::format::FmtCtx&lt;S,N&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="97.0743%" y="821" width="0.0240%" height="15" fill="rgb(216,145,22)" fg:x="4048" fg:w="1"/><text x="97.3243%" y="831.50"></text></g><g><title>databend-query`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.24%)</title><rect x="96.8825%" y="1045" width="0.2398%" height="15" fill="rgb(217,112,39)" fg:x="4040" fg:w="10"/><text x="97.1325%" y="1055.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter::Interpreter::execute::_{{closure}} (9 samples, 0.22%)</title><rect x="96.9065%" y="1029" width="0.2158%" height="15" fill="rgb(225,85,32)" fg:x="4041" fg:w="9"/><text x="97.1565%" y="1039.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.22%)</title><rect x="96.9065%" y="1013" width="0.2158%" height="15" fill="rgb(245,209,47)" fg:x="4041" fg:w="9"/><text x="97.1565%" y="1023.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_pulling_executor::PipelinePullingExecutor::from_pipelines (1 samples, 0.02%)</title><rect x="97.0983%" y="997" width="0.0240%" height="15" fill="rgb(218,220,15)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="1007.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::from_pipelines (1 samples, 0.02%)</title><rect x="97.0983%" y="981" width="0.0240%" height="15" fill="rgb(222,202,31)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="991.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::RunningGraph::from_pipelines (1 samples, 0.02%)</title><rect x="97.0983%" y="965" width="0.0240%" height="15" fill="rgb(243,203,4)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="975.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ExecutingGraph::init_graph (1 samples, 0.02%)</title><rect x="97.0983%" y="949" width="0.0240%" height="15" fill="rgb(237,92,17)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="959.50"></text></g><g><title>databend-query`common_pipeline_core::processors::port_trigger::UpdateList::create_trigger (1 samples, 0.02%)</title><rect x="97.0983%" y="933" width="0.0240%" height="15" fill="rgb(231,119,7)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="943.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="97.0983%" y="917" width="0.0240%" height="15" fill="rgb(237,82,41)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="927.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="97.0983%" y="901" width="0.0240%" height="15" fill="rgb(226,81,48)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="911.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="97.0983%" y="885" width="0.0240%" height="15" fill="rgb(234,70,51)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="895.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="97.0983%" y="869" width="0.0240%" height="15" fill="rgb(251,86,4)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="879.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="97.0983%" y="853" width="0.0240%" height="15" fill="rgb(244,144,28)" fg:x="4049" fg:w="1"/><text x="97.3483%" y="863.50"></text></g><g><title>databend-query`common_storages_fuse::pruning::block_pruner::BlockPruner::block_pruning_sync (1 samples, 0.02%)</title><rect x="97.1223%" y="1013" width="0.0240%" height="15" fill="rgb(232,161,39)" fg:x="4050" fg:w="1"/><text x="97.3723%" y="1023.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="97.1223%" y="997" width="0.0240%" height="15" fill="rgb(247,34,51)" fg:x="4050" fg:w="1"/><text x="97.3723%" y="1007.50"></text></g><g><title>databend-query`common_storages_fuse::pruning::block_pruner::BlockPruner::pruning::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1223%" y="1045" width="0.0480%" height="15" fill="rgb(225,132,2)" fg:x="4050" fg:w="2"/><text x="97.3723%" y="1055.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="97.1223%" y="1029" width="0.0480%" height="15" fill="rgb(209,159,44)" fg:x="4050" fg:w="2"/><text x="97.3723%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="97.1463%" y="1013" width="0.0240%" height="15" fill="rgb(251,214,1)" fg:x="4051" fg:w="1"/><text x="97.3963%" y="1023.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_session::MySQLConnection::run_on_stream (1 samples, 0.02%)</title><rect x="97.1703%" y="1045" width="0.0240%" height="15" fill="rgb(247,84,47)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="1055.50"></text></g><g><title>databend-query`common_base::runtime::runtime::Runtime::with_worker_threads (1 samples, 0.02%)</title><rect x="97.1703%" y="1029" width="0.0240%" height="15" fill="rgb(240,111,43)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="1039.50"></text></g><g><title>databend-query`common_base::runtime::runtime::Runtime::create (1 samples, 0.02%)</title><rect x="97.1703%" y="1013" width="0.0240%" height="15" fill="rgb(215,214,35)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="1023.50"></text></g><g><title>databend-query`tokio::runtime::builder::Builder::build (1 samples, 0.02%)</title><rect x="97.1703%" y="997" width="0.0240%" height="15" fill="rgb(248,207,23)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="1007.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Launch::launch (1 samples, 0.02%)</title><rect x="97.1703%" y="981" width="0.0240%" height="15" fill="rgb(214,186,4)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="991.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.02%)</title><rect x="97.1703%" y="965" width="0.0240%" height="15" fill="rgb(220,133,22)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="975.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.02%)</title><rect x="97.1703%" y="949" width="0.0240%" height="15" fill="rgb(239,134,19)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="959.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (1 samples, 0.02%)</title><rect x="97.1703%" y="933" width="0.0240%" height="15" fill="rgb(250,140,9)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="943.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.02%)</title><rect x="97.1703%" y="917" width="0.0240%" height="15" fill="rgb(225,59,14)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="927.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="97.1703%" y="901" width="0.0240%" height="15" fill="rgb(214,152,51)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="911.50"></text></g><g><title>databend-query`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="97.1703%" y="885" width="0.0240%" height="15" fill="rgb(251,227,43)" fg:x="4052" fg:w="1"/><text x="97.4203%" y="895.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="97.1942%" y="837" width="0.0240%" height="15" fill="rgb(241,96,17)" fg:x="4053" fg:w="1"/><text x="97.4442%" y="847.50"></text></g><g><title>databend-query`opendal::types::operator::operator::Operator::list::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="1045" width="0.0480%" height="15" fill="rgb(234,198,43)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="1055.50"></text></g><g><title>databend-query`&lt;opendal::types::operator::operator_futures::OperatorFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="97.1942%" y="1029" width="0.0480%" height="15" fill="rgb(220,108,29)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="1039.50"></text></g><g><title>databend-query`opendal::types::operator::operator::Operator::list_with::_{{closure}}::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="1013" width="0.0480%" height="15" fill="rgb(226,163,33)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="1023.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::list::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="997" width="0.0480%" height="15" fill="rgb(205,194,45)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="1007.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="981" width="0.0480%" height="15" fill="rgb(206,143,44)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="991.50"></text></g><g><title>databend-query`&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="965" width="0.0480%" height="15" fill="rgb(236,136,36)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="975.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="949" width="0.0480%" height="15" fill="rgb(249,172,42)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="959.50"></text></g><g><title>databend-query`&lt;opendal::layers::tracing::TracingAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="933" width="0.0480%" height="15" fill="rgb(216,139,23)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="943.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="97.1942%" y="917" width="0.0480%" height="15" fill="rgb(207,166,20)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="927.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="901" width="0.0480%" height="15" fill="rgb(210,209,22)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="911.50"></text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="885" width="0.0480%" height="15" fill="rgb(232,118,20)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="895.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="97.1942%" y="869" width="0.0480%" height="15" fill="rgb(238,113,42)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="879.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (2 samples, 0.05%)</title><rect x="97.1942%" y="853" width="0.0480%" height="15" fill="rgb(231,42,5)" fg:x="4053" fg:w="2"/><text x="97.4442%" y="863.50"></text></g><g><title>databend-query`&lt;opendal::layers::metrics::MetricsAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (1 samples, 0.02%)</title><rect x="97.2182%" y="837" width="0.0240%" height="15" fill="rgb(243,166,24)" fg:x="4054" fg:w="1"/><text x="97.4682%" y="847.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="97.2182%" y="821" width="0.0240%" height="15" fill="rgb(237,226,12)" fg:x="4054" fg:w="1"/><text x="97.4682%" y="831.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="97.2182%" y="805" width="0.0240%" height="15" fill="rgb(229,133,24)" fg:x="4054" fg:w="1"/><text x="97.4682%" y="815.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (1 samples, 0.02%)</title><rect x="97.2182%" y="789" width="0.0240%" height="15" fill="rgb(238,33,43)" fg:x="4054" fg:w="1"/><text x="97.4682%" y="799.50"></text></g><g><title>databend-query`core::ptr::drop_in_place$LT$futures_util..future..future..Map$LT$backon..retry..Retry$LT$backon..exponential..ExponentialBackoff$C$$LP$opendal..raw..rps..RpWrite$C$opendal..layers..timeout..TimeoutWrapper$LT$opendal..layers..complete..CompleteWriter$LT$opendal..layers..error_context..ErrorContextWrapper$LT$opendal..services..s3..writer..S3Writer$GT$$GT$$GT$$RP$$C$opendal..types..error..Error$C$core..pin..Pin$LT$alloc..boxed..Box$LT$dyn$u20$core..future..future..Future$u2b$Output$u20$$u3d$$u20$core..result..Result$LT$$LP$opendal..raw..rps..RpWrite$C$opendal..layers..timeout..TimeoutWrapper$LT$opendal..layers..complete..CompleteWriter$LT$opendal..layers..error_context..ErrorContextWrapper$LT$opendal..services..s3..writer..S3Writer$GT$$GT$$GT$$RP$$C$opendal..types..error..Error$GT$$u2b$core..marker..Send$GT$$GT$$C$$LT$opendal..layers..retry..RetryAccessor$LT$opendal..layers..timeout..TimeoutAccessor$LT$common_storage..runtime_layer..RuntimeAccessor$LT$opendal..layers..complete..CompleteReaderAccessor$LT$opendal.&gt; (1 samples, 0.02%)</title><rect x="97.2182%" y="773" width="0.0240%" height="15" fill="rgb(227,59,38)" fg:x="4054" fg:w="1"/><text x="97.4682%" y="783.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker&lt;W&gt; as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::authenticate::_{{closure}} (1 samples, 0.02%)</title><rect x="97.2662%" y="1029" width="0.0240%" height="15" fill="rgb(230,97,0)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="1039.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.2662%" y="1013" width="0.0240%" height="15" fill="rgb(250,173,50)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="1023.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.2662%" y="997" width="0.0240%" height="15" fill="rgb(240,15,50)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="1007.50"></text></g><g><title>databend-query`databend_query::sessions::session::Session::set_authed_user::_{{closure}} (1 samples, 0.02%)</title><rect x="97.2662%" y="981" width="0.0240%" height="15" fill="rgb(221,93,22)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="991.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.2662%" y="965" width="0.0240%" height="15" fill="rgb(245,180,53)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="975.50"></text></g><g><title>databend-query`databend_query::sessions::session::Session::ensure_current_role::_{{closure}} (1 samples, 0.02%)</title><rect x="97.2662%" y="949" width="0.0240%" height="15" fill="rgb(231,88,51)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="959.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.2662%" y="933" width="0.0240%" height="15" fill="rgb(240,58,21)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="943.50"></text></g><g><title>databend-query`databend_query::sessions::session::Session::validate_available_role::_{{closure}} (1 samples, 0.02%)</title><rect x="97.2662%" y="917" width="0.0240%" height="15" fill="rgb(237,21,10)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="927.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.2662%" y="901" width="0.0240%" height="15" fill="rgb(218,43,11)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="911.50"></text></g><g><title>databend-query`databend_query::sessions::session::Session::get_all_available_roles::_{{closure}} (1 samples, 0.02%)</title><rect x="97.2662%" y="885" width="0.0240%" height="15" fill="rgb(218,221,29)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="895.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.2662%" y="869" width="0.0240%" height="15" fill="rgb(214,118,42)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="879.50"></text></g><g><title>databend-query`common_users::role_cache_mgr::RoleCacheManager::find_related_roles::_{{closure}} (1 samples, 0.02%)</title><rect x="97.2662%" y="853" width="0.0240%" height="15" fill="rgb(251,200,26)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="863.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.2662%" y="837" width="0.0240%" height="15" fill="rgb(237,101,39)" fg:x="4056" fg:w="1"/><text x="97.5162%" y="847.50"></text></g><g><title>databend-query`common_ast::parser::parser::parse_sql (1 samples, 0.02%)</title><rect x="97.2902%" y="917" width="0.0240%" height="15" fill="rgb(251,117,11)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="927.50"></text></g><g><title>databend-query`common_ast::parser::statement::statement (1 samples, 0.02%)</title><rect x="97.2902%" y="901" width="0.0240%" height="15" fill="rgb(216,223,23)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="911.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.2902%" y="885" width="0.0240%" height="15" fill="rgb(251,54,12)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="895.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="97.2902%" y="869" width="0.0240%" height="15" fill="rgb(254,176,54)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="879.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="97.2902%" y="853" width="0.0240%" height="15" fill="rgb(210,32,8)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="863.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.2902%" y="837" width="0.0240%" height="15" fill="rgb(235,52,38)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="847.50"></text></g><g><title>databend-query`common_ast::parser::query::query (1 samples, 0.02%)</title><rect x="97.2902%" y="821" width="0.0240%" height="15" fill="rgb(231,4,44)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="831.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.2902%" y="805" width="0.0240%" height="15" fill="rgb(249,2,32)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="815.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation (1 samples, 0.02%)</title><rect x="97.2902%" y="789" width="0.0240%" height="15" fill="rgb(224,65,26)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="799.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation_element (1 samples, 0.02%)</title><rect x="97.2902%" y="773" width="0.0240%" height="15" fill="rgb(250,73,40)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="783.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="97.2902%" y="757" width="0.0240%" height="15" fill="rgb(253,177,16)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="767.50"></text></g><g><title>databend-query`&lt;common_ast::error::Error as nom::error::ParseError&lt;common_ast::input::Input&gt;&gt;::or (1 samples, 0.02%)</title><rect x="97.2902%" y="741" width="0.0240%" height="15" fill="rgb(217,32,34)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="751.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="97.2902%" y="725" width="0.0240%" height="15" fill="rgb(212,7,10)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="735.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="97.2902%" y="709" width="0.0240%" height="15" fill="rgb(245,89,8)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="719.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="97.2902%" y="693" width="0.0240%" height="15" fill="rgb(237,16,53)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="703.50"></text></g><g><title>databend-query`__rust_realloc (1 samples, 0.02%)</title><rect x="97.2902%" y="677" width="0.0240%" height="15" fill="rgb(250,204,30)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="687.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="97.2902%" y="661" width="0.0240%" height="15" fill="rgb(208,77,27)" fg:x="4057" fg:w="1"/><text x="97.5402%" y="671.50"></text></g><g><title>databend-query`common_sql::planner::planner::Planner::plan_sql::_{{closure}} (2 samples, 0.05%)</title><rect x="97.2902%" y="949" width="0.0480%" height="15" fill="rgb(250,204,28)" fg:x="4057" fg:w="2"/><text x="97.5402%" y="959.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="97.2902%" y="933" width="0.0480%" height="15" fill="rgb(244,63,21)" fg:x="4057" fg:w="2"/><text x="97.5402%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.3141%" y="917" width="0.0240%" height="15" fill="rgb(236,85,44)" fg:x="4058" fg:w="1"/><text x="97.5641%" y="927.50"></text></g><g><title>databend-query`common_sql::planner::binder::bind_context::BindContext::new (1 samples, 0.02%)</title><rect x="97.3141%" y="901" width="0.0240%" height="15" fill="rgb(215,98,4)" fg:x="4058" fg:w="1"/><text x="97.5641%" y="911.50"></text></g><g><title>databend-query`dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher_and_shard_amount (1 samples, 0.02%)</title><rect x="97.3141%" y="885" width="0.0240%" height="15" fill="rgb(235,38,11)" fg:x="4058" fg:w="1"/><text x="97.5641%" y="895.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="97.3141%" y="869" width="0.0240%" height="15" fill="rgb(254,186,25)" fg:x="4058" fg:w="1"/><text x="97.5641%" y="879.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="97.3141%" y="853" width="0.0240%" height="15" fill="rgb(225,55,31)" fg:x="4058" fg:w="1"/><text x="97.5641%" y="863.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker&lt;W&gt; as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::on_init::_{{closure}} (3 samples, 0.07%)</title><rect x="97.2902%" y="1029" width="0.0719%" height="15" fill="rgb(211,15,21)" fg:x="4057" fg:w="3"/><text x="97.5402%" y="1039.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.07%)</title><rect x="97.2902%" y="1013" width="0.0719%" height="15" fill="rgb(215,187,41)" fg:x="4057" fg:w="3"/><text x="97.5402%" y="1023.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.07%)</title><rect x="97.2902%" y="997" width="0.0719%" height="15" fill="rgb(248,69,32)" fg:x="4057" fg:w="3"/><text x="97.5402%" y="1007.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase&lt;W&gt;::do_query::_{{closure}} (3 samples, 0.07%)</title><rect x="97.2902%" y="981" width="0.0719%" height="15" fill="rgb(252,102,52)" fg:x="4057" fg:w="3"/><text x="97.5402%" y="991.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.07%)</title><rect x="97.2902%" y="965" width="0.0719%" height="15" fill="rgb(253,140,32)" fg:x="4057" fg:w="3"/><text x="97.5402%" y="975.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.3381%" y="949" width="0.0240%" height="15" fill="rgb(216,56,42)" fg:x="4059" fg:w="1"/><text x="97.5881%" y="959.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_base::runtime::runtime::TrySpawn&gt;::try_spawn (1 samples, 0.02%)</title><rect x="97.3381%" y="933" width="0.0240%" height="15" fill="rgb(216,184,14)" fg:x="4059" fg:w="1"/><text x="97.5881%" y="943.50"></text></g><g><title>databend-query`databend_query::sessions::query_ctx_shared::QueryContextShared::try_get_runtime (1 samples, 0.02%)</title><rect x="97.3381%" y="917" width="0.0240%" height="15" fill="rgb(237,187,27)" fg:x="4059" fg:w="1"/><text x="97.5881%" y="927.50"></text></g><g><title>databend-query`common_base::runtime::runtime::Runtime::with_worker_threads (1 samples, 0.02%)</title><rect x="97.3381%" y="901" width="0.0240%" height="15" fill="rgb(219,65,3)" fg:x="4059" fg:w="1"/><text x="97.5881%" y="911.50"></text></g><g><title>databend-query`common_base::runtime::runtime::Runtime::create (1 samples, 0.02%)</title><rect x="97.3381%" y="885" width="0.0240%" height="15" fill="rgb(245,83,25)" fg:x="4059" fg:w="1"/><text x="97.5881%" y="895.50"></text></g><g><title>databend-query`tokio::runtime::builder::Builder::build (1 samples, 0.02%)</title><rect x="97.3381%" y="869" width="0.0240%" height="15" fill="rgb(214,205,45)" fg:x="4059" fg:w="1"/><text x="97.5881%" y="879.50"></text></g><g><title>databend-query`tokio::runtime::driver::Driver::new (1 samples, 0.02%)</title><rect x="97.3381%" y="853" width="0.0240%" height="15" fill="rgb(241,20,18)" fg:x="4059" fg:w="1"/><text x="97.5881%" y="863.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="97.3381%" y="837" width="0.0240%" height="15" fill="rgb(232,163,23)" fg:x="4059" fg:w="1"/><text x="97.5881%" y="847.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::cascades::cascade::CascadesOptimizer::optimize (1 samples, 0.02%)</title><rect x="97.3621%" y="901" width="0.0240%" height="15" fill="rgb(214,5,46)" fg:x="4060" fg:w="1"/><text x="97.6121%" y="911.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::memo::Memo::init (1 samples, 0.02%)</title><rect x="97.3621%" y="885" width="0.0240%" height="15" fill="rgb(229,78,17)" fg:x="4060" fg:w="1"/><text x="97.6121%" y="895.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::memo::Memo::insert (1 samples, 0.02%)</title><rect x="97.3621%" y="869" width="0.0240%" height="15" fill="rgb(248,89,10)" fg:x="4060" fg:w="1"/><text x="97.6121%" y="879.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::memo::Memo::insert (1 samples, 0.02%)</title><rect x="97.3621%" y="853" width="0.0240%" height="15" fill="rgb(248,54,15)" fg:x="4060" fg:w="1"/><text x="97.6121%" y="863.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::memo::Memo::insert (1 samples, 0.02%)</title><rect x="97.3621%" y="837" width="0.0240%" height="15" fill="rgb(223,116,6)" fg:x="4060" fg:w="1"/><text x="97.6121%" y="847.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="97.3621%" y="821" width="0.0240%" height="15" fill="rgb(205,125,38)" fg:x="4060" fg:w="1"/><text x="97.6121%" y="831.50"></text></g><g><title>databend-query`&lt;common_sql::planner::optimizer::rule::rewrite::rule_push_down_limit_aggregate::RulePushDownLimitAggregate as common_sql::planner::optimizer::rule::rule::Rule&gt;::apply (1 samples, 0.02%)</title><rect x="97.3861%" y="757" width="0.0240%" height="15" fill="rgb(251,78,38)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="767.50"></text></g><g><title>databend-query`&lt;common_sql::planner::plans::operator::RelOperator as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.3861%" y="741" width="0.0240%" height="15" fill="rgb(253,78,28)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="751.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.3861%" y="725" width="0.0240%" height="15" fill="rgb(209,120,3)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="735.50"></text></g><g><title>databend-query`&lt;common_sql::planner::plans::scalar_expr::ScalarExpr as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.3861%" y="709" width="0.0240%" height="15" fill="rgb(238,229,9)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="719.50"></text></g><g><title>databend-query`&lt;common_sql::planner::plans::scalar_expr::AggregateFunction as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.3861%" y="693" width="0.0240%" height="15" fill="rgb(253,159,18)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="703.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.3861%" y="677" width="0.0240%" height="15" fill="rgb(244,42,34)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="687.50"></text></g><g><title>databend-query`&lt;common_sql::planner::plans::scalar_expr::ScalarExpr as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.3861%" y="661" width="0.0240%" height="15" fill="rgb(224,8,7)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="671.50"></text></g><g><title>databend-query`&lt;common_sql::planner::binder::bind_context::ColumnBinding as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.3861%" y="645" width="0.0240%" height="15" fill="rgb(210,201,45)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="655.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.02%)</title><rect x="97.3861%" y="629" width="0.0240%" height="15" fill="rgb(252,185,21)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="639.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="97.3861%" y="613" width="0.0240%" height="15" fill="rgb(223,131,1)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="623.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="97.3861%" y="597" width="0.0240%" height="15" fill="rgb(245,141,16)" fg:x="4061" fg:w="1"/><text x="97.6361%" y="607.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize (2 samples, 0.05%)</title><rect x="97.3861%" y="901" width="0.0480%" height="15" fill="rgb(229,55,45)" fg:x="4061" fg:w="2"/><text x="97.6361%" y="911.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.05%)</title><rect x="97.3861%" y="885" width="0.0480%" height="15" fill="rgb(208,92,15)" fg:x="4061" fg:w="2"/><text x="97.6361%" y="895.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.05%)</title><rect x="97.3861%" y="869" width="0.0480%" height="15" fill="rgb(234,185,47)" fg:x="4061" fg:w="2"/><text x="97.6361%" y="879.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.05%)</title><rect x="97.3861%" y="853" width="0.0480%" height="15" fill="rgb(253,104,50)" fg:x="4061" fg:w="2"/><text x="97.6361%" y="863.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.05%)</title><rect x="97.3861%" y="837" width="0.0480%" height="15" fill="rgb(205,70,7)" fg:x="4061" fg:w="2"/><text x="97.6361%" y="847.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.05%)</title><rect x="97.3861%" y="821" width="0.0480%" height="15" fill="rgb(240,178,43)" fg:x="4061" fg:w="2"/><text x="97.6361%" y="831.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.05%)</title><rect x="97.3861%" y="805" width="0.0480%" height="15" fill="rgb(214,112,2)" fg:x="4061" fg:w="2"/><text x="97.6361%" y="815.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.05%)</title><rect x="97.3861%" y="789" width="0.0480%" height="15" fill="rgb(206,46,17)" fg:x="4061" fg:w="2"/><text x="97.6361%" y="799.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.05%)</title><rect x="97.3861%" y="773" width="0.0480%" height="15" fill="rgb(225,220,16)" fg:x="4061" fg:w="2"/><text x="97.6361%" y="783.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="97.4101%" y="757" width="0.0240%" height="15" fill="rgb(238,65,40)" fg:x="4062" fg:w="1"/><text x="97.6601%" y="767.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="97.4101%" y="741" width="0.0240%" height="15" fill="rgb(230,151,21)" fg:x="4062" fg:w="1"/><text x="97.6601%" y="751.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="97.4101%" y="725" width="0.0240%" height="15" fill="rgb(218,58,49)" fg:x="4062" fg:w="1"/><text x="97.6601%" y="735.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="97.4101%" y="709" width="0.0240%" height="15" fill="rgb(219,179,14)" fg:x="4062" fg:w="1"/><text x="97.6601%" y="719.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="97.4101%" y="693" width="0.0240%" height="15" fill="rgb(223,72,1)" fg:x="4062" fg:w="1"/><text x="97.6601%" y="703.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::rule::factory::RuleFactory::create_rule (1 samples, 0.02%)</title><rect x="97.4101%" y="677" width="0.0240%" height="15" fill="rgb(238,126,10)" fg:x="4062" fg:w="1"/><text x="97.6601%" y="687.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.4101%" y="661" width="0.0240%" height="15" fill="rgb(224,206,38)" fg:x="4062" fg:w="1"/><text x="97.6601%" y="671.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::optimizer::optimize (4 samples, 0.10%)</title><rect x="97.3621%" y="933" width="0.0959%" height="15" fill="rgb(212,201,54)" fg:x="4060" fg:w="4"/><text x="97.6121%" y="943.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::optimizer::optimize_query (4 samples, 0.10%)</title><rect x="97.3621%" y="917" width="0.0959%" height="15" fill="rgb(218,154,48)" fg:x="4060" fg:w="4"/><text x="97.6121%" y="927.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::optimize (1 samples, 0.02%)</title><rect x="97.4341%" y="901" width="0.0240%" height="15" fill="rgb(232,93,24)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="911.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::get_base_relations (1 samples, 0.02%)</title><rect x="97.4341%" y="885" width="0.0240%" height="15" fill="rgb(245,30,21)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="895.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::get_base_relations (1 samples, 0.02%)</title><rect x="97.4341%" y="869" width="0.0240%" height="15" fill="rgb(242,148,29)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="879.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::optimize (1 samples, 0.02%)</title><rect x="97.4341%" y="853" width="0.0240%" height="15" fill="rgb(244,153,54)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="863.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::get_base_relations (1 samples, 0.02%)</title><rect x="97.4341%" y="837" width="0.0240%" height="15" fill="rgb(252,87,22)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="847.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::get_base_relations (1 samples, 0.02%)</title><rect x="97.4341%" y="821" width="0.0240%" height="15" fill="rgb(210,51,29)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="831.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::get_base_relations (1 samples, 0.02%)</title><rect x="97.4341%" y="805" width="0.0240%" height="15" fill="rgb(242,136,47)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="815.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::optimize (1 samples, 0.02%)</title><rect x="97.4341%" y="789" width="0.0240%" height="15" fill="rgb(238,68,4)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="799.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::get_base_relations (1 samples, 0.02%)</title><rect x="97.4341%" y="773" width="0.0240%" height="15" fill="rgb(242,161,30)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="783.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::optimize (1 samples, 0.02%)</title><rect x="97.4341%" y="757" width="0.0240%" height="15" fill="rgb(218,58,44)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="767.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::get_base_relations (1 samples, 0.02%)</title><rect x="97.4341%" y="741" width="0.0240%" height="15" fill="rgb(252,125,32)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="751.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::optimize (1 samples, 0.02%)</title><rect x="97.4341%" y="725" width="0.0240%" height="15" fill="rgb(219,178,0)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="735.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::emit_csg (1 samples, 0.02%)</title><rect x="97.4341%" y="709" width="0.0240%" height="15" fill="rgb(213,152,7)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="719.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::emit_csg_cmp (1 samples, 0.02%)</title><rect x="97.4341%" y="693" width="0.0240%" height="15" fill="rgb(249,109,34)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="703.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::join_node::JoinNode::cardinality (1 samples, 0.02%)</title><rect x="97.4341%" y="677" width="0.0240%" height="15" fill="rgb(232,96,21)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="687.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::property::builder::RelExpr::derive_cardinality (1 samples, 0.02%)</title><rect x="97.4341%" y="661" width="0.0240%" height="15" fill="rgb(228,27,39)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="671.50"></text></g><g><title>databend-query`&lt;common_sql::planner::plans::join::Join as common_sql::planner::plans::operator::Operator&gt;::derive_cardinality (1 samples, 0.02%)</title><rect x="97.4341%" y="645" width="0.0240%" height="15" fill="rgb(211,182,52)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="655.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::property::histogram::histogram_from_ndv (1 samples, 0.02%)</title><rect x="97.4341%" y="629" width="0.0240%" height="15" fill="rgb(234,178,38)" fg:x="4063" fg:w="1"/><text x="97.6841%" y="639.50"></text></g><g><title>databend-query`common_ast::parser::parser::parse_sql (1 samples, 0.02%)</title><rect x="97.4580%" y="805" width="0.0240%" height="15" fill="rgb(221,111,3)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="815.50"></text></g><g><title>databend-query`common_ast::parser::statement::statement (1 samples, 0.02%)</title><rect x="97.4580%" y="789" width="0.0240%" height="15" fill="rgb(228,175,21)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="799.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="773" width="0.0240%" height="15" fill="rgb(228,174,43)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="783.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="97.4580%" y="757" width="0.0240%" height="15" fill="rgb(211,191,0)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="767.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="97.4580%" y="741" width="0.0240%" height="15" fill="rgb(253,117,3)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="751.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="725" width="0.0240%" height="15" fill="rgb(241,127,19)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="735.50"></text></g><g><title>databend-query`common_ast::parser::query::query (1 samples, 0.02%)</title><rect x="97.4580%" y="709" width="0.0240%" height="15" fill="rgb(218,103,12)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="719.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="693" width="0.0240%" height="15" fill="rgb(236,214,43)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="703.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation (1 samples, 0.02%)</title><rect x="97.4580%" y="677" width="0.0240%" height="15" fill="rgb(244,144,19)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="687.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation_element (1 samples, 0.02%)</title><rect x="97.4580%" y="661" width="0.0240%" height="15" fill="rgb(246,188,10)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="671.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="97.4580%" y="645" width="0.0240%" height="15" fill="rgb(212,193,33)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="655.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="629" width="0.0240%" height="15" fill="rgb(241,51,29)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="639.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC) as nom::sequence::Tuple&lt;Input,(A,B,C),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="613" width="0.0240%" height="15" fill="rgb(211,58,19)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="623.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="597" width="0.0240%" height="15" fill="rgb(229,111,26)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="607.50"></text></g><g><title>databend-query`common_ast::parser::query::order_by_expr (1 samples, 0.02%)</title><rect x="97.4580%" y="581" width="0.0240%" height="15" fill="rgb(213,115,40)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="591.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC) as nom::sequence::Tuple&lt;Input,(A,B,C),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="565" width="0.0240%" height="15" fill="rgb(209,56,44)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="575.50"></text></g><g><title>databend-query`common_ast::parser::expr::expr (1 samples, 0.02%)</title><rect x="97.4580%" y="549" width="0.0240%" height="15" fill="rgb(230,108,32)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="559.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="533" width="0.0240%" height="15" fill="rgb(216,165,31)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="543.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="517" width="0.0240%" height="15" fill="rgb(218,122,21)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="527.50"></text></g><g><title>databend-query`common_ast::parser::expr::expr_element (1 samples, 0.02%)</title><rect x="97.4580%" y="501" width="0.0240%" height="15" fill="rgb(223,224,47)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="511.50"></text></g><g><title>databend-query`&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="97.4580%" y="485" width="0.0240%" height="15" fill="rgb(238,102,44)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="495.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="97.4580%" y="469" width="0.0240%" height="15" fill="rgb(236,46,40)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="479.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="453" width="0.0240%" height="15" fill="rgb(247,202,50)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="463.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="97.4580%" y="437" width="0.0240%" height="15" fill="rgb(209,99,20)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="447.50"></text></g><g><title>databend-query`&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="97.4580%" y="421" width="0.0240%" height="15" fill="rgb(252,27,34)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="431.50"></text></g><g><title>databend-query`&lt;common_ast::error::Error as nom::error::ParseError&lt;common_ast::input::Input&gt;&gt;::or (1 samples, 0.02%)</title><rect x="97.4580%" y="405" width="0.0240%" height="15" fill="rgb(215,206,23)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="415.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="97.4580%" y="389" width="0.0240%" height="15" fill="rgb(212,135,36)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="399.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="97.4580%" y="373" width="0.0240%" height="15" fill="rgb(240,189,1)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="383.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="97.4580%" y="357" width="0.0240%" height="15" fill="rgb(242,56,20)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="367.50"></text></g><g><title>databend-query`__rust_realloc (1 samples, 0.02%)</title><rect x="97.4580%" y="341" width="0.0240%" height="15" fill="rgb(247,132,33)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="351.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (1 samples, 0.02%)</title><rect x="97.4580%" y="325" width="0.0240%" height="15" fill="rgb(208,149,11)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="335.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (1 samples, 0.02%)</title><rect x="97.4580%" y="309" width="0.0240%" height="15" fill="rgb(211,33,11)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="97.4580%" y="293" width="0.0240%" height="15" fill="rgb(221,29,38)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="97.4580%" y="277" width="0.0240%" height="15" fill="rgb(206,182,49)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="97.4580%" y="261" width="0.0240%" height="15" fill="rgb(216,140,1)" fg:x="4064" fg:w="1"/><text x="97.7080%" y="271.50"></text></g><g><title>databend-query`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1 samples, 0.02%)</title><rect x="97.4820%" y="469" width="0.0240%" height="15" fill="rgb(232,57,40)" fg:x="4065" fg:w="1"/><text x="97.7320%" y="479.50"></text></g><g><title>databend-query`&lt;chrono_tz::timezones::Tz as chrono_tz::timezone_impl::TimeSpans&gt;::timespans (3 samples, 0.07%)</title><rect x="97.5779%" y="453" width="0.0719%" height="15" fill="rgb(224,186,18)" fg:x="4069" fg:w="3"/><text x="97.8279%" y="463.50"></text></g><g><title>databend-query`chrono::traits::Datelike::num_days_from_ce (2 samples, 0.05%)</title><rect x="97.6499%" y="453" width="0.0480%" height="15" fill="rgb(215,121,11)" fg:x="4072" fg:w="2"/><text x="97.8999%" y="463.50"></text></g><g><title>databend-query`chrono_tz::binary_search::binary_search (1 samples, 0.02%)</title><rect x="97.6978%" y="453" width="0.0240%" height="15" fill="rgb(245,147,10)" fg:x="4074" fg:w="1"/><text x="97.9478%" y="463.50"></text></g><g><title>databend-query`common_sql::planner::binder::project::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::normalize_select_list::_{{closure}} (24 samples, 0.58%)</title><rect x="97.4820%" y="645" width="0.5755%" height="15" fill="rgb(238,153,13)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.58%)</title><rect x="97.4820%" y="629" width="0.5755%" height="15" fill="rgb(233,108,0)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="639.50"></text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (24 samples, 0.58%)</title><rect x="97.4820%" y="613" width="0.5755%" height="15" fill="rgb(212,157,17)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="623.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.58%)</title><rect x="97.4820%" y="597" width="0.5755%" height="15" fill="rgb(225,213,38)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="607.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::new (24 samples, 0.58%)</title><rect x="97.4820%" y="581" width="0.5755%" height="15" fill="rgb(248,16,11)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="591.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_function_context (24 samples, 0.58%)</title><rect x="97.4820%" y="565" width="0.5755%" height="15" fill="rgb(241,33,4)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="575.50"></text></g><g><title>databend-query`once_cell::imp::OnceCell&lt;T&gt;::initialize (24 samples, 0.58%)</title><rect x="97.4820%" y="549" width="0.5755%" height="15" fill="rgb(222,26,43)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="559.50"></text></g><g><title>databend-query`once_cell::imp::initialize_or_wait (24 samples, 0.58%)</title><rect x="97.4820%" y="533" width="0.5755%" height="15" fill="rgb(243,29,36)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="543.50"></text></g><g><title>databend-query`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (24 samples, 0.58%)</title><rect x="97.4820%" y="517" width="0.5755%" height="15" fill="rgb(241,9,27)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="527.50"></text></g><g><title>databend-query`core::ops::function::FnOnce::call_once (24 samples, 0.58%)</title><rect x="97.4820%" y="501" width="0.5755%" height="15" fill="rgb(205,117,26)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="511.50"></text></g><g><title>databend-query`common_expression::utils::date_helper::TzFactory::get (24 samples, 0.58%)</title><rect x="97.4820%" y="485" width="0.5755%" height="15" fill="rgb(209,80,39)" fg:x="4065" fg:w="24"/><text x="97.7320%" y="495.50"></text></g><g><title>databend-query`common_expression::utils::date_helper::TzLUT::new (23 samples, 0.55%)</title><rect x="97.5060%" y="469" width="0.5516%" height="15" fill="rgb(239,155,6)" fg:x="4066" fg:w="23"/><text x="97.7560%" y="479.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::_&lt;impl chrono::offset::TimeZone for chrono_tz::timezones::Tz&gt;::offset_from_local_datetime (14 samples, 0.34%)</title><rect x="97.7218%" y="453" width="0.3357%" height="15" fill="rgb(212,104,12)" fg:x="4075" fg:w="14"/><text x="97.9718%" y="463.50"></text></g><g><title>databend-query`chrono_tz::binary_search::binary_search (12 samples, 0.29%)</title><rect x="97.7698%" y="437" width="0.2878%" height="15" fill="rgb(234,204,3)" fg:x="4077" fg:w="12"/><text x="98.0198%" y="447.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::FixedTimespanSet::local_span (4 samples, 0.10%)</title><rect x="97.9616%" y="421" width="0.0959%" height="15" fill="rgb(251,218,7)" fg:x="4085" fg:w="4"/><text x="98.2116%" y="431.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_table_reference::_{{closure}} (1 samples, 0.02%)</title><rect x="98.0576%" y="645" width="0.0240%" height="15" fill="rgb(221,81,32)" fg:x="4089" fg:w="1"/><text x="98.3076%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.0576%" y="629" width="0.0240%" height="15" fill="rgb(214,152,26)" fg:x="4089" fg:w="1"/><text x="98.3076%" y="639.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_sql::planner::binder::table::&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_single_table::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="98.0576%" y="613" width="0.0240%" height="15" fill="rgb(223,22,3)" fg:x="4089" fg:w="1"/><text x="98.3076%" y="623.50"></text></g><g><title>databend-query`common_sql::planner::binder::ddl::database::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_show_databases::_{{closure}} (27 samples, 0.65%)</title><rect x="97.4580%" y="869" width="0.6475%" height="15" fill="rgb(207,174,7)" fg:x="4064" fg:w="27"/><text x="97.7080%" y="879.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (27 samples, 0.65%)</title><rect x="97.4580%" y="853" width="0.6475%" height="15" fill="rgb(224,19,52)" fg:x="4064" fg:w="27"/><text x="97.7080%" y="863.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_rewrite_to_query::_{{closure}} (27 samples, 0.65%)</title><rect x="97.4580%" y="837" width="0.6475%" height="15" fill="rgb(228,24,14)" fg:x="4064" fg:w="27"/><text x="97.7080%" y="847.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (27 samples, 0.65%)</title><rect x="97.4580%" y="821" width="0.6475%" height="15" fill="rgb(230,153,43)" fg:x="4064" fg:w="27"/><text x="97.7080%" y="831.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (26 samples, 0.62%)</title><rect x="97.4820%" y="805" width="0.6235%" height="15" fill="rgb(231,106,12)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="815.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 0.62%)</title><rect x="97.4820%" y="789" width="0.6235%" height="15" fill="rgb(215,92,2)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="799.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (26 samples, 0.62%)</title><rect x="97.4820%" y="773" width="0.6235%" height="15" fill="rgb(249,143,25)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="783.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (26 samples, 0.62%)</title><rect x="97.4820%" y="757" width="0.6235%" height="15" fill="rgb(252,7,35)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="767.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 0.62%)</title><rect x="97.4820%" y="741" width="0.6235%" height="15" fill="rgb(216,69,40)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="751.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (26 samples, 0.62%)</title><rect x="97.4820%" y="725" width="0.6235%" height="15" fill="rgb(240,36,33)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 0.62%)</title><rect x="97.4820%" y="709" width="0.6235%" height="15" fill="rgb(231,128,14)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="719.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (26 samples, 0.62%)</title><rect x="97.4820%" y="693" width="0.6235%" height="15" fill="rgb(245,143,14)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="703.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 0.62%)</title><rect x="97.4820%" y="677" width="0.6235%" height="15" fill="rgb(222,130,28)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="687.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (26 samples, 0.62%)</title><rect x="97.4820%" y="661" width="0.6235%" height="15" fill="rgb(212,10,48)" fg:x="4065" fg:w="26"/><text x="97.7320%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.0815%" y="645" width="0.0240%" height="15" fill="rgb(254,118,45)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="655.50"></text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.02%)</title><rect x="98.0815%" y="629" width="0.0240%" height="15" fill="rgb(228,6,45)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="639.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.0815%" y="613" width="0.0240%" height="15" fill="rgb(241,18,35)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="623.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="98.0815%" y="597" width="0.0240%" height="15" fill="rgb(227,214,53)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="607.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.0815%" y="581" width="0.0240%" height="15" fill="rgb(224,107,51)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="591.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.0815%" y="565" width="0.0240%" height="15" fill="rgb(248,60,28)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="575.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.02%)</title><rect x="98.0815%" y="549" width="0.0240%" height="15" fill="rgb(249,101,23)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="559.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.0815%" y="533" width="0.0240%" height="15" fill="rgb(228,51,19)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="543.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.02%)</title><rect x="98.0815%" y="517" width="0.0240%" height="15" fill="rgb(213,20,6)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.0815%" y="501" width="0.0240%" height="15" fill="rgb(212,124,10)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="511.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_scalar_function_call::_{{closure}} (1 samples, 0.02%)</title><rect x="98.0815%" y="485" width="0.0240%" height="15" fill="rgb(248,3,40)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="495.50"></text></g><g><title>databend-query`common_expression::expression::Expr&lt;Index&gt;::is_deterministic (1 samples, 0.02%)</title><rect x="98.0815%" y="469" width="0.0240%" height="15" fill="rgb(223,178,23)" fg:x="4090" fg:w="1"/><text x="98.3315%" y="479.50"></text></g><g><title>databend-query`common_sql::planner::binder::ddl::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_show_tables::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="869" width="0.0240%" height="15" fill="rgb(240,132,45)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="879.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="853" width="0.0240%" height="15" fill="rgb(245,164,36)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="863.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_rewrite_to_query::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="837" width="0.0240%" height="15" fill="rgb(231,188,53)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="847.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="821" width="0.0240%" height="15" fill="rgb(237,198,39)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="831.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="805" width="0.0240%" height="15" fill="rgb(223,120,35)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="815.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="789" width="0.0240%" height="15" fill="rgb(253,107,49)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="799.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="773" width="0.0240%" height="15" fill="rgb(216,44,31)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="783.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="757" width="0.0240%" height="15" fill="rgb(253,87,21)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="767.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="741" width="0.0240%" height="15" fill="rgb(226,18,2)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="751.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="725" width="0.0240%" height="15" fill="rgb(216,8,46)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="709" width="0.0240%" height="15" fill="rgb(226,140,39)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="719.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="693" width="0.0240%" height="15" fill="rgb(221,194,54)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="703.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="677" width="0.0240%" height="15" fill="rgb(213,92,11)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="687.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="661" width="0.0240%" height="15" fill="rgb(229,162,46)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="645" width="0.0240%" height="15" fill="rgb(214,111,36)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="655.50"></text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="629" width="0.0240%" height="15" fill="rgb(207,6,21)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="639.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="613" width="0.0240%" height="15" fill="rgb(213,127,38)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="623.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="597" width="0.0240%" height="15" fill="rgb(238,118,32)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="607.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="581" width="0.0240%" height="15" fill="rgb(240,139,39)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="591.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="565" width="0.0240%" height="15" fill="rgb(235,10,37)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="575.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="549" width="0.0240%" height="15" fill="rgb(249,171,38)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="559.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="533" width="0.0240%" height="15" fill="rgb(242,144,32)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="543.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="517" width="0.0240%" height="15" fill="rgb(217,117,21)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="501" width="0.0240%" height="15" fill="rgb(249,87,1)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="511.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_scalar_function_call::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1055%" y="485" width="0.0240%" height="15" fill="rgb(248,196,48)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1055%" y="469" width="0.0240%" height="15" fill="rgb(251,206,33)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="479.50"></text></g><g><title>databend-query`common_expression::type_check::check (1 samples, 0.02%)</title><rect x="98.1055%" y="453" width="0.0240%" height="15" fill="rgb(232,141,28)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="463.50"></text></g><g><title>databend-query`common_expression::type_check::check_function (1 samples, 0.02%)</title><rect x="98.1055%" y="437" width="0.0240%" height="15" fill="rgb(209,167,14)" fg:x="4091" fg:w="1"/><text x="98.3555%" y="447.50"></text></g><g><title>databend-query`common_sql::planner::binder::project::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::normalize_select_list::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1295%" y="757" width="0.0240%" height="15" fill="rgb(225,11,50)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="767.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1295%" y="741" width="0.0240%" height="15" fill="rgb(209,50,20)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="751.50"></text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1295%" y="725" width="0.0240%" height="15" fill="rgb(212,17,46)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1295%" y="709" width="0.0240%" height="15" fill="rgb(216,101,39)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="719.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1295%" y="693" width="0.0240%" height="15" fill="rgb(212,228,48)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="703.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1295%" y="677" width="0.0240%" height="15" fill="rgb(250,6,50)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="687.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1295%" y="661" width="0.0240%" height="15" fill="rgb(250,160,48)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1295%" y="645" width="0.0240%" height="15" fill="rgb(244,216,33)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="655.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1295%" y="629" width="0.0240%" height="15" fill="rgb(207,157,5)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="639.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1295%" y="613" width="0.0240%" height="15" fill="rgb(228,199,8)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="623.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1295%" y="597" width="0.0240%" height="15" fill="rgb(227,80,20)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="607.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1295%" y="581" width="0.0240%" height="15" fill="rgb(222,9,33)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="591.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1295%" y="565" width="0.0240%" height="15" fill="rgb(239,44,28)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="575.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1295%" y="549" width="0.0240%" height="15" fill="rgb(249,187,43)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="559.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1295%" y="533" width="0.0240%" height="15" fill="rgb(216,141,28)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="543.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_scalar_function_call::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1295%" y="517" width="0.0240%" height="15" fill="rgb(230,154,53)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1295%" y="501" width="0.0240%" height="15" fill="rgb(227,82,4)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="511.50"></text></g><g><title>databend-query`common_expression::type_check::check (1 samples, 0.02%)</title><rect x="98.1295%" y="485" width="0.0240%" height="15" fill="rgb(220,107,16)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="495.50"></text></g><g><title>databend-query`common_expression::type_check::check_function (1 samples, 0.02%)</title><rect x="98.1295%" y="469" width="0.0240%" height="15" fill="rgb(207,187,2)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="479.50"></text></g><g><title>databend-query`common_expression::type_check::try_check_function (1 samples, 0.02%)</title><rect x="98.1295%" y="453" width="0.0240%" height="15" fill="rgb(210,162,52)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="463.50"></text></g><g><title>databend-query`common_expression::type_check::try_unify_signature (1 samples, 0.02%)</title><rect x="98.1295%" y="437" width="0.0240%" height="15" fill="rgb(217,216,49)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="447.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="98.1295%" y="421" width="0.0240%" height="15" fill="rgb(218,146,49)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="431.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="98.1295%" y="405" width="0.0240%" height="15" fill="rgb(216,55,40)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="415.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="98.1295%" y="389" width="0.0240%" height="15" fill="rgb(208,196,21)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="399.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.1295%" y="373" width="0.0240%" height="15" fill="rgb(242,117,42)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="383.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="98.1295%" y="357" width="0.0240%" height="15" fill="rgb(210,11,23)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="367.50"></text></g><g><title>databend-query`common_expression::type_check::unify (1 samples, 0.02%)</title><rect x="98.1295%" y="341" width="0.0240%" height="15" fill="rgb(217,110,2)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="351.50"></text></g><g><title>databend-query`alloc::fmt::format::format_inner (1 samples, 0.02%)</title><rect x="98.1295%" y="325" width="0.0240%" height="15" fill="rgb(229,77,54)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="335.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.02%)</title><rect x="98.1295%" y="309" width="0.0240%" height="15" fill="rgb(218,53,16)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="319.50"></text></g><g><title>databend-query`common_expression::utils::display::_&lt;impl core::fmt::Display for common_expression::types::DataType&gt;::fmt (1 samples, 0.02%)</title><rect x="98.1295%" y="293" width="0.0240%" height="15" fill="rgb(215,38,13)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="303.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.02%)</title><rect x="98.1295%" y="277" width="0.0240%" height="15" fill="rgb(235,42,18)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="287.50"></text></g><g><title>databend-query`common_expression::utils::display::_&lt;impl core::fmt::Display for common_expression::types::number::NumberDataType&gt;::fmt (1 samples, 0.02%)</title><rect x="98.1295%" y="261" width="0.0240%" height="15" fill="rgb(219,66,54)" fg:x="4092" fg:w="1"/><text x="98.3795%" y="271.50"></text></g><g><title>databend-query`common_storages_fuse::io::read::meta::meta_readers::bytes_reader::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="517" width="0.0240%" height="15" fill="rgb(222,205,4)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="527.50"></text></g><g><title>databend-query`&lt;opendal::types::operator::operator_futures::OperatorFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.1535%" y="501" width="0.0240%" height="15" fill="rgb(227,213,46)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="511.50"></text></g><g><title>databend-query`opendal::types::operator::operator::Operator::reader_with::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="485" width="0.0240%" height="15" fill="rgb(250,145,42)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="495.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="469" width="0.0240%" height="15" fill="rgb(219,15,2)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="479.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="453" width="0.0240%" height="15" fill="rgb(231,181,52)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="463.50"></text></g><g><title>databend-query`&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="437" width="0.0240%" height="15" fill="rgb(235,1,42)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="447.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="421" width="0.0240%" height="15" fill="rgb(249,88,27)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="431.50"></text></g><g><title>databend-query`&lt;common_storage::metrics::StorageMetricsAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="405" width="0.0240%" height="15" fill="rgb(235,145,16)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="415.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1535%" y="389" width="0.0240%" height="15" fill="rgb(237,114,19)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="399.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="373" width="0.0240%" height="15" fill="rgb(238,51,50)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="383.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="357" width="0.0240%" height="15" fill="rgb(205,194,25)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="367.50"></text></g><g><title>databend-query`&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="341" width="0.0240%" height="15" fill="rgb(215,203,17)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="351.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="325" width="0.0240%" height="15" fill="rgb(233,112,49)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="335.50"></text></g><g><title>databend-query`&lt;opendal::layers::tracing::TracingAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="309" width="0.0240%" height="15" fill="rgb(241,130,26)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="319.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.1535%" y="293" width="0.0240%" height="15" fill="rgb(252,223,19)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="303.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="277" width="0.0240%" height="15" fill="rgb(211,95,25)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="287.50"></text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="261" width="0.0240%" height="15" fill="rgb(251,182,27)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="271.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="245" width="0.0240%" height="15" fill="rgb(238,24,4)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="255.50"></text></g><g><title>databend-query`&lt;opendal::layers::metrics::MetricsAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="229" width="0.0240%" height="15" fill="rgb(224,220,25)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="239.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.1535%" y="213" width="0.0240%" height="15" fill="rgb(239,133,26)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="223.50"></text></g><g><title>databend-query`&lt;opendal::layers::retry::RetryAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1535%" y="197" width="0.0240%" height="15" fill="rgb(211,94,48)" fg:x="4093" fg:w="1"/><text x="98.4035%" y="207.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_table_reference::_{{closure}} (2 samples, 0.05%)</title><rect x="98.1535%" y="757" width="0.0480%" height="15" fill="rgb(239,87,6)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="767.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="98.1535%" y="741" width="0.0480%" height="15" fill="rgb(227,62,0)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="751.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_single_table::_{{closure}} (2 samples, 0.05%)</title><rect x="98.1535%" y="725" width="0.0480%" height="15" fill="rgb(211,226,4)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="98.1535%" y="709" width="0.0480%" height="15" fill="rgb(253,38,52)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="719.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_single_table::_{{closure}}::_{{closure}} (2 samples, 0.05%)</title><rect x="98.1535%" y="693" width="0.0480%" height="15" fill="rgb(229,126,40)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="703.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_base_table::_{{closure}} (2 samples, 0.05%)</title><rect x="98.1535%" y="677" width="0.0480%" height="15" fill="rgb(229,165,44)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="98.1535%" y="661" width="0.0480%" height="15" fill="rgb(247,95,47)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="671.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::fuse_table::FuseTable as common_catalog::table::Table&gt;::column_statistics_provider::_{{closure}} (2 samples, 0.05%)</title><rect x="98.1535%" y="645" width="0.0480%" height="15" fill="rgb(216,140,30)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="98.1535%" y="629" width="0.0480%" height="15" fill="rgb(246,214,8)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="639.50"></text></g><g><title>databend-query`common_storages_fuse::fuse_table::FuseTable::read_table_snapshot::_{{closure}} (2 samples, 0.05%)</title><rect x="98.1535%" y="613" width="0.0480%" height="15" fill="rgb(227,224,15)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="623.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="98.1535%" y="597" width="0.0480%" height="15" fill="rgb(233,175,4)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="607.50"></text></g><g><title>databend-query`storages_common_cache::read::cached_reader::CachedReader&lt;L,storages_common_cache::cache::NamedCache&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,common_cache::cache::lru::LruCache&lt;alloc::string::String,alloc::sync::Arc&lt;V&gt;,S,M&gt;&gt;&gt;&gt;&gt;::read::_{{closure}} (2 samples, 0.05%)</title><rect x="98.1535%" y="581" width="0.0480%" height="15" fill="rgb(221,66,45)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="591.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="98.1535%" y="565" width="0.0480%" height="15" fill="rgb(221,178,18)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="575.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::io::read::meta::meta_readers::LoaderWrapper&lt;opendal::types::operator::operator::Operator&gt; as storages_common_cache::read::loader::Loader&lt;storages_common_table_meta::meta::v4::snapshot::TableSnapshot&gt;&gt;::load::_{{closure}} (2 samples, 0.05%)</title><rect x="98.1535%" y="549" width="0.0480%" height="15" fill="rgb(213,81,29)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="559.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="98.1535%" y="533" width="0.0480%" height="15" fill="rgb(220,89,49)" fg:x="4093" fg:w="2"/><text x="98.4035%" y="543.50"></text></g><g><title>databend-query`storages_common_table_meta::readers::snapshot_reader::_&lt;impl storages_common_table_meta::readers::versioned_reader::VersionedReader&lt;storages_common_table_meta::meta::v4::snapshot::TableSnapshot&gt; for storages_common_table_meta::meta::versions::SnapshotVersion&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="98.1775%" y="517" width="0.0240%" height="15" fill="rgb(227,60,33)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.1775%" y="501" width="0.0240%" height="15" fill="rgb(205,113,12)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="511.50"></text></g><g><title>databend-query`futures_util::io::read_to_end::read_to_end_internal (1 samples, 0.02%)</title><rect x="98.1775%" y="485" width="0.0240%" height="15" fill="rgb(211,32,1)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="495.50"></text></g><g><title>databend-query`&lt;dyn opendal::raw::oio::read::Read as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="98.1775%" y="469" width="0.0240%" height="15" fill="rgb(246,2,12)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="479.50"></text></g><g><title>databend-query`&lt;common_storage::metrics::StorageMetricsWrapper&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.02%)</title><rect x="98.1775%" y="453" width="0.0240%" height="15" fill="rgb(243,37,27)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="463.50"></text></g><g><title>databend-query`&lt;opendal::layers::tracing::TracingWrapper&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.02%)</title><rect x="98.1775%" y="437" width="0.0240%" height="15" fill="rgb(248,211,31)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="447.50"></text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingReader&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.02%)</title><rect x="98.1775%" y="421" width="0.0240%" height="15" fill="rgb(242,146,47)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="431.50"></text></g><g><title>databend-query`&lt;opendal::layers::metrics::MetricWrapper&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.02%)</title><rect x="98.1775%" y="405" width="0.0240%" height="15" fill="rgb(206,70,20)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="415.50"></text></g><g><title>databend-query`&lt;opendal::layers::retry::RetryWrapper&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.02%)</title><rect x="98.1775%" y="389" width="0.0240%" height="15" fill="rgb(215,10,51)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="399.50"></text></g><g><title>databend-query`&lt;opendal::layers::timeout::TimeoutWrapper&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.02%)</title><rect x="98.1775%" y="373" width="0.0240%" height="15" fill="rgb(243,178,53)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="98.1775%" y="357" width="0.0240%" height="15" fill="rgb(233,221,20)" fg:x="4094" fg:w="1"/><text x="98.4275%" y="367.50"></text></g><g><title>databend-query`common_sql::planner::binder::aggregate::AggregateRewriter::visit (1 samples, 0.02%)</title><rect x="98.2014%" y="741" width="0.0240%" height="15" fill="rgb(218,95,35)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="751.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="98.2014%" y="725" width="0.0240%" height="15" fill="rgb(229,13,5)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="735.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="98.2014%" y="709" width="0.0240%" height="15" fill="rgb(252,164,30)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="719.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.2014%" y="693" width="0.0240%" height="15" fill="rgb(232,68,36)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="703.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="98.2014%" y="677" width="0.0240%" height="15" fill="rgb(219,59,54)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="687.50"></text></g><g><title>databend-query`common_sql::planner::binder::aggregate::AggregateRewriter::replace_aggregate_function (1 samples, 0.02%)</title><rect x="98.2014%" y="661" width="0.0240%" height="15" fill="rgb(250,92,33)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="671.50"></text></g><g><title>databend-query`common_sql::planner::plans::scalar_expr::ScalarExpr::data_type (1 samples, 0.02%)</title><rect x="98.2014%" y="645" width="0.0240%" height="15" fill="rgb(229,162,54)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="655.50"></text></g><g><title>databend-query`common_sql::planner::semantic::lowering::_&lt;impl common_sql::planner::plans::scalar_expr::ScalarExpr&gt;::as_expr (1 samples, 0.02%)</title><rect x="98.2014%" y="629" width="0.0240%" height="15" fill="rgb(244,114,52)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="639.50"></text></g><g><title>databend-query`common_expression::type_check::check (1 samples, 0.02%)</title><rect x="98.2014%" y="613" width="0.0240%" height="15" fill="rgb(212,211,43)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="623.50"></text></g><g><title>databend-query`common_expression::type_check::check_function (1 samples, 0.02%)</title><rect x="98.2014%" y="597" width="0.0240%" height="15" fill="rgb(226,147,8)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="607.50"></text></g><g><title>databend-query`common_expression::type_check::try_check_function (1 samples, 0.02%)</title><rect x="98.2014%" y="581" width="0.0240%" height="15" fill="rgb(226,23,13)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="591.50"></text></g><g><title>databend-query`common_expression::type_check::try_unify_signature (1 samples, 0.02%)</title><rect x="98.2014%" y="565" width="0.0240%" height="15" fill="rgb(240,63,4)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="575.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="98.2014%" y="549" width="0.0240%" height="15" fill="rgb(221,1,32)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="559.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="98.2014%" y="533" width="0.0240%" height="15" fill="rgb(242,117,10)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="543.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.2014%" y="517" width="0.0240%" height="15" fill="rgb(249,172,44)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="527.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="98.2014%" y="501" width="0.0240%" height="15" fill="rgb(244,46,45)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="511.50"></text></g><g><title>databend-query`common_expression::type_check::unify (1 samples, 0.02%)</title><rect x="98.2014%" y="485" width="0.0240%" height="15" fill="rgb(206,43,17)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="495.50"></text></g><g><title>databend-query`alloc::fmt::format::format_inner (1 samples, 0.02%)</title><rect x="98.2014%" y="469" width="0.0240%" height="15" fill="rgb(239,218,39)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="479.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.02%)</title><rect x="98.2014%" y="453" width="0.0240%" height="15" fill="rgb(208,169,54)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="463.50"></text></g><g><title>databend-query`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="98.2014%" y="437" width="0.0240%" height="15" fill="rgb(247,25,42)" fg:x="4095" fg:w="1"/><text x="98.4514%" y="447.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase&lt;W&gt;::do_query::_{{closure}} (37 samples, 0.89%)</title><rect x="97.3621%" y="997" width="0.8873%" height="15" fill="rgb(226,23,31)" fg:x="4060" fg:w="37"/><text x="97.6121%" y="1007.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (37 samples, 0.89%)</title><rect x="97.3621%" y="981" width="0.8873%" height="15" fill="rgb(247,16,28)" fg:x="4060" fg:w="37"/><text x="97.6121%" y="991.50"></text></g><g><title>databend-query`common_sql::planner::planner::Planner::plan_sql::_{{closure}} (37 samples, 0.89%)</title><rect x="97.3621%" y="965" width="0.8873%" height="15" fill="rgb(231,147,38)" fg:x="4060" fg:w="37"/><text x="97.6121%" y="975.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (37 samples, 0.89%)</title><rect x="97.3621%" y="949" width="0.8873%" height="15" fill="rgb(253,81,48)" fg:x="4060" fg:w="37"/><text x="97.6121%" y="959.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (33 samples, 0.79%)</title><rect x="97.4580%" y="933" width="0.7914%" height="15" fill="rgb(249,222,43)" fg:x="4064" fg:w="33"/><text x="97.7080%" y="943.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (33 samples, 0.79%)</title><rect x="97.4580%" y="917" width="0.7914%" height="15" fill="rgb(221,3,27)" fg:x="4064" fg:w="33"/><text x="97.7080%" y="927.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (33 samples, 0.79%)</title><rect x="97.4580%" y="901" width="0.7914%" height="15" fill="rgb(228,180,5)" fg:x="4064" fg:w="33"/><text x="97.7080%" y="911.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (33 samples, 0.79%)</title><rect x="97.4580%" y="885" width="0.7914%" height="15" fill="rgb(227,131,42)" fg:x="4064" fg:w="33"/><text x="97.7080%" y="895.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (5 samples, 0.12%)</title><rect x="98.1295%" y="869" width="0.1199%" height="15" fill="rgb(212,3,39)" fg:x="4092" fg:w="5"/><text x="98.3795%" y="879.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.12%)</title><rect x="98.1295%" y="853" width="0.1199%" height="15" fill="rgb(226,45,5)" fg:x="4092" fg:w="5"/><text x="98.3795%" y="863.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (5 samples, 0.12%)</title><rect x="98.1295%" y="837" width="0.1199%" height="15" fill="rgb(215,167,45)" fg:x="4092" fg:w="5"/><text x="98.3795%" y="847.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.12%)</title><rect x="98.1295%" y="821" width="0.1199%" height="15" fill="rgb(250,218,53)" fg:x="4092" fg:w="5"/><text x="98.3795%" y="831.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (5 samples, 0.12%)</title><rect x="98.1295%" y="805" width="0.1199%" height="15" fill="rgb(207,140,0)" fg:x="4092" fg:w="5"/><text x="98.3795%" y="815.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.12%)</title><rect x="98.1295%" y="789" width="0.1199%" height="15" fill="rgb(238,133,51)" fg:x="4092" fg:w="5"/><text x="98.3795%" y="799.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (5 samples, 0.12%)</title><rect x="98.1295%" y="773" width="0.1199%" height="15" fill="rgb(218,203,53)" fg:x="4092" fg:w="5"/><text x="98.3795%" y="783.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="98.2014%" y="757" width="0.0480%" height="15" fill="rgb(226,184,25)" fg:x="4095" fg:w="2"/><text x="98.4514%" y="767.50"></text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="741" width="0.0240%" height="15" fill="rgb(231,121,21)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="751.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="725" width="0.0240%" height="15" fill="rgb(251,14,34)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="735.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="709" width="0.0240%" height="15" fill="rgb(249,193,11)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="693" width="0.0240%" height="15" fill="rgb(220,172,37)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="703.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="677" width="0.0240%" height="15" fill="rgb(231,229,43)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="687.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="661" width="0.0240%" height="15" fill="rgb(250,161,5)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="645" width="0.0240%" height="15" fill="rgb(218,225,18)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="655.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="629" width="0.0240%" height="15" fill="rgb(245,45,42)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="639.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="613" width="0.0240%" height="15" fill="rgb(211,115,1)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="623.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="597" width="0.0240%" height="15" fill="rgb(248,133,52)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="607.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="581" width="0.0240%" height="15" fill="rgb(238,100,21)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="591.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="565" width="0.0240%" height="15" fill="rgb(247,144,11)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="575.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_subquery::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="549" width="0.0240%" height="15" fill="rgb(206,164,16)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="559.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="533" width="0.0240%" height="15" fill="rgb(222,34,3)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="543.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="517" width="0.0240%" height="15" fill="rgb(248,82,4)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="501" width="0.0240%" height="15" fill="rgb(228,81,46)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="511.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="485" width="0.0240%" height="15" fill="rgb(227,67,47)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="469" width="0.0240%" height="15" fill="rgb(215,93,53)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="479.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="453" width="0.0240%" height="15" fill="rgb(248,194,39)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="437" width="0.0240%" height="15" fill="rgb(215,5,19)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="447.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="421" width="0.0240%" height="15" fill="rgb(226,215,51)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="431.50"></text></g><g><title>databend-query`common_sql::planner::binder::project::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::normalize_select_list::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="405" width="0.0240%" height="15" fill="rgb(225,56,26)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="415.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="389" width="0.0240%" height="15" fill="rgb(222,75,29)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="399.50"></text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="373" width="0.0240%" height="15" fill="rgb(236,139,6)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="383.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="357" width="0.0240%" height="15" fill="rgb(223,137,36)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="367.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="341" width="0.0240%" height="15" fill="rgb(226,99,2)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="351.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="325" width="0.0240%" height="15" fill="rgb(206,133,23)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="335.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="309" width="0.0240%" height="15" fill="rgb(243,173,15)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="319.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="293" width="0.0240%" height="15" fill="rgb(228,69,28)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="303.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="277" width="0.0240%" height="15" fill="rgb(212,51,22)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="287.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="261" width="0.0240%" height="15" fill="rgb(227,113,0)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="271.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="245" width="0.0240%" height="15" fill="rgb(252,84,27)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="255.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_scalar_function_call::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2254%" y="229" width="0.0240%" height="15" fill="rgb(223,145,39)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="239.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.2254%" y="213" width="0.0240%" height="15" fill="rgb(239,219,30)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="223.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::try_fold_constant (1 samples, 0.02%)</title><rect x="98.2254%" y="197" width="0.0240%" height="15" fill="rgb(224,196,39)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="207.50"></text></g><g><title>databend-query`common_expression::evaluator::ConstantFolder&lt;Index&gt;::fold (1 samples, 0.02%)</title><rect x="98.2254%" y="181" width="0.0240%" height="15" fill="rgb(205,35,43)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="191.50"></text></g><g><title>databend-query`common_expression::evaluator::ConstantFolder&lt;Index&gt;::fold_to_stable (1 samples, 0.02%)</title><rect x="98.2254%" y="165" width="0.0240%" height="15" fill="rgb(228,201,21)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="175.50"></text></g><g><title>databend-query`common_expression::evaluator::ConstantFolder&lt;Index&gt;::fold_once (1 samples, 0.02%)</title><rect x="98.2254%" y="149" width="0.0240%" height="15" fill="rgb(237,118,16)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="159.50"></text></g><g><title>databend-query`common_expression::evaluator::ConstantFolder&lt;Index&gt;::fold_once (1 samples, 0.02%)</title><rect x="98.2254%" y="133" width="0.0240%" height="15" fill="rgb(241,17,19)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="143.50"></text></g><g><title>databend-query`common_expression::evaluator::ConstantFolder&lt;Index&gt;::calculate_cast (1 samples, 0.02%)</title><rect x="98.2254%" y="117" width="0.0240%" height="15" fill="rgb(214,10,25)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="127.50"></text></g><g><title>databend-query`common_expression::evaluator::ConstantFolder&lt;Index&gt;::calculate_cast (1 samples, 0.02%)</title><rect x="98.2254%" y="101" width="0.0240%" height="15" fill="rgb(238,37,29)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="111.50"></text></g><g><title>databend-query`common_expression::evaluator::ConstantFolder&lt;Index&gt;::calculate_simple_cast (1 samples, 0.02%)</title><rect x="98.2254%" y="85" width="0.0240%" height="15" fill="rgb(253,83,25)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="95.50"></text></g><g><title>databend-query`common_expression::type_check::check_function (1 samples, 0.02%)</title><rect x="98.2254%" y="69" width="0.0240%" height="15" fill="rgb(234,192,12)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="79.50"></text></g><g><title>databend-query`common_expression::function::FunctionRegistry::search_candidates (1 samples, 0.02%)</title><rect x="98.2254%" y="53" width="0.0240%" height="15" fill="rgb(241,216,45)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="63.50"></text></g><g><title>databend-query`core::slice::sort::merge (1 samples, 0.02%)</title><rect x="98.2254%" y="37" width="0.0240%" height="15" fill="rgb(242,22,33)" fg:x="4096" fg:w="1"/><text x="98.4754%" y="47.50"></text></g><g><title>databend-query`&lt;databend_query::stream::progress_stream::ProgressStream as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.02%)</title><rect x="98.2734%" y="933" width="0.0240%" height="15" fill="rgb(231,105,49)" fg:x="4098" fg:w="1"/><text x="98.5234%" y="943.50"></text></g><g><title>databend-query`&lt;databend_query::stream::processor_executor_stream::PullingExecutorStream as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.02%)</title><rect x="98.2734%" y="917" width="0.0240%" height="15" fill="rgb(218,204,15)" fg:x="4098" fg:w="1"/><text x="98.5234%" y="927.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_pulling_executor::PipelinePullingExecutor::pull_data (1 samples, 0.02%)</title><rect x="98.2734%" y="901" width="0.0240%" height="15" fill="rgb(235,138,41)" fg:x="4098" fg:w="1"/><text x="98.5234%" y="911.50"></text></g><g><title>databend-query`std::sync::mpmc::array::Channel&lt;T&gt;::recv (1 samples, 0.02%)</title><rect x="98.2734%" y="885" width="0.0240%" height="15" fill="rgb(246,0,9)" fg:x="4098" fg:w="1"/><text x="98.5234%" y="895.50"></text></g><g><title>databend-query`std::sync::mpmc::context::Context::with::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2734%" y="869" width="0.0240%" height="15" fill="rgb(210,74,4)" fg:x="4098" fg:w="1"/><text x="98.5234%" y="879.50"></text></g><g><title>databend-query`std::thread::park_timeout (1 samples, 0.02%)</title><rect x="98.2734%" y="853" width="0.0240%" height="15" fill="rgb(250,60,41)" fg:x="4098" fg:w="1"/><text x="98.5234%" y="863.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_pipeline_transforms::processors::transforms::transform_multi_sort_merge::MultiSortMergeProcessor&lt;common_expression::types::string::StringColumn&gt;&gt; (2 samples, 0.05%)</title><rect x="98.2974%" y="773" width="0.0480%" height="15" fill="rgb(220,115,12)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="783.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::collections::vec_deque::VecDeque&lt;common_expression::block::DataBlock&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="98.2974%" y="757" width="0.0480%" height="15" fill="rgb(237,100,13)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="767.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="98.2974%" y="741" width="0.0480%" height="15" fill="rgb(213,55,26)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="751.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;common_expression::block::DataBlock&gt;&gt; (2 samples, 0.05%)</title><rect x="98.2974%" y="725" width="0.0480%" height="15" fill="rgb(216,17,4)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="735.50"></text></g><g><title>databend-query`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="98.2974%" y="709" width="0.0480%" height="15" fill="rgb(220,153,47)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="719.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[common_expression::block::DataBlock]&gt; (2 samples, 0.05%)</title><rect x="98.2974%" y="693" width="0.0480%" height="15" fill="rgb(215,131,9)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="703.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::DataBlock&gt; (2 samples, 0.05%)</title><rect x="98.2974%" y="677" width="0.0480%" height="15" fill="rgb(233,46,42)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="687.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="98.2974%" y="661" width="0.0480%" height="15" fill="rgb(226,86,7)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="671.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (2 samples, 0.05%)</title><rect x="98.2974%" y="645" width="0.0480%" height="15" fill="rgb(239,226,21)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="655.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.05%)</title><rect x="98.2974%" y="629" width="0.0480%" height="15" fill="rgb(244,137,22)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.05%)</title><rect x="98.2974%" y="613" width="0.0480%" height="15" fill="rgb(211,139,35)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="98.2974%" y="597" width="0.0480%" height="15" fill="rgb(214,62,50)" fg:x="4099" fg:w="2"/><text x="98.5474%" y="607.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_storages_fuse::operations::read::parquet_data_source_deserializer::DeserializeDataTransform&gt; (1 samples, 0.02%)</title><rect x="98.3453%" y="773" width="0.0240%" height="15" fill="rgb(212,113,44)" fg:x="4101" fg:w="1"/><text x="98.5953%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="98.3453%" y="757" width="0.0240%" height="15" fill="rgb(226,150,43)" fg:x="4101" fg:w="1"/><text x="98.5953%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="98.3693%" y="741" width="0.0240%" height="15" fill="rgb(250,71,37)" fg:x="4102" fg:w="1"/><text x="98.6193%" y="751.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::hash_join::probe_state::ProbeState&gt; (2 samples, 0.05%)</title><rect x="98.3693%" y="773" width="0.0480%" height="15" fill="rgb(219,76,19)" fg:x="4102" fg:w="2"/><text x="98.6193%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.05%)</title><rect x="98.3693%" y="757" width="0.0480%" height="15" fill="rgb(250,39,11)" fg:x="4102" fg:w="2"/><text x="98.6193%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (1 samples, 0.02%)</title><rect x="98.3933%" y="741" width="0.0240%" height="15" fill="rgb(230,64,31)" fg:x="4103" fg:w="1"/><text x="98.6433%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="98.3933%" y="725" width="0.0240%" height="15" fill="rgb(208,222,23)" fg:x="4103" fg:w="1"/><text x="98.6433%" y="735.50"></text></g><g><title>databend-query`&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (7 samples, 0.17%)</title><rect x="98.2734%" y="949" width="0.1679%" height="15" fill="rgb(227,125,18)" fg:x="4098" fg:w="7"/><text x="98.5234%" y="959.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;&gt; (6 samples, 0.14%)</title><rect x="98.2974%" y="933" width="0.1439%" height="15" fill="rgb(234,210,9)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="943.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::stream::progress_stream::ProgressStream&gt; (6 samples, 0.14%)</title><rect x="98.2974%" y="917" width="0.1439%" height="15" fill="rgb(217,127,24)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="927.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;axum::boxed::BoxedIntoRoute&lt;(),hyper::body::body::Body,core::convert::Infallible&gt;&gt; (6 samples, 0.14%)</title><rect x="98.2974%" y="901" width="0.1439%" height="15" fill="rgb(239,141,48)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="911.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::pipeline_pulling_executor::PipelinePullingExecutor&gt; (6 samples, 0.14%)</title><rect x="98.2974%" y="885" width="0.1439%" height="15" fill="rgb(227,109,8)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="895.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.14%)</title><rect x="98.2974%" y="869" width="0.1439%" height="15" fill="rgb(235,184,23)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="879.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::pipeline_executor::PipelineExecutor&gt; (6 samples, 0.14%)</title><rect x="98.2974%" y="853" width="0.1439%" height="15" fill="rgb(227,226,48)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="863.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::executor_graph::RunningGraph&gt; (6 samples, 0.14%)</title><rect x="98.2974%" y="837" width="0.1439%" height="15" fill="rgb(206,150,11)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="847.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect x="98.2974%" y="821" width="0.1439%" height="15" fill="rgb(254,2,33)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="831.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.14%)</title><rect x="98.2974%" y="805" width="0.1439%" height="15" fill="rgb(243,160,20)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="815.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.14%)</title><rect x="98.2974%" y="789" width="0.1439%" height="15" fill="rgb(218,208,30)" fg:x="4099" fg:w="6"/><text x="98.5474%" y="799.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::transform_hash_join::TransformHashJoinProbe&gt; (1 samples, 0.02%)</title><rect x="98.4173%" y="773" width="0.0240%" height="15" fill="rgb(224,120,49)" fg:x="4104" fg:w="1"/><text x="98.6673%" y="783.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="98.4173%" y="757" width="0.0240%" height="15" fill="rgb(246,12,2)" fg:x="4104" fg:w="1"/><text x="98.6673%" y="767.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::hash_join::join_hash_table::JoinHashTable&gt; (1 samples, 0.02%)</title><rect x="98.4173%" y="741" width="0.0240%" height="15" fill="rgb(236,117,3)" fg:x="4104" fg:w="1"/><text x="98.6673%" y="751.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.4173%" y="725" width="0.0240%" height="15" fill="rgb(216,128,52)" fg:x="4104" fg:w="1"/><text x="98.6673%" y="735.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.4173%" y="709" width="0.0240%" height="15" fill="rgb(246,145,19)" fg:x="4104" fg:w="1"/><text x="98.6673%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="98.4173%" y="693" width="0.0240%" height="15" fill="rgb(222,11,46)" fg:x="4104" fg:w="1"/><text x="98.6673%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="98.4173%" y="677" width="0.0240%" height="15" fill="rgb(245,82,36)" fg:x="4104" fg:w="1"/><text x="98.6673%" y="687.50"></text></g><g><title>databend-query`common_expression::values::Column::index_unchecked (2 samples, 0.05%)</title><rect x="98.4412%" y="949" width="0.0480%" height="15" fill="rgb(250,73,51)" fg:x="4105" fg:w="2"/><text x="98.6912%" y="959.50"></text></g><g><title>databend-query`common_expression::types::nullable::NullableColumn&lt;T&gt;::index_unchecked (2 samples, 0.05%)</title><rect x="98.4412%" y="933" width="0.0480%" height="15" fill="rgb(221,189,23)" fg:x="4105" fg:w="2"/><text x="98.6912%" y="943.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;opensrv_mysql::packet_writer::PacketWriter&lt;tokio::io::util::buf_writer::BufWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;::end_packet::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="98.4892%" y="949" width="0.0240%" height="15" fill="rgb(210,33,7)" fg:x="4107" fg:w="1"/><text x="98.7392%" y="959.50"></text></g><g><title>databend-query`&lt;f64 as common_formats::field_encoder::helpers::number_helpers::PrimitiveWithFormat&gt;::write_field (2 samples, 0.05%)</title><rect x="98.5132%" y="917" width="0.0480%" height="15" fill="rgb(210,107,22)" fg:x="4108" fg:w="2"/><text x="98.7632%" y="927.50"></text></g><g><title>databend-query`lexical_write_float::algorithm::compute_nearest_normal (2 samples, 0.05%)</title><rect x="98.5132%" y="901" width="0.0480%" height="15" fill="rgb(222,116,37)" fg:x="4108" fg:w="2"/><text x="98.7632%" y="911.50"></text></g><g><title>databend-query`common_formats::field_encoder::row_based::FieldEncoderRowBased::write_field (1 samples, 0.02%)</title><rect x="98.5612%" y="917" width="0.0240%" height="15" fill="rgb(254,17,48)" fg:x="4110" fg:w="1"/><text x="98.8112%" y="927.50"></text></g><g><title>databend-query`common_formats::field_encoder::row_based::FieldEncoderRowBased::write_nullable (4 samples, 0.10%)</title><rect x="98.5132%" y="933" width="0.0959%" height="15" fill="rgb(224,36,32)" fg:x="4108" fg:w="4"/><text x="98.7632%" y="943.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (1 samples, 0.02%)</title><rect x="98.5851%" y="917" width="0.0240%" height="15" fill="rgb(232,90,46)" fg:x="4111" fg:w="1"/><text x="98.8351%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="98.6331%" y="757" width="0.0240%" height="15" fill="rgb(241,66,40)" fg:x="4113" fg:w="1"/><text x="98.8831%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (1 samples, 0.02%)</title><rect x="98.6571%" y="741" width="0.0240%" height="15" fill="rgb(249,184,29)" fg:x="4114" fg:w="1"/><text x="98.9071%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.6811%" y="741" width="0.0240%" height="15" fill="rgb(231,181,1)" fg:x="4115" fg:w="1"/><text x="98.9311%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="98.6811%" y="725" width="0.0240%" height="15" fill="rgb(224,94,2)" fg:x="4115" fg:w="1"/><text x="98.9311%" y="735.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (5 samples, 0.12%)</title><rect x="98.6091%" y="821" width="0.1199%" height="15" fill="rgb(229,170,15)" fg:x="4112" fg:w="5"/><text x="98.8591%" y="831.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (4 samples, 0.10%)</title><rect x="98.6331%" y="805" width="0.0959%" height="15" fill="rgb(240,127,35)" fg:x="4113" fg:w="4"/><text x="98.8831%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.10%)</title><rect x="98.6331%" y="789" width="0.0959%" height="15" fill="rgb(248,196,34)" fg:x="4113" fg:w="4"/><text x="98.8831%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.10%)</title><rect x="98.6331%" y="773" width="0.0959%" height="15" fill="rgb(236,137,7)" fg:x="4113" fg:w="4"/><text x="98.8831%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.07%)</title><rect x="98.6571%" y="757" width="0.0719%" height="15" fill="rgb(235,127,16)" fg:x="4114" fg:w="3"/><text x="98.9071%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="98.7050%" y="741" width="0.0240%" height="15" fill="rgb(250,192,54)" fg:x="4116" fg:w="1"/><text x="98.9550%" y="751.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.17%)</title><rect x="98.6091%" y="901" width="0.1679%" height="15" fill="rgb(218,98,20)" fg:x="4112" fg:w="7"/><text x="98.8591%" y="911.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.17%)</title><rect x="98.6091%" y="885" width="0.1679%" height="15" fill="rgb(230,176,47)" fg:x="4112" fg:w="7"/><text x="98.8591%" y="895.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.17%)</title><rect x="98.6091%" y="869" width="0.1679%" height="15" fill="rgb(244,2,33)" fg:x="4112" fg:w="7"/><text x="98.8591%" y="879.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (7 samples, 0.17%)</title><rect x="98.6091%" y="853" width="0.1679%" height="15" fill="rgb(231,100,17)" fg:x="4112" fg:w="7"/><text x="98.8591%" y="863.50"></text></g><g><title>databend-query`__rust_realloc (7 samples, 0.17%)</title><rect x="98.6091%" y="837" width="0.1679%" height="15" fill="rgb(245,23,12)" fg:x="4112" fg:w="7"/><text x="98.8591%" y="847.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="98.7290%" y="821" width="0.0480%" height="15" fill="rgb(249,55,22)" fg:x="4117" fg:w="2"/><text x="98.9790%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="98.8010%" y="773" width="0.0240%" height="15" fill="rgb(207,134,9)" fg:x="4120" fg:w="1"/><text x="99.0510%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="98.8249%" y="757" width="0.0240%" height="15" fill="rgb(218,134,0)" fg:x="4121" fg:w="1"/><text x="99.0749%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="98.8249%" y="741" width="0.0240%" height="15" fill="rgb(213,212,33)" fg:x="4121" fg:w="1"/><text x="99.0749%" y="751.50"></text></g><g><title>databend-query`databend_query::servers::mysql::writers::query_result_writer::write_field (17 samples, 0.41%)</title><rect x="98.5132%" y="949" width="0.4077%" height="15" fill="rgb(252,106,18)" fg:x="4108" fg:w="17"/><text x="98.7632%" y="959.50"></text></g><g><title>databend-query`opensrv_mysql::resultset::RowWriter&lt;W&gt;::write_col (13 samples, 0.31%)</title><rect x="98.6091%" y="933" width="0.3118%" height="15" fill="rgb(208,126,42)" fg:x="4112" fg:w="13"/><text x="98.8591%" y="943.50"></text></g><g><title>databend-query`mysql_common::io::WriteMysqlExt::write_lenenc_str (13 samples, 0.31%)</title><rect x="98.6091%" y="917" width="0.3118%" height="15" fill="rgb(246,175,29)" fg:x="4112" fg:w="13"/><text x="98.8591%" y="927.50"></text></g><g><title>databend-query`mysql_common::io::WriteMysqlExt::write_lenenc_int (6 samples, 0.14%)</title><rect x="98.7770%" y="901" width="0.1439%" height="15" fill="rgb(215,13,50)" fg:x="4119" fg:w="6"/><text x="99.0270%" y="911.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.14%)</title><rect x="98.7770%" y="885" width="0.1439%" height="15" fill="rgb(216,172,15)" fg:x="4119" fg:w="6"/><text x="99.0270%" y="895.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.12%)</title><rect x="98.8010%" y="869" width="0.1199%" height="15" fill="rgb(212,103,13)" fg:x="4120" fg:w="5"/><text x="99.0510%" y="879.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.12%)</title><rect x="98.8010%" y="853" width="0.1199%" height="15" fill="rgb(231,171,36)" fg:x="4120" fg:w="5"/><text x="99.0510%" y="863.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (5 samples, 0.12%)</title><rect x="98.8010%" y="837" width="0.1199%" height="15" fill="rgb(250,123,20)" fg:x="4120" fg:w="5"/><text x="99.0510%" y="847.50"></text></g><g><title>databend-query`__rust_realloc (5 samples, 0.12%)</title><rect x="98.8010%" y="821" width="0.1199%" height="15" fill="rgb(212,53,50)" fg:x="4120" fg:w="5"/><text x="99.0510%" y="831.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (5 samples, 0.12%)</title><rect x="98.8010%" y="805" width="0.1199%" height="15" fill="rgb(243,54,12)" fg:x="4120" fg:w="5"/><text x="99.0510%" y="815.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (5 samples, 0.12%)</title><rect x="98.8010%" y="789" width="0.1199%" height="15" fill="rgb(234,101,34)" fg:x="4120" fg:w="5"/><text x="99.0510%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.10%)</title><rect x="98.8249%" y="773" width="0.0959%" height="15" fill="rgb(254,67,22)" fg:x="4121" fg:w="4"/><text x="99.0749%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.07%)</title><rect x="98.8489%" y="757" width="0.0719%" height="15" fill="rgb(250,35,47)" fg:x="4122" fg:w="3"/><text x="99.0989%" y="767.50"></text></g><g><title>databend-query`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.02%)</title><rect x="98.9688%" y="901" width="0.0240%" height="15" fill="rgb(226,126,38)" fg:x="4127" fg:w="1"/><text x="99.2188%" y="911.50"></text></g><g><title>databend-query`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 0.02%)</title><rect x="98.9688%" y="885" width="0.0240%" height="15" fill="rgb(216,138,53)" fg:x="4127" fg:w="1"/><text x="99.2188%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1 samples, 0.02%)</title><rect x="98.9688%" y="869" width="0.0240%" height="15" fill="rgb(246,199,43)" fg:x="4127" fg:w="1"/><text x="99.2188%" y="879.50"></text></g><g><title>databend-query`&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (3 samples, 0.07%)</title><rect x="98.9448%" y="917" width="0.0719%" height="15" fill="rgb(232,125,11)" fg:x="4126" fg:w="3"/><text x="99.1948%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="98.9928%" y="901" width="0.0240%" height="15" fill="rgb(218,219,45)" fg:x="4128" fg:w="1"/><text x="99.2428%" y="911.50"></text></g><g><title>databend-query`opensrv_mysql::packet_writer::PacketWriter&lt;W&gt;::end_packet::_{{closure}} (4 samples, 0.10%)</title><rect x="98.9448%" y="933" width="0.0959%" height="15" fill="rgb(216,102,54)" fg:x="4126" fg:w="4"/><text x="99.1948%" y="943.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="99.0168%" y="917" width="0.0240%" height="15" fill="rgb(250,228,7)" fg:x="4129" fg:w="1"/><text x="99.2668%" y="927.50"></text></g><g><title>databend-query`opensrv_mysql::resultset::RowWriter&lt;W&gt;::end_row::_{{closure}} (6 samples, 0.14%)</title><rect x="98.9209%" y="949" width="0.1439%" height="15" fill="rgb(226,125,25)" fg:x="4125" fg:w="6"/><text x="99.1709%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="99.0408%" y="933" width="0.0240%" height="15" fill="rgb(224,165,27)" fg:x="4130" fg:w="1"/><text x="99.2908%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="99.2326%" y="773" width="0.0240%" height="15" fill="rgb(233,86,3)" fg:x="4138" fg:w="1"/><text x="99.4826%" y="783.50"></text></g><g><title>databend-query`alloc::fmt::format::format_inner (7 samples, 0.17%)</title><rect x="99.1127%" y="917" width="0.1679%" height="15" fill="rgb(228,116,20)" fg:x="4133" fg:w="7"/><text x="99.3627%" y="927.50"></text></g><g><title>databend-query`core::fmt::write (6 samples, 0.14%)</title><rect x="99.1367%" y="901" width="0.1439%" height="15" fill="rgb(209,192,17)" fg:x="4134" fg:w="6"/><text x="99.3867%" y="911.50"></text></g><g><title>databend-query`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (6 samples, 0.14%)</title><rect x="99.1367%" y="885" width="0.1439%" height="15" fill="rgb(224,88,34)" fg:x="4134" fg:w="6"/><text x="99.3867%" y="895.50"></text></g><g><title>databend-query`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.07%)</title><rect x="99.2086%" y="869" width="0.0719%" height="15" fill="rgb(233,38,6)" fg:x="4137" fg:w="3"/><text x="99.4586%" y="879.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect x="99.2326%" y="853" width="0.0480%" height="15" fill="rgb(212,59,30)" fg:x="4138" fg:w="2"/><text x="99.4826%" y="863.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="99.2326%" y="837" width="0.0480%" height="15" fill="rgb(213,80,3)" fg:x="4138" fg:w="2"/><text x="99.4826%" y="847.50"></text></g><g><title>databend-query`__rust_alloc (2 samples, 0.05%)</title><rect x="99.2326%" y="821" width="0.0480%" height="15" fill="rgb(251,178,7)" fg:x="4138" fg:w="2"/><text x="99.4826%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="99.2326%" y="805" width="0.0480%" height="15" fill="rgb(213,154,26)" fg:x="4138" fg:w="2"/><text x="99.4826%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="99.2326%" y="789" width="0.0480%" height="15" fill="rgb(238,165,49)" fg:x="4138" fg:w="2"/><text x="99.4826%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="99.2566%" y="773" width="0.0240%" height="15" fill="rgb(248,91,46)" fg:x="4139" fg:w="1"/><text x="99.5066%" y="783.50"></text></g><g><title>databend-query`mysql_common::io::WriteMysqlExt::write_lenenc_int (1 samples, 0.02%)</title><rect x="99.2806%" y="901" width="0.0240%" height="15" fill="rgb(244,21,52)" fg:x="4140" fg:w="1"/><text x="99.5306%" y="911.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="99.2806%" y="885" width="0.0240%" height="15" fill="rgb(247,122,20)" fg:x="4140" fg:w="1"/><text x="99.5306%" y="895.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="99.2806%" y="869" width="0.0240%" height="15" fill="rgb(218,27,9)" fg:x="4140" fg:w="1"/><text x="99.5306%" y="879.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="99.2806%" y="853" width="0.0240%" height="15" fill="rgb(246,7,6)" fg:x="4140" fg:w="1"/><text x="99.5306%" y="863.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.2806%" y="837" width="0.0240%" height="15" fill="rgb(227,135,54)" fg:x="4140" fg:w="1"/><text x="99.5306%" y="847.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="99.2806%" y="821" width="0.0240%" height="15" fill="rgb(247,14,11)" fg:x="4140" fg:w="1"/><text x="99.5306%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.2806%" y="805" width="0.0240%" height="15" fill="rgb(206,149,34)" fg:x="4140" fg:w="1"/><text x="99.5306%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.2806%" y="789" width="0.0240%" height="15" fill="rgb(227,228,4)" fg:x="4140" fg:w="1"/><text x="99.5306%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="99.2806%" y="773" width="0.0240%" height="15" fill="rgb(238,218,28)" fg:x="4140" fg:w="1"/><text x="99.5306%" y="783.50"></text></g><g><title>databend-query`mysql_common::io::WriteMysqlExt::write_lenenc_str (4 samples, 0.10%)</title><rect x="99.2806%" y="917" width="0.0959%" height="15" fill="rgb(252,86,40)" fg:x="4140" fg:w="4"/><text x="99.5306%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="99.3046%" y="901" width="0.0719%" height="15" fill="rgb(251,225,11)" fg:x="4141" fg:w="3"/><text x="99.5546%" y="911.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.10%)</title><rect x="99.3765%" y="917" width="0.0959%" height="15" fill="rgb(206,46,49)" fg:x="4144" fg:w="4"/><text x="99.6265%" y="927.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker&lt;W&gt; as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::on_query::_{{closure}} (91 samples, 2.18%)</title><rect x="97.3621%" y="1029" width="2.1823%" height="15" fill="rgb(245,128,24)" fg:x="4060" fg:w="91"/><text x="97.6121%" y="1039.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (91 samples, 2.18%)</title><rect x="97.3621%" y="1013" width="2.1823%" height="15" fill="rgb(219,177,34)" fg:x="4060" fg:w="91"/><text x="97.6121%" y="1023.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (54 samples, 1.29%)</title><rect x="98.2494%" y="997" width="1.2950%" height="15" fill="rgb(218,60,48)" fg:x="4097" fg:w="54"/><text x="98.4994%" y="1007.50"></text></g><g><title>databend-query`databend_query::servers::mysql::writers::query_result_writer::DFQueryResultWriter&lt;W&gt;::ok::_{{closure}} (54 samples, 1.29%)</title><rect x="98.2494%" y="981" width="1.2950%" height="15" fill="rgb(221,11,5)" fg:x="4097" fg:w="54"/><text x="98.4994%" y="991.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (54 samples, 1.29%)</title><rect x="98.2494%" y="965" width="1.2950%" height="15" fill="rgb(220,148,13)" fg:x="4097" fg:w="54"/><text x="98.4994%" y="975.50"></text></g><g><title>databend-query`opensrv_mysql::resultset::RowWriter&lt;W&gt;::write_col (20 samples, 0.48%)</title><rect x="99.0647%" y="949" width="0.4796%" height="15" fill="rgb(210,16,3)" fg:x="4131" fg:w="20"/><text x="99.3147%" y="959.50"></text></g><g><title>databend-query`&lt;i64 as opensrv_mysql::value::encode::ToMysqlValue&gt;::to_mysql_text (19 samples, 0.46%)</title><rect x="99.0887%" y="933" width="0.4556%" height="15" fill="rgb(236,80,2)" fg:x="4132" fg:w="19"/><text x="99.3387%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="99.4724%" y="917" width="0.0719%" height="15" fill="rgb(239,129,19)" fg:x="4148" fg:w="3"/><text x="99.7224%" y="927.50"></text></g><g><title>databend-query`opensrv_mysql::AsyncMysqlIntermediary&lt;B,R,W&gt;::run_with_options::_{{closure}} (97 samples, 2.33%)</title><rect x="97.2422%" y="1045" width="2.3261%" height="15" fill="rgb(220,106,35)" fg:x="4055" fg:w="97"/><text x="97.4922%" y="1055.50">d..</text></g><g><title>databend-query`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.02%)</title><rect x="99.5444%" y="1029" width="0.0240%" height="15" fill="rgb(252,139,45)" fg:x="4151" fg:w="1"/><text x="99.7944%" y="1039.50"></text></g><g><title>databend-query`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 0.02%)</title><rect x="99.5444%" y="1013" width="0.0240%" height="15" fill="rgb(229,8,36)" fg:x="4151" fg:w="1"/><text x="99.7944%" y="1023.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1 samples, 0.02%)</title><rect x="99.5444%" y="997" width="0.0240%" height="15" fill="rgb(230,126,33)" fg:x="4151" fg:w="1"/><text x="99.7944%" y="1007.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::run (141 samples, 3.38%)</title><rect x="96.2110%" y="1221" width="3.3813%" height="15" fill="rgb(239,140,21)" fg:x="4012" fg:w="141"/><text x="96.4610%" y="1231.50">dat..</text></g><g><title>databend-query`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (141 samples, 3.38%)</title><rect x="96.2110%" y="1205" width="3.3813%" height="15" fill="rgb(254,104,9)" fg:x="4012" fg:w="141"/><text x="96.4610%" y="1215.50">dat..</text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (138 samples, 3.31%)</title><rect x="96.2830%" y="1189" width="3.3094%" height="15" fill="rgb(239,52,14)" fg:x="4015" fg:w="138"/><text x="96.5330%" y="1199.50">dat..</text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (138 samples, 3.31%)</title><rect x="96.2830%" y="1173" width="3.3094%" height="15" fill="rgb(208,227,44)" fg:x="4015" fg:w="138"/><text x="96.5330%" y="1183.50">dat..</text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (138 samples, 3.31%)</title><rect x="96.2830%" y="1157" width="3.3094%" height="15" fill="rgb(246,18,19)" fg:x="4015" fg:w="138"/><text x="96.5330%" y="1167.50">dat..</text></g><g><title>databend-query`tokio::runtime::task::harness::poll_future (138 samples, 3.31%)</title><rect x="96.2830%" y="1141" width="3.3094%" height="15" fill="rgb(235,228,25)" fg:x="4015" fg:w="138"/><text x="96.5330%" y="1151.50">dat..</text></g><g><title>databend-query`std::panicking::try (138 samples, 3.31%)</title><rect x="96.2830%" y="1125" width="3.3094%" height="15" fill="rgb(240,156,20)" fg:x="4015" fg:w="138"/><text x="96.5330%" y="1135.50">dat..</text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (138 samples, 3.31%)</title><rect x="96.2830%" y="1109" width="3.3094%" height="15" fill="rgb(224,8,20)" fg:x="4015" fg:w="138"/><text x="96.5330%" y="1119.50">dat..</text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (138 samples, 3.31%)</title><rect x="96.2830%" y="1093" width="3.3094%" height="15" fill="rgb(214,12,52)" fg:x="4015" fg:w="138"/><text x="96.5330%" y="1103.50">dat..</text></g><g><title>databend-query`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (135 samples, 3.24%)</title><rect x="96.3549%" y="1077" width="3.2374%" height="15" fill="rgb(211,220,47)" fg:x="4018" fg:w="135"/><text x="96.6049%" y="1087.50">dat..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (124 samples, 2.97%)</title><rect x="96.6187%" y="1061" width="2.9736%" height="15" fill="rgb(250,173,5)" fg:x="4029" fg:w="124"/><text x="96.8687%" y="1071.50">dat..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5683%" y="1045" width="0.0240%" height="15" fill="rgb(250,125,52)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="1055.50"></text></g><g><title>databend-query`storages_common_cache::read::cached_reader::CachedReader&lt;L,storages_common_cache::cache::NamedCache&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,common_cache::cache::lru::LruCache&lt;alloc::string::String,alloc::sync::Arc&lt;V&gt;,S,M&gt;&gt;&gt;&gt;&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5683%" y="1029" width="0.0240%" height="15" fill="rgb(209,133,18)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="1039.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5683%" y="1013" width="0.0240%" height="15" fill="rgb(216,173,22)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="1023.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::io::read::meta::meta_readers::LoaderWrapper&lt;(opendal::types::operator::operator::Operator,alloc::sync::Arc&lt;common_expression::schema::TableSchema&gt;)&gt; as storages_common_cache::read::loader::Loader&lt;storages_common_table_meta::meta::v4::segment::CompactSegmentInfo&gt;&gt;::load::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5683%" y="997" width="0.0240%" height="15" fill="rgb(205,3,22)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="1007.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5683%" y="981" width="0.0240%" height="15" fill="rgb(248,22,20)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="991.50"></text></g><g><title>databend-query`storages_common_table_meta::readers::segment_reader::_&lt;impl storages_common_table_meta::readers::versioned_reader::VersionedReader&lt;storages_common_table_meta::meta::v4::segment::CompactSegmentInfo&gt; for (storages_common_table_meta::meta::versions::SegmentInfoVersion,alloc::sync::Arc&lt;common_expression::schema::TableSchema&gt;)&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5683%" y="965" width="0.0240%" height="15" fill="rgb(233,6,29)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="975.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5683%" y="949" width="0.0240%" height="15" fill="rgb(240,22,54)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="959.50"></text></g><g><title>databend-query`storages_common_table_meta::meta::v4::segment::CompactSegmentInfo::from_slice (1 samples, 0.02%)</title><rect x="99.5683%" y="933" width="0.0240%" height="15" fill="rgb(231,133,32)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="943.50"></text></g><g><title>databend-query`storages_common_table_meta::meta::format::read_and_deserialize (1 samples, 0.02%)</title><rect x="99.5683%" y="917" width="0.0240%" height="15" fill="rgb(248,193,4)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="927.50"></text></g><g><title>databend-query`storages_common_table_meta::meta::format::decompress (1 samples, 0.02%)</title><rect x="99.5683%" y="901" width="0.0240%" height="15" fill="rgb(211,178,46)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="911.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (1 samples, 0.02%)</title><rect x="99.5683%" y="885" width="0.0240%" height="15" fill="rgb(224,5,42)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="99.5683%" y="869" width="0.0240%" height="15" fill="rgb(239,176,25)" fg:x="4152" fg:w="1"/><text x="99.8183%" y="879.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Inner::run (143 samples, 3.43%)</title><rect x="96.1871%" y="1381" width="3.4293%" height="15" fill="rgb(245,187,50)" fg:x="4011" fg:w="143"/><text x="96.4371%" y="1391.50">dat..</text></g><g><title>databend-query`tokio::runtime::task::UnownedTask&lt;S&gt;::run (142 samples, 3.41%)</title><rect x="96.2110%" y="1365" width="3.4053%" height="15" fill="rgb(248,24,15)" fg:x="4012" fg:w="142"/><text x="96.4610%" y="1375.50">dat..</text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (142 samples, 3.41%)</title><rect x="96.2110%" y="1349" width="3.4053%" height="15" fill="rgb(205,166,13)" fg:x="4012" fg:w="142"/><text x="96.4610%" y="1359.50">dat..</text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (142 samples, 3.41%)</title><rect x="96.2110%" y="1333" width="3.4053%" height="15" fill="rgb(208,114,23)" fg:x="4012" fg:w="142"/><text x="96.4610%" y="1343.50">dat..</text></g><g><title>databend-query`tokio::runtime::task::harness::poll_future (142 samples, 3.41%)</title><rect x="96.2110%" y="1317" width="3.4053%" height="15" fill="rgb(239,127,18)" fg:x="4012" fg:w="142"/><text x="96.4610%" y="1327.50">dat..</text></g><g><title>databend-query`std::panicking::try (142 samples, 3.41%)</title><rect x="96.2110%" y="1301" width="3.4053%" height="15" fill="rgb(219,154,28)" fg:x="4012" fg:w="142"/><text x="96.4610%" y="1311.50">dat..</text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (142 samples, 3.41%)</title><rect x="96.2110%" y="1285" width="3.4053%" height="15" fill="rgb(225,157,23)" fg:x="4012" fg:w="142"/><text x="96.4610%" y="1295.50">dat..</text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (142 samples, 3.41%)</title><rect x="96.2110%" y="1269" width="3.4053%" height="15" fill="rgb(219,8,6)" fg:x="4012" fg:w="142"/><text x="96.4610%" y="1279.50">dat..</text></g><g><title>databend-query`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (142 samples, 3.41%)</title><rect x="96.2110%" y="1253" width="3.4053%" height="15" fill="rgb(212,47,6)" fg:x="4012" fg:w="142"/><text x="96.4610%" y="1263.50">dat..</text></g><g><title>databend-query`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (142 samples, 3.41%)</title><rect x="96.2110%" y="1237" width="3.4053%" height="15" fill="rgb(224,190,4)" fg:x="4012" fg:w="142"/><text x="96.4610%" y="1247.50">dat..</text></g><g><title>libsystem_kernel.dylib`__lseek (1 samples, 0.02%)</title><rect x="99.5923%" y="1221" width="0.0240%" height="15" fill="rgb(239,183,29)" fg:x="4153" fg:w="1"/><text x="99.8423%" y="1231.50"></text></g><g><title>databend-query`tokio::runtime::handle::Handle::enter (1 samples, 0.02%)</title><rect x="99.6163%" y="1381" width="0.0240%" height="15" fill="rgb(213,57,7)" fg:x="4154" fg:w="1"/><text x="99.8663%" y="1391.50"></text></g><g><title>databend-query`tokio::runtime::context::try_set_current (1 samples, 0.02%)</title><rect x="99.6163%" y="1365" width="0.0240%" height="15" fill="rgb(216,148,1)" fg:x="4154" fg:w="1"/><text x="99.8663%" y="1375.50"></text></g><g><title>databend-query`std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.02%)</title><rect x="99.6163%" y="1349" width="0.0240%" height="15" fill="rgb(236,182,29)" fg:x="4154" fg:w="1"/><text x="99.8663%" y="1359.50"></text></g><g><title>databend-query`std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_register_dtor (1 samples, 0.02%)</title><rect x="99.6163%" y="1333" width="0.0240%" height="15" fill="rgb(244,120,48)" fg:x="4154" fg:w="1"/><text x="99.8663%" y="1343.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="99.6163%" y="1317" width="0.0240%" height="15" fill="rgb(206,71,34)" fg:x="4154" fg:w="1"/><text x="99.8663%" y="1327.50"></text></g><g><title>databend-query`tokio::runtime::runtime::Runtime::block_on (1 samples, 0.02%)</title><rect x="99.6403%" y="1381" width="0.0240%" height="15" fill="rgb(242,32,6)" fg:x="4155" fg:w="1"/><text x="99.8903%" y="1391.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::MultiThread::block_on (1 samples, 0.02%)</title><rect x="99.6403%" y="1365" width="0.0240%" height="15" fill="rgb(241,35,3)" fg:x="4155" fg:w="1"/><text x="99.8903%" y="1375.50"></text></g><g><title>databend-query`tokio::runtime::park::CachedParkThread::block_on (1 samples, 0.02%)</title><rect x="99.6403%" y="1349" width="0.0240%" height="15" fill="rgb(222,62,19)" fg:x="4155" fg:w="1"/><text x="99.8903%" y="1359.50"></text></g><g><title>databend-query`tokio::runtime::park::Inner::park (1 samples, 0.02%)</title><rect x="99.6403%" y="1333" width="0.0240%" height="15" fill="rgb(223,110,41)" fg:x="4155" fg:w="1"/><text x="99.8903%" y="1343.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.02%)</title><rect x="99.6403%" y="1317" width="0.0240%" height="15" fill="rgb(208,224,4)" fg:x="4155" fg:w="1"/><text x="99.8903%" y="1327.50"></text></g><g><title>databend-query`std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.02%)</title><rect x="99.6403%" y="1301" width="0.0240%" height="15" fill="rgb(241,137,19)" fg:x="4155" fg:w="1"/><text x="99.8903%" y="1311.50"></text></g><g><title>databend-query`crossbeam_channel::channel::Receiver&lt;T&gt;::recv (1 samples, 0.02%)</title><rect x="99.6643%" y="1365" width="0.0240%" height="15" fill="rgb(244,24,17)" fg:x="4156" fg:w="1"/><text x="99.9143%" y="1375.50"></text></g><g><title>databend-query`crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (1 samples, 0.02%)</title><rect x="99.6643%" y="1349" width="0.0240%" height="15" fill="rgb(245,178,49)" fg:x="4156" fg:w="1"/><text x="99.9143%" y="1359.50"></text></g><g><title>databend-query`crossbeam_channel::context::Context::with::_{{closure}} (1 samples, 0.02%)</title><rect x="99.6643%" y="1333" width="0.0240%" height="15" fill="rgb(219,160,38)" fg:x="4156" fg:w="1"/><text x="99.9143%" y="1343.50"></text></g><g><title>libdispatch.dylib`dispatch_semaphore_wait (1 samples, 0.02%)</title><rect x="99.6643%" y="1317" width="0.0240%" height="15" fill="rgb(228,137,14)" fg:x="4156" fg:w="1"/><text x="99.9143%" y="1327.50"></text></g><g><title>databend-query`std::panicking::try (4,041 samples, 96.91%)</title><rect x="2.8058%" y="1413" width="96.9065%" height="15" fill="rgb(237,134,11)" fg:x="117" fg:w="4041"/><text x="3.0558%" y="1423.50">databend-query`std::panicking::try</text></g><g><title>databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace (4,041 samples, 96.91%)</title><rect x="2.8058%" y="1397" width="96.9065%" height="15" fill="rgb(211,126,44)" fg:x="117" fg:w="4041"/><text x="3.0558%" y="1407.50">databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>databend-query`tracing_appender::worker::Worker&lt;T&gt;::work (2 samples, 0.05%)</title><rect x="99.6643%" y="1381" width="0.0480%" height="15" fill="rgb(226,171,33)" fg:x="4156" fg:w="2"/><text x="99.9143%" y="1391.50"></text></g><g><title>databend-query`std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.02%)</title><rect x="99.6882%" y="1365" width="0.0240%" height="15" fill="rgb(253,99,13)" fg:x="4157" fg:w="1"/><text x="99.9382%" y="1375.50"></text></g><g><title>dyld`dyld4::RuntimeState::_instantiateTLVs (1 samples, 0.02%)</title><rect x="99.7122%" y="1381" width="0.0240%" height="15" fill="rgb(244,48,7)" fg:x="4158" fg:w="1"/><text x="99.9622%" y="1391.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.7122%" y="1365" width="0.0240%" height="15" fill="rgb(244,217,54)" fg:x="4158" fg:w="1"/><text x="99.9622%" y="1375.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.7122%" y="1349" width="0.0240%" height="15" fill="rgb(224,15,18)" fg:x="4158" fg:w="1"/><text x="99.9622%" y="1359.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.7122%" y="1333" width="0.0240%" height="15" fill="rgb(244,99,12)" fg:x="4158" fg:w="1"/><text x="99.9622%" y="1343.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="99.7122%" y="1317" width="0.0240%" height="15" fill="rgb(233,226,8)" fg:x="4158" fg:w="1"/><text x="99.9622%" y="1327.50"></text></g><g><title>databend-query`core::ops::function::FnOnce::call_once{{vtable.shim}} (4,043 samples, 96.95%)</title><rect x="2.8058%" y="1429" width="96.9544%" height="15" fill="rgb(229,211,3)" fg:x="117" fg:w="4043"/><text x="3.0558%" y="1439.50">databend-query`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>databend-query`std::sys_common::thread_info::set (2 samples, 0.05%)</title><rect x="99.7122%" y="1413" width="0.0480%" height="15" fill="rgb(216,140,21)" fg:x="4158" fg:w="2"/><text x="99.9622%" y="1423.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.05%)</title><rect x="99.7122%" y="1397" width="0.0480%" height="15" fill="rgb(234,122,30)" fg:x="4158" fg:w="2"/><text x="99.9622%" y="1407.50"></text></g><g><title>dyld`memmove (1 samples, 0.02%)</title><rect x="99.7362%" y="1381" width="0.0240%" height="15" fill="rgb(236,25,46)" fg:x="4159" fg:w="1"/><text x="99.9862%" y="1391.50"></text></g><g><title>databend-query`std::sys::unix::thread::Thread::new::thread_start (4,045 samples, 97.00%)</title><rect x="2.8058%" y="1445" width="97.0024%" height="15" fill="rgb(217,52,54)" fg:x="117" fg:w="4045"/><text x="3.0558%" y="1455.50">databend-query`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>databend-query`std::sys::unix::stack_overflow::imp::make_handler (2 samples, 0.05%)</title><rect x="99.7602%" y="1429" width="0.0480%" height="15" fill="rgb(222,29,26)" fg:x="4160" fg:w="2"/><text x="100.0102%" y="1439.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (2 samples, 0.05%)</title><rect x="99.7602%" y="1413" width="0.0480%" height="15" fill="rgb(216,177,29)" fg:x="4160" fg:w="2"/><text x="100.0102%" y="1423.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.02%)</title><rect x="99.8082%" y="1445" width="0.0240%" height="15" fill="rgb(247,136,51)" fg:x="4162" fg:w="1"/><text x="100.0582%" y="1455.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="99.8321%" y="1429" width="0.0240%" height="15" fill="rgb(231,47,47)" fg:x="4163" fg:w="1"/><text x="100.0821%" y="1439.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (4 samples, 0.10%)</title><rect x="99.8561%" y="1429" width="0.0959%" height="15" fill="rgb(211,192,36)" fg:x="4164" fg:w="4"/><text x="100.1061%" y="1439.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (4 samples, 0.10%)</title><rect x="99.8561%" y="1413" width="0.0959%" height="15" fill="rgb(229,156,32)" fg:x="4164" fg:w="4"/><text x="100.1061%" y="1423.50"></text></g><g><title>all (4,170 samples, 100%)</title><rect x="0.0000%" y="1493" width="100.0000%" height="15" fill="rgb(248,213,20)" fg:x="0" fg:w="4170"/><text x="0.2500%" y="1503.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (4,054 samples, 97.22%)</title><rect x="2.7818%" y="1477" width="97.2182%" height="15" fill="rgb(217,64,7)" fg:x="116" fg:w="4054"/><text x="3.0318%" y="1487.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (4,053 samples, 97.19%)</title><rect x="2.8058%" y="1461" width="97.1942%" height="15" fill="rgb(232,142,8)" fg:x="117" fg:w="4053"/><text x="3.0558%" y="1471.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (7 samples, 0.17%)</title><rect x="99.8321%" y="1445" width="0.1679%" height="15" fill="rgb(224,92,44)" fg:x="4163" fg:w="7"/><text x="100.0821%" y="1455.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (2 samples, 0.05%)</title><rect x="99.9520%" y="1429" width="0.0480%" height="15" fill="rgb(214,169,17)" fg:x="4168" fg:w="2"/><text x="100.2020%" y="1439.50"></text></g><g><title>dyld`dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.02%)</title><rect x="99.9760%" y="1413" width="0.0240%" height="15" fill="rgb(210,59,37)" fg:x="4169" fg:w="1"/><text x="100.2260%" y="1423.50"></text></g><g><title>dyld`invocation function for block in dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.02%)</title><rect x="99.9760%" y="1397" width="0.0240%" height="15" fill="rgb(214,116,48)" fg:x="4169" fg:w="1"/><text x="100.2260%" y="1407.50"></text></g><g><title>databend-query`std::sys::common::thread_local::fast_local::destroy_value (1 samples, 0.02%)</title><rect x="99.9760%" y="1381" width="0.0240%" height="15" fill="rgb(244,191,6)" fg:x="4169" fg:w="1"/><text x="100.2260%" y="1391.50"></text></g></svg></svg>