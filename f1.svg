<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1238" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1221.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1221.00"> </text><svg id="frames" x="10" width="1180" total_samples="9489"><g><title>databend-query`common_config::inner::InnerConfig::load (1 samples, 0.01%)</title><rect x="0.0000%" y="981" width="0.0105%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50"></text></g><g><title>databend-query`common_config::config::Config::load (1 samples, 0.01%)</title><rect x="0.0000%" y="965" width="0.0105%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>databend-query`serfig::builder::Builder&lt;V&gt;::build (1 samples, 0.01%)</title><rect x="0.0000%" y="949" width="0.0105%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>databend-query`serfig::builder::Builder&lt;V&gt;::build_with (1 samples, 0.01%)</title><rect x="0.0000%" y="933" width="0.0105%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>databend-query`serde_bridge::ser::into_value (1 samples, 0.01%)</title><rect x="0.0000%" y="917" width="0.0105%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>databend-query`common_config::config::_::_&lt;impl serde::ser::Serialize for common_config::config::Config&gt;::serialize (1 samples, 0.01%)</title><rect x="0.0000%" y="901" width="0.0105%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>databend-query`&lt;serde_bridge::ser::StructSerializer as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.01%)</title><rect x="0.0000%" y="885" width="0.0105%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>databend-query`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.01%)</title><rect x="0.0000%" y="869" width="0.0105%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>databend-query`&lt;databend_query::api::rpc_service::RpcService as databend_query::servers::server::Server&gt;::start (1 samples, 0.01%)</title><rect x="0.0105%" y="965" width="0.0105%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2605%" y="975.50"></text></g><g><title>databend-query`databend_query::entry::start_services::_{{closure}} (2 samples, 0.02%)</title><rect x="0.0105%" y="981" width="0.0211%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.2605%" y="991.50"></text></g><g><title>databend-query`&lt;databend_query::servers::http::http_services::HttpHandler as databend_query::servers::server::Server&gt;::start::_{{closure}} (1 samples, 0.01%)</title><rect x="0.0211%" y="965" width="0.0105%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.2711%" y="975.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="0.0211%" y="949" width="0.0105%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.2711%" y="959.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="0.0211%" y="933" width="0.0105%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.2711%" y="943.50"></text></g><g><title>databend-query`databend_query::servers::http::http_services::HttpHandler::build_router::_{{closure}} (1 samples, 0.01%)</title><rect x="0.0211%" y="917" width="0.0105%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.2711%" y="927.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="0.0211%" y="901" width="0.0105%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.2711%" y="911.50"></text></g><g><title>databend-query`databend_query::servers::http::clickhouse_handler::clickhouse_router (1 samples, 0.01%)</title><rect x="0.0211%" y="885" width="0.0105%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.2711%" y="895.50"></text></g><g><title>databend-query`poem::route::router::Route::try_at (1 samples, 0.01%)</title><rect x="0.0211%" y="869" width="0.0105%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.2711%" y="879.50"></text></g><g><title>databend-query`poem::route::router::normalize_path (1 samples, 0.01%)</title><rect x="0.0211%" y="853" width="0.0105%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.2711%" y="863.50"></text></g><g><title>databend-query`regex::re_unicode::Regex::new (1 samples, 0.01%)</title><rect x="0.0211%" y="837" width="0.0105%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.2711%" y="847.50"></text></g><g><title>databend-query`regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.01%)</title><rect x="0.0211%" y="821" width="0.0105%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.2711%" y="831.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="0.0211%" y="805" width="0.0105%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.2711%" y="815.50"></text></g><g><title>databend-query`common_catalog::table::Table::name (1 samples, 0.01%)</title><rect x="0.0316%" y="789" width="0.0105%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.2816%" y="799.50"></text></g><g><title>databend-query`&lt;common_catalog::catalog::manager::CatalogManager as databend_query::catalogs::catalog_manager::CatalogManagerHelper&gt;::init::_{{closure}} (2 samples, 0.02%)</title><rect x="0.0316%" y="933" width="0.0211%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="2"/><text x="0.2816%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="0.0316%" y="917" width="0.0211%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="2"/><text x="0.2816%" y="927.50"></text></g><g><title>databend-query`&lt;common_catalog::catalog::manager::CatalogManager as databend_query::catalogs::catalog_manager::CatalogManagerHelper&gt;::try_create::_{{closure}} (2 samples, 0.02%)</title><rect x="0.0316%" y="901" width="0.0211%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="2"/><text x="0.2816%" y="911.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="0.0316%" y="885" width="0.0211%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="2"/><text x="0.2816%" y="895.50"></text></g><g><title>databend-query`&lt;common_catalog::catalog::manager::CatalogManager as databend_query::catalogs::catalog_manager::CatalogManagerHelper&gt;::register_build_in_catalogs::_{{closure}} (2 samples, 0.02%)</title><rect x="0.0316%" y="869" width="0.0211%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="2"/><text x="0.2816%" y="879.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="0.0316%" y="853" width="0.0211%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="2"/><text x="0.2816%" y="863.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="0.0316%" y="837" width="0.0211%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="2"/><text x="0.2816%" y="847.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="0.0316%" y="821" width="0.0211%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="2"/><text x="0.2816%" y="831.50"></text></g><g><title>databend-query`databend_query::databases::system::system_database::SystemDatabase::create (2 samples, 0.02%)</title><rect x="0.0316%" y="805" width="0.0211%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="2"/><text x="0.2816%" y="815.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_meta_app::schema::table::TableMeta&gt; (1 samples, 0.01%)</title><rect x="0.0422%" y="789" width="0.0105%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="0.2922%" y="799.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="0.0527%" y="885" width="0.0105%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="0.3027%" y="895.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="0.0527%" y="869" width="0.0105%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="0.3027%" y="879.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="0.0527%" y="853" width="0.0105%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.3027%" y="863.50"></text></g><g><title>databend-query`rustls::client::builder::_&lt;impl rustls::builder::ConfigBuilder&lt;rustls::client::client_conn::ClientConfig,rustls::client::builder::WantsTransparencyPolicyOrClientCert&gt;&gt;::with_no_client_auth (1 samples, 0.01%)</title><rect x="0.0632%" y="885" width="0.0105%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="1"/><text x="0.3132%" y="895.50"></text></g><g><title>databend-query`rustls::client::builder::_&lt;impl rustls::builder::ConfigBuilder&lt;rustls::client::client_conn::ClientConfig,rustls::client::builder::WantsClientCert&gt;&gt;::with_client_cert_resolver (1 samples, 0.01%)</title><rect x="0.0632%" y="869" width="0.0105%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="1"/><text x="0.3132%" y="879.50"></text></g><g><title>databend-query`rustls::limited_cache::LimitedCache&lt;K,V&gt;::new (1 samples, 0.01%)</title><rect x="0.0632%" y="853" width="0.0105%" height="15" fill="rgb(245,192,40)" fg:x="6" fg:w="1"/><text x="0.3132%" y="863.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.01%)</title><rect x="0.0738%" y="837" width="0.0105%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="0.3238%" y="847.50"></text></g><g><title>Security`SecTrustDestroy (1 samples, 0.01%)</title><rect x="0.0738%" y="821" width="0.0105%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="1"/><text x="0.3238%" y="831.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.01%)</title><rect x="0.0738%" y="805" width="0.0105%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="1"/><text x="0.3238%" y="815.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke (1 samples, 0.01%)</title><rect x="0.0843%" y="677" width="0.0105%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="0.3343%" y="687.50"></text></g><g><title>Security`SecXPCDictionarySetPolicies (1 samples, 0.01%)</title><rect x="0.0843%" y="661" width="0.0105%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="0.3343%" y="671.50"></text></g><g><title>CoreFoundation`_CFXPCCreateXPCObjectFromCFObject (1 samples, 0.01%)</title><rect x="0.0843%" y="645" width="0.0105%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="0.3343%" y="655.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __apply:context:] (1 samples, 0.01%)</title><rect x="0.0843%" y="629" width="0.0105%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="0.3343%" y="639.50"></text></g><g><title>CoreFoundation`__CFXPCDictionaryApplier (1 samples, 0.01%)</title><rect x="0.0843%" y="613" width="0.0105%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="0.3343%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="0.0843%" y="597" width="0.0105%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="0.3343%" y="607.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_send_with_result_and_wait_for_reply (2 samples, 0.02%)</title><rect x="0.0948%" y="645" width="0.0211%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="2"/><text x="0.3448%" y="655.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_and_wait_for_reply (2 samples, 0.02%)</title><rect x="0.0948%" y="629" width="0.0211%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="2"/><text x="0.3448%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (2 samples, 0.02%)</title><rect x="0.0948%" y="613" width="0.0211%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="2"/><text x="0.3448%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_dispose (1 samples, 0.01%)</title><rect x="0.1159%" y="613" width="0.0105%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="0.3659%" y="623.50"></text></g><g><title>libobjc.A.dylib`objc_destructInstance (1 samples, 0.01%)</title><rect x="0.1159%" y="597" width="0.0105%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="0.3659%" y="607.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (2 samples, 0.02%)</title><rect x="0.1159%" y="645" width="0.0211%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="2"/><text x="0.3659%" y="655.50"></text></g><g><title>libxpc.dylib`_xpc_serializer_dispose (2 samples, 0.02%)</title><rect x="0.1159%" y="629" width="0.0211%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="2"/><text x="0.3659%" y="639.50"></text></g><g><title>libobjc.A.dylib`objc_destructInstance (1 samples, 0.01%)</title><rect x="0.1265%" y="613" width="0.0105%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="0.3765%" y="623.50"></text></g><g><title>Security`SecTrustEvaluateInternal (6 samples, 0.06%)</title><rect x="0.0843%" y="837" width="0.0632%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="6"/><text x="0.3343%" y="847.50"></text></g><g><title>Security`SecTrustEvaluateIfNecessary (6 samples, 0.06%)</title><rect x="0.0843%" y="821" width="0.0632%" height="15" fill="rgb(217,147,25)" fg:x="8" fg:w="6"/><text x="0.3343%" y="831.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (6 samples, 0.06%)</title><rect x="0.0843%" y="805" width="0.0632%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="6"/><text x="0.3343%" y="815.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (6 samples, 0.06%)</title><rect x="0.0843%" y="789" width="0.0632%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="6"/><text x="0.3343%" y="799.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke (6 samples, 0.06%)</title><rect x="0.0843%" y="773" width="0.0632%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="6"/><text x="0.3343%" y="783.50"></text></g><g><title>libsystem_trace.dylib`_os_activity_initiate_impl (6 samples, 0.06%)</title><rect x="0.0843%" y="757" width="0.0632%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="6"/><text x="0.3343%" y="767.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_2 (6 samples, 0.06%)</title><rect x="0.0843%" y="741" width="0.0632%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="6"/><text x="0.3343%" y="751.50"></text></g><g><title>Security`SecOSStatusWith (6 samples, 0.06%)</title><rect x="0.0843%" y="725" width="0.0632%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="6"/><text x="0.3343%" y="735.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_3 (6 samples, 0.06%)</title><rect x="0.0843%" y="709" width="0.0632%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="6"/><text x="0.3343%" y="719.50"></text></g><g><title>Security`securityd_send_sync_and_do (6 samples, 0.06%)</title><rect x="0.0843%" y="693" width="0.0632%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="6"/><text x="0.3343%" y="703.50"></text></g><g><title>Security`securityd_message_with_reply_sync (5 samples, 0.05%)</title><rect x="0.0948%" y="677" width="0.0527%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="5"/><text x="0.3448%" y="687.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (5 samples, 0.05%)</title><rect x="0.0948%" y="661" width="0.0527%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="5"/><text x="0.3448%" y="671.50"></text></g><g><title>libxpc.dylib`_xpc_connection_unpack_message (1 samples, 0.01%)</title><rect x="0.1370%" y="645" width="0.0105%" height="15" fill="rgb(213,79,30)" fg:x="13" fg:w="1"/><text x="0.3870%" y="655.50"></text></g><g><title>libxpc.dylib`xpc_receive_mach_msg (1 samples, 0.01%)</title><rect x="0.1370%" y="629" width="0.0105%" height="15" fill="rgb(246,177,23)" fg:x="13" fg:w="1"/><text x="0.3870%" y="639.50"></text></g><g><title>libxpc.dylib`_xpc_mach_received_message_init (1 samples, 0.01%)</title><rect x="0.1370%" y="613" width="0.0105%" height="15" fill="rgb(230,62,27)" fg:x="13" fg:w="1"/><text x="0.3870%" y="623.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.01%)</title><rect x="0.1475%" y="725" width="0.0105%" height="15" fill="rgb(216,154,8)" fg:x="14" fg:w="1"/><text x="0.3975%" y="735.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.01%)</title><rect x="0.1475%" y="709" width="0.0105%" height="15" fill="rgb(244,35,45)" fg:x="14" fg:w="1"/><text x="0.3975%" y="719.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.01%)</title><rect x="0.1475%" y="693" width="0.0105%" height="15" fill="rgb(251,115,12)" fg:x="14" fg:w="1"/><text x="0.3975%" y="703.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.01%)</title><rect x="0.1475%" y="677" width="0.0105%" height="15" fill="rgb(240,54,50)" fg:x="14" fg:w="1"/><text x="0.3975%" y="687.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.01%)</title><rect x="0.1475%" y="661" width="0.0105%" height="15" fill="rgb(233,84,52)" fg:x="14" fg:w="1"/><text x="0.3975%" y="671.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.01%)</title><rect x="0.1475%" y="645" width="0.0105%" height="15" fill="rgb(207,117,47)" fg:x="14" fg:w="1"/><text x="0.3975%" y="655.50"></text></g><g><title>Security`Security::MetaAttribute::unpackAttribute (1 samples, 0.01%)</title><rect x="0.1475%" y="629" width="0.0105%" height="15" fill="rgb(249,43,39)" fg:x="14" fg:w="1"/><text x="0.3975%" y="639.50"></text></g><g><title>Security`Security::ReadSection::at (1 samples, 0.01%)</title><rect x="0.1475%" y="613" width="0.0105%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="1"/><text x="0.3975%" y="623.50"></text></g><g><title>Security`Security::KeychainCore::StorageManager::getSearchList(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (2 samples, 0.02%)</title><rect x="0.1475%" y="837" width="0.0211%" height="15" fill="rgb(236,212,23)" fg:x="14" fg:w="2"/><text x="0.3975%" y="847.50"></text></g><g><title>Security`Security::KeychainCore::DynamicDLDBList::searchList (2 samples, 0.02%)</title><rect x="0.1475%" y="821" width="0.0211%" height="15" fill="rgb(242,79,21)" fg:x="14" fg:w="2"/><text x="0.3975%" y="831.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery (2 samples, 0.02%)</title><rect x="0.1475%" y="805" width="0.0211%" height="15" fill="rgb(211,96,35)" fg:x="14" fg:w="2"/><text x="0.3975%" y="815.50"></text></g><g><title>Security`Security::MDSClient::Directory::dlGetFirst (2 samples, 0.02%)</title><rect x="0.1475%" y="789" width="0.0211%" height="15" fill="rgb(253,215,40)" fg:x="14" fg:w="2"/><text x="0.3975%" y="799.50"></text></g><g><title>Security`Security::MDSClient::Directory::cdsa (2 samples, 0.02%)</title><rect x="0.1475%" y="773" width="0.0211%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="2"/><text x="0.3975%" y="783.50"></text></g><g><title>Security`mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (2 samples, 0.02%)</title><rect x="0.1475%" y="757" width="0.0211%" height="15" fill="rgb(208,190,38)" fg:x="14" fg:w="2"/><text x="0.3975%" y="767.50"></text></g><g><title>Security`Security::MDSSession::DbOpen (2 samples, 0.02%)</title><rect x="0.1475%" y="741" width="0.0211%" height="15" fill="rgb(235,213,38)" fg:x="14" fg:w="2"/><text x="0.3975%" y="751.50"></text></g><g><title>Security`Security::MDSSession::updateDataBases (1 samples, 0.01%)</title><rect x="0.1581%" y="725" width="0.0105%" height="15" fill="rgb(237,122,38)" fg:x="15" fg:w="1"/><text x="0.4081%" y="735.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundleDir (1 samples, 0.01%)</title><rect x="0.1581%" y="709" width="0.0105%" height="15" fill="rgb(244,218,35)" fg:x="15" fg:w="1"/><text x="0.4081%" y="719.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundle (1 samples, 0.01%)</title><rect x="0.1581%" y="693" width="0.0105%" height="15" fill="rgb(240,68,47)" fg:x="15" fg:w="1"/><text x="0.4081%" y="703.50"></text></g><g><title>Security`Security::MDSAttrParser::parseAttrs (1 samples, 0.01%)</title><rect x="0.1581%" y="677" width="0.0105%" height="15" fill="rgb(210,16,53)" fg:x="15" fg:w="1"/><text x="0.4081%" y="687.50"></text></g><g><title>CoreFoundation`CFBundleCopyResourceURLsOfType (1 samples, 0.01%)</title><rect x="0.1581%" y="661" width="0.0105%" height="15" fill="rgb(235,124,12)" fg:x="15" fg:w="1"/><text x="0.4081%" y="671.50"></text></g><g><title>CoreFoundation`_CFBundleCopyFindResources (1 samples, 0.01%)</title><rect x="0.1581%" y="645" width="0.0105%" height="15" fill="rgb(224,169,11)" fg:x="15" fg:w="1"/><text x="0.4081%" y="655.50"></text></g><g><title>CoreFoundation`_copyResourceURLsFromBundle (1 samples, 0.01%)</title><rect x="0.1581%" y="629" width="0.0105%" height="15" fill="rgb(250,166,2)" fg:x="15" fg:w="1"/><text x="0.4081%" y="639.50"></text></g><g><title>CoreFoundation`_copyQueryTable (1 samples, 0.01%)</title><rect x="0.1581%" y="613" width="0.0105%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="1"/><text x="0.4081%" y="623.50"></text></g><g><title>CoreFoundation`_CFBundleCopyLanguageSearchListInBundle (1 samples, 0.01%)</title><rect x="0.1581%" y="597" width="0.0105%" height="15" fill="rgb(230,116,27)" fg:x="15" fg:w="1"/><text x="0.4081%" y="607.50"></text></g><g><title>CoreFoundation`CFBundleCopyBundleLocalizations (1 samples, 0.01%)</title><rect x="0.1581%" y="581" width="0.0105%" height="15" fill="rgb(228,99,48)" fg:x="15" fg:w="1"/><text x="0.4081%" y="591.50"></text></g><g><title>CoreFoundation`_copyBundleLocalizationsFromResources (1 samples, 0.01%)</title><rect x="0.1581%" y="565" width="0.0105%" height="15" fill="rgb(253,11,6)" fg:x="15" fg:w="1"/><text x="0.4081%" y="575.50"></text></g><g><title>CoreFoundation`_CFBundleCopyLProjDirectoriesForURL (1 samples, 0.01%)</title><rect x="0.1581%" y="549" width="0.0105%" height="15" fill="rgb(247,143,39)" fg:x="15" fg:w="1"/><text x="0.4081%" y="559.50"></text></g><g><title>CoreFoundation`_CFIterateDirectory (1 samples, 0.01%)</title><rect x="0.1581%" y="533" width="0.0105%" height="15" fill="rgb(236,97,10)" fg:x="15" fg:w="1"/><text x="0.4081%" y="543.50"></text></g><g><title>CoreFoundation`___CFBundleCopyLProjDirectoriesForURL_block_invoke (1 samples, 0.01%)</title><rect x="0.1581%" y="517" width="0.0105%" height="15" fill="rgb(233,208,19)" fg:x="15" fg:w="1"/><text x="0.4081%" y="527.50"></text></g><g><title>CoreFoundation`CFStringCompareWithOptionsAndLocale (1 samples, 0.01%)</title><rect x="0.1581%" y="501" width="0.0105%" height="15" fill="rgb(216,164,2)" fg:x="15" fg:w="1"/><text x="0.4081%" y="511.50"></text></g><g><title>CoreFoundation`_CFStringGetCStringPtrInternal (1 samples, 0.01%)</title><rect x="0.1581%" y="485" width="0.0105%" height="15" fill="rgb(220,129,5)" fg:x="15" fg:w="1"/><text x="0.4081%" y="495.50"></text></g><g><title>Security`SecCertificateCreateWithData (1 samples, 0.01%)</title><rect x="0.1686%" y="821" width="0.0105%" height="15" fill="rgb(242,17,10)" fg:x="16" fg:w="1"/><text x="0.4186%" y="831.50"></text></g><g><title>Security`SecCertificateParse (1 samples, 0.01%)</title><rect x="0.1686%" y="805" width="0.0105%" height="15" fill="rgb(242,107,0)" fg:x="16" fg:w="1"/><text x="0.4186%" y="815.50"></text></g><g><title>Security`SecCEPBasicConstraints (1 samples, 0.01%)</title><rect x="0.1686%" y="789" width="0.0105%" height="15" fill="rgb(251,28,31)" fg:x="16" fg:w="1"/><text x="0.4186%" y="799.50"></text></g><g><title>Security`DERParseSequenceToObject (1 samples, 0.01%)</title><rect x="0.1686%" y="773" width="0.0105%" height="15" fill="rgb(233,223,10)" fg:x="16" fg:w="1"/><text x="0.4186%" y="783.50"></text></g><g><title>Security`DERParseSequenceContentToObject (1 samples, 0.01%)</title><rect x="0.1686%" y="757" width="0.0105%" height="15" fill="rgb(215,21,27)" fg:x="16" fg:w="1"/><text x="0.4186%" y="767.50"></text></g><g><title>Security`DERDecodeSeqNext (1 samples, 0.01%)</title><rect x="0.1686%" y="741" width="0.0105%" height="15" fill="rgb(232,23,21)" fg:x="16" fg:w="1"/><text x="0.4186%" y="751.50"></text></g><g><title>Security`Security::CFRef&lt;__SecCertificate*&gt;::~CFRef (1 samples, 0.01%)</title><rect x="0.1792%" y="821" width="0.0105%" height="15" fill="rgb(244,5,23)" fg:x="17" fg:w="1"/><text x="0.4292%" y="831.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.01%)</title><rect x="0.1792%" y="805" width="0.0105%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="1"/><text x="0.4292%" y="815.50"></text></g><g><title>Security`SecCertificateDestroy (1 samples, 0.01%)</title><rect x="0.1792%" y="789" width="0.0105%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="1"/><text x="0.4292%" y="799.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.01%)</title><rect x="0.1792%" y="773" width="0.0105%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="1"/><text x="0.4292%" y="783.50"></text></g><g><title>Security`Security::CFClass::refCountForType (1 samples, 0.01%)</title><rect x="0.1792%" y="757" width="0.0105%" height="15" fill="rgb(240,187,13)" fg:x="17" fg:w="1"/><text x="0.4292%" y="767.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::~Certificate (1 samples, 0.01%)</title><rect x="0.1792%" y="741" width="0.0105%" height="15" fill="rgb(223,113,26)" fg:x="17" fg:w="1"/><text x="0.4292%" y="751.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::~Certificate (1 samples, 0.01%)</title><rect x="0.1792%" y="725" width="0.0105%" height="15" fill="rgb(206,192,2)" fg:x="17" fg:w="1"/><text x="0.4292%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="0.1792%" y="709" width="0.0105%" height="15" fill="rgb(241,108,4)" fg:x="17" fg:w="1"/><text x="0.4292%" y="719.50"></text></g><g><title>Security`Security::KeychainCore::ItemImpl::dbUniqueRecord (1 samples, 0.01%)</title><rect x="0.1897%" y="805" width="0.0105%" height="15" fill="rgb(247,173,49)" fg:x="18" fg:w="1"/><text x="0.4397%" y="815.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl&amp; Security::CssmClient::Object::impl&lt;Security::CssmClient::DbUniqueRecordImpl&gt; (1 samples, 0.01%)</title><rect x="0.1897%" y="789" width="0.0105%" height="15" fill="rgb(224,114,35)" fg:x="18" fg:w="1"/><text x="0.4397%" y="799.50"></text></g><g><title>libc++abi.dylib`__dynamic_cast (1 samples, 0.01%)</title><rect x="0.1897%" y="773" width="0.0105%" height="15" fill="rgb(245,159,27)" fg:x="18" fg:w="1"/><text x="0.4397%" y="783.50"></text></g><g><title>libc++abi.dylib`__cxxabiv1::__si_class_type_info::search_below_dst (1 samples, 0.01%)</title><rect x="0.1897%" y="757" width="0.0105%" height="15" fill="rgb(245,172,44)" fg:x="18" fg:w="1"/><text x="0.4397%" y="767.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::data (2 samples, 0.02%)</title><rect x="0.1897%" y="821" width="0.0211%" height="15" fill="rgb(236,23,11)" fg:x="18" fg:w="2"/><text x="0.4397%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="0.2002%" y="805" width="0.0105%" height="15" fill="rgb(205,117,38)" fg:x="19" fg:w="1"/><text x="0.4502%" y="815.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::activate (1 samples, 0.01%)</title><rect x="0.2108%" y="805" width="0.0105%" height="15" fill="rgb(237,72,25)" fg:x="20" fg:w="1"/><text x="0.4608%" y="815.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.01%)</title><rect x="0.2108%" y="789" width="0.0105%" height="15" fill="rgb(244,70,9)" fg:x="20" fg:w="1"/><text x="0.4608%" y="799.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.01%)</title><rect x="0.2108%" y="773" width="0.0105%" height="15" fill="rgb(217,125,39)" fg:x="20" fg:w="1"/><text x="0.4608%" y="783.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.01%)</title><rect x="0.2108%" y="757" width="0.0105%" height="15" fill="rgb(235,36,10)" fg:x="20" fg:w="1"/><text x="0.4608%" y="767.50"></text></g><g><title>Security`SSDLSession::DbOpen (1 samples, 0.01%)</title><rect x="0.2108%" y="741" width="0.0105%" height="15" fill="rgb(251,123,47)" fg:x="20" fg:w="1"/><text x="0.4608%" y="751.50"></text></g><g><title>Security`SSDatabaseImpl::load (1 samples, 0.01%)</title><rect x="0.2108%" y="725" width="0.0105%" height="15" fill="rgb(221,13,13)" fg:x="20" fg:w="1"/><text x="0.4608%" y="735.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.01%)</title><rect x="0.2108%" y="709" width="0.0105%" height="15" fill="rgb(238,131,9)" fg:x="20" fg:w="1"/><text x="0.4608%" y="719.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.01%)</title><rect x="0.2108%" y="693" width="0.0105%" height="15" fill="rgb(211,50,8)" fg:x="20" fg:w="1"/><text x="0.4608%" y="703.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.01%)</title><rect x="0.2108%" y="677" width="0.0105%" height="15" fill="rgb(245,182,24)" fg:x="20" fg:w="1"/><text x="0.4608%" y="687.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.01%)</title><rect x="0.2108%" y="661" width="0.0105%" height="15" fill="rgb(242,14,37)" fg:x="20" fg:w="1"/><text x="0.4608%" y="671.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.01%)</title><rect x="0.2108%" y="645" width="0.0105%" height="15" fill="rgb(246,228,12)" fg:x="20" fg:w="1"/><text x="0.4608%" y="655.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.01%)</title><rect x="0.2108%" y="629" width="0.0105%" height="15" fill="rgb(213,55,15)" fg:x="20" fg:w="1"/><text x="0.4608%" y="639.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.01%)</title><rect x="0.2108%" y="613" width="0.0105%" height="15" fill="rgb(209,9,3)" fg:x="20" fg:w="1"/><text x="0.4608%" y="623.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.01%)</title><rect x="0.2108%" y="597" width="0.0105%" height="15" fill="rgb(230,59,30)" fg:x="20" fg:w="1"/><text x="0.4608%" y="607.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.01%)</title><rect x="0.2108%" y="581" width="0.0105%" height="15" fill="rgb(209,121,21)" fg:x="20" fg:w="1"/><text x="0.4608%" y="591.50"></text></g><g><title>Security`Security::MetaRecord::attributeIndex (1 samples, 0.01%)</title><rect x="0.2108%" y="565" width="0.0105%" height="15" fill="rgb(220,109,13)" fg:x="20" fg:w="1"/><text x="0.4608%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.01%)</title><rect x="0.2108%" y="549" width="0.0105%" height="15" fill="rgb(232,18,1)" fg:x="20" fg:w="1"/><text x="0.4608%" y="559.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::item (1 samples, 0.01%)</title><rect x="0.2213%" y="805" width="0.0105%" height="15" fill="rgb(215,41,42)" fg:x="21" fg:w="1"/><text x="0.4713%" y="815.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::makePrimaryKey (1 samples, 0.01%)</title><rect x="0.2213%" y="789" width="0.0105%" height="15" fill="rgb(224,123,36)" fg:x="21" fg:w="1"/><text x="0.4713%" y="799.50"></text></g><g><title>Security`Security::CssmAutoDbRecordAttributeData::~CssmAutoDbRecordAttributeData (1 samples, 0.01%)</title><rect x="0.2213%" y="773" width="0.0105%" height="15" fill="rgb(240,125,3)" fg:x="21" fg:w="1"/><text x="0.4713%" y="783.50"></text></g><g><title>Security`Security::CssmAutoDbRecordAttributeData::clear (1 samples, 0.01%)</title><rect x="0.2213%" y="757" width="0.0105%" height="15" fill="rgb(205,98,50)" fg:x="21" fg:w="1"/><text x="0.4713%" y="767.50"></text></g><g><title>Security`Security::CssmDbRecordAttributeData::deleteValues (1 samples, 0.01%)</title><rect x="0.2213%" y="741" width="0.0105%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="1"/><text x="0.4713%" y="751.50"></text></g><g><title>Security`Security::CssmDbAttributeData::deleteValues (1 samples, 0.01%)</title><rect x="0.2213%" y="725" width="0.0105%" height="15" fill="rgb(238,207,15)" fg:x="21" fg:w="1"/><text x="0.4713%" y="735.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.01%)</title><rect x="0.2318%" y="725" width="0.0105%" height="15" fill="rgb(213,199,42)" fg:x="22" fg:w="1"/><text x="0.4818%" y="735.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.01%)</title><rect x="0.2318%" y="709" width="0.0105%" height="15" fill="rgb(235,201,11)" fg:x="22" fg:w="1"/><text x="0.4818%" y="719.50"></text></g><g><title>Security`SSDLSession::DbOpen (1 samples, 0.01%)</title><rect x="0.2318%" y="693" width="0.0105%" height="15" fill="rgb(207,46,11)" fg:x="22" fg:w="1"/><text x="0.4818%" y="703.50"></text></g><g><title>Security`SSDatabaseImpl::load (1 samples, 0.01%)</title><rect x="0.2318%" y="677" width="0.0105%" height="15" fill="rgb(241,35,35)" fg:x="22" fg:w="1"/><text x="0.4818%" y="687.50"></text></g><g><title>Security`SSDatabaseImpl::getDbBlobId (1 samples, 0.01%)</title><rect x="0.2318%" y="661" width="0.0105%" height="15" fill="rgb(243,32,47)" fg:x="22" fg:w="1"/><text x="0.4818%" y="671.50"></text></g><g><title>Security`Security::CssmClient::DbCursor::DbCursor (1 samples, 0.01%)</title><rect x="0.2318%" y="645" width="0.0105%" height="15" fill="rgb(247,202,23)" fg:x="22" fg:w="1"/><text x="0.4818%" y="655.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::newDbCursor (1 samples, 0.01%)</title><rect x="0.2318%" y="629" width="0.0105%" height="15" fill="rgb(219,102,11)" fg:x="22" fg:w="1"/><text x="0.4818%" y="639.50"></text></g><g><title>Security`Security::CssmClient::DbDbCursorImpl::DbDbCursorImpl (1 samples, 0.01%)</title><rect x="0.2318%" y="613" width="0.0105%" height="15" fill="rgb(243,110,44)" fg:x="22" fg:w="1"/><text x="0.4818%" y="623.50"></text></g><g><title>Security`Security::KeychainCore::KCCursorImpl::next (4 samples, 0.04%)</title><rect x="0.2108%" y="821" width="0.0422%" height="15" fill="rgb(222,74,54)" fg:x="20" fg:w="4"/><text x="0.4608%" y="831.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::performKeychainUpgradeIfNeeded (2 samples, 0.02%)</title><rect x="0.2318%" y="805" width="0.0211%" height="15" fill="rgb(216,99,12)" fg:x="22" fg:w="2"/><text x="0.4818%" y="815.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::dbBlobVersion (2 samples, 0.02%)</title><rect x="0.2318%" y="789" width="0.0211%" height="15" fill="rgb(226,22,26)" fg:x="22" fg:w="2"/><text x="0.4818%" y="799.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::handle (2 samples, 0.02%)</title><rect x="0.2318%" y="773" width="0.0211%" height="15" fill="rgb(217,163,10)" fg:x="22" fg:w="2"/><text x="0.4818%" y="783.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::activate (2 samples, 0.02%)</title><rect x="0.2318%" y="757" width="0.0211%" height="15" fill="rgb(213,25,53)" fg:x="22" fg:w="2"/><text x="0.4818%" y="767.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (2 samples, 0.02%)</title><rect x="0.2318%" y="741" width="0.0211%" height="15" fill="rgb(252,105,26)" fg:x="22" fg:w="2"/><text x="0.4818%" y="751.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::defaultCredentials (1 samples, 0.01%)</title><rect x="0.2424%" y="725" width="0.0105%" height="15" fill="rgb(220,39,43)" fg:x="23" fg:w="1"/><text x="0.4924%" y="735.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::keychainSchema (1 samples, 0.01%)</title><rect x="0.2424%" y="709" width="0.0105%" height="15" fill="rgb(229,68,48)" fg:x="23" fg:w="1"/><text x="0.4924%" y="719.50"></text></g><g><title>Security`Security::CssmClient::DbDbCursorImpl::next (1 samples, 0.01%)</title><rect x="0.2424%" y="693" width="0.0105%" height="15" fill="rgb(252,8,32)" fg:x="23" fg:w="1"/><text x="0.4924%" y="703.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::setPointer (1 samples, 0.01%)</title><rect x="0.2424%" y="677" width="0.0105%" height="15" fill="rgb(223,20,43)" fg:x="23" fg:w="1"/><text x="0.4924%" y="687.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (1 samples, 0.01%)</title><rect x="0.2424%" y="661" width="0.0105%" height="15" fill="rgb(229,81,49)" fg:x="23" fg:w="1"/><text x="0.4924%" y="671.50"></text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::~SSDbUniqueRecordImpl (1 samples, 0.01%)</title><rect x="0.2424%" y="645" width="0.0105%" height="15" fill="rgb(236,28,36)" fg:x="23" fg:w="1"/><text x="0.4924%" y="655.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::~DbUniqueRecordImpl (1 samples, 0.01%)</title><rect x="0.2424%" y="629" width="0.0105%" height="15" fill="rgb(249,185,26)" fg:x="23" fg:w="1"/><text x="0.4924%" y="639.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::deactivate (1 samples, 0.01%)</title><rect x="0.2424%" y="613" width="0.0105%" height="15" fill="rgb(249,174,33)" fg:x="23" fg:w="1"/><text x="0.4924%" y="623.50"></text></g><g><title>Security`CSSM_DL_FreeUniqueRecord (1 samples, 0.01%)</title><rect x="0.2424%" y="597" width="0.0105%" height="15" fill="rgb(233,201,37)" fg:x="23" fg:w="1"/><text x="0.4924%" y="607.50"></text></g><g><title>Security`cssm_FreeUniqueRecord(cssm_dl_db_handle, cssm_db_unique_record*) (1 samples, 0.01%)</title><rect x="0.2424%" y="581" width="0.0105%" height="15" fill="rgb(221,78,26)" fg:x="23" fg:w="1"/><text x="0.4924%" y="591.50"></text></g><g><title>Security`non-virtual thunk to SSDLSession::FreeUniqueRecord (1 samples, 0.01%)</title><rect x="0.2424%" y="565" width="0.0105%" height="15" fill="rgb(250,127,30)" fg:x="23" fg:w="1"/><text x="0.4924%" y="575.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (1 samples, 0.01%)</title><rect x="0.2424%" y="549" width="0.0105%" height="15" fill="rgb(230,49,44)" fg:x="23" fg:w="1"/><text x="0.4924%" y="559.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (1 samples, 0.01%)</title><rect x="0.2424%" y="533" width="0.0105%" height="15" fill="rgb(229,67,23)" fg:x="23" fg:w="1"/><text x="0.4924%" y="543.50"></text></g><g><title>Security`DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.01%)</title><rect x="0.2424%" y="517" width="0.0105%" height="15" fill="rgb(249,83,47)" fg:x="23" fg:w="1"/><text x="0.4924%" y="527.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::findQualifiedCerts(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (9 samples, 0.09%)</title><rect x="0.1686%" y="837" width="0.0948%" height="15" fill="rgb(215,43,3)" fg:x="16" fg:w="9"/><text x="0.4186%" y="847.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::findDictionaryForCert (1 samples, 0.01%)</title><rect x="0.2529%" y="821" width="0.0105%" height="15" fill="rgb(238,154,13)" fg:x="24" fg:w="1"/><text x="0.5029%" y="831.50"></text></g><g><title>Security`SecTrustSettingsCertHashStrFromCert (1 samples, 0.01%)</title><rect x="0.2529%" y="805" width="0.0105%" height="15" fill="rgb(219,56,2)" fg:x="24" fg:w="1"/><text x="0.5029%" y="815.50"></text></g><g><title>Security`SecTrustSettingsCertHashStrFromData (1 samples, 0.01%)</title><rect x="0.2529%" y="789" width="0.0105%" height="15" fill="rgb(233,0,4)" fg:x="24" fg:w="1"/><text x="0.5029%" y="799.50"></text></g><g><title>libcommonCrypto.dylib`CC_SHA1 (1 samples, 0.01%)</title><rect x="0.2529%" y="773" width="0.0105%" height="15" fill="rgb(235,30,7)" fg:x="24" fg:w="1"/><text x="0.5029%" y="783.50"></text></g><g><title>libcommonCrypto.dylib`CCDigest (1 samples, 0.01%)</title><rect x="0.2529%" y="757" width="0.0105%" height="15" fill="rgb(250,79,13)" fg:x="24" fg:w="1"/><text x="0.5029%" y="767.50"></text></g><g><title>libcorecrypto.dylib`ccdigest (1 samples, 0.01%)</title><rect x="0.2529%" y="741" width="0.0105%" height="15" fill="rgb(211,146,34)" fg:x="24" fg:w="1"/><text x="0.5029%" y="751.50"></text></g><g><title>libcorecrypto.dylib`AccelerateCrypto_SHA1_compress (1 samples, 0.01%)</title><rect x="0.2529%" y="725" width="0.0105%" height="15" fill="rgb(228,22,38)" fg:x="24" fg:w="1"/><text x="0.5029%" y="735.50"></text></g><g><title>databend-query`security_framework::trust_settings::TrustSettings::iter (19 samples, 0.20%)</title><rect x="0.0738%" y="869" width="0.2002%" height="15" fill="rgb(235,168,5)" fg:x="7" fg:w="19"/><text x="0.3238%" y="879.50"></text></g><g><title>Security`SecTrustSettingsCopyCertificates (19 samples, 0.20%)</title><rect x="0.0738%" y="853" width="0.2002%" height="15" fill="rgb(221,155,16)" fg:x="7" fg:w="19"/><text x="0.3238%" y="863.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::~TrustSettings (1 samples, 0.01%)</title><rect x="0.2635%" y="837" width="0.0105%" height="15" fill="rgb(215,215,53)" fg:x="25" fg:w="1"/><text x="0.5135%" y="847.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (1 samples, 0.01%)</title><rect x="0.2635%" y="821" width="0.0105%" height="15" fill="rgb(223,4,10)" fg:x="25" fg:w="1"/><text x="0.5135%" y="831.50"></text></g><g><title>CoreFoundation`cow_cleanup (1 samples, 0.01%)</title><rect x="0.2635%" y="805" width="0.0105%" height="15" fill="rgb(234,103,6)" fg:x="25" fg:w="1"/><text x="0.5135%" y="815.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (1 samples, 0.01%)</title><rect x="0.2635%" y="789" width="0.0105%" height="15" fill="rgb(227,97,0)" fg:x="25" fg:w="1"/><text x="0.5135%" y="799.50"></text></g><g><title>CoreFoundation`cow_cleanup (1 samples, 0.01%)</title><rect x="0.2635%" y="773" width="0.0105%" height="15" fill="rgb(234,150,53)" fg:x="25" fg:w="1"/><text x="0.5135%" y="783.50"></text></g><g><title>CoreFoundation`-[__NSArrayM dealloc] (1 samples, 0.01%)</title><rect x="0.2635%" y="757" width="0.0105%" height="15" fill="rgb(228,201,54)" fg:x="25" fg:w="1"/><text x="0.5135%" y="767.50"></text></g><g><title>CoreFoundation`__RELEASE_OBJECTS_IN_THE_ARRAY__ (1 samples, 0.01%)</title><rect x="0.2635%" y="741" width="0.0105%" height="15" fill="rgb(222,22,37)" fg:x="25" fg:w="1"/><text x="0.5135%" y="751.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (1 samples, 0.01%)</title><rect x="0.2635%" y="725" width="0.0105%" height="15" fill="rgb(237,53,32)" fg:x="25" fg:w="1"/><text x="0.5135%" y="735.50"></text></g><g><title>CoreFoundation`cow_cleanup (1 samples, 0.01%)</title><rect x="0.2635%" y="709" width="0.0105%" height="15" fill="rgb(233,25,53)" fg:x="25" fg:w="1"/><text x="0.5135%" y="719.50"></text></g><g><title>CoreFoundation`CFGetTypeID (1 samples, 0.01%)</title><rect x="0.2740%" y="805" width="0.0105%" height="15" fill="rgb(210,40,34)" fg:x="26" fg:w="1"/><text x="0.5240%" y="815.50"></text></g><g><title>CoreFoundation`__CFStringEqual (1 samples, 0.01%)</title><rect x="0.3056%" y="677" width="0.0105%" height="15" fill="rgb(241,220,44)" fg:x="29" fg:w="1"/><text x="0.5556%" y="687.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.01%)</title><rect x="0.3162%" y="677" width="0.0105%" height="15" fill="rgb(235,28,35)" fg:x="30" fg:w="1"/><text x="0.5662%" y="687.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (5 samples, 0.05%)</title><rect x="0.2845%" y="693" width="0.0527%" height="15" fill="rgb(210,56,17)" fg:x="27" fg:w="5"/><text x="0.5345%" y="703.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.01%)</title><rect x="0.3267%" y="677" width="0.0105%" height="15" fill="rgb(224,130,29)" fg:x="31" fg:w="1"/><text x="0.5767%" y="687.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.01%)</title><rect x="0.3372%" y="693" width="0.0105%" height="15" fill="rgb(235,212,8)" fg:x="32" fg:w="1"/><text x="0.5872%" y="703.50"></text></g><g><title>CoreFoundation`getContentObject (1 samples, 0.01%)</title><rect x="0.3478%" y="693" width="0.0105%" height="15" fill="rgb(223,33,50)" fg:x="33" fg:w="1"/><text x="0.5978%" y="703.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (5 samples, 0.05%)</title><rect x="0.3583%" y="677" width="0.0527%" height="15" fill="rgb(219,149,13)" fg:x="34" fg:w="5"/><text x="0.6083%" y="687.50"></text></g><g><title>CoreFoundation`-[__NSCFString retain] (3 samples, 0.03%)</title><rect x="0.3794%" y="661" width="0.0316%" height="15" fill="rgb(250,156,29)" fg:x="36" fg:w="3"/><text x="0.6294%" y="671.50"></text></g><g><title>CoreFoundation`_CFRetain (3 samples, 0.03%)</title><rect x="0.3794%" y="645" width="0.0316%" height="15" fill="rgb(216,193,19)" fg:x="36" fg:w="3"/><text x="0.6294%" y="655.50"></text></g><g><title>CoreFoundation`CFDataAppendBytes (1 samples, 0.01%)</title><rect x="0.4110%" y="677" width="0.0105%" height="15" fill="rgb(216,135,14)" fg:x="39" fg:w="1"/><text x="0.6610%" y="687.50"></text></g><g><title>CoreFoundation`CFDictionaryCreateMutable (1 samples, 0.01%)</title><rect x="0.4215%" y="677" width="0.0105%" height="15" fill="rgb(241,47,5)" fg:x="40" fg:w="1"/><text x="0.6715%" y="687.50"></text></g><g><title>CoreFoundation`__NSCFDictionaryCreateMutable (1 samples, 0.01%)</title><rect x="0.4215%" y="661" width="0.0105%" height="15" fill="rgb(233,42,35)" fg:x="40" fg:w="1"/><text x="0.6715%" y="671.50"></text></g><g><title>CoreFoundation`CFAllocatorGetDefault (1 samples, 0.01%)</title><rect x="0.4215%" y="645" width="0.0105%" height="15" fill="rgb(231,13,6)" fg:x="40" fg:w="1"/><text x="0.6715%" y="655.50"></text></g><g><title>CoreFoundation`_CFGetTSDCreateIfNeeded (1 samples, 0.01%)</title><rect x="0.4215%" y="629" width="0.0105%" height="15" fill="rgb(207,181,40)" fg:x="40" fg:w="1"/><text x="0.6715%" y="639.50"></text></g><g><title>CoreFoundation`__CFTSDGetTable (1 samples, 0.01%)</title><rect x="0.4215%" y="613" width="0.0105%" height="15" fill="rgb(254,173,49)" fg:x="40" fg:w="1"/><text x="0.6715%" y="623.50"></text></g><g><title>CoreFoundation`CFRelease (1 samples, 0.01%)</title><rect x="0.4321%" y="677" width="0.0105%" height="15" fill="rgb(221,1,38)" fg:x="41" fg:w="1"/><text x="0.6821%" y="687.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.01%)</title><rect x="0.4426%" y="677" width="0.0105%" height="15" fill="rgb(206,124,46)" fg:x="42" fg:w="1"/><text x="0.6926%" y="687.50"></text></g><g><title>CoreFoundation`checkForCloseTag (1 samples, 0.01%)</title><rect x="0.4532%" y="677" width="0.0105%" height="15" fill="rgb(249,21,11)" fg:x="43" fg:w="1"/><text x="0.7032%" y="687.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (1 samples, 0.01%)</title><rect x="0.4637%" y="661" width="0.0105%" height="15" fill="rgb(222,201,40)" fg:x="44" fg:w="1"/><text x="0.7137%" y="671.50"></text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (1 samples, 0.01%)</title><rect x="0.4637%" y="645" width="0.0105%" height="15" fill="rgb(235,61,29)" fg:x="44" fg:w="1"/><text x="0.7137%" y="655.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$malloc_zone_malloc (1 samples, 0.01%)</title><rect x="0.4637%" y="629" width="0.0105%" height="15" fill="rgb(219,207,3)" fg:x="44" fg:w="1"/><text x="0.7137%" y="639.50"></text></g><g><title>CoreFoundation`__CFSearchStringROM (3 samples, 0.03%)</title><rect x="0.4742%" y="629" width="0.0316%" height="15" fill="rgb(222,56,46)" fg:x="45" fg:w="3"/><text x="0.7242%" y="639.50"></text></g><g><title>CoreFoundation`parseStringTag (5 samples, 0.05%)</title><rect x="0.4637%" y="677" width="0.0527%" height="15" fill="rgb(239,76,54)" fg:x="44" fg:w="5"/><text x="0.7137%" y="687.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (4 samples, 0.04%)</title><rect x="0.4742%" y="661" width="0.0422%" height="15" fill="rgb(231,124,27)" fg:x="45" fg:w="4"/><text x="0.7242%" y="671.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (4 samples, 0.04%)</title><rect x="0.4742%" y="645" width="0.0422%" height="15" fill="rgb(249,195,6)" fg:x="45" fg:w="4"/><text x="0.7242%" y="655.50"></text></g><g><title>CoreFoundation`__CFStrHashEightBit2 (1 samples, 0.01%)</title><rect x="0.5058%" y="629" width="0.0105%" height="15" fill="rgb(237,174,47)" fg:x="48" fg:w="1"/><text x="0.7558%" y="639.50"></text></g><g><title>CoreFoundation`__CFDataGrow (1 samples, 0.01%)</title><rect x="0.6534%" y="645" width="0.0105%" height="15" fill="rgb(206,201,31)" fg:x="62" fg:w="1"/><text x="0.9034%" y="655.50"></text></g><g><title>CoreFoundation`__CFSafelyReallocate (1 samples, 0.01%)</title><rect x="0.6534%" y="629" width="0.0105%" height="15" fill="rgb(231,57,52)" fg:x="62" fg:w="1"/><text x="0.9034%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="0.6534%" y="613" width="0.0105%" height="15" fill="rgb(248,177,22)" fg:x="62" fg:w="1"/><text x="0.9034%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="0.6534%" y="597" width="0.0105%" height="15" fill="rgb(215,211,37)" fg:x="62" fg:w="1"/><text x="0.9034%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="0.6534%" y="581" width="0.0105%" height="15" fill="rgb(241,128,51)" fg:x="62" fg:w="1"/><text x="0.9034%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="0.6534%" y="565" width="0.0105%" height="15" fill="rgb(227,165,31)" fg:x="62" fg:w="1"/><text x="0.9034%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="0.6534%" y="549" width="0.0105%" height="15" fill="rgb(228,167,24)" fg:x="62" fg:w="1"/><text x="0.9034%" y="559.50"></text></g><g><title>CoreFoundation`CFDataReplaceBytes (3 samples, 0.03%)</title><rect x="0.6428%" y="661" width="0.0316%" height="15" fill="rgb(228,143,12)" fg:x="61" fg:w="3"/><text x="0.8928%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="0.6639%" y="645" width="0.0105%" height="15" fill="rgb(249,149,8)" fg:x="63" fg:w="1"/><text x="0.9139%" y="655.50"></text></g><g><title>CoreFoundation`__CFAbsoluteFromYMD (1 samples, 0.01%)</title><rect x="0.6745%" y="661" width="0.0105%" height="15" fill="rgb(243,35,44)" fg:x="64" fg:w="1"/><text x="0.9245%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="0.6850%" y="597" width="0.0105%" height="15" fill="rgb(246,89,9)" fg:x="65" fg:w="1"/><text x="0.9350%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="0.6850%" y="581" width="0.0105%" height="15" fill="rgb(233,213,13)" fg:x="65" fg:w="1"/><text x="0.9350%" y="591.50"></text></g><g><title>CoreFoundation`__CFDataInit (2 samples, 0.02%)</title><rect x="0.6850%" y="661" width="0.0211%" height="15" fill="rgb(233,141,41)" fg:x="65" fg:w="2"/><text x="0.9350%" y="671.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (2 samples, 0.02%)</title><rect x="0.6850%" y="645" width="0.0211%" height="15" fill="rgb(239,167,4)" fg:x="65" fg:w="2"/><text x="0.9350%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.02%)</title><rect x="0.6850%" y="629" width="0.0211%" height="15" fill="rgb(209,217,16)" fg:x="65" fg:w="2"/><text x="0.9350%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.02%)</title><rect x="0.6850%" y="613" width="0.0211%" height="15" fill="rgb(219,88,35)" fg:x="65" fg:w="2"/><text x="0.9350%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="0.6955%" y="597" width="0.0105%" height="15" fill="rgb(220,193,23)" fg:x="66" fg:w="1"/><text x="0.9455%" y="607.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$malloc_default_zone (1 samples, 0.01%)</title><rect x="0.7272%" y="597" width="0.0105%" height="15" fill="rgb(230,90,52)" fg:x="69" fg:w="1"/><text x="0.9772%" y="607.50"></text></g><g><title>libobjc.A.dylib`objc_class::isInitialized (1 samples, 0.01%)</title><rect x="0.7377%" y="597" width="0.0105%" height="15" fill="rgb(252,106,19)" fg:x="70" fg:w="1"/><text x="0.9877%" y="607.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (4 samples, 0.04%)</title><rect x="0.7166%" y="629" width="0.0422%" height="15" fill="rgb(206,74,20)" fg:x="68" fg:w="4"/><text x="0.9666%" y="639.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (4 samples, 0.04%)</title><rect x="0.7166%" y="613" width="0.0422%" height="15" fill="rgb(230,138,44)" fg:x="68" fg:w="4"/><text x="0.9666%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.01%)</title><rect x="0.7482%" y="597" width="0.0105%" height="15" fill="rgb(235,182,43)" fg:x="71" fg:w="1"/><text x="0.9982%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.01%)</title><rect x="0.7482%" y="581" width="0.0105%" height="15" fill="rgb(242,16,51)" fg:x="71" fg:w="1"/><text x="0.9982%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="0.7482%" y="565" width="0.0105%" height="15" fill="rgb(248,9,4)" fg:x="71" fg:w="1"/><text x="0.9982%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="0.7482%" y="549" width="0.0105%" height="15" fill="rgb(210,31,22)" fg:x="71" fg:w="1"/><text x="0.9982%" y="559.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (6 samples, 0.06%)</title><rect x="0.7061%" y="645" width="0.0632%" height="15" fill="rgb(239,54,39)" fg:x="67" fg:w="6"/><text x="0.9561%" y="655.50"></text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (1 samples, 0.01%)</title><rect x="0.7588%" y="629" width="0.0105%" height="15" fill="rgb(230,99,41)" fg:x="72" fg:w="1"/><text x="1.0088%" y="639.50"></text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (1 samples, 0.01%)</title><rect x="0.7693%" y="613" width="0.0105%" height="15" fill="rgb(253,106,12)" fg:x="73" fg:w="1"/><text x="1.0193%" y="623.50"></text></g><g><title>CoreFoundation`__CFStrAllocateMutableContents (1 samples, 0.01%)</title><rect x="0.7693%" y="597" width="0.0105%" height="15" fill="rgb(213,46,41)" fg:x="73" fg:w="1"/><text x="1.0193%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="0.7693%" y="581" width="0.0105%" height="15" fill="rgb(215,133,35)" fg:x="73" fg:w="1"/><text x="1.0193%" y="591.50"></text></g><g><title>CoreFoundation`CFStringAppend (2 samples, 0.02%)</title><rect x="0.7693%" y="629" width="0.0211%" height="15" fill="rgb(213,28,5)" fg:x="73" fg:w="2"/><text x="1.0193%" y="639.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.01%)</title><rect x="0.7799%" y="613" width="0.0105%" height="15" fill="rgb(215,77,49)" fg:x="74" fg:w="1"/><text x="1.0299%" y="623.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$malloc_zone_calloc (1 samples, 0.01%)</title><rect x="0.7904%" y="613" width="0.0105%" height="15" fill="rgb(248,100,22)" fg:x="75" fg:w="1"/><text x="1.0404%" y="623.50"></text></g><g><title>CoreFoundation`parseStringTag (10 samples, 0.11%)</title><rect x="0.7061%" y="661" width="0.1054%" height="15" fill="rgb(208,67,9)" fg:x="67" fg:w="10"/><text x="0.9561%" y="671.50"></text></g><g><title>Foundation`-[NSPlaceholderMutableString initWithString:] (4 samples, 0.04%)</title><rect x="0.7693%" y="645" width="0.0422%" height="15" fill="rgb(219,133,21)" fg:x="73" fg:w="4"/><text x="1.0193%" y="655.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (2 samples, 0.02%)</title><rect x="0.7904%" y="629" width="0.0211%" height="15" fill="rgb(246,46,29)" fg:x="75" fg:w="2"/><text x="1.0404%" y="639.50"></text></g><g><title>CoreFoundation`_CFGetTSDCreateIfNeeded (1 samples, 0.01%)</title><rect x="0.8009%" y="613" width="0.0105%" height="15" fill="rgb(246,185,52)" fg:x="76" fg:w="1"/><text x="1.0509%" y="623.50"></text></g><g><title>CoreFoundation`__CFTSDGetTable (1 samples, 0.01%)</title><rect x="0.8009%" y="597" width="0.0105%" height="15" fill="rgb(252,136,11)" fg:x="76" fg:w="1"/><text x="1.0509%" y="607.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (1 samples, 0.01%)</title><rect x="0.8115%" y="645" width="0.0105%" height="15" fill="rgb(219,138,53)" fg:x="77" fg:w="1"/><text x="1.0615%" y="655.50"></text></g><g><title>CoreFoundation`CFDictionaryCreateMutable (1 samples, 0.01%)</title><rect x="0.8220%" y="645" width="0.0105%" height="15" fill="rgb(211,51,23)" fg:x="78" fg:w="1"/><text x="1.0720%" y="655.50"></text></g><g><title>CoreFoundation`__NSDictionaryM_new (1 samples, 0.01%)</title><rect x="0.8220%" y="629" width="0.0105%" height="15" fill="rgb(247,221,28)" fg:x="78" fg:w="1"/><text x="1.0720%" y="639.50"></text></g><g><title>CoreFoundation`__CFAllocateObject (1 samples, 0.01%)</title><rect x="0.8220%" y="613" width="0.0105%" height="15" fill="rgb(251,222,45)" fg:x="78" fg:w="1"/><text x="1.0720%" y="623.50"></text></g><g><title>libobjc.A.dylib`class_createInstance (1 samples, 0.01%)</title><rect x="0.8220%" y="597" width="0.0105%" height="15" fill="rgb(217,162,53)" fg:x="78" fg:w="1"/><text x="1.0720%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.01%)</title><rect x="0.8220%" y="581" width="0.0105%" height="15" fill="rgb(229,93,14)" fg:x="78" fg:w="1"/><text x="1.0720%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.01%)</title><rect x="0.8220%" y="565" width="0.0105%" height="15" fill="rgb(209,67,49)" fg:x="78" fg:w="1"/><text x="1.0720%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="0.8220%" y="549" width="0.0105%" height="15" fill="rgb(213,87,29)" fg:x="78" fg:w="1"/><text x="1.0720%" y="559.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (1 samples, 0.01%)</title><rect x="0.8431%" y="613" width="0.0105%" height="15" fill="rgb(205,151,52)" fg:x="80" fg:w="1"/><text x="1.0931%" y="623.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (1 samples, 0.01%)</title><rect x="0.8431%" y="597" width="0.0105%" height="15" fill="rgb(253,215,39)" fg:x="80" fg:w="1"/><text x="1.0931%" y="607.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (1 samples, 0.01%)</title><rect x="0.8431%" y="581" width="0.0105%" height="15" fill="rgb(221,220,41)" fg:x="80" fg:w="1"/><text x="1.0931%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.01%)</title><rect x="0.8431%" y="565" width="0.0105%" height="15" fill="rgb(218,133,21)" fg:x="80" fg:w="1"/><text x="1.0931%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.01%)</title><rect x="0.8431%" y="549" width="0.0105%" height="15" fill="rgb(221,193,43)" fg:x="80" fg:w="1"/><text x="1.0931%" y="559.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="0.8431%" y="533" width="0.0105%" height="15" fill="rgb(240,128,52)" fg:x="80" fg:w="1"/><text x="1.0931%" y="543.50"></text></g><g><title>CoreFoundation`parseXMLElement (5 samples, 0.05%)</title><rect x="0.8115%" y="661" width="0.0527%" height="15" fill="rgb(253,114,12)" fg:x="77" fg:w="5"/><text x="1.0615%" y="671.50"></text></g><g><title>CoreFoundation`parseXMLElement (3 samples, 0.03%)</title><rect x="0.8325%" y="645" width="0.0316%" height="15" fill="rgb(215,223,47)" fg:x="79" fg:w="3"/><text x="1.0825%" y="655.50"></text></g><g><title>CoreFoundation`parseStringTag (3 samples, 0.03%)</title><rect x="0.8325%" y="629" width="0.0316%" height="15" fill="rgb(248,225,23)" fg:x="79" fg:w="3"/><text x="1.0825%" y="639.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (1 samples, 0.01%)</title><rect x="0.8536%" y="613" width="0.0105%" height="15" fill="rgb(250,108,0)" fg:x="81" fg:w="1"/><text x="1.1036%" y="623.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (1 samples, 0.01%)</title><rect x="0.8536%" y="597" width="0.0105%" height="15" fill="rgb(228,208,7)" fg:x="81" fg:w="1"/><text x="1.1036%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.01%)</title><rect x="0.8536%" y="581" width="0.0105%" height="15" fill="rgb(244,45,10)" fg:x="81" fg:w="1"/><text x="1.1036%" y="591.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.01%)</title><rect x="0.8642%" y="661" width="0.0105%" height="15" fill="rgb(207,125,25)" fg:x="82" fg:w="1"/><text x="1.1142%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.01%)</title><rect x="0.8747%" y="661" width="0.0105%" height="15" fill="rgb(210,195,18)" fg:x="83" fg:w="1"/><text x="1.1247%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.01%)</title><rect x="0.8852%" y="661" width="0.0105%" height="15" fill="rgb(249,80,12)" fg:x="84" fg:w="1"/><text x="1.1352%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="0.8958%" y="661" width="0.0105%" height="15" fill="rgb(221,65,9)" fg:x="85" fg:w="1"/><text x="1.1458%" y="671.50"></text></g><g><title>CoreFoundation`parseXMLElement (39 samples, 0.41%)</title><rect x="0.5164%" y="677" width="0.4110%" height="15" fill="rgb(235,49,36)" fg:x="49" fg:w="39"/><text x="0.7664%" y="687.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.02%)</title><rect x="0.9063%" y="661" width="0.0211%" height="15" fill="rgb(225,32,20)" fg:x="86" fg:w="2"/><text x="1.1563%" y="671.50"></text></g><g><title>CoreFoundation`parseXMLElement (55 samples, 0.58%)</title><rect x="0.3583%" y="693" width="0.5796%" height="15" fill="rgb(215,141,46)" fg:x="34" fg:w="55"/><text x="0.6083%" y="703.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.01%)</title><rect x="0.9274%" y="677" width="0.0105%" height="15" fill="rgb(250,160,47)" fg:x="88" fg:w="1"/><text x="1.1774%" y="687.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::initFromData (63 samples, 0.66%)</title><rect x="0.2845%" y="805" width="0.6639%" height="15" fill="rgb(216,222,40)" fg:x="27" fg:w="63"/><text x="0.5345%" y="815.50"></text></g><g><title>CoreFoundation`CFPropertyListCreateFromXMLData (63 samples, 0.66%)</title><rect x="0.2845%" y="789" width="0.6639%" height="15" fill="rgb(234,217,39)" fg:x="27" fg:w="63"/><text x="0.5345%" y="799.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateWithData (63 samples, 0.66%)</title><rect x="0.2845%" y="773" width="0.6639%" height="15" fill="rgb(207,178,40)" fg:x="27" fg:w="63"/><text x="0.5345%" y="783.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateFromUTF8Data (63 samples, 0.66%)</title><rect x="0.2845%" y="757" width="0.6639%" height="15" fill="rgb(221,136,13)" fg:x="27" fg:w="63"/><text x="0.5345%" y="767.50"></text></g><g><title>CoreFoundation`parseXMLElement (63 samples, 0.66%)</title><rect x="0.2845%" y="741" width="0.6639%" height="15" fill="rgb(249,199,10)" fg:x="27" fg:w="63"/><text x="0.5345%" y="751.50"></text></g><g><title>CoreFoundation`parseXMLElement (63 samples, 0.66%)</title><rect x="0.2845%" y="725" width="0.6639%" height="15" fill="rgb(249,222,13)" fg:x="27" fg:w="63"/><text x="0.5345%" y="735.50"></text></g><g><title>CoreFoundation`parseXMLElement (63 samples, 0.66%)</title><rect x="0.2845%" y="709" width="0.6639%" height="15" fill="rgb(244,185,38)" fg:x="27" fg:w="63"/><text x="0.5345%" y="719.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.01%)</title><rect x="0.9379%" y="693" width="0.0105%" height="15" fill="rgb(236,202,9)" fg:x="89" fg:w="1"/><text x="1.1879%" y="703.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM objectForKey:] (2 samples, 0.02%)</title><rect x="0.9485%" y="789" width="0.0211%" height="15" fill="rgb(250,229,37)" fg:x="90" fg:w="2"/><text x="1.1985%" y="799.50"></text></g><g><title>CoreFoundation`CFDictionaryGetValue (1 samples, 0.01%)</title><rect x="0.9695%" y="789" width="0.0105%" height="15" fill="rgb(206,174,23)" fg:x="92" fg:w="1"/><text x="1.2195%" y="799.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::validatePropList (4 samples, 0.04%)</title><rect x="0.9485%" y="805" width="0.0422%" height="15" fill="rgb(211,33,43)" fg:x="90" fg:w="4"/><text x="1.1985%" y="815.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.01%)</title><rect x="0.9801%" y="789" width="0.0105%" height="15" fill="rgb(245,58,50)" fg:x="93" fg:w="1"/><text x="1.2301%" y="799.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::CreateTrustSettings (70 samples, 0.74%)</title><rect x="0.2740%" y="821" width="0.7377%" height="15" fill="rgb(244,68,36)" fg:x="26" fg:w="70"/><text x="0.5240%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.02%)</title><rect x="0.9906%" y="805" width="0.0211%" height="15" fill="rgb(232,229,15)" fg:x="94" fg:w="2"/><text x="1.2406%" y="815.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::copyTrustSettings (1 samples, 0.01%)</title><rect x="1.0117%" y="821" width="0.0105%" height="15" fill="rgb(254,30,23)" fg:x="96" fg:w="1"/><text x="1.2617%" y="831.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::findDictionaryForCert (1 samples, 0.01%)</title><rect x="1.0117%" y="805" width="0.0105%" height="15" fill="rgb(235,160,14)" fg:x="96" fg:w="1"/><text x="1.2617%" y="815.50"></text></g><g><title>Security`SecTrustSettingsCertHashStrFromCert (1 samples, 0.01%)</title><rect x="1.0117%" y="789" width="0.0105%" height="15" fill="rgb(212,155,44)" fg:x="96" fg:w="1"/><text x="1.2617%" y="799.50"></text></g><g><title>Security`SecTrustSettingsCertHashStrFromData (1 samples, 0.01%)</title><rect x="1.0117%" y="773" width="0.0105%" height="15" fill="rgb(226,2,50)" fg:x="96" fg:w="1"/><text x="1.2617%" y="783.50"></text></g><g><title>libcommonCrypto.dylib`CC_SHA1 (1 samples, 0.01%)</title><rect x="1.0117%" y="757" width="0.0105%" height="15" fill="rgb(234,177,6)" fg:x="96" fg:w="1"/><text x="1.2617%" y="767.50"></text></g><g><title>libcommonCrypto.dylib`CCDigest (1 samples, 0.01%)</title><rect x="1.0117%" y="741" width="0.0105%" height="15" fill="rgb(217,24,9)" fg:x="96" fg:w="1"/><text x="1.2617%" y="751.50"></text></g><g><title>libcorecrypto.dylib`ccdigest (1 samples, 0.01%)</title><rect x="1.0117%" y="725" width="0.0105%" height="15" fill="rgb(220,13,46)" fg:x="96" fg:w="1"/><text x="1.2617%" y="735.50"></text></g><g><title>libcorecrypto.dylib`AccelerateCrypto_SHA1_compress (1 samples, 0.01%)</title><rect x="1.0117%" y="709" width="0.0105%" height="15" fill="rgb(239,221,27)" fg:x="96" fg:w="1"/><text x="1.2617%" y="719.50"></text></g><g><title>CoreFoundation`-[__NSArrayM dealloc] (1 samples, 0.01%)</title><rect x="1.0222%" y="741" width="0.0105%" height="15" fill="rgb(222,198,25)" fg:x="97" fg:w="1"/><text x="1.2722%" y="751.50"></text></g><g><title>CoreFoundation`__RELEASE_OBJECTS_IN_THE_ARRAY__ (1 samples, 0.01%)</title><rect x="1.0222%" y="725" width="0.0105%" height="15" fill="rgb(211,99,13)" fg:x="97" fg:w="1"/><text x="1.2722%" y="735.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (1 samples, 0.01%)</title><rect x="1.0222%" y="709" width="0.0105%" height="15" fill="rgb(232,111,31)" fg:x="97" fg:w="1"/><text x="1.2722%" y="719.50"></text></g><g><title>CoreFoundation`cow_cleanup (1 samples, 0.01%)</title><rect x="1.0222%" y="693" width="0.0105%" height="15" fill="rgb(245,82,37)" fg:x="97" fg:w="1"/><text x="1.2722%" y="703.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.01%)</title><rect x="1.0222%" y="677" width="0.0105%" height="15" fill="rgb(227,149,46)" fg:x="97" fg:w="1"/><text x="1.2722%" y="687.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$malloc_zone_free (1 samples, 0.01%)</title><rect x="1.0328%" y="725" width="0.0105%" height="15" fill="rgb(218,36,50)" fg:x="98" fg:w="1"/><text x="1.2828%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="1.0539%" y="709" width="0.0105%" height="15" fill="rgb(226,80,48)" fg:x="100" fg:w="1"/><text x="1.3039%" y="719.50"></text></g><g><title>CoreFoundation`cow_cleanup (6 samples, 0.06%)</title><rect x="1.0222%" y="757" width="0.0632%" height="15" fill="rgb(238,224,15)" fg:x="97" fg:w="6"/><text x="1.2722%" y="767.50"></text></g><g><title>CoreFoundation`_CFRelease (5 samples, 0.05%)</title><rect x="1.0328%" y="741" width="0.0527%" height="15" fill="rgb(241,136,10)" fg:x="98" fg:w="5"/><text x="1.2828%" y="751.50"></text></g><g><title>CoreFoundation`__CFStringDeallocate (4 samples, 0.04%)</title><rect x="1.0433%" y="725" width="0.0422%" height="15" fill="rgb(208,32,45)" fg:x="99" fg:w="4"/><text x="1.2933%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="1.0644%" y="709" width="0.0211%" height="15" fill="rgb(207,135,9)" fg:x="101" fg:w="2"/><text x="1.3144%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="1.0855%" y="757" width="0.0105%" height="15" fill="rgb(206,86,44)" fg:x="103" fg:w="1"/><text x="1.3355%" y="767.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (8 samples, 0.08%)</title><rect x="1.0222%" y="773" width="0.0843%" height="15" fill="rgb(245,177,15)" fg:x="97" fg:w="8"/><text x="1.2722%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="1.0960%" y="757" width="0.0105%" height="15" fill="rgb(206,64,50)" fg:x="104" fg:w="1"/><text x="1.3460%" y="767.50"></text></g><g><title>CoreFoundation`CFAllocatorDeallocate (1 samples, 0.01%)</title><rect x="1.1065%" y="741" width="0.0105%" height="15" fill="rgb(234,36,40)" fg:x="105" fg:w="1"/><text x="1.3565%" y="751.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.02%)</title><rect x="1.1065%" y="773" width="0.0211%" height="15" fill="rgb(213,64,8)" fg:x="105" fg:w="2"/><text x="1.3565%" y="783.50"></text></g><g><title>CoreFoundation`__CFStringDeallocate (2 samples, 0.02%)</title><rect x="1.1065%" y="757" width="0.0211%" height="15" fill="rgb(210,75,36)" fg:x="105" fg:w="2"/><text x="1.3565%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="1.1171%" y="741" width="0.0105%" height="15" fill="rgb(229,88,21)" fg:x="106" fg:w="1"/><text x="1.3671%" y="751.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::~TrustSettings (11 samples, 0.12%)</title><rect x="1.0222%" y="821" width="0.1159%" height="15" fill="rgb(252,204,47)" fg:x="97" fg:w="11"/><text x="1.2722%" y="831.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (11 samples, 0.12%)</title><rect x="1.0222%" y="805" width="0.1159%" height="15" fill="rgb(208,77,27)" fg:x="97" fg:w="11"/><text x="1.2722%" y="815.50"></text></g><g><title>CoreFoundation`cow_cleanup (11 samples, 0.12%)</title><rect x="1.0222%" y="789" width="0.1159%" height="15" fill="rgb(221,76,26)" fg:x="97" fg:w="11"/><text x="1.2722%" y="799.50"></text></g><g><title>libobjc.A.dylib`object_getClass (1 samples, 0.01%)</title><rect x="1.1276%" y="773" width="0.0105%" height="15" fill="rgb(225,139,18)" fg:x="107" fg:w="1"/><text x="1.3776%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`fstat (2 samples, 0.02%)</title><rect x="1.1382%" y="821" width="0.0211%" height="15" fill="rgb(230,137,11)" fg:x="108" fg:w="2"/><text x="1.3882%" y="831.50"></text></g><g><title>databend-query`common_sharing::share_endpoint::ShareEndpointManager::init (106 samples, 1.12%)</title><rect x="0.0527%" y="933" width="1.1171%" height="15" fill="rgb(212,28,1)" fg:x="5" fg:w="106"/><text x="0.3027%" y="943.50"></text></g><g><title>databend-query`opendal::raw::http_util::client::HttpClient::build (106 samples, 1.12%)</title><rect x="0.0527%" y="917" width="1.1171%" height="15" fill="rgb(248,164,17)" fg:x="5" fg:w="106"/><text x="0.3027%" y="927.50"></text></g><g><title>databend-query`reqwest::async_impl::client::ClientBuilder::build (106 samples, 1.12%)</title><rect x="0.0527%" y="901" width="1.1171%" height="15" fill="rgb(222,171,42)" fg:x="5" fg:w="106"/><text x="0.3027%" y="911.50"></text></g><g><title>databend-query`rustls_native_certs::macos::load_native_certs (104 samples, 1.10%)</title><rect x="0.0738%" y="885" width="1.0960%" height="15" fill="rgb(243,84,45)" fg:x="7" fg:w="104"/><text x="0.3238%" y="895.50"></text></g><g><title>databend-query`security_framework::trust_settings::TrustSettings::tls_trust_settings_for_certificate (85 samples, 0.90%)</title><rect x="0.2740%" y="869" width="0.8958%" height="15" fill="rgb(252,49,23)" fg:x="26" fg:w="85"/><text x="0.5240%" y="879.50"></text></g><g><title>Security`SecTrustSettingsCopyTrustSettings (85 samples, 0.90%)</title><rect x="0.2740%" y="853" width="0.8958%" height="15" fill="rgb(215,19,7)" fg:x="26" fg:w="85"/><text x="0.5240%" y="863.50"></text></g><g><title>Security`tsCopyTrustSettings(__SecCertificate*, SecTrustSettingsDomain, __CFArray const**, __CFDate const**) (85 samples, 0.90%)</title><rect x="0.2740%" y="837" width="0.8958%" height="15" fill="rgb(238,81,41)" fg:x="26" fg:w="85"/><text x="0.5240%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.01%)</title><rect x="1.1592%" y="821" width="0.0105%" height="15" fill="rgb(210,199,37)" fg:x="110" fg:w="1"/><text x="1.4092%" y="831.50"></text></g><g><title>databend-query`common_tracing::logging::init_logging (1 samples, 0.01%)</title><rect x="1.1698%" y="917" width="0.0105%" height="15" fill="rgb(244,192,49)" fg:x="111" fg:w="1"/><text x="1.4198%" y="927.50"></text></g><g><title>databend-query`tracing_appender::non_blocking::NonBlocking::create (1 samples, 0.01%)</title><rect x="1.1698%" y="901" width="0.0105%" height="15" fill="rgb(226,211,11)" fg:x="111" fg:w="1"/><text x="1.4198%" y="911.50"></text></g><g><title>databend-query`crossbeam_channel::channel::bounded (1 samples, 0.01%)</title><rect x="1.1698%" y="885" width="0.0105%" height="15" fill="rgb(236,162,54)" fg:x="111" fg:w="1"/><text x="1.4198%" y="895.50"></text></g><g><title>databend-query`crossbeam_channel::flavors::array::Channel&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="1.1698%" y="869" width="0.0105%" height="15" fill="rgb(220,229,9)" fg:x="111" fg:w="1"/><text x="1.4198%" y="879.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="1.1698%" y="853" width="0.0105%" height="15" fill="rgb(250,87,22)" fg:x="111" fg:w="1"/><text x="1.4198%" y="863.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="1.1698%" y="837" width="0.0105%" height="15" fill="rgb(239,43,17)" fg:x="111" fg:w="1"/><text x="1.4198%" y="847.50"></text></g><g><title>databend-query`common_tracing::logging::QueryLogger::init (2 samples, 0.02%)</title><rect x="1.1698%" y="933" width="0.0211%" height="15" fill="rgb(231,177,25)" fg:x="111" fg:w="2"/><text x="1.4198%" y="943.50"></text></g><g><title>databend-query`common_tracing::logging::init_query_logger (1 samples, 0.01%)</title><rect x="1.1803%" y="917" width="0.0105%" height="15" fill="rgb(219,179,1)" fg:x="112" fg:w="1"/><text x="1.4303%" y="927.50"></text></g><g><title>databend-query`tracing_appender::rolling::RollingFileAppender::new (1 samples, 0.01%)</title><rect x="1.1803%" y="901" width="0.0105%" height="15" fill="rgb(238,219,53)" fg:x="112" fg:w="1"/><text x="1.4303%" y="911.50"></text></g><g><title>databend-query`tracing_appender::rolling::Inner::new (1 samples, 0.01%)</title><rect x="1.1803%" y="885" width="0.0105%" height="15" fill="rgb(232,167,36)" fg:x="112" fg:w="1"/><text x="1.4303%" y="895.50"></text></g><g><title>databend-query`tracing_appender::rolling::create_writer (1 samples, 0.01%)</title><rect x="1.1803%" y="869" width="0.0105%" height="15" fill="rgb(244,19,51)" fg:x="112" fg:w="1"/><text x="1.4303%" y="879.50"></text></g><g><title>databend-query`std::fs::OpenOptions::_open (1 samples, 0.01%)</title><rect x="1.1803%" y="853" width="0.0105%" height="15" fill="rgb(224,6,22)" fg:x="112" fg:w="1"/><text x="1.4303%" y="863.50"></text></g><g><title>databend-query`std::sys::unix::fs::File::open_c (1 samples, 0.01%)</title><rect x="1.1803%" y="837" width="0.0105%" height="15" fill="rgb(224,145,5)" fg:x="112" fg:w="1"/><text x="1.4303%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.01%)</title><rect x="1.1803%" y="821" width="0.0105%" height="15" fill="rgb(234,130,49)" fg:x="112" fg:w="1"/><text x="1.4303%" y="831.50"></text></g><g><title>databend-query`&lt;async_backtrace::framed::Framed&lt;F&gt; as core::future::future::Future&gt;::poll{{reify.shim}} (114 samples, 1.20%)</title><rect x="0.0000%" y="1013" width="1.2014%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1023.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (114 samples, 1.20%)</title><rect x="0.0000%" y="997" width="1.2014%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1007.50"></text></g><g><title>databend-query`databend_query::global_services::GlobalServices::init::_{{closure}} (111 samples, 1.17%)</title><rect x="0.0316%" y="981" width="1.1698%" height="15" fill="rgb(239,3,39)" fg:x="3" fg:w="111"/><text x="0.2816%" y="991.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (111 samples, 1.17%)</title><rect x="0.0316%" y="965" width="1.1698%" height="15" fill="rgb(233,210,1)" fg:x="3" fg:w="111"/><text x="0.2816%" y="975.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (111 samples, 1.17%)</title><rect x="0.0316%" y="949" width="1.1698%" height="15" fill="rgb(244,137,37)" fg:x="3" fg:w="111"/><text x="0.2816%" y="959.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="1.1909%" y="933" width="0.0105%" height="15" fill="rgb(240,136,2)" fg:x="113" fg:w="1"/><text x="1.4409%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="1.1909%" y="917" width="0.0105%" height="15" fill="rgb(239,18,37)" fg:x="113" fg:w="1"/><text x="1.4409%" y="927.50"></text></g><g><title>databend-query`common_base::base::uniq_id::GlobalUniqName::unique (1 samples, 0.01%)</title><rect x="1.1909%" y="901" width="0.0105%" height="15" fill="rgb(218,185,22)" fg:x="113" fg:w="1"/><text x="1.4409%" y="911.50"></text></g><g><title>databend-query`getrandom::imp::getrandom_inner (1 samples, 0.01%)</title><rect x="1.1909%" y="885" width="0.0105%" height="15" fill="rgb(225,218,4)" fg:x="113" fg:w="1"/><text x="1.4409%" y="895.50"></text></g><g><title>dyld`start (115 samples, 1.21%)</title><rect x="0.0000%" y="1173" width="1.2119%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1183.50"></text></g><g><title>databend-query`main (115 samples, 1.21%)</title><rect x="0.0000%" y="1157" width="1.2119%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1167.50"></text></g><g><title>databend-query`std::rt::lang_start_internal (115 samples, 1.21%)</title><rect x="0.0000%" y="1141" width="1.2119%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1151.50"></text></g><g><title>databend-query`std::rt::lang_start::_{{closure}} (115 samples, 1.21%)</title><rect x="0.0000%" y="1125" width="1.2119%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1135.50"></text></g><g><title>databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace (115 samples, 1.21%)</title><rect x="0.0000%" y="1109" width="1.2119%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1119.50"></text></g><g><title>databend-query`databend_query::main (115 samples, 1.21%)</title><rect x="0.0000%" y="1093" width="1.2119%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1103.50"></text></g><g><title>databend-query`tokio::runtime::handle::Handle::block_on (115 samples, 1.21%)</title><rect x="0.0000%" y="1077" width="1.2119%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1087.50"></text></g><g><title>databend-query`tokio::runtime::park::CachedParkThread::block_on (115 samples, 1.21%)</title><rect x="0.0000%" y="1061" width="1.2119%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1071.50"></text></g><g><title>databend-query`&lt;common_base::runtime::catch_unwind::CatchUnwindFuture&lt;F&gt; as core::future::future::Future&gt;::poll (115 samples, 1.21%)</title><rect x="0.0000%" y="1045" width="1.2119%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1055.50"></text></g><g><title>databend-query`std::panicking::try (115 samples, 1.21%)</title><rect x="0.0000%" y="1029" width="1.2119%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="115"/><text x="0.2500%" y="1039.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="1.2014%" y="1013" width="0.0105%" height="15" fill="rgb(241,149,10)" fg:x="114" fg:w="1"/><text x="1.4514%" y="1023.50"></text></g><g><title>databend-query`&lt;common_pipeline_core::processors::resize_processor::ResizeProcessor as common_pipeline_core::processors::processor::Processor&gt;::event (1 samples, 0.01%)</title><rect x="1.2119%" y="981" width="0.0105%" height="15" fill="rgb(249,206,44)" fg:x="115" fg:w="1"/><text x="1.4619%" y="991.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::event (1 samples, 0.01%)</title><rect x="1.2225%" y="981" width="0.0105%" height="15" fill="rgb(251,153,30)" fg:x="116" fg:w="1"/><text x="1.4725%" y="991.50"></text></g><g><title>databend-query`common_expression::kernels::concat::_&lt;impl common_expression::block::DataBlock&gt;::concat (1 samples, 0.01%)</title><rect x="1.2330%" y="933" width="0.0105%" height="15" fill="rgb(239,152,38)" fg:x="117" fg:w="1"/><text x="1.4830%" y="943.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="1.2330%" y="917" width="0.0105%" height="15" fill="rgb(249,139,47)" fg:x="117" fg:w="1"/><text x="1.4830%" y="927.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="1.2330%" y="901" width="0.0105%" height="15" fill="rgb(244,64,35)" fg:x="117" fg:w="1"/><text x="1.4830%" y="911.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="1.2330%" y="885" width="0.0105%" height="15" fill="rgb(216,46,15)" fg:x="117" fg:w="1"/><text x="1.4830%" y="895.50"></text></g><g><title>databend-query`common_expression::kernels::concat::_&lt;impl common_expression::values::Column&gt;::concat_arg_types (1 samples, 0.01%)</title><rect x="1.2330%" y="869" width="0.0105%" height="15" fill="rgb(250,74,19)" fg:x="117" fg:w="1"/><text x="1.4830%" y="879.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="1.2330%" y="853" width="0.0105%" height="15" fill="rgb(249,42,33)" fg:x="117" fg:w="1"/><text x="1.4830%" y="863.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.01%)</title><rect x="1.2330%" y="837" width="0.0105%" height="15" fill="rgb(242,149,17)" fg:x="117" fg:w="1"/><text x="1.4830%" y="847.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="1.2646%" y="869" width="0.0105%" height="15" fill="rgb(244,29,21)" fg:x="120" fg:w="1"/><text x="1.5146%" y="879.50"></text></g><g><title>databend-query`__rg_alloc_zeroed (1 samples, 0.01%)</title><rect x="1.2646%" y="853" width="0.0105%" height="15" fill="rgb(220,130,37)" fg:x="120" fg:w="1"/><text x="1.5146%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.01%)</title><rect x="1.2646%" y="837" width="0.0105%" height="15" fill="rgb(211,67,2)" fg:x="120" fg:w="1"/><text x="1.5146%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="1.2646%" y="821" width="0.0105%" height="15" fill="rgb(235,68,52)" fg:x="120" fg:w="1"/><text x="1.5146%" y="831.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.01%)</title><rect x="1.2646%" y="805" width="0.0105%" height="15" fill="rgb(246,142,3)" fg:x="120" fg:w="1"/><text x="1.5146%" y="815.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::transform_ie_join::TransformIEJoinLeft as common_pipeline_core::processors::processor::Processor&gt;::event (5 samples, 0.05%)</title><rect x="1.2330%" y="981" width="0.0527%" height="15" fill="rgb(241,25,7)" fg:x="117" fg:w="5"/><text x="1.4830%" y="991.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::IEJoinState::left_detach (5 samples, 0.05%)</title><rect x="1.2330%" y="965" width="0.0527%" height="15" fill="rgb(242,119,39)" fg:x="117" fg:w="5"/><text x="1.4830%" y="975.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::IEJoinState::merge_sort (5 samples, 0.05%)</title><rect x="1.2330%" y="949" width="0.0527%" height="15" fill="rgb(241,98,45)" fg:x="117" fg:w="5"/><text x="1.4830%" y="959.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform_sort_merge::sort_merge (4 samples, 0.04%)</title><rect x="1.2435%" y="933" width="0.0422%" height="15" fill="rgb(254,28,30)" fg:x="118" fg:w="4"/><text x="1.4935%" y="943.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_sort_merge::SortMergeCompactor&lt;R,Converter&gt; as common_pipeline_transforms::processors::transforms::transform_compact::Compactor&gt;::compact_final (4 samples, 0.04%)</title><rect x="1.2435%" y="917" width="0.0422%" height="15" fill="rgb(241,142,54)" fg:x="118" fg:w="4"/><text x="1.4935%" y="927.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::sort::rows::arrow::_&lt;impl common_pipeline_transforms::processors::transforms::sort::rows::RowConverter&lt;arrow2::compute::sort::row::Rows&gt; for arrow2::compute::sort::row::RowConverter&gt;::convert (3 samples, 0.03%)</title><rect x="1.2541%" y="901" width="0.0316%" height="15" fill="rgb(222,85,15)" fg:x="119" fg:w="3"/><text x="1.5041%" y="911.50"></text></g><g><title>databend-query`arrow2::compute::sort::row::RowConverter::convert_columns (3 samples, 0.03%)</title><rect x="1.2541%" y="885" width="0.0316%" height="15" fill="rgb(210,85,47)" fg:x="119" fg:w="3"/><text x="1.5041%" y="895.50"></text></g><g><title>databend-query`arrow2::compute::sort::row::fixed::encode (1 samples, 0.01%)</title><rect x="1.2752%" y="869" width="0.0105%" height="15" fill="rgb(224,206,25)" fg:x="121" fg:w="1"/><text x="1.5252%" y="879.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.01%)</title><rect x="1.2857%" y="981" width="0.0105%" height="15" fill="rgb(243,201,19)" fg:x="122" fg:w="1"/><text x="1.5357%" y="991.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.01%)</title><rect x="1.2857%" y="965" width="0.0105%" height="15" fill="rgb(236,59,4)" fg:x="122" fg:w="1"/><text x="1.5357%" y="975.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="1.2857%" y="949" width="0.0105%" height="15" fill="rgb(254,179,45)" fg:x="122" fg:w="1"/><text x="1.5357%" y="959.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="1.2857%" y="933" width="0.0105%" height="15" fill="rgb(226,14,10)" fg:x="122" fg:w="1"/><text x="1.5357%" y="943.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="1.2857%" y="917" width="0.0105%" height="15" fill="rgb(244,27,41)" fg:x="122" fg:w="1"/><text x="1.5357%" y="927.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="1.2857%" y="901" width="0.0105%" height="15" fill="rgb(235,35,32)" fg:x="122" fg:w="1"/><text x="1.5357%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="1.2857%" y="885" width="0.0105%" height="15" fill="rgb(218,68,31)" fg:x="122" fg:w="1"/><text x="1.5357%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="1.2857%" y="869" width="0.0105%" height="15" fill="rgb(207,120,37)" fg:x="122" fg:w="1"/><text x="1.5357%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="1.2857%" y="853" width="0.0105%" height="15" fill="rgb(227,98,0)" fg:x="122" fg:w="1"/><text x="1.5357%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="1.2857%" y="837" width="0.0105%" height="15" fill="rgb(207,7,3)" fg:x="122" fg:w="1"/><text x="1.5357%" y="847.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::RunningGraph::schedule_queue (9 samples, 0.09%)</title><rect x="1.2119%" y="1013" width="0.0948%" height="15" fill="rgb(206,98,19)" fg:x="115" fg:w="9"/><text x="1.4619%" y="1023.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ExecutingGraph::schedule_queue (9 samples, 0.09%)</title><rect x="1.2119%" y="997" width="0.0948%" height="15" fill="rgb(217,5,26)" fg:x="115" fg:w="9"/><text x="1.4619%" y="1007.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.01%)</title><rect x="1.2962%" y="981" width="0.0105%" height="15" fill="rgb(235,190,38)" fg:x="123" fg:w="1"/><text x="1.5462%" y="991.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;databend_query::pipelines::executor::executor_worker_context::ExecutorTask&gt;&gt; (1 samples, 0.01%)</title><rect x="1.3068%" y="997" width="0.0105%" height="15" fill="rgb(247,86,24)" fg:x="124" fg:w="1"/><text x="1.5568%" y="1007.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::executor_graph::ScheduleQueue&gt; (1 samples, 0.01%)</title><rect x="1.3173%" y="981" width="0.0105%" height="15" fill="rgb(205,101,16)" fg:x="125" fg:w="1"/><text x="1.5673%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="1.3173%" y="965" width="0.0105%" height="15" fill="rgb(246,168,33)" fg:x="125" fg:w="1"/><text x="1.5673%" y="975.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ScheduleQueue::schedule (3 samples, 0.03%)</title><rect x="1.3068%" y="1013" width="0.0316%" height="15" fill="rgb(231,114,1)" fg:x="124" fg:w="3"/><text x="1.5568%" y="1023.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ScheduleQueue::schedule_tail (2 samples, 0.02%)</title><rect x="1.3173%" y="997" width="0.0211%" height="15" fill="rgb(207,184,53)" fg:x="125" fg:w="2"/><text x="1.5673%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="1.3279%" y="981" width="0.0105%" height="15" fill="rgb(224,95,51)" fg:x="126" fg:w="1"/><text x="1.5779%" y="991.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_tasks::ExecutorTasksQueue::steal_task_to_context (1 samples, 0.01%)</title><rect x="1.3384%" y="1013" width="0.0105%" height="15" fill="rgb(212,188,45)" fg:x="127" fg:w="1"/><text x="1.5884%" y="1023.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_condvar::WorkersCondvar::wait (1 samples, 0.01%)</title><rect x="1.3384%" y="997" width="0.0105%" height="15" fill="rgb(223,154,38)" fg:x="127" fg:w="1"/><text x="1.5884%" y="1007.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.01%)</title><rect x="1.3384%" y="981" width="0.0105%" height="15" fill="rgb(251,22,52)" fg:x="127" fg:w="1"/><text x="1.5884%" y="991.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.01%)</title><rect x="1.3384%" y="965" width="0.0105%" height="15" fill="rgb(229,209,22)" fg:x="127" fg:w="1"/><text x="1.5884%" y="975.50"></text></g><g><title>databend-query`core::slice::sort::partition (1 samples, 0.01%)</title><rect x="1.3489%" y="917" width="0.0105%" height="15" fill="rgb(234,138,34)" fg:x="128" fg:w="1"/><text x="1.5989%" y="927.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (1 samples, 0.01%)</title><rect x="1.3489%" y="901" width="0.0105%" height="15" fill="rgb(212,95,11)" fg:x="128" fg:w="1"/><text x="1.5989%" y="911.50"></text></g><g><title>databend-query`&lt;common_pipeline_sinks::sync_sink::Sinker&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (2 samples, 0.02%)</title><rect x="1.3489%" y="997" width="0.0211%" height="15" fill="rgb(240,179,47)" fg:x="128" fg:w="2"/><text x="1.5989%" y="1007.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::IEJoinState::sink_right (2 samples, 0.02%)</title><rect x="1.3489%" y="981" width="0.0211%" height="15" fill="rgb(240,163,11)" fg:x="128" fg:w="2"/><text x="1.5989%" y="991.50"></text></g><g><title>databend-query`common_expression::kernels::sort::_&lt;impl common_expression::block::DataBlock&gt;::sort (2 samples, 0.02%)</title><rect x="1.3489%" y="965" width="0.0211%" height="15" fill="rgb(236,37,12)" fg:x="128" fg:w="2"/><text x="1.5989%" y="975.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::lexsort_to_indices_impl (2 samples, 0.02%)</title><rect x="1.3489%" y="949" width="0.0211%" height="15" fill="rgb(232,164,16)" fg:x="128" fg:w="2"/><text x="1.5989%" y="959.50"></text></g><g><title>databend-query`core::slice::sort::recurse (2 samples, 0.02%)</title><rect x="1.3489%" y="933" width="0.0211%" height="15" fill="rgb(244,205,15)" fg:x="128" fg:w="2"/><text x="1.5989%" y="943.50"></text></g><g><title>databend-query`core::slice::sort::recurse (1 samples, 0.01%)</title><rect x="1.3595%" y="917" width="0.0105%" height="15" fill="rgb(223,117,47)" fg:x="129" fg:w="1"/><text x="1.6095%" y="927.50"></text></g><g><title>databend-query`core::slice::sort::partition (1 samples, 0.01%)</title><rect x="1.3595%" y="901" width="0.0105%" height="15" fill="rgb(244,107,35)" fg:x="129" fg:w="1"/><text x="1.6095%" y="911.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (1 samples, 0.01%)</title><rect x="1.3595%" y="885" width="0.0105%" height="15" fill="rgb(205,140,8)" fg:x="129" fg:w="1"/><text x="1.6095%" y="895.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (1 samples, 0.01%)</title><rect x="1.3595%" y="869" width="0.0105%" height="15" fill="rgb(228,84,46)" fg:x="129" fg:w="1"/><text x="1.6095%" y="879.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (1 samples, 0.01%)</title><rect x="1.3595%" y="853" width="0.0105%" height="15" fill="rgb(254,188,9)" fg:x="129" fg:w="1"/><text x="1.6095%" y="863.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (1 samples, 0.01%)</title><rect x="1.3700%" y="997" width="0.0105%" height="15" fill="rgb(206,112,54)" fg:x="130" fg:w="1"/><text x="1.6200%" y="1007.50"></text></g><g><title>databend-query`&lt;common_sql::evaluator::block_operator::CompoundBlockOperator as common_pipeline_transforms::processors::transforms::transform::Transform&gt;::transform (1 samples, 0.01%)</title><rect x="1.3700%" y="981" width="0.0105%" height="15" fill="rgb(216,84,49)" fg:x="130" fg:w="1"/><text x="1.6200%" y="991.50"></text></g><g><title>databend-query`common_sql::evaluator::block_operator::BlockOperator::execute (1 samples, 0.01%)</title><rect x="1.3700%" y="965" width="0.0105%" height="15" fill="rgb(214,194,35)" fg:x="130" fg:w="1"/><text x="1.6200%" y="975.50"></text></g><g><title>databend-query`common_expression::evaluator::Evaluator::partial_run (1 samples, 0.01%)</title><rect x="1.3700%" y="949" width="0.0105%" height="15" fill="rgb(249,28,3)" fg:x="130" fg:w="1"/><text x="1.6200%" y="959.50"></text></g><g><title>databend-query`common_expression::register::vectorize_2_arg::_{{closure}} (1 samples, 0.01%)</title><rect x="1.3700%" y="933" width="0.0105%" height="15" fill="rgb(222,56,52)" fg:x="130" fg:w="1"/><text x="1.6200%" y="943.50"></text></g><g><title>databend-query`&lt;common_functions::aggregates::aggregate_count::AggregateCountFunction as common_functions::aggregates::aggregate_function::AggregateFunction&gt;::accumulate (1 samples, 0.01%)</title><rect x="1.3805%" y="981" width="0.0105%" height="15" fill="rgb(245,217,50)" fg:x="131" fg:w="1"/><text x="1.6305%" y="991.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::transform_single_key::FinalSingleStateAggregator as common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransform&gt;::transform (1 samples, 0.01%)</title><rect x="1.3911%" y="981" width="0.0105%" height="15" fill="rgb(213,201,24)" fg:x="132" fg:w="1"/><text x="1.6411%" y="991.50"></text></g><g><title>databend-query`common_expression::block::DataBlock::convert_to_full (1 samples, 0.01%)</title><rect x="1.3911%" y="965" width="0.0105%" height="15" fill="rgb(248,116,28)" fg:x="132" fg:w="1"/><text x="1.6411%" y="975.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="1.3911%" y="949" width="0.0105%" height="15" fill="rgb(219,72,43)" fg:x="132" fg:w="1"/><text x="1.6411%" y="959.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="1.3911%" y="933" width="0.0105%" height="15" fill="rgb(209,138,14)" fg:x="132" fg:w="1"/><text x="1.6411%" y="943.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="1.3911%" y="917" width="0.0105%" height="15" fill="rgb(222,18,33)" fg:x="132" fg:w="1"/><text x="1.6411%" y="927.50"></text></g><g><title>databend-query`common_expression::types::string::StringColumnBuilder::repeat (1 samples, 0.01%)</title><rect x="1.3911%" y="901" width="0.0105%" height="15" fill="rgb(213,199,7)" fg:x="132" fg:w="1"/><text x="1.6411%" y="911.50"></text></g><g><title>databend-query`common_expression::block::DataBlock::convert_to_full (1 samples, 0.01%)</title><rect x="1.4016%" y="965" width="0.0105%" height="15" fill="rgb(250,110,10)" fg:x="133" fg:w="1"/><text x="1.6516%" y="975.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="1.4016%" y="949" width="0.0105%" height="15" fill="rgb(248,123,6)" fg:x="133" fg:w="1"/><text x="1.6516%" y="959.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="1.4016%" y="933" width="0.0105%" height="15" fill="rgb(206,91,31)" fg:x="133" fg:w="1"/><text x="1.6516%" y="943.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="1.4016%" y="917" width="0.0105%" height="15" fill="rgb(211,154,13)" fg:x="133" fg:w="1"/><text x="1.6516%" y="927.50"></text></g><g><title>databend-query`__rg_dealloc (1 samples, 0.01%)</title><rect x="1.4122%" y="901" width="0.0105%" height="15" fill="rgb(225,148,7)" fg:x="134" fg:w="1"/><text x="1.6622%" y="911.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (237 samples, 2.50%)</title><rect x="1.4122%" y="949" width="2.4976%" height="15" fill="rgb(220,160,43)" fg:x="134" fg:w="237"/><text x="1.6622%" y="959.50">da..</text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (237 samples, 2.50%)</title><rect x="1.4122%" y="933" width="2.4976%" height="15" fill="rgb(213,52,39)" fg:x="134" fg:w="237"/><text x="1.6622%" y="943.50">da..</text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (237 samples, 2.50%)</title><rect x="1.4122%" y="917" width="2.4976%" height="15" fill="rgb(243,137,7)" fg:x="134" fg:w="237"/><text x="1.6622%" y="927.50">da..</text></g><g><title>libsystem_malloc.dylib`free_medium (236 samples, 2.49%)</title><rect x="1.4227%" y="901" width="2.4871%" height="15" fill="rgb(230,79,13)" fg:x="135" fg:w="236"/><text x="1.6727%" y="911.50">li..</text></g><g><title>libsystem_kernel.dylib`madvise (236 samples, 2.49%)</title><rect x="1.4227%" y="885" width="2.4871%" height="15" fill="rgb(247,105,23)" fg:x="135" fg:w="236"/><text x="1.6727%" y="895.50">li..</text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::transform_single_key::PartialSingleStateAggregator as common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransform&gt;::transform (239 samples, 2.52%)</title><rect x="1.4016%" y="981" width="2.5187%" height="15" fill="rgb(223,179,41)" fg:x="133" fg:w="239"/><text x="1.6516%" y="991.50">da..</text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::DataBlock&gt; (238 samples, 2.51%)</title><rect x="1.4122%" y="965" width="2.5082%" height="15" fill="rgb(218,9,34)" fg:x="134" fg:w="238"/><text x="1.6622%" y="975.50">da..</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.01%)</title><rect x="3.9098%" y="949" width="0.0105%" height="15" fill="rgb(222,106,8)" fg:x="371" fg:w="1"/><text x="4.1598%" y="959.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (242 samples, 2.55%)</title><rect x="1.3805%" y="997" width="2.5503%" height="15" fill="rgb(211,220,0)" fg:x="131" fg:w="242"/><text x="1.6305%" y="1007.50">da..</text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::values::Column&gt;&gt; (1 samples, 0.01%)</title><rect x="3.9203%" y="981" width="0.0105%" height="15" fill="rgb(229,52,16)" fg:x="372" fg:w="1"/><text x="4.1703%" y="991.50"></text></g><g><title>databend-query`&lt;strawboat::read::array::primitive::PrimitiveIter&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (2 samples, 0.02%)</title><rect x="3.9309%" y="981" width="0.0211%" height="15" fill="rgb(212,155,18)" fg:x="373" fg:w="2"/><text x="4.1809%" y="991.50"></text></g><g><title>databend-query`strawboat::read::array::primitive::PrimitiveIter&lt;I,T&gt;::deserialize (2 samples, 0.02%)</title><rect x="3.9309%" y="965" width="0.0211%" height="15" fill="rgb(242,21,14)" fg:x="373" fg:w="2"/><text x="4.1809%" y="975.50"></text></g><g><title>databend-query`strawboat::read::read_basic::read_buffer (2 samples, 0.02%)</title><rect x="3.9309%" y="949" width="0.0211%" height="15" fill="rgb(222,19,48)" fg:x="373" fg:w="2"/><text x="4.1809%" y="959.50"></text></g><g><title>databend-query`strawboat::read::read_basic::read_slice (2 samples, 0.02%)</title><rect x="3.9309%" y="933" width="0.0211%" height="15" fill="rgb(232,45,27)" fg:x="373" fg:w="2"/><text x="4.1809%" y="943.50"></text></g><g><title>databend-query`lz4::block::decompress_to_buffer (2 samples, 0.02%)</title><rect x="3.9309%" y="917" width="0.0211%" height="15" fill="rgb(249,103,42)" fg:x="373" fg:w="2"/><text x="4.1809%" y="927.50"></text></g><g><title>databend-query`LZ4_decompress_safe (2 samples, 0.02%)</title><rect x="3.9309%" y="901" width="0.0211%" height="15" fill="rgb(246,81,33)" fg:x="373" fg:w="2"/><text x="4.1809%" y="911.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::operations::read::native_data_source_deserializer::NativeDeserializeDataTransform as common_pipeline_core::processors::processor::Processor&gt;::process (3 samples, 0.03%)</title><rect x="3.9309%" y="997" width="0.0316%" height="15" fill="rgb(252,33,42)" fg:x="373" fg:w="3"/><text x="4.1809%" y="1007.50"></text></g><g><title>databend-query`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (1 samples, 0.01%)</title><rect x="3.9519%" y="981" width="0.0105%" height="15" fill="rgb(209,212,41)" fg:x="375" fg:w="1"/><text x="4.2019%" y="991.50"></text></g><g><title>databend-query`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (1 samples, 0.01%)</title><rect x="3.9519%" y="965" width="0.0105%" height="15" fill="rgb(207,154,6)" fg:x="375" fg:w="1"/><text x="4.2019%" y="975.50"></text></g><g><title>databend-query`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (1 samples, 0.01%)</title><rect x="3.9519%" y="949" width="0.0105%" height="15" fill="rgb(223,64,47)" fg:x="375" fg:w="1"/><text x="4.2019%" y="959.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="3.9625%" y="981" width="0.0105%" height="15" fill="rgb(211,161,38)" fg:x="376" fg:w="1"/><text x="4.2125%" y="991.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumnBuilder::push (1 samples, 0.01%)</title><rect x="3.9730%" y="981" width="0.0105%" height="15" fill="rgb(219,138,40)" fg:x="377" fg:w="1"/><text x="4.2230%" y="991.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="4.0363%" y="965" width="0.0105%" height="15" fill="rgb(241,228,46)" fg:x="383" fg:w="1"/><text x="4.2863%" y="975.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="4.0363%" y="949" width="0.0105%" height="15" fill="rgb(223,209,38)" fg:x="383" fg:w="1"/><text x="4.2863%" y="959.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="4.0363%" y="933" width="0.0105%" height="15" fill="rgb(236,164,45)" fg:x="383" fg:w="1"/><text x="4.2863%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="4.0363%" y="917" width="0.0105%" height="15" fill="rgb(231,15,5)" fg:x="383" fg:w="1"/><text x="4.2863%" y="927.50"></text></g><g><title>databend-query`&lt;common_expression::types::number::NumberScalar as core::cmp::PartialOrd&gt;::partial_cmp (10 samples, 0.11%)</title><rect x="4.0468%" y="965" width="0.1054%" height="15" fill="rgb(252,35,15)" fg:x="384" fg:w="10"/><text x="4.2968%" y="975.50"></text></g><g><title>databend-query`&lt;common_expression::values::ScalarRef as core::cmp::PartialOrd&gt;::partial_cmp (3 samples, 0.03%)</title><rect x="4.1522%" y="965" width="0.0316%" height="15" fill="rgb(248,181,18)" fg:x="394" fg:w="3"/><text x="4.4022%" y="975.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="4.1838%" y="917" width="0.0105%" height="15" fill="rgb(233,39,42)" fg:x="397" fg:w="1"/><text x="4.4338%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="4.1838%" y="901" width="0.0105%" height="15" fill="rgb(238,110,33)" fg:x="397" fg:w="1"/><text x="4.4338%" y="911.50"></text></g><g><title>databend-query`&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="4.1838%" y="933" width="0.0211%" height="15" fill="rgb(233,195,10)" fg:x="397" fg:w="2"/><text x="4.4338%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.01%)</title><rect x="4.1943%" y="917" width="0.0105%" height="15" fill="rgb(254,105,3)" fg:x="398" fg:w="1"/><text x="4.4443%" y="927.50"></text></g><g><title>databend-query`common_settings::settings::Settings::get_changes (3 samples, 0.03%)</title><rect x="4.1838%" y="949" width="0.0316%" height="15" fill="rgb(221,225,9)" fg:x="397" fg:w="3"/><text x="4.4338%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="4.2049%" y="933" width="0.0105%" height="15" fill="rgb(224,227,45)" fg:x="399" fg:w="1"/><text x="4.4549%" y="943.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_settings (4 samples, 0.04%)</title><rect x="4.1838%" y="965" width="0.0422%" height="15" fill="rgb(229,198,43)" fg:x="397" fg:w="4"/><text x="4.4338%" y="975.50"></text></g><g><title>databend-query`hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.01%)</title><rect x="4.2154%" y="949" width="0.0105%" height="15" fill="rgb(206,209,35)" fg:x="400" fg:w="1"/><text x="4.4654%" y="959.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="4.2259%" y="965" width="0.0105%" height="15" fill="rgb(245,195,53)" fg:x="401" fg:w="1"/><text x="4.4759%" y="975.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="4.2259%" y="949" width="0.0105%" height="15" fill="rgb(240,92,26)" fg:x="401" fg:w="1"/><text x="4.4759%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="4.2259%" y="933" width="0.0105%" height="15" fill="rgb(207,40,23)" fg:x="401" fg:w="1"/><text x="4.4759%" y="943.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="4.2365%" y="917" width="0.0105%" height="15" fill="rgb(223,111,35)" fg:x="402" fg:w="1"/><text x="4.4865%" y="927.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.01%)</title><rect x="4.2470%" y="869" width="0.0105%" height="15" fill="rgb(229,147,28)" fg:x="403" fg:w="1"/><text x="4.4970%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="4.4051%" y="725" width="0.0105%" height="15" fill="rgb(211,29,28)" fg:x="418" fg:w="1"/><text x="4.6551%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="4.4051%" y="709" width="0.0105%" height="15" fill="rgb(228,72,33)" fg:x="418" fg:w="1"/><text x="4.6551%" y="719.50"></text></g><g><title>databend-query`common_expression::kernels::concat::_&lt;impl common_expression::block::DataBlock&gt;::concat (19 samples, 0.20%)</title><rect x="4.2365%" y="965" width="0.2002%" height="15" fill="rgb(205,214,31)" fg:x="402" fg:w="19"/><text x="4.4865%" y="975.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (19 samples, 0.20%)</title><rect x="4.2365%" y="949" width="0.2002%" height="15" fill="rgb(224,111,15)" fg:x="402" fg:w="19"/><text x="4.4865%" y="959.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (19 samples, 0.20%)</title><rect x="4.2365%" y="933" width="0.2002%" height="15" fill="rgb(253,21,26)" fg:x="402" fg:w="19"/><text x="4.4865%" y="943.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.19%)</title><rect x="4.2470%" y="917" width="0.1897%" height="15" fill="rgb(245,139,43)" fg:x="403" fg:w="18"/><text x="4.4970%" y="927.50"></text></g><g><title>databend-query`common_expression::kernels::concat::_&lt;impl common_expression::values::Column&gt;::concat_arg_types (18 samples, 0.19%)</title><rect x="4.2470%" y="901" width="0.1897%" height="15" fill="rgb(252,170,7)" fg:x="403" fg:w="18"/><text x="4.4970%" y="911.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (18 samples, 0.19%)</title><rect x="4.2470%" y="885" width="0.1897%" height="15" fill="rgb(231,118,14)" fg:x="403" fg:w="18"/><text x="4.4970%" y="895.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (17 samples, 0.18%)</title><rect x="4.2576%" y="869" width="0.1792%" height="15" fill="rgb(238,83,0)" fg:x="404" fg:w="17"/><text x="4.5076%" y="879.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="4.4051%" y="853" width="0.0316%" height="15" fill="rgb(221,39,39)" fg:x="418" fg:w="3"/><text x="4.6551%" y="863.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="4.4051%" y="837" width="0.0316%" height="15" fill="rgb(222,119,46)" fg:x="418" fg:w="3"/><text x="4.6551%" y="847.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="4.4051%" y="821" width="0.0316%" height="15" fill="rgb(222,165,49)" fg:x="418" fg:w="3"/><text x="4.6551%" y="831.50"></text></g><g><title>databend-query`__rg_realloc (3 samples, 0.03%)</title><rect x="4.4051%" y="805" width="0.0316%" height="15" fill="rgb(219,113,52)" fg:x="418" fg:w="3"/><text x="4.6551%" y="815.50"></text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (3 samples, 0.03%)</title><rect x="4.4051%" y="789" width="0.0316%" height="15" fill="rgb(214,7,15)" fg:x="418" fg:w="3"/><text x="4.6551%" y="799.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (3 samples, 0.03%)</title><rect x="4.4051%" y="773" width="0.0316%" height="15" fill="rgb(235,32,4)" fg:x="418" fg:w="3"/><text x="4.6551%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.03%)</title><rect x="4.4051%" y="757" width="0.0316%" height="15" fill="rgb(238,90,54)" fg:x="418" fg:w="3"/><text x="4.6551%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.03%)</title><rect x="4.4051%" y="741" width="0.0316%" height="15" fill="rgb(213,208,19)" fg:x="418" fg:w="3"/><text x="4.6551%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="4.4156%" y="725" width="0.0211%" height="15" fill="rgb(233,156,4)" fg:x="419" fg:w="2"/><text x="4.6656%" y="735.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="4.4473%" y="933" width="0.0105%" height="15" fill="rgb(207,194,5)" fg:x="422" fg:w="1"/><text x="4.6973%" y="943.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="4.4473%" y="917" width="0.0105%" height="15" fill="rgb(206,111,30)" fg:x="422" fg:w="1"/><text x="4.6973%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="4.4473%" y="901" width="0.0105%" height="15" fill="rgb(243,70,54)" fg:x="422" fg:w="1"/><text x="4.6973%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="4.4473%" y="885" width="0.0105%" height="15" fill="rgb(242,28,8)" fg:x="422" fg:w="1"/><text x="4.6973%" y="895.50"></text></g><g><title>databend-query`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="4.4683%" y="901" width="0.0105%" height="15" fill="rgb(219,106,18)" fg:x="424" fg:w="1"/><text x="4.7183%" y="911.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.04%)</title><rect x="4.4473%" y="949" width="0.0422%" height="15" fill="rgb(244,222,10)" fg:x="422" fg:w="4"/><text x="4.6973%" y="959.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.03%)</title><rect x="4.4578%" y="933" width="0.0316%" height="15" fill="rgb(236,179,52)" fg:x="423" fg:w="3"/><text x="4.7078%" y="943.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.03%)</title><rect x="4.4578%" y="917" width="0.0316%" height="15" fill="rgb(213,23,39)" fg:x="423" fg:w="3"/><text x="4.7078%" y="927.50"></text></g><g><title>databend-query`common_expression::values::Column::as_arrow (1 samples, 0.01%)</title><rect x="4.4789%" y="901" width="0.0105%" height="15" fill="rgb(238,48,10)" fg:x="425" fg:w="1"/><text x="4.7289%" y="911.50"></text></g><g><title>databend-query`common_expression::values::Column::arrow_field (1 samples, 0.01%)</title><rect x="4.4789%" y="885" width="0.0105%" height="15" fill="rgb(251,196,23)" fg:x="425" fg:w="1"/><text x="4.7289%" y="895.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="4.4789%" y="869" width="0.0105%" height="15" fill="rgb(250,152,24)" fg:x="425" fg:w="1"/><text x="4.7289%" y="879.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="4.4789%" y="853" width="0.0105%" height="15" fill="rgb(209,150,17)" fg:x="425" fg:w="1"/><text x="4.7289%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="4.4789%" y="837" width="0.0105%" height="15" fill="rgb(234,202,34)" fg:x="425" fg:w="1"/><text x="4.7289%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="4.4789%" y="821" width="0.0105%" height="15" fill="rgb(253,148,53)" fg:x="425" fg:w="1"/><text x="4.7289%" y="831.50"></text></g><g><title>databend-query`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.01%)</title><rect x="4.4894%" y="933" width="0.0105%" height="15" fill="rgb(218,129,16)" fg:x="426" fg:w="1"/><text x="4.7394%" y="943.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.08%)</title><rect x="4.4999%" y="933" width="0.0843%" height="15" fill="rgb(216,85,19)" fg:x="427" fg:w="8"/><text x="4.7499%" y="943.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (8 samples, 0.08%)</title><rect x="4.4999%" y="917" width="0.0843%" height="15" fill="rgb(235,228,7)" fg:x="427" fg:w="8"/><text x="4.7499%" y="927.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;(usize,usize)&gt;+Output = core::cmp::Ordering+core::marker::Sync+core::marker::Send&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="4.5843%" y="933" width="0.0105%" height="15" fill="rgb(245,175,0)" fg:x="435" fg:w="1"/><text x="4.8343%" y="943.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="4.5843%" y="917" width="0.0105%" height="15" fill="rgb(208,168,36)" fg:x="435" fg:w="1"/><text x="4.8343%" y="927.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn arrow2::io::parquet::read::deserialize::nested_utils::Nested&gt;&gt; (1 samples, 0.01%)</title><rect x="4.5843%" y="901" width="0.0105%" height="15" fill="rgb(246,171,24)" fg:x="435" fg:w="1"/><text x="4.8343%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="4.5843%" y="885" width="0.0105%" height="15" fill="rgb(215,142,24)" fg:x="435" fg:w="1"/><text x="4.8343%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::insertion_sort_shift_left (1 samples, 0.01%)</title><rect x="4.5948%" y="933" width="0.0105%" height="15" fill="rgb(250,187,7)" fg:x="436" fg:w="1"/><text x="4.8448%" y="943.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.01%)</title><rect x="4.5948%" y="917" width="0.0105%" height="15" fill="rgb(228,66,33)" fg:x="436" fg:w="1"/><text x="4.8448%" y="927.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (1 samples, 0.01%)</title><rect x="4.5948%" y="901" width="0.0105%" height="15" fill="rgb(234,215,21)" fg:x="436" fg:w="1"/><text x="4.8448%" y="911.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (3 samples, 0.03%)</title><rect x="4.6053%" y="917" width="0.0316%" height="15" fill="rgb(222,191,20)" fg:x="437" fg:w="3"/><text x="4.8553%" y="927.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot (2 samples, 0.02%)</title><rect x="4.6369%" y="917" width="0.0211%" height="15" fill="rgb(245,79,54)" fg:x="440" fg:w="2"/><text x="4.8869%" y="927.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot::_{{closure}} (2 samples, 0.02%)</title><rect x="4.6369%" y="901" width="0.0211%" height="15" fill="rgb(240,10,37)" fg:x="440" fg:w="2"/><text x="4.8869%" y="911.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (1 samples, 0.01%)</title><rect x="4.6475%" y="885" width="0.0105%" height="15" fill="rgb(214,192,32)" fg:x="441" fg:w="1"/><text x="4.8975%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.01%)</title><rect x="4.6580%" y="917" width="0.0105%" height="15" fill="rgb(209,36,54)" fg:x="442" fg:w="1"/><text x="4.9080%" y="927.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (11 samples, 0.12%)</title><rect x="4.7845%" y="885" width="0.1159%" height="15" fill="rgb(220,10,11)" fg:x="454" fg:w="11"/><text x="5.0345%" y="895.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (8 samples, 0.08%)</title><rect x="4.8161%" y="869" width="0.0843%" height="15" fill="rgb(221,106,17)" fg:x="457" fg:w="8"/><text x="5.0661%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::insertion_sort_shift_left (23 samples, 0.24%)</title><rect x="4.6686%" y="917" width="0.2424%" height="15" fill="rgb(251,142,44)" fg:x="443" fg:w="23"/><text x="4.9186%" y="927.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (23 samples, 0.24%)</title><rect x="4.6686%" y="901" width="0.2424%" height="15" fill="rgb(238,13,15)" fg:x="443" fg:w="23"/><text x="4.9186%" y="911.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (1 samples, 0.01%)</title><rect x="4.9004%" y="885" width="0.0105%" height="15" fill="rgb(208,107,27)" fg:x="465" fg:w="1"/><text x="5.1504%" y="895.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (1 samples, 0.01%)</title><rect x="4.9426%" y="901" width="0.0105%" height="15" fill="rgb(205,136,37)" fg:x="469" fg:w="1"/><text x="5.1926%" y="911.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (2 samples, 0.02%)</title><rect x="4.9531%" y="901" width="0.0211%" height="15" fill="rgb(250,205,27)" fg:x="470" fg:w="2"/><text x="5.2031%" y="911.50"></text></g><g><title>databend-query`core::slice::sort::partial_insertion_sort (7 samples, 0.07%)</title><rect x="4.9109%" y="917" width="0.0738%" height="15" fill="rgb(210,80,43)" fg:x="466" fg:w="7"/><text x="5.1609%" y="927.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (1 samples, 0.01%)</title><rect x="4.9742%" y="901" width="0.0105%" height="15" fill="rgb(247,160,36)" fg:x="472" fg:w="1"/><text x="5.2242%" y="911.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (6 samples, 0.06%)</title><rect x="5.0163%" y="901" width="0.0632%" height="15" fill="rgb(234,13,49)" fg:x="476" fg:w="6"/><text x="5.2663%" y="911.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (1 samples, 0.01%)</title><rect x="5.2271%" y="885" width="0.0105%" height="15" fill="rgb(234,122,0)" fg:x="496" fg:w="1"/><text x="5.4771%" y="895.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (12 samples, 0.13%)</title><rect x="5.2376%" y="885" width="0.1265%" height="15" fill="rgb(207,146,38)" fg:x="497" fg:w="12"/><text x="5.4876%" y="895.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (1 samples, 0.01%)</title><rect x="5.3536%" y="869" width="0.0105%" height="15" fill="rgb(207,177,25)" fg:x="508" fg:w="1"/><text x="5.6036%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::partition (41 samples, 0.43%)</title><rect x="4.9847%" y="917" width="0.4321%" height="15" fill="rgb(211,178,42)" fg:x="473" fg:w="41"/><text x="5.2347%" y="927.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (32 samples, 0.34%)</title><rect x="5.0796%" y="901" width="0.3372%" height="15" fill="rgb(230,69,54)" fg:x="482" fg:w="32"/><text x="5.3296%" y="911.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (5 samples, 0.05%)</title><rect x="5.3641%" y="885" width="0.0527%" height="15" fill="rgb(214,135,41)" fg:x="509" fg:w="5"/><text x="5.6141%" y="895.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (1 samples, 0.01%)</title><rect x="5.4379%" y="901" width="0.0105%" height="15" fill="rgb(237,67,25)" fg:x="516" fg:w="1"/><text x="5.6879%" y="911.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot::_{{closure}} (1 samples, 0.01%)</title><rect x="5.4484%" y="901" width="0.0105%" height="15" fill="rgb(222,189,50)" fg:x="517" fg:w="1"/><text x="5.6984%" y="911.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (1 samples, 0.01%)</title><rect x="5.5327%" y="869" width="0.0105%" height="15" fill="rgb(245,148,34)" fg:x="525" fg:w="1"/><text x="5.7827%" y="879.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (1 samples, 0.01%)</title><rect x="5.5327%" y="853" width="0.0105%" height="15" fill="rgb(222,29,6)" fg:x="525" fg:w="1"/><text x="5.7827%" y="863.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot (9 samples, 0.09%)</title><rect x="5.4590%" y="901" width="0.0948%" height="15" fill="rgb(221,189,43)" fg:x="518" fg:w="9"/><text x="5.7090%" y="911.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot::_{{closure}} (9 samples, 0.09%)</title><rect x="5.4590%" y="885" width="0.0948%" height="15" fill="rgb(207,36,27)" fg:x="518" fg:w="9"/><text x="5.7090%" y="895.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (1 samples, 0.01%)</title><rect x="5.5433%" y="869" width="0.0105%" height="15" fill="rgb(217,90,24)" fg:x="526" fg:w="1"/><text x="5.7933%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.01%)</title><rect x="5.5538%" y="901" width="0.0105%" height="15" fill="rgb(224,66,35)" fg:x="527" fg:w="1"/><text x="5.8038%" y="911.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (11 samples, 0.12%)</title><rect x="5.7646%" y="869" width="0.1159%" height="15" fill="rgb(221,13,50)" fg:x="547" fg:w="11"/><text x="6.0146%" y="879.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (4 samples, 0.04%)</title><rect x="5.8383%" y="853" width="0.0422%" height="15" fill="rgb(236,68,49)" fg:x="554" fg:w="4"/><text x="6.0883%" y="863.50"></text></g><g><title>databend-query`core::slice::sort::insertion_sort_shift_left (31 samples, 0.33%)</title><rect x="5.5643%" y="901" width="0.3267%" height="15" fill="rgb(229,146,28)" fg:x="528" fg:w="31"/><text x="5.8143%" y="911.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (30 samples, 0.32%)</title><rect x="5.5749%" y="885" width="0.3162%" height="15" fill="rgb(225,31,38)" fg:x="529" fg:w="30"/><text x="5.8249%" y="895.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (1 samples, 0.01%)</title><rect x="5.8805%" y="869" width="0.0105%" height="15" fill="rgb(250,208,3)" fg:x="558" fg:w="1"/><text x="6.1305%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (5 samples, 0.05%)</title><rect x="5.9437%" y="885" width="0.0527%" height="15" fill="rgb(246,54,23)" fg:x="564" fg:w="5"/><text x="6.1937%" y="895.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (1 samples, 0.01%)</title><rect x="5.9964%" y="885" width="0.0105%" height="15" fill="rgb(243,76,11)" fg:x="569" fg:w="1"/><text x="6.2464%" y="895.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (1 samples, 0.01%)</title><rect x="6.2072%" y="869" width="0.0105%" height="15" fill="rgb(245,21,50)" fg:x="589" fg:w="1"/><text x="6.4572%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (14 samples, 0.15%)</title><rect x="6.2177%" y="869" width="0.1475%" height="15" fill="rgb(228,9,43)" fg:x="590" fg:w="14"/><text x="6.4677%" y="879.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (5 samples, 0.05%)</title><rect x="6.3126%" y="853" width="0.0527%" height="15" fill="rgb(208,100,47)" fg:x="599" fg:w="5"/><text x="6.5626%" y="863.50"></text></g><g><title>databend-query`core::slice::sort::partition (48 samples, 0.51%)</title><rect x="5.8910%" y="901" width="0.5058%" height="15" fill="rgb(232,26,8)" fg:x="559" fg:w="48"/><text x="6.1410%" y="911.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (37 samples, 0.39%)</title><rect x="6.0070%" y="885" width="0.3899%" height="15" fill="rgb(216,166,38)" fg:x="570" fg:w="37"/><text x="6.2570%" y="895.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (3 samples, 0.03%)</title><rect x="6.3653%" y="869" width="0.0316%" height="15" fill="rgb(251,202,51)" fg:x="604" fg:w="3"/><text x="6.6153%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (2 samples, 0.02%)</title><rect x="6.4074%" y="885" width="0.0211%" height="15" fill="rgb(254,216,34)" fg:x="608" fg:w="2"/><text x="6.6574%" y="895.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (1 samples, 0.01%)</title><rect x="6.4180%" y="869" width="0.0105%" height="15" fill="rgb(251,32,27)" fg:x="609" fg:w="1"/><text x="6.6680%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (2 samples, 0.02%)</title><rect x="6.4285%" y="869" width="0.0211%" height="15" fill="rgb(208,127,28)" fg:x="610" fg:w="2"/><text x="6.6785%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot (6 samples, 0.06%)</title><rect x="6.4285%" y="885" width="0.0632%" height="15" fill="rgb(224,137,22)" fg:x="610" fg:w="6"/><text x="6.6785%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot::_{{closure}} (4 samples, 0.04%)</title><rect x="6.4496%" y="869" width="0.0422%" height="15" fill="rgb(254,70,32)" fg:x="612" fg:w="4"/><text x="6.6996%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (1 samples, 0.01%)</title><rect x="6.4917%" y="869" width="0.0105%" height="15" fill="rgb(229,75,37)" fg:x="616" fg:w="1"/><text x="6.7417%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (5 samples, 0.05%)</title><rect x="6.6393%" y="853" width="0.0527%" height="15" fill="rgb(252,64,23)" fg:x="630" fg:w="5"/><text x="6.8893%" y="863.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (2 samples, 0.02%)</title><rect x="6.6709%" y="837" width="0.0211%" height="15" fill="rgb(232,162,48)" fg:x="633" fg:w="2"/><text x="6.9209%" y="847.50"></text></g><g><title>databend-query`core::slice::sort::insertion_sort_shift_left (22 samples, 0.23%)</title><rect x="6.4917%" y="885" width="0.2318%" height="15" fill="rgb(246,160,12)" fg:x="616" fg:w="22"/><text x="6.7417%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (21 samples, 0.22%)</title><rect x="6.5023%" y="869" width="0.2213%" height="15" fill="rgb(247,166,0)" fg:x="617" fg:w="21"/><text x="6.7523%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (3 samples, 0.03%)</title><rect x="6.6920%" y="853" width="0.0316%" height="15" fill="rgb(249,219,21)" fg:x="635" fg:w="3"/><text x="6.9420%" y="863.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (2 samples, 0.02%)</title><rect x="6.7447%" y="869" width="0.0211%" height="15" fill="rgb(205,209,3)" fg:x="640" fg:w="2"/><text x="6.9947%" y="879.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (1 samples, 0.01%)</title><rect x="6.8184%" y="853" width="0.0105%" height="15" fill="rgb(243,44,1)" fg:x="647" fg:w="1"/><text x="7.0684%" y="863.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (6 samples, 0.06%)</title><rect x="6.8290%" y="853" width="0.0632%" height="15" fill="rgb(206,159,16)" fg:x="648" fg:w="6"/><text x="7.0790%" y="863.50"></text></g><g><title>databend-query`core::slice::sort::partition (18 samples, 0.19%)</title><rect x="6.7236%" y="885" width="0.1897%" height="15" fill="rgb(244,77,30)" fg:x="638" fg:w="18"/><text x="6.9736%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (14 samples, 0.15%)</title><rect x="6.7657%" y="869" width="0.1475%" height="15" fill="rgb(218,69,12)" fg:x="642" fg:w="14"/><text x="7.0157%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (2 samples, 0.02%)</title><rect x="6.8922%" y="853" width="0.0211%" height="15" fill="rgb(212,87,7)" fg:x="654" fg:w="2"/><text x="7.1422%" y="863.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot (4 samples, 0.04%)</title><rect x="6.9133%" y="869" width="0.0422%" height="15" fill="rgb(245,114,25)" fg:x="656" fg:w="4"/><text x="7.1633%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot::_{{closure}} (4 samples, 0.04%)</title><rect x="6.9133%" y="853" width="0.0422%" height="15" fill="rgb(210,61,42)" fg:x="656" fg:w="4"/><text x="7.1633%" y="863.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (1 samples, 0.01%)</title><rect x="6.9449%" y="837" width="0.0105%" height="15" fill="rgb(211,52,33)" fg:x="659" fg:w="1"/><text x="7.1949%" y="847.50"></text></g><g><title>databend-query`arrow2::array::ord::compare_primitives::_{{closure}} (1 samples, 0.01%)</title><rect x="6.9449%" y="821" width="0.0105%" height="15" fill="rgb(234,58,33)" fg:x="659" fg:w="1"/><text x="7.1949%" y="831.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (1 samples, 0.01%)</title><rect x="7.0187%" y="837" width="0.0105%" height="15" fill="rgb(220,115,36)" fg:x="666" fg:w="1"/><text x="7.2687%" y="847.50"></text></g><g><title>databend-query`core::slice::sort::insertion_sort_shift_left (9 samples, 0.09%)</title><rect x="6.9554%" y="869" width="0.0948%" height="15" fill="rgb(243,153,54)" fg:x="660" fg:w="9"/><text x="7.2054%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (9 samples, 0.09%)</title><rect x="6.9554%" y="853" width="0.0948%" height="15" fill="rgb(251,47,18)" fg:x="660" fg:w="9"/><text x="7.2054%" y="863.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (2 samples, 0.02%)</title><rect x="7.0292%" y="837" width="0.0211%" height="15" fill="rgb(242,102,42)" fg:x="667" fg:w="2"/><text x="7.2792%" y="847.50"></text></g><g><title>databend-query`core::slice::sort::partial_insertion_sort (1 samples, 0.01%)</title><rect x="7.0503%" y="869" width="0.0105%" height="15" fill="rgb(234,31,38)" fg:x="669" fg:w="1"/><text x="7.3003%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (1 samples, 0.01%)</title><rect x="7.0503%" y="853" width="0.0105%" height="15" fill="rgb(221,117,51)" fg:x="669" fg:w="1"/><text x="7.3003%" y="863.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (1 samples, 0.01%)</title><rect x="7.0713%" y="853" width="0.0105%" height="15" fill="rgb(212,20,18)" fg:x="671" fg:w="1"/><text x="7.3213%" y="863.50"></text></g><g><title>databend-query`core::slice::sort::partition (9 samples, 0.09%)</title><rect x="7.0608%" y="869" width="0.0948%" height="15" fill="rgb(245,133,36)" fg:x="670" fg:w="9"/><text x="7.3108%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (7 samples, 0.07%)</title><rect x="7.0819%" y="853" width="0.0738%" height="15" fill="rgb(212,6,19)" fg:x="672" fg:w="7"/><text x="7.3319%" y="863.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_compare_impl::_{{closure}} (2 samples, 0.02%)</title><rect x="7.1346%" y="837" width="0.0211%" height="15" fill="rgb(218,1,36)" fg:x="677" fg:w="2"/><text x="7.3846%" y="847.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot (1 samples, 0.01%)</title><rect x="7.1557%" y="853" width="0.0105%" height="15" fill="rgb(246,84,54)" fg:x="679" fg:w="1"/><text x="7.4057%" y="863.50"></text></g><g><title>databend-query`core::slice::sort::choose_pivot::_{{closure}} (1 samples, 0.01%)</title><rect x="7.1557%" y="837" width="0.0105%" height="15" fill="rgb(242,110,6)" fg:x="679" fg:w="1"/><text x="7.4057%" y="847.50"></text></g><g><title>databend-query`core::slice::sort::insertion_sort_shift_left (1 samples, 0.01%)</title><rect x="7.1662%" y="853" width="0.0105%" height="15" fill="rgb(214,47,5)" fg:x="680" fg:w="1"/><text x="7.4162%" y="863.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.01%)</title><rect x="7.1662%" y="837" width="0.0105%" height="15" fill="rgb(218,159,25)" fg:x="680" fg:w="1"/><text x="7.4162%" y="847.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::lexsort_to_indices_impl (256 samples, 2.70%)</title><rect x="4.4894%" y="949" width="2.6979%" height="15" fill="rgb(215,211,28)" fg:x="426" fg:w="256"/><text x="4.7394%" y="959.50">da..</text></g><g><title>databend-query`core::slice::sort::recurse (245 samples, 2.58%)</title><rect x="4.6053%" y="933" width="2.5819%" height="15" fill="rgb(238,59,32)" fg:x="437" fg:w="245"/><text x="4.8553%" y="943.50">da..</text></g><g><title>databend-query`core::slice::sort::recurse (168 samples, 1.77%)</title><rect x="5.4168%" y="917" width="1.7705%" height="15" fill="rgb(226,82,3)" fg:x="514" fg:w="168"/><text x="5.6668%" y="927.50">d..</text></g><g><title>databend-query`core::slice::sort::recurse (75 samples, 0.79%)</title><rect x="6.3969%" y="901" width="0.7904%" height="15" fill="rgb(240,164,32)" fg:x="607" fg:w="75"/><text x="6.6469%" y="911.50"></text></g><g><title>databend-query`core::slice::sort::recurse (26 samples, 0.27%)</title><rect x="6.9133%" y="885" width="0.2740%" height="15" fill="rgb(232,46,7)" fg:x="656" fg:w="26"/><text x="7.1633%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::recurse (3 samples, 0.03%)</title><rect x="7.1557%" y="869" width="0.0316%" height="15" fill="rgb(229,129,53)" fg:x="679" fg:w="3"/><text x="7.4057%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::partition (1 samples, 0.01%)</title><rect x="7.1767%" y="853" width="0.0105%" height="15" fill="rgb(234,188,29)" fg:x="681" fg:w="1"/><text x="7.4267%" y="863.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (1 samples, 0.01%)</title><rect x="7.1767%" y="837" width="0.0105%" height="15" fill="rgb(246,141,4)" fg:x="681" fg:w="1"/><text x="7.4267%" y="847.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::build_is_valid::_{{closure}} (1 samples, 0.01%)</title><rect x="7.1767%" y="821" width="0.0105%" height="15" fill="rgb(229,23,39)" fg:x="681" fg:w="1"/><text x="7.4267%" y="831.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="7.1873%" y="853" width="0.0105%" height="15" fill="rgb(206,12,3)" fg:x="682" fg:w="1"/><text x="7.4373%" y="863.50"></text></g><g><title>databend-query`common_expression::kernels::take::_&lt;impl common_expression::block::DataBlock&gt;::take (21 samples, 0.22%)</title><rect x="7.1873%" y="949" width="0.2213%" height="15" fill="rgb(252,226,20)" fg:x="682" fg:w="21"/><text x="7.4373%" y="959.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (21 samples, 0.22%)</title><rect x="7.1873%" y="933" width="0.2213%" height="15" fill="rgb(216,123,35)" fg:x="682" fg:w="21"/><text x="7.4373%" y="943.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (21 samples, 0.22%)</title><rect x="7.1873%" y="917" width="0.2213%" height="15" fill="rgb(212,68,40)" fg:x="682" fg:w="21"/><text x="7.4373%" y="927.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.22%)</title><rect x="7.1873%" y="901" width="0.2213%" height="15" fill="rgb(254,125,32)" fg:x="682" fg:w="21"/><text x="7.4373%" y="911.50"></text></g><g><title>databend-query`common_expression::kernels::take::_&lt;impl common_expression::values::Column&gt;::take_arg_types (21 samples, 0.22%)</title><rect x="7.1873%" y="885" width="0.2213%" height="15" fill="rgb(253,97,22)" fg:x="682" fg:w="21"/><text x="7.4373%" y="895.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (21 samples, 0.22%)</title><rect x="7.1873%" y="869" width="0.2213%" height="15" fill="rgb(241,101,14)" fg:x="682" fg:w="21"/><text x="7.4373%" y="879.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (20 samples, 0.21%)</title><rect x="7.1978%" y="853" width="0.2108%" height="15" fill="rgb(238,103,29)" fg:x="683" fg:w="20"/><text x="7.4478%" y="863.50"></text></g><g><title>databend-query`common_expression::kernels::sort::_&lt;impl common_expression::block::DataBlock&gt;::sort (283 samples, 2.98%)</title><rect x="4.4367%" y="965" width="2.9824%" height="15" fill="rgb(233,195,47)" fg:x="421" fg:w="283"/><text x="4.6867%" y="975.50">dat..</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.01%)</title><rect x="7.4086%" y="949" width="0.0105%" height="15" fill="rgb(246,218,30)" fg:x="703" fg:w="1"/><text x="7.6586%" y="959.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumnBuilder::push (2 samples, 0.02%)</title><rect x="7.4191%" y="965" width="0.0211%" height="15" fill="rgb(219,145,47)" fg:x="704" fg:w="2"/><text x="7.6691%" y="975.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumnBuilder::with_capacity (2 samples, 0.02%)</title><rect x="7.4402%" y="965" width="0.0211%" height="15" fill="rgb(243,12,26)" fg:x="706" fg:w="2"/><text x="7.6902%" y="975.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="7.4507%" y="949" width="0.0105%" height="15" fill="rgb(214,87,16)" fg:x="707" fg:w="1"/><text x="7.7007%" y="959.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="7.4507%" y="933" width="0.0105%" height="15" fill="rgb(208,99,42)" fg:x="707" fg:w="1"/><text x="7.7007%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="7.4507%" y="917" width="0.0105%" height="15" fill="rgb(253,99,2)" fg:x="707" fg:w="1"/><text x="7.7007%" y="927.50"></text></g><g><title>databend-query`common_expression::values::Column::index (272 samples, 2.87%)</title><rect x="7.4613%" y="965" width="2.8665%" height="15" fill="rgb(220,168,23)" fg:x="708" fg:w="272"/><text x="7.7113%" y="975.50">da..</text></g><g><title>databend-query`common_expression::values::Value&lt;common_expression::types::any::AnyType&gt;::try_downcast (1 samples, 0.01%)</title><rect x="10.3277%" y="965" width="0.0105%" height="15" fill="rgb(242,38,24)" fg:x="980" fg:w="1"/><text x="10.5777%" y="975.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (1 samples, 0.01%)</title><rect x="10.3277%" y="949" width="0.0105%" height="15" fill="rgb(225,182,9)" fg:x="980" fg:w="1"/><text x="10.5777%" y="959.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.03%)</title><rect x="10.3383%" y="949" width="0.0316%" height="15" fill="rgb(243,178,37)" fg:x="981" fg:w="3"/><text x="10.5883%" y="959.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="10.6228%" y="933" width="0.0105%" height="15" fill="rgb(232,139,19)" fg:x="1008" fg:w="1"/><text x="10.8728%" y="943.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="10.6228%" y="917" width="0.0105%" height="15" fill="rgb(225,201,24)" fg:x="1008" fg:w="1"/><text x="10.8728%" y="927.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="10.6228%" y="901" width="0.0105%" height="15" fill="rgb(221,47,46)" fg:x="1008" fg:w="1"/><text x="10.8728%" y="911.50"></text></g><g><title>databend-query`&lt;common_expression::block::BlockEntry as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="10.6228%" y="885" width="0.0105%" height="15" fill="rgb(249,23,13)" fg:x="1008" fg:w="1"/><text x="10.8728%" y="895.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (10 samples, 0.11%)</title><rect x="10.6334%" y="933" width="0.1054%" height="15" fill="rgb(219,9,5)" fg:x="1009" fg:w="10"/><text x="10.8834%" y="943.50"></text></g><g><title>databend-query`DYLD-STUB$$memcmp (1 samples, 0.01%)</title><rect x="10.7388%" y="933" width="0.0105%" height="15" fill="rgb(254,171,16)" fg:x="1019" fg:w="1"/><text x="10.9888%" y="943.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (2 samples, 0.02%)</title><rect x="10.7914%" y="917" width="0.0211%" height="15" fill="rgb(230,171,20)" fg:x="1024" fg:w="2"/><text x="11.0414%" y="927.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (7 samples, 0.07%)</title><rect x="10.7493%" y="933" width="0.0738%" height="15" fill="rgb(210,71,41)" fg:x="1020" fg:w="7"/><text x="10.9993%" y="943.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (1 samples, 0.01%)</title><rect x="10.8125%" y="917" width="0.0105%" height="15" fill="rgb(206,173,20)" fg:x="1026" fg:w="1"/><text x="11.0625%" y="927.50"></text></g><g><title>databend-query`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (4 samples, 0.04%)</title><rect x="10.8231%" y="933" width="0.0422%" height="15" fill="rgb(233,88,34)" fg:x="1027" fg:w="4"/><text x="11.0731%" y="943.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;R&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.03%)</title><rect x="10.8336%" y="917" width="0.0316%" height="15" fill="rgb(223,209,46)" fg:x="1028" fg:w="3"/><text x="11.0836%" y="927.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="10.8652%" y="933" width="0.0105%" height="15" fill="rgb(250,43,18)" fg:x="1031" fg:w="1"/><text x="11.1152%" y="943.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="10.8652%" y="917" width="0.0105%" height="15" fill="rgb(208,13,10)" fg:x="1031" fg:w="1"/><text x="11.1152%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="10.8652%" y="901" width="0.0105%" height="15" fill="rgb(212,200,36)" fg:x="1031" fg:w="1"/><text x="11.1152%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="10.8652%" y="885" width="0.0105%" height="15" fill="rgb(225,90,30)" fg:x="1031" fg:w="1"/><text x="11.1152%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.01%)</title><rect x="10.8652%" y="869" width="0.0105%" height="15" fill="rgb(236,182,39)" fg:x="1031" fg:w="1"/><text x="11.1152%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (1 samples, 0.01%)</title><rect x="10.8652%" y="853" width="0.0105%" height="15" fill="rgb(212,144,35)" fg:x="1031" fg:w="1"/><text x="11.1152%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (1 samples, 0.01%)</title><rect x="10.8652%" y="837" width="0.0105%" height="15" fill="rgb(228,63,44)" fg:x="1031" fg:w="1"/><text x="11.1152%" y="847.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="10.8758%" y="901" width="0.0105%" height="15" fill="rgb(228,109,6)" fg:x="1032" fg:w="1"/><text x="11.1258%" y="911.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="10.8758%" y="885" width="0.0105%" height="15" fill="rgb(238,117,24)" fg:x="1032" fg:w="1"/><text x="11.1258%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="10.8758%" y="869" width="0.0105%" height="15" fill="rgb(242,26,26)" fg:x="1032" fg:w="1"/><text x="11.1258%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="10.8758%" y="853" width="0.0105%" height="15" fill="rgb(221,92,48)" fg:x="1032" fg:w="1"/><text x="11.1258%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="10.8758%" y="837" width="0.0105%" height="15" fill="rgb(209,209,32)" fg:x="1032" fg:w="1"/><text x="11.1258%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="10.8758%" y="821" width="0.0105%" height="15" fill="rgb(221,70,22)" fg:x="1032" fg:w="1"/><text x="11.1258%" y="831.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="10.8758%" y="917" width="0.0211%" height="15" fill="rgb(248,145,5)" fg:x="1032" fg:w="2"/><text x="11.1258%" y="927.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="10.8863%" y="901" width="0.0105%" height="15" fill="rgb(226,116,26)" fg:x="1033" fg:w="1"/><text x="11.1363%" y="911.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="10.8863%" y="885" width="0.0105%" height="15" fill="rgb(244,5,17)" fg:x="1033" fg:w="1"/><text x="11.1363%" y="895.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="10.8968%" y="917" width="0.0105%" height="15" fill="rgb(252,159,33)" fg:x="1034" fg:w="1"/><text x="11.1468%" y="927.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="10.8968%" y="901" width="0.0105%" height="15" fill="rgb(206,71,0)" fg:x="1034" fg:w="1"/><text x="11.1468%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="10.8968%" y="885" width="0.0105%" height="15" fill="rgb(233,118,54)" fg:x="1034" fg:w="1"/><text x="11.1468%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="10.8968%" y="869" width="0.0105%" height="15" fill="rgb(234,83,48)" fg:x="1034" fg:w="1"/><text x="11.1468%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="10.8968%" y="853" width="0.0105%" height="15" fill="rgb(228,3,54)" fg:x="1034" fg:w="1"/><text x="11.1468%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.01%)</title><rect x="10.8968%" y="837" width="0.0105%" height="15" fill="rgb(226,155,13)" fg:x="1034" fg:w="1"/><text x="11.1468%" y="847.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="10.9074%" y="917" width="0.0211%" height="15" fill="rgb(241,28,37)" fg:x="1035" fg:w="2"/><text x="11.1574%" y="927.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.04%)</title><rect x="11.0128%" y="901" width="0.0422%" height="15" fill="rgb(233,93,10)" fg:x="1045" fg:w="4"/><text x="11.2628%" y="911.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumnBuilder::append_column (1 samples, 0.01%)</title><rect x="11.0549%" y="901" width="0.0105%" height="15" fill="rgb(225,113,19)" fg:x="1049" fg:w="1"/><text x="11.3049%" y="911.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumn::len (2 samples, 0.02%)</title><rect x="11.1076%" y="885" width="0.0211%" height="15" fill="rgb(241,2,18)" fg:x="1054" fg:w="2"/><text x="11.3576%" y="895.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumn::slice (2 samples, 0.02%)</title><rect x="11.1287%" y="885" width="0.0211%" height="15" fill="rgb(228,207,21)" fg:x="1056" fg:w="2"/><text x="11.3787%" y="895.50"></text></g><g><title>databend-query`common_expression::values::Column::slice (10 samples, 0.11%)</title><rect x="11.0654%" y="901" width="0.1054%" height="15" fill="rgb(213,211,35)" fg:x="1050" fg:w="10"/><text x="11.3154%" y="911.50"></text></g><g><title>databend-query`common_expression::values::Column::len (2 samples, 0.02%)</title><rect x="11.1498%" y="885" width="0.0211%" height="15" fill="rgb(209,83,10)" fg:x="1058" fg:w="2"/><text x="11.3998%" y="895.50"></text></g><g><title>databend-query`common_expression::values::ColumnBuilder::append_column (1 samples, 0.01%)</title><rect x="11.1708%" y="901" width="0.0105%" height="15" fill="rgb(209,164,1)" fg:x="1060" fg:w="1"/><text x="11.4208%" y="911.50"></text></g><g><title>databend-query`common_expression::values::ColumnBuilder::with_capacity_hint (1 samples, 0.01%)</title><rect x="11.1814%" y="901" width="0.0105%" height="15" fill="rgb(213,184,43)" fg:x="1061" fg:w="1"/><text x="11.4314%" y="911.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumnBuilder::with_capacity (1 samples, 0.01%)</title><rect x="11.1814%" y="885" width="0.0105%" height="15" fill="rgb(231,61,34)" fg:x="1061" fg:w="1"/><text x="11.4314%" y="895.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::Column&gt; (6 samples, 0.06%)</title><rect x="11.1919%" y="901" width="0.0632%" height="15" fill="rgb(235,75,3)" fg:x="1062" fg:w="6"/><text x="11.4419%" y="911.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::block::DataBlock&gt;::take_column_by_slices_limit (44 samples, 0.46%)</title><rect x="10.9284%" y="917" width="0.4637%" height="15" fill="rgb(220,106,47)" fg:x="1037" fg:w="44"/><text x="11.1784%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.14%)</title><rect x="11.2551%" y="901" width="0.1370%" height="15" fill="rgb(210,196,33)" fg:x="1068" fg:w="13"/><text x="11.5051%" y="911.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::block::DataBlock&gt;::take_by_slices_limit_from_blocks (51 samples, 0.54%)</title><rect x="10.8758%" y="933" width="0.5375%" height="15" fill="rgb(229,154,42)" fg:x="1032" fg:w="51"/><text x="11.1258%" y="943.50"></text></g><g><title>databend-query`common_expression::values::Column::slice (2 samples, 0.02%)</title><rect x="11.3921%" y="917" width="0.0211%" height="15" fill="rgb(228,114,26)" fg:x="1081" fg:w="2"/><text x="11.6421%" y="927.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.08%)</title><rect x="11.4870%" y="901" width="0.0843%" height="15" fill="rgb(208,144,1)" fg:x="1090" fg:w="8"/><text x="11.7370%" y="911.50"></text></g><g><title>databend-query`__rg_alloc_zeroed (8 samples, 0.08%)</title><rect x="11.4870%" y="885" width="0.0843%" height="15" fill="rgb(239,112,37)" fg:x="1090" fg:w="8"/><text x="11.7370%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.08%)</title><rect x="11.4870%" y="869" width="0.0843%" height="15" fill="rgb(210,96,50)" fg:x="1090" fg:w="8"/><text x="11.7370%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.08%)</title><rect x="11.4870%" y="853" width="0.0843%" height="15" fill="rgb(222,178,2)" fg:x="1090" fg:w="8"/><text x="11.7370%" y="863.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.08%)</title><rect x="11.4870%" y="837" width="0.0843%" height="15" fill="rgb(226,74,18)" fg:x="1090" fg:w="8"/><text x="11.7370%" y="847.50"></text></g><g><title>databend-query`arrow2::compute::sort::row::fixed::encode (56 samples, 0.59%)</title><rect x="11.5713%" y="901" width="0.5902%" height="15" fill="rgb(225,67,54)" fg:x="1098" fg:w="56"/><text x="11.8213%" y="911.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::sort::rows::arrow::_&lt;impl common_pipeline_transforms::processors::transforms::sort::rows::RowConverter&lt;arrow2::compute::sort::row::Rows&gt; for arrow2::compute::sort::row::RowConverter&gt;::convert (72 samples, 0.76%)</title><rect x="11.4132%" y="933" width="0.7588%" height="15" fill="rgb(251,92,32)" fg:x="1083" fg:w="72"/><text x="11.6632%" y="943.50"></text></g><g><title>databend-query`arrow2::compute::sort::row::RowConverter::convert_columns (72 samples, 0.76%)</title><rect x="11.4132%" y="917" width="0.7588%" height="15" fill="rgb(228,149,22)" fg:x="1083" fg:w="72"/><text x="11.6632%" y="927.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.01%)</title><rect x="12.1615%" y="901" width="0.0105%" height="15" fill="rgb(243,54,13)" fg:x="1154" fg:w="1"/><text x="12.4115%" y="911.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="12.1615%" y="885" width="0.0105%" height="15" fill="rgb(243,180,28)" fg:x="1154" fg:w="1"/><text x="12.4115%" y="895.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::sort::rows::arrow::_&lt;impl common_pipeline_transforms::processors::transforms::sort::rows::RowConverter&lt;arrow2::compute::sort::row::Rows&gt; for arrow2::compute::sort::row::RowConverter&gt;::create (2 samples, 0.02%)</title><rect x="12.1720%" y="933" width="0.0211%" height="15" fill="rgb(208,167,24)" fg:x="1155" fg:w="2"/><text x="12.4220%" y="943.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (2 samples, 0.02%)</title><rect x="12.1720%" y="917" width="0.0211%" height="15" fill="rgb(245,73,45)" fg:x="1155" fg:w="2"/><text x="12.4220%" y="927.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="12.1720%" y="901" width="0.0211%" height="15" fill="rgb(237,203,48)" fg:x="1155" fg:w="2"/><text x="12.4220%" y="911.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.02%)</title><rect x="12.1720%" y="885" width="0.0211%" height="15" fill="rgb(211,197,16)" fg:x="1155" fg:w="2"/><text x="12.4220%" y="895.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="12.1825%" y="869" width="0.0105%" height="15" fill="rgb(243,99,51)" fg:x="1156" fg:w="1"/><text x="12.4325%" y="879.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;arrow2::compute::sort::row::interner::OrderPreservingInterner&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="12.1931%" y="933" width="0.0105%" height="15" fill="rgb(215,123,29)" fg:x="1157" fg:w="1"/><text x="12.4431%" y="943.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="12.1931%" y="917" width="0.0105%" height="15" fill="rgb(239,186,37)" fg:x="1157" fg:w="1"/><text x="12.4431%" y="927.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;arrow2::compute::sort::row::interner::OrderPreservingInterner&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="12.1931%" y="901" width="0.0105%" height="15" fill="rgb(252,136,39)" fg:x="1157" fg:w="1"/><text x="12.4431%" y="911.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_pipeline_transforms::processors::transforms::sort::cursor::Cursor&lt;arrow2::compute::sort::row::Rows&gt;&gt; (1 samples, 0.01%)</title><rect x="12.2036%" y="933" width="0.0105%" height="15" fill="rgb(223,213,32)" fg:x="1158" fg:w="1"/><text x="12.4536%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="12.2036%" y="917" width="0.0105%" height="15" fill="rgb(233,115,5)" fg:x="1158" fg:w="1"/><text x="12.4536%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (322 samples, 3.39%)</title><rect x="12.2141%" y="933" width="3.3934%" height="15" fill="rgb(207,226,44)" fg:x="1159" fg:w="322"/><text x="12.4641%" y="943.50">lib..</text></g><g><title>libsystem_kernel.dylib`madvise (322 samples, 3.39%)</title><rect x="12.2141%" y="917" width="3.3934%" height="15" fill="rgb(208,126,0)" fg:x="1159" fg:w="322"/><text x="12.4641%" y="927.50">lib..</text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_sort_merge::SortMergeCompactor&lt;R,Converter&gt; as common_pipeline_transforms::processors::transforms::transform_compact::Compactor&gt;::compact_final (504 samples, 5.31%)</title><rect x="10.3699%" y="949" width="5.3114%" height="15" fill="rgb(244,66,21)" fg:x="984" fg:w="504"/><text x="10.6199%" y="959.50">databen..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.07%)</title><rect x="15.6075%" y="933" width="0.0738%" height="15" fill="rgb(222,97,12)" fg:x="1481" fg:w="7"/><text x="15.8575%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="15.6813%" y="949" width="0.0105%" height="15" fill="rgb(219,213,19)" fg:x="1488" fg:w="1"/><text x="15.9313%" y="959.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform_sort_merge::sort_merge (511 samples, 5.39%)</title><rect x="10.3383%" y="965" width="5.3852%" height="15" fill="rgb(252,169,30)" fg:x="981" fg:w="511"/><text x="10.5883%" y="975.50">databen..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.03%)</title><rect x="15.6919%" y="949" width="0.0316%" height="15" fill="rgb(206,32,51)" fg:x="1489" fg:w="3"/><text x="15.9419%" y="959.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::BlockEntry&gt;&gt; (1 samples, 0.01%)</title><rect x="15.7235%" y="917" width="0.0105%" height="15" fill="rgb(250,172,42)" fg:x="1492" fg:w="1"/><text x="15.9735%" y="927.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="15.7235%" y="901" width="0.0105%" height="15" fill="rgb(209,34,43)" fg:x="1492" fg:w="1"/><text x="15.9735%" y="911.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;common_expression::block::DataBlock&gt;&gt; (2 samples, 0.02%)</title><rect x="15.7235%" y="965" width="0.0211%" height="15" fill="rgb(223,11,35)" fg:x="1492" fg:w="2"/><text x="15.9735%" y="975.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="15.7235%" y="949" width="0.0211%" height="15" fill="rgb(251,219,26)" fg:x="1492" fg:w="2"/><text x="15.9735%" y="959.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::block::DataBlock&gt; (2 samples, 0.02%)</title><rect x="15.7235%" y="933" width="0.0211%" height="15" fill="rgb(231,119,3)" fg:x="1492" fg:w="2"/><text x="15.9735%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="15.7340%" y="917" width="0.0105%" height="15" fill="rgb(216,97,11)" fg:x="1493" fg:w="1"/><text x="15.9840%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="15.7340%" y="901" width="0.0105%" height="15" fill="rgb(223,59,9)" fg:x="1493" fg:w="1"/><text x="15.9840%" y="911.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::ScalarRef&gt; (119 samples, 1.25%)</title><rect x="15.7445%" y="965" width="1.2541%" height="15" fill="rgb(233,93,31)" fg:x="1494" fg:w="119"/><text x="15.9945%" y="975.50"></text></g><g><title>databend-query`&lt;common_expression::values::ScalarRef as core::cmp::PartialOrd&gt;::partial_cmp (8 samples, 0.08%)</title><rect x="52.6821%" y="949" width="0.0843%" height="15" fill="rgb(239,81,33)" fg:x="4999" fg:w="8"/><text x="52.9321%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.01%)</title><rect x="52.7664%" y="837" width="0.0105%" height="15" fill="rgb(213,120,34)" fg:x="5007" fg:w="1"/><text x="53.0164%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (7 samples, 0.07%)</title><rect x="52.7769%" y="805" width="0.0738%" height="15" fill="rgb(243,49,53)" fg:x="5008" fg:w="7"/><text x="53.0269%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (7 samples, 0.07%)</title><rect x="52.7769%" y="789" width="0.0738%" height="15" fill="rgb(247,216,33)" fg:x="5008" fg:w="7"/><text x="53.0269%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (88 samples, 0.93%)</title><rect x="52.8507%" y="805" width="0.9274%" height="15" fill="rgb(226,26,14)" fg:x="5015" fg:w="88"/><text x="53.1007%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`madvise (88 samples, 0.93%)</title><rect x="52.8507%" y="789" width="0.9274%" height="15" fill="rgb(215,49,53)" fg:x="5015" fg:w="88"/><text x="53.1007%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="53.7781%" y="805" width="0.0105%" height="15" fill="rgb(245,162,40)" fg:x="5103" fg:w="1"/><text x="54.0281%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="53.7886%" y="805" width="0.0105%" height="15" fill="rgb(229,68,17)" fg:x="5104" fg:w="1"/><text x="54.0386%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="53.7886%" y="789" width="0.0105%" height="15" fill="rgb(213,182,10)" fg:x="5104" fg:w="1"/><text x="54.0386%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.01%)</title><rect x="53.7991%" y="789" width="0.0105%" height="15" fill="rgb(245,125,30)" fg:x="5105" fg:w="1"/><text x="54.0491%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (99 samples, 1.04%)</title><rect x="52.7769%" y="821" width="1.0433%" height="15" fill="rgb(232,202,2)" fg:x="5008" fg:w="99"/><text x="53.0269%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="53.7991%" y="805" width="0.0211%" height="15" fill="rgb(237,140,51)" fg:x="5105" fg:w="2"/><text x="54.0491%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="53.8097%" y="789" width="0.0105%" height="15" fill="rgb(236,157,25)" fg:x="5106" fg:w="1"/><text x="54.0597%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="53.8097%" y="773" width="0.0105%" height="15" fill="rgb(219,209,0)" fg:x="5106" fg:w="1"/><text x="54.0597%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (407 samples, 4.29%)</title><rect x="52.7769%" y="837" width="4.2892%" height="15" fill="rgb(240,116,54)" fg:x="5008" fg:w="407"/><text x="53.0269%" y="847.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (308 samples, 3.25%)</title><rect x="53.8202%" y="821" width="3.2459%" height="15" fill="rgb(216,10,36)" fg:x="5107" fg:w="308"/><text x="54.0702%" y="831.50">lib..</text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (409 samples, 4.31%)</title><rect x="52.7664%" y="949" width="4.3103%" height="15" fill="rgb(222,72,44)" fg:x="5007" fg:w="409"/><text x="53.0164%" y="959.50">datab..</text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (409 samples, 4.31%)</title><rect x="52.7664%" y="933" width="4.3103%" height="15" fill="rgb(232,159,9)" fg:x="5007" fg:w="409"/><text x="53.0164%" y="943.50">datab..</text></g><g><title>databend-query`alloc::raw_vec::finish_grow (409 samples, 4.31%)</title><rect x="52.7664%" y="917" width="4.3103%" height="15" fill="rgb(210,39,32)" fg:x="5007" fg:w="409"/><text x="53.0164%" y="927.50">datab..</text></g><g><title>databend-query`__rg_realloc (409 samples, 4.31%)</title><rect x="52.7664%" y="901" width="4.3103%" height="15" fill="rgb(216,194,45)" fg:x="5007" fg:w="409"/><text x="53.0164%" y="911.50">datab..</text></g><g><title>databend-query`common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (409 samples, 4.31%)</title><rect x="52.7664%" y="885" width="4.3103%" height="15" fill="rgb(218,18,35)" fg:x="5007" fg:w="409"/><text x="53.0164%" y="895.50">datab..</text></g><g><title>databend-query`std::alloc::System::grow_impl (409 samples, 4.31%)</title><rect x="52.7664%" y="869" width="4.3103%" height="15" fill="rgb(207,83,51)" fg:x="5007" fg:w="409"/><text x="53.0164%" y="879.50">datab..</text></g><g><title>libsystem_malloc.dylib`realloc (409 samples, 4.31%)</title><rect x="52.7664%" y="853" width="4.3103%" height="15" fill="rgb(225,63,43)" fg:x="5007" fg:w="409"/><text x="53.0164%" y="863.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.01%)</title><rect x="57.0661%" y="837" width="0.0105%" height="15" fill="rgb(207,57,36)" fg:x="5415" fg:w="1"/><text x="57.3161%" y="847.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="57.0766%" y="917" width="0.0105%" height="15" fill="rgb(216,99,33)" fg:x="5416" fg:w="1"/><text x="57.3266%" y="927.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="57.0766%" y="901" width="0.0105%" height="15" fill="rgb(225,42,16)" fg:x="5416" fg:w="1"/><text x="57.3266%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="57.0766%" y="885" width="0.0105%" height="15" fill="rgb(220,201,45)" fg:x="5416" fg:w="1"/><text x="57.3266%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="57.0766%" y="869" width="0.0105%" height="15" fill="rgb(225,33,4)" fg:x="5416" fg:w="1"/><text x="57.3266%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="57.0766%" y="853" width="0.0105%" height="15" fill="rgb(224,33,50)" fg:x="5416" fg:w="1"/><text x="57.3266%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="57.0766%" y="837" width="0.0105%" height="15" fill="rgb(246,198,51)" fg:x="5416" fg:w="1"/><text x="57.3266%" y="847.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="57.0977%" y="901" width="0.0105%" height="15" fill="rgb(205,22,4)" fg:x="5418" fg:w="1"/><text x="57.3477%" y="911.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="57.1188%" y="885" width="0.0105%" height="15" fill="rgb(206,3,8)" fg:x="5420" fg:w="1"/><text x="57.3688%" y="895.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="57.1188%" y="869" width="0.0105%" height="15" fill="rgb(251,23,15)" fg:x="5420" fg:w="1"/><text x="57.3688%" y="879.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="57.1188%" y="853" width="0.0105%" height="15" fill="rgb(252,88,28)" fg:x="5420" fg:w="1"/><text x="57.3688%" y="863.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="57.1293%" y="885" width="0.0105%" height="15" fill="rgb(212,127,14)" fg:x="5421" fg:w="1"/><text x="57.3793%" y="895.50"></text></g><g><title>databend-query`&lt;common_expression::types::timestamp::TimestampType as common_expression::types::ValueType&gt;::push_item (244 samples, 2.57%)</title><rect x="57.1398%" y="869" width="2.5714%" height="15" fill="rgb(247,145,37)" fg:x="5422" fg:w="244"/><text x="57.3898%" y="879.50">da..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="73.9382%" y="821" width="0.0105%" height="15" fill="rgb(209,117,53)" fg:x="7016" fg:w="1"/><text x="74.1882%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="73.9382%" y="805" width="0.0105%" height="15" fill="rgb(212,90,42)" fg:x="7016" fg:w="1"/><text x="74.1882%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="73.9382%" y="789" width="0.0105%" height="15" fill="rgb(218,164,37)" fg:x="7016" fg:w="1"/><text x="74.1882%" y="799.50"></text></g><g><title>databend-query`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="73.9382%" y="853" width="0.0211%" height="15" fill="rgb(246,65,34)" fg:x="7016" fg:w="2"/><text x="74.1882%" y="863.50"></text></g><g><title>databend-query`__rg_alloc (2 samples, 0.02%)</title><rect x="73.9382%" y="837" width="0.0211%" height="15" fill="rgb(231,100,33)" fg:x="7016" fg:w="2"/><text x="74.1882%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="73.9488%" y="821" width="0.0105%" height="15" fill="rgb(228,126,14)" fg:x="7017" fg:w="1"/><text x="74.1988%" y="831.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="73.9593%" y="853" width="0.0211%" height="15" fill="rgb(215,173,21)" fg:x="7018" fg:w="2"/><text x="74.2093%" y="863.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="73.9593%" y="837" width="0.0211%" height="15" fill="rgb(210,6,40)" fg:x="7018" fg:w="2"/><text x="74.2093%" y="847.50"></text></g><g><title>databend-query`__rg_alloc (2 samples, 0.02%)</title><rect x="73.9593%" y="821" width="0.0211%" height="15" fill="rgb(212,48,18)" fg:x="7018" fg:w="2"/><text x="74.2093%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="73.9593%" y="805" width="0.0211%" height="15" fill="rgb(230,214,11)" fg:x="7018" fg:w="2"/><text x="74.2093%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="73.9593%" y="789" width="0.0211%" height="15" fill="rgb(254,105,39)" fg:x="7018" fg:w="2"/><text x="74.2093%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="73.9699%" y="773" width="0.0105%" height="15" fill="rgb(245,158,5)" fg:x="7019" fg:w="1"/><text x="74.2199%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="73.9699%" y="757" width="0.0105%" height="15" fill="rgb(249,208,11)" fg:x="7019" fg:w="1"/><text x="74.2199%" y="767.50"></text></g><g><title>databend-query`&lt;common_expression::types::timestamp::TimestampType as common_expression::types::ValueType&gt;::push_item (1,022 samples, 10.77%)</title><rect x="73.9804%" y="853" width="10.7704%" height="15" fill="rgb(210,39,28)" fg:x="7020" fg:w="1022"/><text x="74.2304%" y="863.50">databend-query`&lt;..</text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::values::Column&gt;::take_column_indices (2,621 samples, 27.62%)</title><rect x="57.1398%" y="885" width="27.6215%" height="15" fill="rgb(211,56,53)" fg:x="5422" fg:w="2621"/><text x="57.3898%" y="895.50">databend-query`common_expression::kernels::t..</text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::values::Column&gt;::take_block_value_types (2,377 samples, 25.05%)</title><rect x="59.7112%" y="869" width="25.0501%" height="15" fill="rgb(226,201,30)" fg:x="5666" fg:w="2377"/><text x="59.9612%" y="879.50">databend-query`common_expression::kernel..</text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="84.7508%" y="853" width="0.0105%" height="15" fill="rgb(239,101,34)" fg:x="8042" fg:w="1"/><text x="85.0008%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="84.7613%" y="885" width="0.0105%" height="15" fill="rgb(226,209,5)" fg:x="8043" fg:w="1"/><text x="85.0113%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="84.7613%" y="869" width="0.0105%" height="15" fill="rgb(250,105,47)" fg:x="8043" fg:w="1"/><text x="85.0113%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="84.7718%" y="885" width="0.0105%" height="15" fill="rgb(230,72,3)" fg:x="8044" fg:w="1"/><text x="85.0218%" y="895.50"></text></g><g><title>databend-query`common_expression::kernels::take_chunks::_&lt;impl common_expression::block::DataBlock&gt;::take_blocks (2,630 samples, 27.72%)</title><rect x="57.0766%" y="949" width="27.7163%" height="15" fill="rgb(232,218,39)" fg:x="5416" fg:w="2630"/><text x="57.3266%" y="959.50">databend-query`common_expression::kernels::t..</text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,630 samples, 27.72%)</title><rect x="57.0766%" y="933" width="27.7163%" height="15" fill="rgb(248,166,6)" fg:x="5416" fg:w="2630"/><text x="57.3266%" y="943.50">databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc:..</text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2,629 samples, 27.71%)</title><rect x="57.0872%" y="917" width="27.7058%" height="15" fill="rgb(247,89,20)" fg:x="5417" fg:w="2629"/><text x="57.3372%" y="927.50">databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_..</text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,627 samples, 27.68%)</title><rect x="57.1082%" y="901" width="27.6847%" height="15" fill="rgb(248,130,54)" fg:x="5419" fg:w="2627"/><text x="57.3582%" y="911.50">databend-query`&lt;core::iter::adapters::map::M..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="84.7824%" y="885" width="0.0105%" height="15" fill="rgb(234,196,4)" fg:x="8045" fg:w="1"/><text x="85.0324%" y="895.50"></text></g><g><title>databend-query`common_expression::types::number::NumberColumn::index (371 samples, 3.91%)</title><rect x="84.7929%" y="949" width="3.9098%" height="15" fill="rgb(250,143,31)" fg:x="8046" fg:w="371"/><text x="85.0429%" y="959.50">data..</text></g><g><title>databend-query`common_expression::values::Column::index (471 samples, 4.96%)</title><rect x="88.7027%" y="949" width="4.9636%" height="15" fill="rgb(211,110,34)" fg:x="8417" fg:w="471"/><text x="88.9527%" y="959.50">databe..</text></g><g><title>databend-query`common_expression::values::Column::len (2 samples, 0.02%)</title><rect x="93.6664%" y="949" width="0.0211%" height="15" fill="rgb(215,124,48)" fg:x="8888" fg:w="2"/><text x="93.9164%" y="959.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::values::ScalarRef&gt; (316 samples, 3.33%)</title><rect x="93.6874%" y="949" width="3.3302%" height="15" fill="rgb(216,46,13)" fg:x="8890" fg:w="316"/><text x="93.9374%" y="959.50">dat..</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::order_match (5 samples, 0.05%)</title><rect x="97.0176%" y="949" width="0.0527%" height="15" fill="rgb(205,184,25)" fg:x="9206" fg:w="5"/><text x="97.2676%" y="959.50"></text></g><g><title>libsystem_kernel.dylib`madvise (23 samples, 0.24%)</title><rect x="97.0703%" y="949" width="0.2424%" height="15" fill="rgb(228,1,10)" fg:x="9211" fg:w="23"/><text x="97.3203%" y="959.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::IEJoinState::finalize (7,790 samples, 82.10%)</title><rect x="16.9986%" y="965" width="82.0951%" height="15" fill="rgb(213,116,27)" fg:x="1613" fg:w="7790"/><text x="17.2486%" y="975.50">databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::IEJoinState::finalize</text></g><g><title>libsystem_malloc.dylib`free_medium (169 samples, 1.78%)</title><rect x="97.3127%" y="949" width="1.7810%" height="15" fill="rgb(241,95,50)" fg:x="9234" fg:w="169"/><text x="97.5627%" y="959.50">l..</text></g><g><title>libsystem_kernel.dylib`madvise (169 samples, 1.78%)</title><rect x="97.3127%" y="933" width="1.7810%" height="15" fill="rgb(238,48,32)" fg:x="9234" fg:w="169"/><text x="97.5627%" y="943.50">l..</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::IEJoinState::ie_join (9,029 samples, 95.15%)</title><rect x="3.9836%" y="981" width="95.1523%" height="15" fill="rgb(235,113,49)" fg:x="378" fg:w="9029"/><text x="4.2336%" y="991.50">databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::IEJoinState::ie_join</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::order_match (4 samples, 0.04%)</title><rect x="99.0937%" y="965" width="0.0422%" height="15" fill="rgb(205,127,43)" fg:x="9403" fg:w="4"/><text x="99.3437%" y="975.50"></text></g><g><title>databend-query`core::slice::sort::partition (2 samples, 0.02%)</title><rect x="99.1358%" y="901" width="0.0211%" height="15" fill="rgb(250,162,2)" fg:x="9407" fg:w="2"/><text x="99.3858%" y="911.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (1 samples, 0.01%)</title><rect x="99.1464%" y="885" width="0.0105%" height="15" fill="rgb(220,13,41)" fg:x="9408" fg:w="1"/><text x="99.3964%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::insertion_sort_shift_left (1 samples, 0.01%)</title><rect x="99.1569%" y="885" width="0.0105%" height="15" fill="rgb(249,221,25)" fg:x="9409" fg:w="1"/><text x="99.4069%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.01%)</title><rect x="99.1569%" y="869" width="0.0105%" height="15" fill="rgb(215,208,19)" fg:x="9409" fg:w="1"/><text x="99.4069%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::insertion_sort_shift_right (1 samples, 0.01%)</title><rect x="99.1675%" y="885" width="0.0105%" height="15" fill="rgb(236,175,2)" fg:x="9410" fg:w="1"/><text x="99.4175%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::partition (1 samples, 0.01%)</title><rect x="99.1780%" y="885" width="0.0105%" height="15" fill="rgb(241,52,2)" fg:x="9411" fg:w="1"/><text x="99.4280%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (1 samples, 0.01%)</title><rect x="99.1780%" y="869" width="0.0105%" height="15" fill="rgb(248,140,14)" fg:x="9411" fg:w="1"/><text x="99.4280%" y="879.50"></text></g><g><title>databend-query`arrow2::compute::sort::lex_sort::lexsort_to_indices_impl (6 samples, 0.06%)</title><rect x="99.1358%" y="949" width="0.0632%" height="15" fill="rgb(253,22,42)" fg:x="9407" fg:w="6"/><text x="99.3858%" y="959.50"></text></g><g><title>databend-query`core::slice::sort::recurse (6 samples, 0.06%)</title><rect x="99.1358%" y="933" width="0.0632%" height="15" fill="rgb(234,61,47)" fg:x="9407" fg:w="6"/><text x="99.3858%" y="943.50"></text></g><g><title>databend-query`core::slice::sort::recurse (6 samples, 0.06%)</title><rect x="99.1358%" y="917" width="0.0632%" height="15" fill="rgb(208,226,15)" fg:x="9407" fg:w="6"/><text x="99.3858%" y="927.50"></text></g><g><title>databend-query`core::slice::sort::recurse (4 samples, 0.04%)</title><rect x="99.1569%" y="901" width="0.0422%" height="15" fill="rgb(217,221,4)" fg:x="9409" fg:w="4"/><text x="99.4069%" y="911.50"></text></g><g><title>databend-query`core::slice::sort::recurse (1 samples, 0.01%)</title><rect x="99.1885%" y="885" width="0.0105%" height="15" fill="rgb(212,174,34)" fg:x="9412" fg:w="1"/><text x="99.4385%" y="895.50"></text></g><g><title>databend-query`core::slice::sort::insertion_sort_shift_left (1 samples, 0.01%)</title><rect x="99.1885%" y="869" width="0.0105%" height="15" fill="rgb(253,83,4)" fg:x="9412" fg:w="1"/><text x="99.4385%" y="879.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.01%)</title><rect x="99.1885%" y="853" width="0.0105%" height="15" fill="rgb(250,195,49)" fg:x="9412" fg:w="1"/><text x="99.4385%" y="863.50"></text></g><g><title>databend-query`common_base::runtime::catch_unwind::catch_unwind (9,299 samples, 98.00%)</title><rect x="1.2119%" y="1077" width="97.9977%" height="15" fill="rgb(241,192,25)" fg:x="115" fg:w="9299"/><text x="1.4619%" y="1087.50">databend-query`common_base::runtime::catch_unwind::catch_unwind</text></g><g><title>databend-query`std::panicking::try (9,299 samples, 98.00%)</title><rect x="1.2119%" y="1061" width="97.9977%" height="15" fill="rgb(208,124,10)" fg:x="115" fg:w="9299"/><text x="1.4619%" y="1071.50">databend-query`std::panicking::try</text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9,299 samples, 98.00%)</title><rect x="1.2119%" y="1045" width="97.9977%" height="15" fill="rgb(222,33,0)" fg:x="115" fg:w="9299"/><text x="1.4619%" y="1055.50">databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_single_thread (9,299 samples, 98.00%)</title><rect x="1.2119%" y="1029" width="97.9977%" height="15" fill="rgb(234,209,28)" fg:x="115" fg:w="9299"/><text x="1.4619%" y="1039.50">databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_single_thread</text></g><g><title>databend-query`databend_query::pipelines::executor::executor_worker_context::ExecutorWorkerContext::execute_task (9,286 samples, 97.86%)</title><rect x="1.3489%" y="1013" width="97.8607%" height="15" fill="rgb(224,11,23)" fg:x="128" fg:w="9286"/><text x="1.5989%" y="1023.50">databend-query`databend_query::pipelines::executor::executor_worker_context::ExecutorWorkerContext::execute_task</text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::transform_ie_join::TransformIEJoinLeft as common_pipeline_core::processors::processor::Processor&gt;::process (9,038 samples, 95.25%)</title><rect x="3.9625%" y="997" width="95.2471%" height="15" fill="rgb(232,99,1)" fg:x="376" fg:w="9038"/><text x="4.2125%" y="1007.50">databend-query`&lt;databend_query::pipelines::processors::transforms::transform_ie_join::TransformIEJoinLeft as common_pipeline_core::processors::processor::Proce..</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::ie_join::ie_join_state::IEJoinState::sink_left (7 samples, 0.07%)</title><rect x="99.1358%" y="981" width="0.0738%" height="15" fill="rgb(237,95,45)" fg:x="9407" fg:w="7"/><text x="99.3858%" y="991.50"></text></g><g><title>databend-query`common_expression::kernels::sort::_&lt;impl common_expression::block::DataBlock&gt;::sort (7 samples, 0.07%)</title><rect x="99.1358%" y="965" width="0.0738%" height="15" fill="rgb(208,109,11)" fg:x="9407" fg:w="7"/><text x="99.3858%" y="975.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;arrow2::array::primitive::PrimitiveArray&lt;u32&gt;&gt; (1 samples, 0.01%)</title><rect x="99.1991%" y="949" width="0.0105%" height="15" fill="rgb(216,190,48)" fg:x="9413" fg:w="1"/><text x="99.4491%" y="959.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.01%)</title><rect x="99.1991%" y="933" width="0.0105%" height="15" fill="rgb(251,171,36)" fg:x="9413" fg:w="1"/><text x="99.4491%" y="943.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute (1 samples, 0.01%)</title><rect x="99.2096%" y="1077" width="0.0105%" height="15" fill="rgb(230,62,22)" fg:x="9414" fg:w="1"/><text x="99.4596%" y="1087.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::on_finished (1 samples, 0.01%)</title><rect x="99.2096%" y="1061" width="0.0105%" height="15" fill="rgb(225,114,35)" fg:x="9414" fg:w="1"/><text x="99.4596%" y="1071.50"></text></g><g><title>databend-query`common_base::runtime::catch_unwind::catch_unwind (1 samples, 0.01%)</title><rect x="99.2096%" y="1045" width="0.0105%" height="15" fill="rgb(215,118,42)" fg:x="9414" fg:w="1"/><text x="99.4596%" y="1055.50"></text></g><g><title>databend-query`std::panicking::try (1 samples, 0.01%)</title><rect x="99.2096%" y="1029" width="0.0105%" height="15" fill="rgb(243,119,21)" fg:x="9414" fg:w="1"/><text x="99.4596%" y="1039.50"></text></g><g><title>databend-query`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="99.2096%" y="1013" width="0.0105%" height="15" fill="rgb(252,177,53)" fg:x="9414" fg:w="1"/><text x="99.4596%" y="1023.50"></text></g><g><title>databend-query`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="99.2096%" y="997" width="0.0105%" height="15" fill="rgb(237,209,29)" fg:x="9414" fg:w="1"/><text x="99.4596%" y="1007.50"></text></g><g><title>databend-query`std::sync::mpmc::counter::Sender&lt;C&gt;::release (1 samples, 0.01%)</title><rect x="99.2096%" y="981" width="0.0105%" height="15" fill="rgb(212,65,23)" fg:x="9414" fg:w="1"/><text x="99.4596%" y="991.50"></text></g><g><title>databend-query`tokio::runtime::process::Driver::park (1 samples, 0.01%)</title><rect x="99.2201%" y="837" width="0.0105%" height="15" fill="rgb(230,222,46)" fg:x="9415" fg:w="1"/><text x="99.4701%" y="847.50"></text></g><g><title>databend-query`tokio::runtime::io::Driver::turn (1 samples, 0.01%)</title><rect x="99.2201%" y="821" width="0.0105%" height="15" fill="rgb(215,135,32)" fg:x="9415" fg:w="1"/><text x="99.4701%" y="831.50"></text></g><g><title>databend-query`tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.01%)</title><rect x="99.2201%" y="805" width="0.0105%" height="15" fill="rgb(246,101,22)" fg:x="9415" fg:w="1"/><text x="99.4701%" y="815.50"></text></g><g><title>databend-query`tokio::runtime::task::waker::wake_by_val (1 samples, 0.01%)</title><rect x="99.2201%" y="789" width="0.0105%" height="15" fill="rgb(206,107,13)" fg:x="9415" fg:w="1"/><text x="99.4701%" y="799.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (5 samples, 0.05%)</title><rect x="99.2201%" y="885" width="0.0527%" height="15" fill="rgb(250,100,44)" fg:x="9415" fg:w="5"/><text x="99.4701%" y="895.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::park::Parker::park (5 samples, 0.05%)</title><rect x="99.2201%" y="869" width="0.0527%" height="15" fill="rgb(231,147,38)" fg:x="9415" fg:w="5"/><text x="99.4701%" y="879.50"></text></g><g><title>databend-query`tokio::runtime::time::Driver::park_internal (5 samples, 0.05%)</title><rect x="99.2201%" y="853" width="0.0527%" height="15" fill="rgb(229,8,40)" fg:x="9415" fg:w="5"/><text x="99.4701%" y="863.50"></text></g><g><title>databend-query`tokio::runtime::process::Driver::park_timeout (4 samples, 0.04%)</title><rect x="99.2307%" y="837" width="0.0422%" height="15" fill="rgb(221,135,30)" fg:x="9416" fg:w="4"/><text x="99.4807%" y="847.50"></text></g><g><title>databend-query`tokio::runtime::io::Driver::turn (4 samples, 0.04%)</title><rect x="99.2307%" y="821" width="0.0422%" height="15" fill="rgb(249,193,18)" fg:x="9416" fg:w="4"/><text x="99.4807%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`kevent (4 samples, 0.04%)</title><rect x="99.2307%" y="805" width="0.0422%" height="15" fill="rgb(209,133,39)" fg:x="9416" fg:w="4"/><text x="99.4807%" y="815.50"></text></g><g><title>databend-query`&lt;hyper::client::service::Connect&lt;C,B,T&gt; as tower_service::Service&lt;T&gt;&gt;::call::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="99.2728%" y="773" width="0.0105%" height="15" fill="rgb(232,100,14)" fg:x="9420" fg:w="1"/><text x="99.5228%" y="783.50"></text></g><g><title>databend-query`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.2728%" y="757" width="0.0105%" height="15" fill="rgb(224,185,1)" fg:x="9420" fg:w="1"/><text x="99.5228%" y="767.50"></text></g><g><title>databend-query`&lt;hyper::proto::h2::client::ClientTask&lt;B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.2728%" y="741" width="0.0105%" height="15" fill="rgb(223,139,8)" fg:x="9420" fg:w="1"/><text x="99.5228%" y="751.50"></text></g><g><title>databend-query`h2::client::SendRequest&lt;B&gt;::send_request (1 samples, 0.01%)</title><rect x="99.2728%" y="725" width="0.0105%" height="15" fill="rgb(232,213,38)" fg:x="9420" fg:w="1"/><text x="99.5228%" y="735.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Streams&lt;B,P&gt;::send_request (1 samples, 0.01%)</title><rect x="99.2728%" y="709" width="0.0105%" height="15" fill="rgb(207,94,22)" fg:x="9420" fg:w="1"/><text x="99.5228%" y="719.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;http::extensions::Extensions&gt; (1 samples, 0.01%)</title><rect x="99.2728%" y="693" width="0.0105%" height="15" fill="rgb(219,183,54)" fg:x="9420" fg:w="1"/><text x="99.5228%" y="703.50"></text></g><g><title>databend-query`&lt;tower::buffer::worker::Worker&lt;T,Request&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.2834%" y="773" width="0.0105%" height="15" fill="rgb(216,185,54)" fg:x="9421" fg:w="1"/><text x="99.5334%" y="783.50"></text></g><g><title>databend-query`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (1 samples, 0.01%)</title><rect x="99.2834%" y="757" width="0.0105%" height="15" fill="rgb(254,217,39)" fg:x="9421" fg:w="1"/><text x="99.5334%" y="767.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::add_origin::AddOrigin&lt;T&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (1 samples, 0.01%)</title><rect x="99.2834%" y="741" width="0.0105%" height="15" fill="rgb(240,178,23)" fg:x="9421" fg:w="1"/><text x="99.5334%" y="751.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::user_agent::UserAgent&lt;T&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (1 samples, 0.01%)</title><rect x="99.2834%" y="725" width="0.0105%" height="15" fill="rgb(218,11,47)" fg:x="9421" fg:w="1"/><text x="99.5334%" y="735.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::grpc_timeout::GrpcTimeout&lt;S&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (1 samples, 0.01%)</title><rect x="99.2834%" y="709" width="0.0105%" height="15" fill="rgb(218,51,51)" fg:x="9421" fg:w="1"/><text x="99.5334%" y="719.50"></text></g><g><title>databend-query`tokio::time::sleep::sleep (1 samples, 0.01%)</title><rect x="99.2834%" y="693" width="0.0105%" height="15" fill="rgb(238,126,27)" fg:x="9421" fg:w="1"/><text x="99.5334%" y="703.50"></text></g><g><title>databend-query`std::time::SystemTime::checked_add (1 samples, 0.01%)</title><rect x="99.2834%" y="677" width="0.0105%" height="15" fill="rgb(249,202,22)" fg:x="9421" fg:w="1"/><text x="99.5334%" y="687.50"></text></g><g><title>databend-query`&lt;h2::codec::framed_read::FramedRead&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.01%)</title><rect x="99.2939%" y="677" width="0.0105%" height="15" fill="rgb(254,195,49)" fg:x="9422" fg:w="1"/><text x="99.5439%" y="687.50"></text></g><g><title>databend-query`&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.01%)</title><rect x="99.2939%" y="661" width="0.0105%" height="15" fill="rgb(208,123,14)" fg:x="9422" fg:w="1"/><text x="99.5439%" y="671.50"></text></g><g><title>databend-query`tokio_util::util::poll_read_buf (1 samples, 0.01%)</title><rect x="99.2939%" y="645" width="0.0105%" height="15" fill="rgb(224,200,8)" fg:x="9422" fg:w="1"/><text x="99.5439%" y="655.50"></text></g><g><title>databend-query`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.01%)</title><rect x="99.2939%" y="629" width="0.0105%" height="15" fill="rgb(217,61,36)" fg:x="9422" fg:w="1"/><text x="99.5439%" y="639.50"></text></g><g><title>databend-query`tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.01%)</title><rect x="99.2939%" y="613" width="0.0105%" height="15" fill="rgb(206,35,45)" fg:x="9422" fg:w="1"/><text x="99.5439%" y="623.50"></text></g><g><title>databend-query`tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.01%)</title><rect x="99.2939%" y="597" width="0.0105%" height="15" fill="rgb(217,65,33)" fg:x="9422" fg:w="1"/><text x="99.5439%" y="607.50"></text></g><g><title>databend-query`h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (2 samples, 0.02%)</title><rect x="99.2939%" y="693" width="0.0211%" height="15" fill="rgb(222,158,48)" fg:x="9422" fg:w="2"/><text x="99.5439%" y="703.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="99.3045%" y="677" width="0.0105%" height="15" fill="rgb(254,2,54)" fg:x="9423" fg:w="1"/><text x="99.5545%" y="687.50"></text></g><g><title>databend-query`hyper::proto::h2::client::conn_task::_{{closure}} (4 samples, 0.04%)</title><rect x="99.2939%" y="773" width="0.0422%" height="15" fill="rgb(250,143,38)" fg:x="9422" fg:w="4"/><text x="99.5439%" y="783.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4 samples, 0.04%)</title><rect x="99.2939%" y="757" width="0.0422%" height="15" fill="rgb(248,25,0)" fg:x="9422" fg:w="4"/><text x="99.5439%" y="767.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.04%)</title><rect x="99.2939%" y="741" width="0.0422%" height="15" fill="rgb(206,152,27)" fg:x="9422" fg:w="4"/><text x="99.5439%" y="751.50"></text></g><g><title>databend-query`&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (4 samples, 0.04%)</title><rect x="99.2939%" y="725" width="0.0422%" height="15" fill="rgb(240,77,30)" fg:x="9422" fg:w="4"/><text x="99.5439%" y="735.50"></text></g><g><title>databend-query`h2::proto::connection::Connection&lt;T,P,B&gt;::poll (4 samples, 0.04%)</title><rect x="99.2939%" y="709" width="0.0422%" height="15" fill="rgb(231,5,3)" fg:x="9422" fg:w="4"/><text x="99.5439%" y="719.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Streams&lt;B,P&gt;::poll_complete (2 samples, 0.02%)</title><rect x="99.3150%" y="693" width="0.0211%" height="15" fill="rgb(207,226,32)" fg:x="9424" fg:w="2"/><text x="99.5650%" y="703.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Inner::poll_complete (2 samples, 0.02%)</title><rect x="99.3150%" y="677" width="0.0211%" height="15" fill="rgb(222,207,47)" fg:x="9424" fg:w="2"/><text x="99.5650%" y="687.50"></text></g><g><title>databend-query`h2::proto::streams::prioritize::Prioritize::poll_complete (2 samples, 0.02%)</title><rect x="99.3150%" y="661" width="0.0211%" height="15" fill="rgb(229,115,45)" fg:x="9424" fg:w="2"/><text x="99.5650%" y="671.50"></text></g><g><title>databend-query`h2::codec::framed_write::FramedWrite&lt;T,B&gt;::flush (2 samples, 0.02%)</title><rect x="99.3150%" y="645" width="0.0211%" height="15" fill="rgb(224,191,6)" fg:x="9424" fg:w="2"/><text x="99.5650%" y="655.50"></text></g><g><title>databend-query`h2::codec::framed_write::write (2 samples, 0.02%)</title><rect x="99.3150%" y="629" width="0.0211%" height="15" fill="rgb(230,227,24)" fg:x="9424" fg:w="2"/><text x="99.5650%" y="639.50"></text></g><g><title>databend-query`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (2 samples, 0.02%)</title><rect x="99.3150%" y="613" width="0.0211%" height="15" fill="rgb(228,80,19)" fg:x="9424" fg:w="2"/><text x="99.5650%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.02%)</title><rect x="99.3150%" y="597" width="0.0211%" height="15" fill="rgb(247,229,0)" fg:x="9424" fg:w="2"/><text x="99.5650%" y="607.50"></text></g><g><title>databend-query`&lt;common_base::runtime::runtime_tracker::TrackedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.3361%" y="757" width="0.0105%" height="15" fill="rgb(237,194,15)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="767.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.3361%" y="741" width="0.0105%" height="15" fill="rgb(219,203,20)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="751.50"></text></g><g><title>databend-query`std::panicking::try (1 samples, 0.01%)</title><rect x="99.3361%" y="725" width="0.0105%" height="15" fill="rgb(234,128,8)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="735.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask::create::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3361%" y="709" width="0.0105%" height="15" fill="rgb(248,202,8)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="719.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.3361%" y="693" width="0.0105%" height="15" fill="rgb(206,104,37)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="703.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask::create::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3361%" y="677" width="0.0105%" height="15" fill="rgb(223,8,27)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="687.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.3361%" y="661" width="0.0105%" height="15" fill="rgb(216,217,28)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="671.50"></text></g><g><title>databend-query`&lt;alloc::boxed::Box&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::async_process::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3361%" y="645" width="0.0105%" height="15" fill="rgb(249,199,1)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="655.50"></text></g><g><title>databend-query`&lt;common_pipeline_sources::async_source::AsyncSourcer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::async_process::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3361%" y="629" width="0.0105%" height="15" fill="rgb(240,85,17)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="639.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.3361%" y="613" width="0.0105%" height="15" fill="rgb(206,108,45)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="623.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.3361%" y="597" width="0.0105%" height="15" fill="rgb(245,210,41)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="607.50"></text></g><g><title>databend-query`&lt;common_storages_system::tables_table::TablesTable&lt;_&gt; as common_storages_system::table::AsyncSystemTable&gt;::get_full_data::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3361%" y="581" width="0.0105%" height="15" fill="rgb(206,13,37)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="591.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.3361%" y="565" width="0.0105%" height="15" fill="rgb(250,61,18)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="575.50"></text></g><g><title>databend-query`common_expression::types::ArgType::column_from_vec (1 samples, 0.01%)</title><rect x="99.3361%" y="549" width="0.0105%" height="15" fill="rgb(235,172,48)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="559.50"></text></g><g><title>databend-query`common_expression::types::ArgType::column_from_iter (1 samples, 0.01%)</title><rect x="99.3361%" y="533" width="0.0105%" height="15" fill="rgb(249,201,17)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="543.50"></text></g><g><title>databend-query`common_expression::types::nullable::NullableColumnBuilder&lt;T&gt;::build (1 samples, 0.01%)</title><rect x="99.3361%" y="517" width="0.0105%" height="15" fill="rgb(219,208,6)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="527.50"></text></g><g><title>databend-query`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.01%)</title><rect x="99.3361%" y="501" width="0.0105%" height="15" fill="rgb(248,31,23)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="511.50"></text></g><g><title>databend-query`arrow2::bitmap::immutable::Bitmap::try_new (1 samples, 0.01%)</title><rect x="99.3361%" y="485" width="0.0105%" height="15" fill="rgb(245,15,42)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="495.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.3361%" y="469" width="0.0105%" height="15" fill="rgb(222,217,39)" fg:x="9426" fg:w="1"/><text x="99.5861%" y="479.50"></text></g><g><title>databend-query`&lt;futures_util::stream::try_stream::try_next::TryNext&lt;St&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.3466%" y="677" width="0.0105%" height="15" fill="rgb(210,219,27)" fg:x="9427" fg:w="1"/><text x="99.5966%" y="687.50"></text></g><g><title>databend-query`&lt;tonic::codec::decode::Streaming&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.01%)</title><rect x="99.3466%" y="661" width="0.0105%" height="15" fill="rgb(252,166,36)" fg:x="9427" fg:w="1"/><text x="99.5966%" y="671.50"></text></g><g><title>databend-query`tonic::codec::decode::StreamingInner::poll_data (1 samples, 0.01%)</title><rect x="99.3466%" y="645" width="0.0105%" height="15" fill="rgb(245,132,34)" fg:x="9427" fg:w="1"/><text x="99.5966%" y="655.50"></text></g><g><title>databend-query`&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (1 samples, 0.01%)</title><rect x="99.3466%" y="629" width="0.0105%" height="15" fill="rgb(236,54,3)" fg:x="9427" fg:w="1"/><text x="99.5966%" y="639.50"></text></g><g><title>databend-query`&lt;http_body::combinators::map_data::MapData&lt;B,F&gt; as http_body::Body&gt;::poll_data (1 samples, 0.01%)</title><rect x="99.3466%" y="613" width="0.0105%" height="15" fill="rgb(241,173,43)" fg:x="9427" fg:w="1"/><text x="99.5966%" y="623.50"></text></g><g><title>databend-query`&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (1 samples, 0.01%)</title><rect x="99.3466%" y="597" width="0.0105%" height="15" fill="rgb(215,190,9)" fg:x="9427" fg:w="1"/><text x="99.5966%" y="607.50"></text></g><g><title>databend-query`h2::share::RecvStream::poll_data (1 samples, 0.01%)</title><rect x="99.3466%" y="581" width="0.0105%" height="15" fill="rgb(242,101,16)" fg:x="9427" fg:w="1"/><text x="99.5966%" y="591.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::make_client::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3572%" y="677" width="0.0105%" height="15" fill="rgb(223,190,21)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="687.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::make_client::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3572%" y="661" width="0.0105%" height="15" fill="rgb(215,228,25)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="671.50"></text></g><g><title>databend-query`&lt;common_meta_client::grpc_client::MetaChannelManager as common_base::containers::pool::ItemManager&gt;::build::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3572%" y="645" width="0.0105%" height="15" fill="rgb(225,36,22)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="655.50"></text></g><g><title>databend-query`&lt;tower::util::ready::ReadyOneshot&lt;T,Request&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.3572%" y="629" width="0.0105%" height="15" fill="rgb(251,106,46)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="639.50"></text></g><g><title>databend-query`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (1 samples, 0.01%)</title><rect x="99.3572%" y="613" width="0.0105%" height="15" fill="rgb(208,90,1)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="623.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.01%)</title><rect x="99.3572%" y="597" width="0.0105%" height="15" fill="rgb(243,10,4)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="607.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.01%)</title><rect x="99.3572%" y="581" width="0.0105%" height="15" fill="rgb(212,137,27)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="591.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::reconnect::Reconnect&lt;M,Target&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.01%)</title><rect x="99.3572%" y="565" width="0.0105%" height="15" fill="rgb(231,220,49)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="575.50"></text></g><g><title>databend-query`&lt;hyper::client::service::Connect&lt;C,B,T&gt; as tower_service::Service&lt;T&gt;&gt;::call::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3572%" y="549" width="0.0105%" height="15" fill="rgb(237,96,20)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="559.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::connector::Connector&lt;C&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3572%" y="533" width="0.0105%" height="15" fill="rgb(239,229,30)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="543.50"></text></g><g><title>databend-query`std::os::unix::net::stream::UnixStream::take_error (1 samples, 0.01%)</title><rect x="99.3572%" y="517" width="0.0105%" height="15" fill="rgb(219,65,33)" fg:x="9428" fg:w="1"/><text x="99.6072%" y="527.50"></text></g><g><title>databend-query`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.03%)</title><rect x="99.3466%" y="741" width="0.0316%" height="15" fill="rgb(243,134,7)" fg:x="9427" fg:w="3"/><text x="99.5966%" y="751.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::worker_loop::_{{closure}}::_{{closure}} (3 samples, 0.03%)</title><rect x="99.3466%" y="725" width="0.0316%" height="15" fill="rgb(216,177,54)" fg:x="9427" fg:w="3"/><text x="99.5966%" y="735.50"></text></g><g><title>databend-query`&lt;common_base::future::TimingFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.03%)</title><rect x="99.3466%" y="709" width="0.0316%" height="15" fill="rgb(211,160,20)" fg:x="9427" fg:w="3"/><text x="99.5966%" y="719.50"></text></g><g><title>databend-query`&lt;common_base::future::TimingFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.03%)</title><rect x="99.3466%" y="693" width="0.0316%" height="15" fill="rgb(239,85,39)" fg:x="9427" fg:w="3"/><text x="99.5966%" y="703.50"></text></g><g><title>databend-query`tonic::client::grpc::GrpcConfig::prepare_request (1 samples, 0.01%)</title><rect x="99.3677%" y="677" width="0.0105%" height="15" fill="rgb(232,125,22)" fg:x="9429" fg:w="1"/><text x="99.6177%" y="687.50"></text></g><g><title>databend-query`core::option::Option&lt;&amp;T&gt;::cloned (1 samples, 0.01%)</title><rect x="99.3677%" y="661" width="0.0105%" height="15" fill="rgb(244,57,34)" fg:x="9429" fg:w="1"/><text x="99.6177%" y="671.50"></text></g><g><title>databend-query`&lt;common_base::runtime::runtime_tracker::UnlimitedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.04%)</title><rect x="99.3466%" y="757" width="0.0422%" height="15" fill="rgb(214,203,32)" fg:x="9427" fg:w="4"/><text x="99.5966%" y="767.50"></text></g><g><title>databend-query`tracing_core::callsite::DefaultCallsite::register (1 samples, 0.01%)</title><rect x="99.3782%" y="741" width="0.0105%" height="15" fill="rgb(207,58,43)" fg:x="9430" fg:w="1"/><text x="99.6282%" y="751.50"></text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 0.13%)</title><rect x="99.2728%" y="821" width="0.1265%" height="15" fill="rgb(215,193,15)" fg:x="9420" fg:w="12"/><text x="99.5228%" y="831.50"></text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (12 samples, 0.13%)</title><rect x="99.2728%" y="805" width="0.1265%" height="15" fill="rgb(232,15,44)" fg:x="9420" fg:w="12"/><text x="99.5228%" y="815.50"></text></g><g><title>databend-query`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (12 samples, 0.13%)</title><rect x="99.2728%" y="789" width="0.1265%" height="15" fill="rgb(212,3,48)" fg:x="9420" fg:w="12"/><text x="99.5228%" y="799.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.06%)</title><rect x="99.3361%" y="773" width="0.0632%" height="15" fill="rgb(218,128,7)" fg:x="9426" fg:w="6"/><text x="99.5861%" y="783.50"></text></g><g><title>databend-query`tracing_core::dispatcher::get_default (1 samples, 0.01%)</title><rect x="99.3888%" y="757" width="0.0105%" height="15" fill="rgb(226,216,39)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="767.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.01%)</title><rect x="99.3888%" y="741" width="0.0105%" height="15" fill="rgb(243,47,51)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="751.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.01%)</title><rect x="99.3888%" y="725" width="0.0105%" height="15" fill="rgb(241,183,40)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="735.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.01%)</title><rect x="99.3888%" y="709" width="0.0105%" height="15" fill="rgb(231,217,32)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="719.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.01%)</title><rect x="99.3888%" y="693" width="0.0105%" height="15" fill="rgb(229,61,38)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="703.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.01%)</title><rect x="99.3888%" y="677" width="0.0105%" height="15" fill="rgb(225,210,5)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="687.50"></text></g><g><title>databend-query`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.01%)</title><rect x="99.3888%" y="661" width="0.0105%" height="15" fill="rgb(231,79,45)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.3888%" y="645" width="0.0105%" height="15" fill="rgb(224,100,7)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="655.50"></text></g><g><title>databend-query`tracing_subscriber::filter::layer_filters::FilterState::did_enable (1 samples, 0.01%)</title><rect x="99.3888%" y="629" width="0.0105%" height="15" fill="rgb(241,198,18)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="639.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.3888%" y="613" width="0.0105%" height="15" fill="rgb(252,97,53)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="623.50"></text></g><g><title>databend-query`&lt;tracing_appender::non_blocking::NonBlocking as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="99.3888%" y="597" width="0.0105%" height="15" fill="rgb(220,88,7)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="607.50"></text></g><g><title>databend-query`crossbeam_channel::channel::Sender&lt;T&gt;::try_send (1 samples, 0.01%)</title><rect x="99.3888%" y="581" width="0.0105%" height="15" fill="rgb(213,176,14)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="591.50"></text></g><g><title>databend-query`crossbeam_channel::flavors::array::Channel&lt;T&gt;::try_send (1 samples, 0.01%)</title><rect x="99.3888%" y="565" width="0.0105%" height="15" fill="rgb(246,73,7)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="575.50"></text></g><g><title>databend-query`crossbeam_channel::waker::SyncWaker::notify (1 samples, 0.01%)</title><rect x="99.3888%" y="549" width="0.0105%" height="15" fill="rgb(245,64,36)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="559.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_signal_slow (1 samples, 0.01%)</title><rect x="99.3888%" y="533" width="0.0105%" height="15" fill="rgb(245,80,10)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_signal_trap (1 samples, 0.01%)</title><rect x="99.3888%" y="517" width="0.0105%" height="15" fill="rgb(232,107,50)" fg:x="9431" fg:w="1"/><text x="99.6388%" y="527.50"></text></g><g><title>databend-query`&lt;common_base::runtime::runtime_tracker::TrackedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.3993%" y="757" width="0.0105%" height="15" fill="rgb(253,3,0)" fg:x="9432" fg:w="1"/><text x="99.6493%" y="767.50"></text></g><g><title>databend-query`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.3993%" y="741" width="0.0105%" height="15" fill="rgb(212,99,53)" fg:x="9432" fg:w="1"/><text x="99.6493%" y="751.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3993%" y="725" width="0.0105%" height="15" fill="rgb(249,111,54)" fg:x="9432" fg:w="1"/><text x="99.6493%" y="735.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3993%" y="709" width="0.0105%" height="15" fill="rgb(249,55,30)" fg:x="9432" fg:w="1"/><text x="99.6493%" y="719.50"></text></g><g><title>databend-query`&lt;opendal::layers::complete::CompleteReaderAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3993%" y="693" width="0.0105%" height="15" fill="rgb(237,47,42)" fg:x="9432" fg:w="1"/><text x="99.6493%" y="703.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3993%" y="677" width="0.0105%" height="15" fill="rgb(211,20,18)" fg:x="9432" fg:w="1"/><text x="99.6493%" y="687.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (1 samples, 0.01%)</title><rect x="99.3993%" y="661" width="0.0105%" height="15" fill="rgb(231,203,46)" fg:x="9432" fg:w="1"/><text x="99.6493%" y="671.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.3993%" y="645" width="0.0105%" height="15" fill="rgb(237,142,3)" fg:x="9432" fg:w="1"/><text x="99.6493%" y="655.50"></text></g><g><title>databend-query`&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4098%" y="709" width="0.0105%" height="15" fill="rgb(241,107,1)" fg:x="9433" fg:w="1"/><text x="99.6598%" y="719.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4098%" y="693" width="0.0105%" height="15" fill="rgb(229,83,13)" fg:x="9433" fg:w="1"/><text x="99.6598%" y="703.50"></text></g><g><title>databend-query`&lt;opendal::layers::tracing::TracingAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4098%" y="677" width="0.0105%" height="15" fill="rgb(241,91,40)" fg:x="9433" fg:w="1"/><text x="99.6598%" y="687.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.4098%" y="661" width="0.0105%" height="15" fill="rgb(225,3,45)" fg:x="9433" fg:w="1"/><text x="99.6598%" y="671.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4098%" y="645" width="0.0105%" height="15" fill="rgb(244,223,14)" fg:x="9433" fg:w="1"/><text x="99.6598%" y="655.50"></text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4098%" y="629" width="0.0105%" height="15" fill="rgb(224,124,37)" fg:x="9433" fg:w="1"/><text x="99.6598%" y="639.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.4098%" y="613" width="0.0105%" height="15" fill="rgb(251,171,30)" fg:x="9433" fg:w="1"/><text x="99.6598%" y="623.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4098%" y="597" width="0.0105%" height="15" fill="rgb(236,46,54)" fg:x="9433" fg:w="1"/><text x="99.6598%" y="607.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list (1 samples, 0.01%)</title><rect x="99.4098%" y="581" width="0.0105%" height="15" fill="rgb(245,213,5)" fg:x="9433" fg:w="1"/><text x="99.6598%" y="591.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::list::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4098%" y="741" width="0.0211%" height="15" fill="rgb(230,144,27)" fg:x="9433" fg:w="2"/><text x="99.6598%" y="751.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4098%" y="725" width="0.0211%" height="15" fill="rgb(220,86,6)" fg:x="9433" fg:w="2"/><text x="99.6598%" y="735.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;opendal::layers::tracing::TracingAccessor&lt;opendal::layers::logging::LoggingAccessor&lt;opendal::layers::metrics::MetricsAccessor&lt;opendal::layers::retry::RetryAccessor&lt;common_storage::runtime_layer::RuntimeAccessor&lt;opendal::layers::complete::CompleteReaderAccessor&lt;opendal::layers::error_context::ErrorContextAccessor&lt;opendal::services::fs::backend::FsBackend&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="99.4204%" y="709" width="0.0105%" height="15" fill="rgb(240,20,13)" fg:x="9434" fg:w="1"/><text x="99.6704%" y="719.50"></text></g><g><title>databend-query`&lt;databend_query::interpreters::interpreter_setting::SettingInterpreter as databend_query::interpreters::interpreter::Interpreter&gt;::execute2 (1 samples, 0.01%)</title><rect x="99.4309%" y="709" width="0.0105%" height="15" fill="rgb(217,89,34)" fg:x="9435" fg:w="1"/><text x="99.6809%" y="719.50"></text></g><g><title>databend-query`common_storages_fuse::operations::read_partitions::_&lt;impl common_storages_fuse::fuse_table::FuseTable&gt;::read_partitions_with_metas (1 samples, 0.01%)</title><rect x="99.4415%" y="293" width="0.0105%" height="15" fill="rgb(229,13,5)" fg:x="9436" fg:w="1"/><text x="99.6915%" y="303.50"></text></g><g><title>databend-query`common_expression::schema::TableSchema::to_arrow (1 samples, 0.01%)</title><rect x="99.4415%" y="277" width="0.0105%" height="15" fill="rgb(244,67,35)" fg:x="9436" fg:w="1"/><text x="99.6915%" y="287.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="99.4415%" y="261" width="0.0105%" height="15" fill="rgb(221,40,2)" fg:x="9436" fg:w="1"/><text x="99.6915%" y="271.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="99.4415%" y="245" width="0.0105%" height="15" fill="rgb(237,157,21)" fg:x="9436" fg:w="1"/><text x="99.6915%" y="255.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.4415%" y="229" width="0.0105%" height="15" fill="rgb(222,94,11)" fg:x="9436" fg:w="1"/><text x="99.6915%" y="239.50"></text></g><g><title>databend-query`arrow2::datatypes::field::Field::new (1 samples, 0.01%)</title><rect x="99.4415%" y="213" width="0.0105%" height="15" fill="rgb(249,113,6)" fg:x="9436" fg:w="1"/><text x="99.6915%" y="223.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_select::SelectInterpreter::build_physical_plan::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="661" width="0.0211%" height="15" fill="rgb(238,137,36)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="645" width="0.0211%" height="15" fill="rgb(210,102,26)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="655.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="629" width="0.0211%" height="15" fill="rgb(218,30,30)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="639.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="613" width="0.0211%" height="15" fill="rgb(214,67,26)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="623.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="597" width="0.0211%" height="15" fill="rgb(251,9,53)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="607.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="581" width="0.0211%" height="15" fill="rgb(228,204,25)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="591.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="565" width="0.0211%" height="15" fill="rgb(207,153,8)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="575.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="549" width="0.0211%" height="15" fill="rgb(242,9,16)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="559.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="533" width="0.0211%" height="15" fill="rgb(217,211,10)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="543.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="517" width="0.0211%" height="15" fill="rgb(219,228,52)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="527.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="501" width="0.0211%" height="15" fill="rgb(231,92,29)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="511.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="485" width="0.0211%" height="15" fill="rgb(232,8,23)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="469" width="0.0211%" height="15" fill="rgb(216,211,34)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="479.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="453" width="0.0211%" height="15" fill="rgb(236,151,0)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="463.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="437" width="0.0211%" height="15" fill="rgb(209,168,3)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="447.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="421" width="0.0211%" height="15" fill="rgb(208,129,28)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="431.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="405" width="0.0211%" height="15" fill="rgb(229,78,22)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="415.50"></text></g><g><title>databend-query`&lt;dyn common_catalog::table::Table as common_sql::executor::table_read_plan::ToReadDataSourcePlan&gt;::read_plan_with_catalog::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="389" width="0.0211%" height="15" fill="rgb(228,187,13)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="399.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="373" width="0.0211%" height="15" fill="rgb(240,119,24)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="383.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::fuse_table::FuseTable as common_catalog::table::Table&gt;::read_partitions::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4415%" y="357" width="0.0211%" height="15" fill="rgb(209,194,42)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="367.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="341" width="0.0211%" height="15" fill="rgb(247,200,46)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="351.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="325" width="0.0211%" height="15" fill="rgb(218,76,16)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="335.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.4415%" y="309" width="0.0211%" height="15" fill="rgb(225,21,48)" fg:x="9436" fg:w="2"/><text x="99.6915%" y="319.50"></text></g><g><title>databend-query`common_storages_fuse::pruning::fuse_pruner::FusePruner::pruning::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4520%" y="293" width="0.0105%" height="15" fill="rgb(239,223,50)" fg:x="9437" fg:w="1"/><text x="99.7020%" y="303.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.4520%" y="277" width="0.0105%" height="15" fill="rgb(244,45,21)" fg:x="9437" fg:w="1"/><text x="99.7020%" y="287.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.4520%" y="261" width="0.0105%" height="15" fill="rgb(232,33,43)" fg:x="9437" fg:w="1"/><text x="99.7020%" y="271.50"></text></g><g><title>databend-query`futures_util::future::try_join_all::try_join_all (1 samples, 0.01%)</title><rect x="99.4520%" y="245" width="0.0105%" height="15" fill="rgb(209,8,3)" fg:x="9437" fg:w="1"/><text x="99.7020%" y="255.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="99.4520%" y="229" width="0.0105%" height="15" fill="rgb(214,25,53)" fg:x="9437" fg:w="1"/><text x="99.7020%" y="239.50"></text></g><g><title>databend-query`databend_query::api::rpc::exchange::exchange_injector::DefaultExchangeInjector::create (1 samples, 0.01%)</title><rect x="99.4625%" y="581" width="0.0105%" height="15" fill="rgb(254,186,54)" fg:x="9438" fg:w="1"/><text x="99.7125%" y="591.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.01%)</title><rect x="99.4731%" y="549" width="0.0105%" height="15" fill="rgb(208,174,49)" fg:x="9439" fg:w="1"/><text x="99.7231%" y="559.50"></text></g><g><title>databend-query`&lt;databend_query::interpreters::interpreter_select::SelectInterpreter as databend_query::interpreters::interpreter::Interpreter&gt;::execute2::_{{closure}} (5 samples, 0.05%)</title><rect x="99.4415%" y="693" width="0.0527%" height="15" fill="rgb(233,191,51)" fg:x="9436" fg:w="5"/><text x="99.6915%" y="703.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.05%)</title><rect x="99.4415%" y="677" width="0.0527%" height="15" fill="rgb(222,134,10)" fg:x="9436" fg:w="5"/><text x="99.6915%" y="687.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_select::SelectInterpreter::build_pipeline::_{{closure}} (3 samples, 0.03%)</title><rect x="99.4625%" y="661" width="0.0316%" height="15" fill="rgb(230,226,20)" fg:x="9438" fg:w="3"/><text x="99.7125%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.03%)</title><rect x="99.4625%" y="645" width="0.0316%" height="15" fill="rgb(251,111,25)" fg:x="9438" fg:w="3"/><text x="99.7125%" y="655.50"></text></g><g><title>databend-query`databend_query::schedulers::scheduler::build_query_pipeline::_{{closure}} (3 samples, 0.03%)</title><rect x="99.4625%" y="629" width="0.0316%" height="15" fill="rgb(224,40,46)" fg:x="9438" fg:w="3"/><text x="99.7125%" y="639.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.03%)</title><rect x="99.4625%" y="613" width="0.0316%" height="15" fill="rgb(236,108,47)" fg:x="9438" fg:w="3"/><text x="99.7125%" y="623.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.03%)</title><rect x="99.4625%" y="597" width="0.0316%" height="15" fill="rgb(234,93,0)" fg:x="9438" fg:w="3"/><text x="99.7125%" y="607.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (2 samples, 0.02%)</title><rect x="99.4731%" y="581" width="0.0211%" height="15" fill="rgb(224,213,32)" fg:x="9439" fg:w="2"/><text x="99.7231%" y="591.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (2 samples, 0.02%)</title><rect x="99.4731%" y="565" width="0.0211%" height="15" fill="rgb(251,11,48)" fg:x="9439" fg:w="2"/><text x="99.7231%" y="575.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_aggregate_final (1 samples, 0.01%)</title><rect x="99.4836%" y="549" width="0.0105%" height="15" fill="rgb(236,173,5)" fg:x="9440" fg:w="1"/><text x="99.7336%" y="559.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_aggregate_partial (1 samples, 0.01%)</title><rect x="99.4836%" y="533" width="0.0105%" height="15" fill="rgb(230,95,12)" fg:x="9440" fg:w="1"/><text x="99.7336%" y="543.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_ie_join (1 samples, 0.01%)</title><rect x="99.4836%" y="517" width="0.0105%" height="15" fill="rgb(232,209,1)" fg:x="9440" fg:w="1"/><text x="99.7336%" y="527.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (1 samples, 0.01%)</title><rect x="99.4836%" y="501" width="0.0105%" height="15" fill="rgb(232,6,1)" fg:x="9440" fg:w="1"/><text x="99.7336%" y="511.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.01%)</title><rect x="99.4836%" y="485" width="0.0105%" height="15" fill="rgb(210,224,50)" fg:x="9440" fg:w="1"/><text x="99.7336%" y="495.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::fuse_table::FuseTable as common_catalog::table::Table&gt;::read_data (1 samples, 0.01%)</title><rect x="99.4836%" y="469" width="0.0105%" height="15" fill="rgb(228,127,35)" fg:x="9440" fg:w="1"/><text x="99.7336%" y="479.50"></text></g><g><title>databend-query`common_storages_fuse::operations::fuse_source::build_fuse_source_pipeline (1 samples, 0.01%)</title><rect x="99.4836%" y="453" width="0.0105%" height="15" fill="rgb(245,102,45)" fg:x="9440" fg:w="1"/><text x="99.7336%" y="463.50"></text></g><g><title>databend-query`common_storages_fuse::operations::read::fuse_source::build_fuse_native_source_pipeline (1 samples, 0.01%)</title><rect x="99.4836%" y="437" width="0.0105%" height="15" fill="rgb(214,1,49)" fg:x="9440" fg:w="1"/><text x="99.7336%" y="447.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="99.4836%" y="421" width="0.0105%" height="15" fill="rgb(226,163,40)" fg:x="9440" fg:w="1"/><text x="99.7336%" y="431.50"></text></g><g><title>databend-query`&lt;databend_query::interpreters::interpreter_use_database::UseDatabaseInterpreter as databend_query::interpreters::interpreter::Interpreter&gt;::execute2::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4942%" y="693" width="0.0105%" height="15" fill="rgb(239,212,28)" fg:x="9441" fg:w="1"/><text x="99.7442%" y="703.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.4942%" y="677" width="0.0105%" height="15" fill="rgb(220,20,13)" fg:x="9441" fg:w="1"/><text x="99.7442%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.4942%" y="661" width="0.0105%" height="15" fill="rgb(210,164,35)" fg:x="9441" fg:w="1"/><text x="99.7442%" y="671.50"></text></g><g><title>databend-query`&lt;databend_query::catalogs::default::database_catalog::DatabaseCatalog as common_catalog::catalog::interface::Catalog&gt;::get_database::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4942%" y="645" width="0.0105%" height="15" fill="rgb(248,109,41)" fg:x="9441" fg:w="1"/><text x="99.7442%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.4942%" y="629" width="0.0105%" height="15" fill="rgb(238,23,50)" fg:x="9441" fg:w="1"/><text x="99.7442%" y="639.50"></text></g><g><title>databend-query`&lt;databend_query::catalogs::default::mutable_catalog::MutableCatalog as common_catalog::catalog::interface::Catalog&gt;::get_database::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4942%" y="613" width="0.0105%" height="15" fill="rgb(211,48,49)" fg:x="9441" fg:w="1"/><text x="99.7442%" y="623.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.01%)</title><rect x="99.4942%" y="597" width="0.0105%" height="15" fill="rgb(223,36,21)" fg:x="9441" fg:w="1"/><text x="99.7442%" y="607.50"></text></g><g><title>databend-query`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.08%)</title><rect x="99.4309%" y="741" width="0.0843%" height="15" fill="rgb(207,123,46)" fg:x="9435" fg:w="8"/><text x="99.6809%" y="751.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter::Interpreter::execute::_{{closure}} (8 samples, 0.08%)</title><rect x="99.4309%" y="725" width="0.0843%" height="15" fill="rgb(240,218,32)" fg:x="9435" fg:w="8"/><text x="99.6809%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.07%)</title><rect x="99.4415%" y="709" width="0.0738%" height="15" fill="rgb(252,5,43)" fg:x="9436" fg:w="7"/><text x="99.6915%" y="719.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter::log_query_start (1 samples, 0.01%)</title><rect x="99.5047%" y="693" width="0.0105%" height="15" fill="rgb(252,84,19)" fg:x="9442" fg:w="1"/><text x="99.7547%" y="703.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_query_log::InterpreterQueryLog::log_start (1 samples, 0.01%)</title><rect x="99.5047%" y="677" width="0.0105%" height="15" fill="rgb(243,152,39)" fg:x="9442" fg:w="1"/><text x="99.7547%" y="687.50"></text></g><g><title>databend-query`alloc::fmt::format::format_inner (1 samples, 0.01%)</title><rect x="99.5047%" y="661" width="0.0105%" height="15" fill="rgb(234,160,15)" fg:x="9442" fg:w="1"/><text x="99.7547%" y="671.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.01%)</title><rect x="99.5047%" y="645" width="0.0105%" height="15" fill="rgb(237,34,20)" fg:x="9442" fg:w="1"/><text x="99.7547%" y="655.50"></text></g><g><title>databend-query`&lt;common_meta_app::principal::user_quota::UserQuota as core::fmt::Debug&gt;::fmt (1 samples, 0.01%)</title><rect x="99.5047%" y="629" width="0.0105%" height="15" fill="rgb(229,97,13)" fg:x="9442" fg:w="1"/><text x="99.7547%" y="639.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.01%)</title><rect x="99.5047%" y="613" width="0.0105%" height="15" fill="rgb(234,71,50)" fg:x="9442" fg:w="1"/><text x="99.7547%" y="623.50"></text></g><g><title>databend-query`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.01%)</title><rect x="99.5047%" y="597" width="0.0105%" height="15" fill="rgb(253,155,4)" fg:x="9442" fg:w="1"/><text x="99.7547%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="99.5047%" y="581" width="0.0105%" height="15" fill="rgb(222,185,37)" fg:x="9442" fg:w="1"/><text x="99.7547%" y="591.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker&lt;W&gt; as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::authenticate::_{{closure}} (1 samples, 0.01%)</title><rect x="99.5152%" y="725" width="0.0105%" height="15" fill="rgb(251,177,13)" fg:x="9443" fg:w="1"/><text x="99.7652%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.5152%" y="709" width="0.0105%" height="15" fill="rgb(250,179,40)" fg:x="9443" fg:w="1"/><text x="99.7652%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.5152%" y="693" width="0.0105%" height="15" fill="rgb(242,44,2)" fg:x="9443" fg:w="1"/><text x="99.7652%" y="703.50"></text></g><g><title>databend-query`common_users::user_mgr::_&lt;impl common_users::user_api::UserApiProvider&gt;::get_user_with_client_ip::_{{closure}} (1 samples, 0.01%)</title><rect x="99.5152%" y="677" width="0.0105%" height="15" fill="rgb(216,177,13)" fg:x="9443" fg:w="1"/><text x="99.7652%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.5152%" y="661" width="0.0105%" height="15" fill="rgb(216,106,43)" fg:x="9443" fg:w="1"/><text x="99.7652%" y="671.50"></text></g><g><title>databend-query`common_users::user_mgr::_&lt;impl common_users::user_api::UserApiProvider&gt;::get_user::_{{closure}} (1 samples, 0.01%)</title><rect x="99.5152%" y="645" width="0.0105%" height="15" fill="rgb(216,183,2)" fg:x="9443" fg:w="1"/><text x="99.7652%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.5152%" y="629" width="0.0105%" height="15" fill="rgb(249,75,3)" fg:x="9443" fg:w="1"/><text x="99.7652%" y="639.50"></text></g><g><title>databend-query`common_meta_app::principal::user_info::UserInfo::new (1 samples, 0.01%)</title><rect x="99.5152%" y="613" width="0.0105%" height="15" fill="rgb(219,67,39)" fg:x="9443" fg:w="1"/><text x="99.7652%" y="623.50"></text></g><g><title>databend-query`std::collections::hash::map::RandomState::new::KEYS::__getit (1 samples, 0.01%)</title><rect x="99.5152%" y="597" width="0.0105%" height="15" fill="rgb(253,228,2)" fg:x="9443" fg:w="1"/><text x="99.7652%" y="607.50"></text></g><g><title>databend-query`common_sql::planner::planner::Planner::replace_stmt (1 samples, 0.01%)</title><rect x="99.5258%" y="613" width="0.0105%" height="15" fill="rgb(235,138,27)" fg:x="9444" fg:w="1"/><text x="99.7758%" y="623.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_settings (1 samples, 0.01%)</title><rect x="99.5258%" y="597" width="0.0105%" height="15" fill="rgb(236,97,51)" fg:x="9444" fg:w="1"/><text x="99.7758%" y="607.50"></text></g><g><title>databend-query`common_settings::settings::Settings::get_changes (1 samples, 0.01%)</title><rect x="99.5258%" y="581" width="0.0105%" height="15" fill="rgb(240,80,30)" fg:x="9444" fg:w="1"/><text x="99.7758%" y="591.50"></text></g><g><title>databend-query`&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.5258%" y="565" width="0.0105%" height="15" fill="rgb(230,178,19)" fg:x="9444" fg:w="1"/><text x="99.7758%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="99.5258%" y="549" width="0.0105%" height="15" fill="rgb(210,190,27)" fg:x="9444" fg:w="1"/><text x="99.7758%" y="559.50"></text></g><g><title>databend-query`common_sql::planner::planner::Planner::plan_sql::_{{closure}} (2 samples, 0.02%)</title><rect x="99.5258%" y="645" width="0.0211%" height="15" fill="rgb(222,107,31)" fg:x="9444" fg:w="2"/><text x="99.7758%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.5258%" y="629" width="0.0211%" height="15" fill="rgb(216,127,34)" fg:x="9444" fg:w="2"/><text x="99.7758%" y="639.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.01%)</title><rect x="99.5363%" y="613" width="0.0105%" height="15" fill="rgb(234,116,52)" fg:x="9445" fg:w="1"/><text x="99.7863%" y="623.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="99.5363%" y="597" width="0.0105%" height="15" fill="rgb(222,124,15)" fg:x="9445" fg:w="1"/><text x="99.7863%" y="607.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.01%)</title><rect x="99.5363%" y="581" width="0.0105%" height="15" fill="rgb(231,179,28)" fg:x="9445" fg:w="1"/><text x="99.7863%" y="591.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.01%)</title><rect x="99.5363%" y="565" width="0.0105%" height="15" fill="rgb(226,93,45)" fg:x="9445" fg:w="1"/><text x="99.7863%" y="575.50"></text></g><g><title>databend-query`&lt;common_ast::parser::token::TokenKind as logos::Logos&gt;::lex::goto20_ctx19_x (1 samples, 0.01%)</title><rect x="99.5363%" y="549" width="0.0105%" height="15" fill="rgb(215,8,51)" fg:x="9445" fg:w="1"/><text x="99.7863%" y="559.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker&lt;W&gt; as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::on_init::_{{closure}} (3 samples, 0.03%)</title><rect x="99.5258%" y="725" width="0.0316%" height="15" fill="rgb(223,106,5)" fg:x="9444" fg:w="3"/><text x="99.7758%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.03%)</title><rect x="99.5258%" y="709" width="0.0316%" height="15" fill="rgb(250,191,5)" fg:x="9444" fg:w="3"/><text x="99.7758%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.03%)</title><rect x="99.5258%" y="693" width="0.0316%" height="15" fill="rgb(242,132,44)" fg:x="9444" fg:w="3"/><text x="99.7758%" y="703.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase&lt;W&gt;::do_query::_{{closure}} (3 samples, 0.03%)</title><rect x="99.5258%" y="677" width="0.0316%" height="15" fill="rgb(251,152,29)" fg:x="9444" fg:w="3"/><text x="99.7758%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.03%)</title><rect x="99.5258%" y="661" width="0.0316%" height="15" fill="rgb(218,179,5)" fg:x="9444" fg:w="3"/><text x="99.7758%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.5468%" y="645" width="0.0105%" height="15" fill="rgb(227,67,19)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="655.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_base::runtime::runtime::TrySpawn&gt;::try_spawn (1 samples, 0.01%)</title><rect x="99.5468%" y="629" width="0.0105%" height="15" fill="rgb(233,119,31)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="639.50"></text></g><g><title>databend-query`databend_query::sessions::query_ctx_shared::QueryContextShared::try_get_runtime (1 samples, 0.01%)</title><rect x="99.5468%" y="613" width="0.0105%" height="15" fill="rgb(241,120,22)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="623.50"></text></g><g><title>databend-query`common_base::runtime::runtime::Runtime::with_worker_threads (1 samples, 0.01%)</title><rect x="99.5468%" y="597" width="0.0105%" height="15" fill="rgb(224,102,30)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="607.50"></text></g><g><title>databend-query`common_base::runtime::runtime::Runtime::create (1 samples, 0.01%)</title><rect x="99.5468%" y="581" width="0.0105%" height="15" fill="rgb(210,164,37)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="591.50"></text></g><g><title>databend-query`tokio::runtime::builder::Builder::build (1 samples, 0.01%)</title><rect x="99.5468%" y="565" width="0.0105%" height="15" fill="rgb(226,191,16)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="575.50"></text></g><g><title>databend-query`tokio::runtime::driver::Driver::new (1 samples, 0.01%)</title><rect x="99.5468%" y="549" width="0.0105%" height="15" fill="rgb(214,40,45)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="559.50"></text></g><g><title>databend-query`tokio::runtime::signal::Driver::new (1 samples, 0.01%)</title><rect x="99.5468%" y="533" width="0.0105%" height="15" fill="rgb(244,29,26)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="543.50"></text></g><g><title>databend-query`mio::poll::Registry::register (1 samples, 0.01%)</title><rect x="99.5468%" y="517" width="0.0105%" height="15" fill="rgb(216,16,5)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="527.50"></text></g><g><title>databend-query`mio::sys::unix::selector::kqueue::Selector::register (1 samples, 0.01%)</title><rect x="99.5468%" y="501" width="0.0105%" height="15" fill="rgb(249,76,35)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.01%)</title><rect x="99.5468%" y="485" width="0.0105%" height="15" fill="rgb(207,11,44)" fg:x="9446" fg:w="1"/><text x="99.7968%" y="495.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::new (1 samples, 0.01%)</title><rect x="99.5574%" y="613" width="0.0105%" height="15" fill="rgb(228,190,49)" fg:x="9447" fg:w="1"/><text x="99.8074%" y="623.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::apply_transform_rules (1 samples, 0.01%)</title><rect x="99.5679%" y="549" width="0.0105%" height="15" fill="rgb(214,173,12)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="559.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (1 samples, 0.01%)</title><rect x="99.5679%" y="533" width="0.0105%" height="15" fill="rgb(218,26,35)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="543.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (1 samples, 0.01%)</title><rect x="99.5679%" y="517" width="0.0105%" height="15" fill="rgb(220,200,19)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="527.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::apply_transform_rules (1 samples, 0.01%)</title><rect x="99.5679%" y="501" width="0.0105%" height="15" fill="rgb(239,95,49)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="511.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_function_context (1 samples, 0.01%)</title><rect x="99.5679%" y="485" width="0.0105%" height="15" fill="rgb(235,85,53)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="495.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_settings (1 samples, 0.01%)</title><rect x="99.5679%" y="469" width="0.0105%" height="15" fill="rgb(233,133,31)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="479.50"></text></g><g><title>databend-query`common_settings::settings::Settings::get_changes (1 samples, 0.01%)</title><rect x="99.5679%" y="453" width="0.0105%" height="15" fill="rgb(218,25,20)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="463.50"></text></g><g><title>databend-query`&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.5679%" y="437" width="0.0105%" height="15" fill="rgb(252,210,38)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="447.50"></text></g><g><title>databend-query`__rg_alloc (1 samples, 0.01%)</title><rect x="99.5679%" y="421" width="0.0105%" height="15" fill="rgb(242,134,21)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="99.5679%" y="405" width="0.0105%" height="15" fill="rgb(213,28,48)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="99.5679%" y="389" width="0.0105%" height="15" fill="rgb(250,196,2)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="99.5679%" y="373" width="0.0105%" height="15" fill="rgb(227,5,17)" fg:x="9448" fg:w="1"/><text x="99.8179%" y="383.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::apply_transform_rules (1 samples, 0.01%)</title><rect x="99.5785%" y="501" width="0.0105%" height="15" fill="rgb(221,226,24)" fg:x="9449" fg:w="1"/><text x="99.8285%" y="511.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_function_context (1 samples, 0.01%)</title><rect x="99.5785%" y="485" width="0.0105%" height="15" fill="rgb(211,5,48)" fg:x="9449" fg:w="1"/><text x="99.8285%" y="495.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_settings (1 samples, 0.01%)</title><rect x="99.5785%" y="469" width="0.0105%" height="15" fill="rgb(219,150,6)" fg:x="9449" fg:w="1"/><text x="99.8285%" y="479.50"></text></g><g><title>databend-query`common_settings::settings::Settings::get_changes (1 samples, 0.01%)</title><rect x="99.5785%" y="453" width="0.0105%" height="15" fill="rgb(251,46,16)" fg:x="9449" fg:w="1"/><text x="99.8285%" y="463.50"></text></g><g><title>databend-query`&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.5785%" y="437" width="0.0105%" height="15" fill="rgb(220,204,40)" fg:x="9449" fg:w="1"/><text x="99.8285%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="99.5785%" y="421" width="0.0105%" height="15" fill="rgb(211,85,2)" fg:x="9449" fg:w="1"/><text x="99.8285%" y="431.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::apply_transform_rules (2 samples, 0.02%)</title><rect x="99.5785%" y="533" width="0.0211%" height="15" fill="rgb(229,17,7)" fg:x="9449" fg:w="2"/><text x="99.8285%" y="543.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.02%)</title><rect x="99.5785%" y="517" width="0.0211%" height="15" fill="rgb(239,72,28)" fg:x="9449" fg:w="2"/><text x="99.8285%" y="527.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (1 samples, 0.01%)</title><rect x="99.5890%" y="501" width="0.0105%" height="15" fill="rgb(230,47,54)" fg:x="9450" fg:w="1"/><text x="99.8390%" y="511.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::apply_transform_rules (1 samples, 0.01%)</title><rect x="99.5890%" y="485" width="0.0105%" height="15" fill="rgb(214,50,8)" fg:x="9450" fg:w="1"/><text x="99.8390%" y="495.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_function_context (1 samples, 0.01%)</title><rect x="99.5890%" y="469" width="0.0105%" height="15" fill="rgb(216,198,43)" fg:x="9450" fg:w="1"/><text x="99.8390%" y="479.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_settings (1 samples, 0.01%)</title><rect x="99.5890%" y="453" width="0.0105%" height="15" fill="rgb(234,20,35)" fg:x="9450" fg:w="1"/><text x="99.8390%" y="463.50"></text></g><g><title>databend-query`common_settings::settings::Settings::get_changes (1 samples, 0.01%)</title><rect x="99.5890%" y="437" width="0.0105%" height="15" fill="rgb(254,45,19)" fg:x="9450" fg:w="1"/><text x="99.8390%" y="447.50"></text></g><g><title>databend-query`&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.5890%" y="421" width="0.0105%" height="15" fill="rgb(219,14,44)" fg:x="9450" fg:w="1"/><text x="99.8390%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="99.5890%" y="405" width="0.0105%" height="15" fill="rgb(217,220,26)" fg:x="9450" fg:w="1"/><text x="99.8390%" y="415.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::optimizer::optimize (5 samples, 0.05%)</title><rect x="99.5574%" y="629" width="0.0527%" height="15" fill="rgb(213,158,28)" fg:x="9447" fg:w="5"/><text x="99.8074%" y="639.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::optimizer::optimize_query (4 samples, 0.04%)</title><rect x="99.5679%" y="613" width="0.0422%" height="15" fill="rgb(252,51,52)" fg:x="9448" fg:w="4"/><text x="99.8179%" y="623.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize (4 samples, 0.04%)</title><rect x="99.5679%" y="597" width="0.0422%" height="15" fill="rgb(246,89,16)" fg:x="9448" fg:w="4"/><text x="99.8179%" y="607.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (4 samples, 0.04%)</title><rect x="99.5679%" y="581" width="0.0422%" height="15" fill="rgb(216,158,49)" fg:x="9448" fg:w="4"/><text x="99.8179%" y="591.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (4 samples, 0.04%)</title><rect x="99.5679%" y="565" width="0.0422%" height="15" fill="rgb(236,107,19)" fg:x="9448" fg:w="4"/><text x="99.8179%" y="575.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (3 samples, 0.03%)</title><rect x="99.5785%" y="549" width="0.0316%" height="15" fill="rgb(228,185,30)" fg:x="9449" fg:w="3"/><text x="99.8285%" y="559.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (1 samples, 0.01%)</title><rect x="99.5995%" y="533" width="0.0105%" height="15" fill="rgb(246,134,8)" fg:x="9451" fg:w="1"/><text x="99.8495%" y="543.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::apply_transform_rules (1 samples, 0.01%)</title><rect x="99.5995%" y="517" width="0.0105%" height="15" fill="rgb(214,143,50)" fg:x="9451" fg:w="1"/><text x="99.8495%" y="527.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::rule::factory::RuleFactory::create_rule (1 samples, 0.01%)</title><rect x="99.5995%" y="501" width="0.0105%" height="15" fill="rgb(228,75,8)" fg:x="9451" fg:w="1"/><text x="99.8495%" y="511.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::rule::rewrite::rule_fold_constant::RuleFoldConstant::new (1 samples, 0.01%)</title><rect x="99.5995%" y="485" width="0.0105%" height="15" fill="rgb(207,175,4)" fg:x="9451" fg:w="1"/><text x="99.8495%" y="495.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::s_expr::SExpr::create_leaf (1 samples, 0.01%)</title><rect x="99.5995%" y="469" width="0.0105%" height="15" fill="rgb(205,108,24)" fg:x="9451" fg:w="1"/><text x="99.8495%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="99.5995%" y="453" width="0.0105%" height="15" fill="rgb(244,120,49)" fg:x="9451" fg:w="1"/><text x="99.8495%" y="463.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.01%)</title><rect x="99.6101%" y="629" width="0.0105%" height="15" fill="rgb(223,47,38)" fg:x="9452" fg:w="1"/><text x="99.8601%" y="639.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="99.6101%" y="613" width="0.0105%" height="15" fill="rgb(229,179,11)" fg:x="9452" fg:w="1"/><text x="99.8601%" y="623.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.01%)</title><rect x="99.6101%" y="597" width="0.0105%" height="15" fill="rgb(231,122,1)" fg:x="9452" fg:w="1"/><text x="99.8601%" y="607.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.01%)</title><rect x="99.6101%" y="581" width="0.0105%" height="15" fill="rgb(245,119,9)" fg:x="9452" fg:w="1"/><text x="99.8601%" y="591.50"></text></g><g><title>databend-query`&lt;common_ast::parser::token::TokenKind as logos::Logos&gt;::lex::goto8485_ctx15_x (1 samples, 0.01%)</title><rect x="99.6101%" y="565" width="0.0105%" height="15" fill="rgb(241,163,25)" fg:x="9452" fg:w="1"/><text x="99.8601%" y="575.50"></text></g><g><title>databend-query`common_ast::parser::parser::parse_sql (1 samples, 0.01%)</title><rect x="99.6206%" y="501" width="0.0105%" height="15" fill="rgb(217,214,3)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="511.50"></text></g><g><title>databend-query`common_ast::parser::statement::statement (1 samples, 0.01%)</title><rect x="99.6206%" y="485" width="0.0105%" height="15" fill="rgb(240,86,28)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="495.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.01%)</title><rect x="99.6206%" y="469" width="0.0105%" height="15" fill="rgb(215,47,9)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="479.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.01%)</title><rect x="99.6206%" y="453" width="0.0105%" height="15" fill="rgb(252,25,45)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="463.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.01%)</title><rect x="99.6206%" y="437" width="0.0105%" height="15" fill="rgb(251,164,9)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="447.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.01%)</title><rect x="99.6206%" y="421" width="0.0105%" height="15" fill="rgb(233,194,0)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="431.50"></text></g><g><title>databend-query`common_ast::parser::query::query (1 samples, 0.01%)</title><rect x="99.6206%" y="405" width="0.0105%" height="15" fill="rgb(249,111,24)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="415.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.01%)</title><rect x="99.6206%" y="389" width="0.0105%" height="15" fill="rgb(250,223,3)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="399.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation (1 samples, 0.01%)</title><rect x="99.6206%" y="373" width="0.0105%" height="15" fill="rgb(236,178,37)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="383.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation_element (1 samples, 0.01%)</title><rect x="99.6206%" y="357" width="0.0105%" height="15" fill="rgb(241,158,50)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="367.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.01%)</title><rect x="99.6206%" y="341" width="0.0105%" height="15" fill="rgb(213,121,41)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="351.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.01%)</title><rect x="99.6206%" y="325" width="0.0105%" height="15" fill="rgb(240,92,3)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="335.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD,FnE,FnF,FnG,FnH,FnI) as nom::sequence::Tuple&lt;Input,(A,B,C,D,E,F,G,H,I),Error&gt;&gt;::parse (1 samples, 0.01%)</title><rect x="99.6206%" y="309" width="0.0105%" height="15" fill="rgb(205,123,3)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="319.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.01%)</title><rect x="99.6206%" y="293" width="0.0105%" height="15" fill="rgb(205,97,47)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="303.50"></text></g><g><title>databend-query`&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.01%)</title><rect x="99.6206%" y="277" width="0.0105%" height="15" fill="rgb(247,152,14)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="287.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.01%)</title><rect x="99.6206%" y="261" width="0.0105%" height="15" fill="rgb(248,195,53)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="271.50"></text></g><g><title>databend-query`&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.01%)</title><rect x="99.6206%" y="245" width="0.0105%" height="15" fill="rgb(226,201,16)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="255.50"></text></g><g><title>databend-query`common_ast::parser::expr::expr (1 samples, 0.01%)</title><rect x="99.6206%" y="229" width="0.0105%" height="15" fill="rgb(205,98,0)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="239.50"></text></g><g><title>databend-query`itertools::tuple_impl::tuple_windows (1 samples, 0.01%)</title><rect x="99.6206%" y="213" width="0.0105%" height="15" fill="rgb(214,191,48)" fg:x="9453" fg:w="1"/><text x="99.8706%" y="223.50"></text></g><g><title>databend-query`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1 samples, 0.01%)</title><rect x="99.6312%" y="165" width="0.0105%" height="15" fill="rgb(237,112,39)" fg:x="9454" fg:w="1"/><text x="99.8812%" y="175.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::_&lt;impl chrono::offset::TimeZone for chrono_tz::timezones::Tz&gt;::offset_from_local_datetime (2 samples, 0.02%)</title><rect x="99.6417%" y="165" width="0.0211%" height="15" fill="rgb(247,203,27)" fg:x="9455" fg:w="2"/><text x="99.8917%" y="175.50"></text></g><g><title>databend-query`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (3 samples, 0.03%)</title><rect x="99.6733%" y="149" width="0.0316%" height="15" fill="rgb(235,124,28)" fg:x="9458" fg:w="3"/><text x="99.9233%" y="159.50"></text></g><g><title>databend-query`chrono::naive::internals::cycle_to_yo (3 samples, 0.03%)</title><rect x="99.6733%" y="133" width="0.0316%" height="15" fill="rgb(208,207,46)" fg:x="9458" fg:w="3"/><text x="99.9233%" y="143.50"></text></g><g><title>databend-query`chrono::traits::Datelike::num_days_from_ce (1 samples, 0.01%)</title><rect x="99.7049%" y="149" width="0.0105%" height="15" fill="rgb(234,176,4)" fg:x="9461" fg:w="1"/><text x="99.9549%" y="159.50"></text></g><g><title>databend-query`chrono_tz::binary_search::binary_search (8 samples, 0.08%)</title><rect x="99.7576%" y="133" width="0.0843%" height="15" fill="rgb(230,133,28)" fg:x="9466" fg:w="8"/><text x="100.0076%" y="143.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::FixedTimespanSet::local_span (3 samples, 0.03%)</title><rect x="99.8103%" y="117" width="0.0316%" height="15" fill="rgb(211,137,40)" fg:x="9471" fg:w="3"/><text x="100.0603%" y="127.50"></text></g><g><title>databend-query`common_sql::planner::binder::project::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::normalize_select_list::_{{closure}} (21 samples, 0.22%)</title><rect x="99.6312%" y="341" width="0.2213%" height="15" fill="rgb(254,35,13)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="351.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.22%)</title><rect x="99.6312%" y="325" width="0.2213%" height="15" fill="rgb(225,49,51)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="335.50"></text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (21 samples, 0.22%)</title><rect x="99.6312%" y="309" width="0.2213%" height="15" fill="rgb(251,10,15)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="319.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.22%)</title><rect x="99.6312%" y="293" width="0.2213%" height="15" fill="rgb(228,207,15)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="303.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::new (21 samples, 0.22%)</title><rect x="99.6312%" y="277" width="0.2213%" height="15" fill="rgb(241,99,19)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="287.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_function_context (21 samples, 0.22%)</title><rect x="99.6312%" y="261" width="0.2213%" height="15" fill="rgb(207,104,49)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="271.50"></text></g><g><title>databend-query`once_cell::imp::OnceCell&lt;T&gt;::initialize (21 samples, 0.22%)</title><rect x="99.6312%" y="245" width="0.2213%" height="15" fill="rgb(234,99,18)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="255.50"></text></g><g><title>databend-query`once_cell::imp::initialize_or_wait (21 samples, 0.22%)</title><rect x="99.6312%" y="229" width="0.2213%" height="15" fill="rgb(213,191,49)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="239.50"></text></g><g><title>databend-query`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (21 samples, 0.22%)</title><rect x="99.6312%" y="213" width="0.2213%" height="15" fill="rgb(210,226,19)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="223.50"></text></g><g><title>databend-query`core::ops::function::FnOnce::call_once (21 samples, 0.22%)</title><rect x="99.6312%" y="197" width="0.2213%" height="15" fill="rgb(229,97,18)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="207.50"></text></g><g><title>databend-query`common_expression::utils::date_helper::TzFactory::get (21 samples, 0.22%)</title><rect x="99.6312%" y="181" width="0.2213%" height="15" fill="rgb(211,167,15)" fg:x="9454" fg:w="21"/><text x="99.8812%" y="191.50"></text></g><g><title>databend-query`common_expression::utils::date_helper::TzLUT::new (18 samples, 0.19%)</title><rect x="99.6628%" y="165" width="0.1897%" height="15" fill="rgb(210,169,34)" fg:x="9457" fg:w="18"/><text x="99.9128%" y="175.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::_&lt;impl chrono::offset::TimeZone for chrono_tz::timezones::Tz&gt;::offset_from_local_datetime (13 samples, 0.14%)</title><rect x="99.7155%" y="149" width="0.1370%" height="15" fill="rgb(241,121,31)" fg:x="9462" fg:w="13"/><text x="99.9655%" y="159.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::FixedTimespanSet::local_span (1 samples, 0.01%)</title><rect x="99.8419%" y="133" width="0.0105%" height="15" fill="rgb(232,40,11)" fg:x="9474" fg:w="1"/><text x="100.0919%" y="143.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_table_reference::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8525%" y="341" width="0.0105%" height="15" fill="rgb(205,86,26)" fg:x="9475" fg:w="1"/><text x="100.1025%" y="351.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8525%" y="325" width="0.0105%" height="15" fill="rgb(231,126,28)" fg:x="9475" fg:w="1"/><text x="100.1025%" y="335.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_single_table::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8525%" y="309" width="0.0105%" height="15" fill="rgb(219,221,18)" fg:x="9475" fg:w="1"/><text x="100.1025%" y="319.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8525%" y="293" width="0.0105%" height="15" fill="rgb(211,40,0)" fg:x="9475" fg:w="1"/><text x="100.1025%" y="303.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_single_table::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8525%" y="277" width="0.0105%" height="15" fill="rgb(239,85,43)" fg:x="9475" fg:w="1"/><text x="100.1025%" y="287.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_base_table::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8525%" y="261" width="0.0105%" height="15" fill="rgb(231,55,21)" fg:x="9475" fg:w="1"/><text x="100.1025%" y="271.50"></text></g><g><title>databend-query`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.01%)</title><rect x="99.8525%" y="245" width="0.0105%" height="15" fill="rgb(225,184,43)" fg:x="9475" fg:w="1"/><text x="100.1025%" y="255.50"></text></g><g><title>databend-query`common_sql::planner::binder::ddl::database::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_show_databases::_{{closure}} (24 samples, 0.25%)</title><rect x="99.6206%" y="565" width="0.2529%" height="15" fill="rgb(251,158,41)" fg:x="9453" fg:w="24"/><text x="99.8706%" y="575.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.25%)</title><rect x="99.6206%" y="549" width="0.2529%" height="15" fill="rgb(234,159,37)" fg:x="9453" fg:w="24"/><text x="99.8706%" y="559.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_rewrite_to_query::_{{closure}} (24 samples, 0.25%)</title><rect x="99.6206%" y="533" width="0.2529%" height="15" fill="rgb(216,204,22)" fg:x="9453" fg:w="24"/><text x="99.8706%" y="543.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.25%)</title><rect x="99.6206%" y="517" width="0.2529%" height="15" fill="rgb(214,17,3)" fg:x="9453" fg:w="24"/><text x="99.8706%" y="527.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (23 samples, 0.24%)</title><rect x="99.6312%" y="501" width="0.2424%" height="15" fill="rgb(212,111,17)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="511.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.24%)</title><rect x="99.6312%" y="485" width="0.2424%" height="15" fill="rgb(221,157,24)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="495.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (23 samples, 0.24%)</title><rect x="99.6312%" y="469" width="0.2424%" height="15" fill="rgb(252,16,13)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="479.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (23 samples, 0.24%)</title><rect x="99.6312%" y="453" width="0.2424%" height="15" fill="rgb(221,62,2)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.24%)</title><rect x="99.6312%" y="437" width="0.2424%" height="15" fill="rgb(247,87,22)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="447.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (23 samples, 0.24%)</title><rect x="99.6312%" y="421" width="0.2424%" height="15" fill="rgb(215,73,9)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="431.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.24%)</title><rect x="99.6312%" y="405" width="0.2424%" height="15" fill="rgb(207,175,33)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="415.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (23 samples, 0.24%)</title><rect x="99.6312%" y="389" width="0.2424%" height="15" fill="rgb(243,129,54)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="399.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.24%)</title><rect x="99.6312%" y="373" width="0.2424%" height="15" fill="rgb(227,119,45)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="383.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (23 samples, 0.24%)</title><rect x="99.6312%" y="357" width="0.2424%" height="15" fill="rgb(205,109,36)" fg:x="9454" fg:w="23"/><text x="99.8812%" y="367.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8630%" y="341" width="0.0105%" height="15" fill="rgb(205,6,39)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="351.50"></text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8630%" y="325" width="0.0105%" height="15" fill="rgb(221,32,16)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="335.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8630%" y="309" width="0.0105%" height="15" fill="rgb(228,144,50)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="319.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8630%" y="293" width="0.0105%" height="15" fill="rgb(229,201,53)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="303.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8630%" y="277" width="0.0105%" height="15" fill="rgb(249,153,27)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="287.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8630%" y="261" width="0.0105%" height="15" fill="rgb(227,106,25)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="271.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8630%" y="245" width="0.0105%" height="15" fill="rgb(230,65,29)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="255.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8630%" y="229" width="0.0105%" height="15" fill="rgb(221,57,46)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="239.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_scalar_function_call::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8630%" y="213" width="0.0105%" height="15" fill="rgb(229,161,17)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="223.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8630%" y="197" width="0.0105%" height="15" fill="rgb(222,213,11)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="207.50"></text></g><g><title>databend-query`common_expression::type_check::check (1 samples, 0.01%)</title><rect x="99.8630%" y="181" width="0.0105%" height="15" fill="rgb(235,35,13)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="191.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.01%)</title><rect x="99.8630%" y="165" width="0.0105%" height="15" fill="rgb(233,158,34)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="175.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="99.8630%" y="149" width="0.0105%" height="15" fill="rgb(215,151,48)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="159.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.01%)</title><rect x="99.8630%" y="133" width="0.0105%" height="15" fill="rgb(229,84,14)" fg:x="9476" fg:w="1"/><text x="100.1130%" y="143.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::io::read::meta::meta_readers::LoaderWrapper&lt;opendal::types::operator::operator::Operator&gt; as storages_common_cache::read::loader::Loader&lt;storages_common_table_meta::meta::v3::snapshot::TableSnapshot&gt;&gt;::load::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8735%" y="245" width="0.0105%" height="15" fill="rgb(229,68,14)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="255.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8735%" y="229" width="0.0105%" height="15" fill="rgb(243,106,26)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="239.50"></text></g><g><title>databend-query`&lt;storages_common_table_meta::meta::versions::SnapshotVersion as common_storages_fuse::io::read::meta::versioned_reader::VersionedReader&lt;storages_common_table_meta::meta::v3::snapshot::TableSnapshot&gt;&gt;::read::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8735%" y="213" width="0.0105%" height="15" fill="rgb(206,45,38)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="223.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8735%" y="197" width="0.0105%" height="15" fill="rgb(226,6,15)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="207.50"></text></g><g><title>databend-query`futures_util::io::read_to_end::read_to_end_internal (1 samples, 0.01%)</title><rect x="99.8735%" y="181" width="0.0105%" height="15" fill="rgb(232,22,54)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="191.50"></text></g><g><title>databend-query`&lt;dyn opendal::raw::oio::read::Read as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 0.01%)</title><rect x="99.8735%" y="165" width="0.0105%" height="15" fill="rgb(229,222,32)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="175.50"></text></g><g><title>databend-query`&lt;common_storage::metrics::StorageMetricsWrapper&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.01%)</title><rect x="99.8735%" y="149" width="0.0105%" height="15" fill="rgb(228,62,29)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="159.50"></text></g><g><title>databend-query`&lt;opendal::layers::tracing::TracingWrapper&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.01%)</title><rect x="99.8735%" y="133" width="0.0105%" height="15" fill="rgb(251,103,34)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="143.50"></text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingReader&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.01%)</title><rect x="99.8735%" y="117" width="0.0105%" height="15" fill="rgb(233,12,30)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="127.50"></text></g><g><title>databend-query`&lt;opendal::layers::metrics::MetricWrapper&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.01%)</title><rect x="99.8735%" y="101" width="0.0105%" height="15" fill="rgb(238,52,0)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="111.50"></text></g><g><title>databend-query`&lt;opendal::layers::retry::RetryWrapper&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.01%)</title><rect x="99.8735%" y="85" width="0.0105%" height="15" fill="rgb(223,98,5)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="95.50"></text></g><g><title>databend-query`&lt;common_storage::runtime_layer::RuntimeIO&lt;R&gt; as opendal::raw::oio::read::Read&gt;::poll_read (1 samples, 0.01%)</title><rect x="99.8735%" y="69" width="0.0105%" height="15" fill="rgb(228,75,37)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="79.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (1 samples, 0.01%)</title><rect x="99.8735%" y="53" width="0.0105%" height="15" fill="rgb(205,115,49)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="63.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;tokio::runtime::task::core::CoreStage&lt;common_base::runtime::runtime_tracker::TrackedFuture&lt;&lt;common_storage::runtime_layer::RuntimeIO&lt;opendal::layers::complete::CompleteReader&lt;opendal::layers::error_context::ErrorContextAccessor&lt;opendal::services::fs::backend::FsBackend&gt;,opendal::layers::error_context::ErrorContextWrapper&lt;opendal::raw::oio::into_reader::from_fd::FdReader&lt;async_compat::Compat&lt;tokio::fs::file::File&gt;&gt;&gt;&gt;&gt; as opendal::raw::oio::read::Read&gt;::poll_read::{{closure}}&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="99.8735%" y="37" width="0.0105%" height="15" fill="rgb(250,154,43)" fg:x="9477" fg:w="1"/><text x="100.1235%" y="47.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase&lt;W&gt;::do_query::_{{closure}} (32 samples, 0.34%)</title><rect x="99.5574%" y="693" width="0.3372%" height="15" fill="rgb(226,43,29)" fg:x="9447" fg:w="32"/><text x="99.8074%" y="703.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 0.34%)</title><rect x="99.5574%" y="677" width="0.3372%" height="15" fill="rgb(249,228,39)" fg:x="9447" fg:w="32"/><text x="99.8074%" y="687.50"></text></g><g><title>databend-query`common_sql::planner::planner::Planner::plan_sql::_{{closure}} (32 samples, 0.34%)</title><rect x="99.5574%" y="661" width="0.3372%" height="15" fill="rgb(216,79,43)" fg:x="9447" fg:w="32"/><text x="99.8074%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 0.34%)</title><rect x="99.5574%" y="645" width="0.3372%" height="15" fill="rgb(228,95,12)" fg:x="9447" fg:w="32"/><text x="99.8074%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 0.27%)</title><rect x="99.6206%" y="629" width="0.2740%" height="15" fill="rgb(249,221,15)" fg:x="9453" fg:w="26"/><text x="99.8706%" y="639.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (26 samples, 0.27%)</title><rect x="99.6206%" y="613" width="0.2740%" height="15" fill="rgb(233,34,13)" fg:x="9453" fg:w="26"/><text x="99.8706%" y="623.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 0.27%)</title><rect x="99.6206%" y="597" width="0.2740%" height="15" fill="rgb(214,103,39)" fg:x="9453" fg:w="26"/><text x="99.8706%" y="607.50"></text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (26 samples, 0.27%)</title><rect x="99.6206%" y="581" width="0.2740%" height="15" fill="rgb(251,126,39)" fg:x="9453" fg:w="26"/><text x="99.8706%" y="591.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="565" width="0.0211%" height="15" fill="rgb(214,216,36)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="575.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.8735%" y="549" width="0.0211%" height="15" fill="rgb(220,221,8)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="559.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="533" width="0.0211%" height="15" fill="rgb(240,216,3)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="543.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.8735%" y="517" width="0.0211%" height="15" fill="rgb(232,218,17)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="527.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="501" width="0.0211%" height="15" fill="rgb(229,163,45)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="511.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.8735%" y="485" width="0.0211%" height="15" fill="rgb(231,110,42)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="495.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="469" width="0.0211%" height="15" fill="rgb(208,170,48)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="479.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_table_reference::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="453" width="0.0211%" height="15" fill="rgb(239,116,25)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.8735%" y="437" width="0.0211%" height="15" fill="rgb(219,200,50)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="447.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_single_table::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="421" width="0.0211%" height="15" fill="rgb(245,200,0)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="431.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.8735%" y="405" width="0.0211%" height="15" fill="rgb(245,119,33)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="415.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_single_table::_{{closure}}::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="389" width="0.0211%" height="15" fill="rgb(231,125,12)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="399.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_base_table::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="373" width="0.0211%" height="15" fill="rgb(216,96,41)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="383.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.8735%" y="357" width="0.0211%" height="15" fill="rgb(248,43,45)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="367.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::fuse_table::FuseTable as common_catalog::table::Table&gt;::column_statistics_provider::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="341" width="0.0211%" height="15" fill="rgb(217,222,7)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="351.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.8735%" y="325" width="0.0211%" height="15" fill="rgb(233,28,6)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="335.50"></text></g><g><title>databend-query`common_storages_fuse::fuse_table::FuseTable::read_table_snapshot::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="309" width="0.0211%" height="15" fill="rgb(231,218,15)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="319.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.8735%" y="293" width="0.0211%" height="15" fill="rgb(226,171,48)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="303.50"></text></g><g><title>databend-query`storages_common_cache::read::cached_reader::CachedReader&lt;L,storages_common_cache::cache::NamedCache&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,common_cache::cache::lru::LruCache&lt;alloc::string::String,alloc::sync::Arc&lt;V&gt;,S,M&gt;&gt;&gt;&gt;&gt;::read::_{{closure}} (2 samples, 0.02%)</title><rect x="99.8735%" y="277" width="0.0211%" height="15" fill="rgb(235,201,9)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="287.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.8735%" y="261" width="0.0211%" height="15" fill="rgb(217,80,15)" fg:x="9477" fg:w="2"/><text x="100.1235%" y="271.50"></text></g><g><title>databend-query`&lt;storages_common_cache::cache::NamedCache&lt;C&gt; as storages_common_cache::cache::CacheAccessor&lt;K,V,S,M&gt;&gt;::get (1 samples, 0.01%)</title><rect x="99.8841%" y="245" width="0.0105%" height="15" fill="rgb(219,152,8)" fg:x="9478" fg:w="1"/><text x="100.1341%" y="255.50"></text></g><g><title>databend-query`storages_common_cache::providers::memory_cache::impls::_&lt;impl storages_common_cache::cache::CacheAccessor&lt;alloc::string::String,V,S,M&gt; for alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,C&gt;&gt;&gt;::get (1 samples, 0.01%)</title><rect x="99.8841%" y="229" width="0.0105%" height="15" fill="rgb(243,107,38)" fg:x="9478" fg:w="1"/><text x="100.1341%" y="239.50"></text></g><g><title>databend-query`ritelinked::map::hash_key (1 samples, 0.01%)</title><rect x="99.8841%" y="213" width="0.0105%" height="15" fill="rgb(231,17,5)" fg:x="9478" fg:w="1"/><text x="100.1341%" y="223.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker&lt;W&gt; as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::on_query::_{{closure}} (33 samples, 0.35%)</title><rect x="99.5574%" y="725" width="0.3478%" height="15" fill="rgb(209,25,54)" fg:x="9447" fg:w="33"/><text x="99.8074%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (33 samples, 0.35%)</title><rect x="99.5574%" y="709" width="0.3478%" height="15" fill="rgb(219,0,2)" fg:x="9447" fg:w="33"/><text x="99.8074%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8946%" y="693" width="0.0105%" height="15" fill="rgb(246,9,5)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="703.50"></text></g><g><title>databend-query`databend_query::servers::mysql::writers::query_result_writer::DFQueryResultWriter&lt;W&gt;::ok::_{{closure}} (1 samples, 0.01%)</title><rect x="99.8946%" y="677" width="0.0105%" height="15" fill="rgb(226,159,4)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.8946%" y="661" width="0.0105%" height="15" fill="rgb(219,175,34)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="671.50"></text></g><g><title>databend-query`&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.01%)</title><rect x="99.8946%" y="645" width="0.0105%" height="15" fill="rgb(236,10,46)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="655.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt; (1 samples, 0.01%)</title><rect x="99.8946%" y="629" width="0.0105%" height="15" fill="rgb(240,211,16)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="639.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::stream::progress_stream::ProgressStream&gt; (1 samples, 0.01%)</title><rect x="99.8946%" y="613" width="0.0105%" height="15" fill="rgb(205,3,43)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="623.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt; (1 samples, 0.01%)</title><rect x="99.8946%" y="597" width="0.0105%" height="15" fill="rgb(245,7,22)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="607.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::pipeline_pulling_executor::PipelinePullingExecutor&gt; (1 samples, 0.01%)</title><rect x="99.8946%" y="581" width="0.0105%" height="15" fill="rgb(239,132,32)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="591.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.01%)</title><rect x="99.8946%" y="565" width="0.0105%" height="15" fill="rgb(228,202,34)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="575.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::executor_graph::RunningGraph&gt; (1 samples, 0.01%)</title><rect x="99.8946%" y="549" width="0.0105%" height="15" fill="rgb(254,200,22)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="559.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="99.8946%" y="533" width="0.0105%" height="15" fill="rgb(219,10,39)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="543.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.01%)</title><rect x="99.8946%" y="517" width="0.0105%" height="15" fill="rgb(226,210,39)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="527.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.01%)</title><rect x="99.8946%" y="501" width="0.0105%" height="15" fill="rgb(208,219,16)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.01%)</title><rect x="99.8946%" y="485" width="0.0105%" height="15" fill="rgb(216,158,51)" fg:x="9479" fg:w="1"/><text x="100.1446%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.9052%" y="725" width="0.0105%" height="15" fill="rgb(233,14,44)" fg:x="9480" fg:w="1"/><text x="100.1552%" y="735.50"></text></g><g><title>databend-query`opensrv_mysql::AsyncMysqlIntermediary&lt;B,R,W&gt;::run_with_options::_{{closure}} (39 samples, 0.41%)</title><rect x="99.5152%" y="741" width="0.4110%" height="15" fill="rgb(237,97,39)" fg:x="9443" fg:w="39"/><text x="99.7652%" y="751.50"></text></g><g><title>databend-query`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.01%)</title><rect x="99.9157%" y="725" width="0.0105%" height="15" fill="rgb(218,198,43)" fg:x="9481" fg:w="1"/><text x="100.1657%" y="735.50"></text></g><g><title>databend-query`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 0.01%)</title><rect x="99.9157%" y="709" width="0.0105%" height="15" fill="rgb(231,104,20)" fg:x="9481" fg:w="1"/><text x="100.1657%" y="719.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1 samples, 0.01%)</title><rect x="99.9157%" y="693" width="0.0105%" height="15" fill="rgb(254,36,13)" fg:x="9481" fg:w="1"/><text x="100.1657%" y="703.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.9262%" y="741" width="0.0105%" height="15" fill="rgb(248,14,50)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="751.50"></text></g><g><title>databend-query`storages_common_cache::read::cached_reader::CachedReader&lt;L,storages_common_cache::cache::NamedCache&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,common_cache::cache::lru::LruCache&lt;alloc::string::String,alloc::sync::Arc&lt;V&gt;,S,M&gt;&gt;&gt;&gt;&gt;::read::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9262%" y="725" width="0.0105%" height="15" fill="rgb(217,107,29)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.9262%" y="709" width="0.0105%" height="15" fill="rgb(251,169,33)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="719.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::io::read::meta::meta_readers::LoaderWrapper&lt;(opendal::types::operator::operator::Operator,alloc::sync::Arc&lt;common_expression::schema::TableSchema&gt;)&gt; as storages_common_cache::read::loader::Loader&lt;storages_common_table_meta::meta::v3::segment::CompactSegmentInfo&gt;&gt;::load::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9262%" y="693" width="0.0105%" height="15" fill="rgb(217,108,32)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="703.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.9262%" y="677" width="0.0105%" height="15" fill="rgb(219,66,42)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="687.50"></text></g><g><title>databend-query`common_storages_fuse::io::read::meta::meta_readers::bytes_reader::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9262%" y="661" width="0.0105%" height="15" fill="rgb(206,180,7)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="671.50"></text></g><g><title>databend-query`opendal::types::operator::operator::Operator::reader_with::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9262%" y="645" width="0.0105%" height="15" fill="rgb(208,226,31)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="655.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9262%" y="629" width="0.0105%" height="15" fill="rgb(218,26,49)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="639.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9262%" y="613" width="0.0105%" height="15" fill="rgb(233,197,48)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="623.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;common_storage::metrics::StorageMetricsAccessor&lt;alloc::sync::Arc&lt;dyn opendal::raw::accessor::Accessor+Pager = alloc::boxed::Box&lt;dyn opendal::raw::oio::page::Page&gt;+BlockingReader = alloc::boxed::Box&lt;dyn opendal::raw::oio::read::BlockingRead&gt;+Reader = alloc::boxed::Box&lt;dyn opendal::raw::oio::read::Read&gt;+Writer = alloc::boxed::Box&lt;dyn opendal::raw::oio::write::Write&gt;+BlockingWriter = alloc::boxed::Box&lt;dyn opendal::raw::oio::write::BlockingWrite&gt;+BlockingPager = alloc::boxed::Box&lt;dyn opendal::raw::oio::page::BlockingPage&gt;&gt;&gt;&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="99.9262%" y="597" width="0.0105%" height="15" fill="rgb(252,181,51)" fg:x="9482" fg:w="1"/><text x="100.1762%" y="607.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (64 samples, 0.67%)</title><rect x="99.2728%" y="885" width="0.6745%" height="15" fill="rgb(253,90,19)" fg:x="9420" fg:w="64"/><text x="99.5228%" y="895.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (64 samples, 0.67%)</title><rect x="99.2728%" y="869" width="0.6745%" height="15" fill="rgb(215,171,30)" fg:x="9420" fg:w="64"/><text x="99.5228%" y="879.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (64 samples, 0.67%)</title><rect x="99.2728%" y="853" width="0.6745%" height="15" fill="rgb(214,222,9)" fg:x="9420" fg:w="64"/><text x="99.5228%" y="863.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::poll_future (64 samples, 0.67%)</title><rect x="99.2728%" y="837" width="0.6745%" height="15" fill="rgb(223,3,22)" fg:x="9420" fg:w="64"/><text x="99.5228%" y="847.50"></text></g><g><title>databend-query`std::panicking::try (52 samples, 0.55%)</title><rect x="99.3993%" y="821" width="0.5480%" height="15" fill="rgb(225,196,46)" fg:x="9432" fg:w="52"/><text x="99.6493%" y="831.50"></text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (52 samples, 0.55%)</title><rect x="99.3993%" y="805" width="0.5480%" height="15" fill="rgb(209,110,37)" fg:x="9432" fg:w="52"/><text x="99.6493%" y="815.50"></text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (52 samples, 0.55%)</title><rect x="99.3993%" y="789" width="0.5480%" height="15" fill="rgb(249,89,12)" fg:x="9432" fg:w="52"/><text x="99.6493%" y="799.50"></text></g><g><title>databend-query`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (52 samples, 0.55%)</title><rect x="99.3993%" y="773" width="0.5480%" height="15" fill="rgb(226,27,33)" fg:x="9432" fg:w="52"/><text x="99.6493%" y="783.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (51 samples, 0.54%)</title><rect x="99.4098%" y="757" width="0.5375%" height="15" fill="rgb(213,82,22)" fg:x="9433" fg:w="51"/><text x="99.6598%" y="767.50"></text></g><g><title>databend-query`tonic::transport::server::incoming::TcpIncoming::new (1 samples, 0.01%)</title><rect x="99.9368%" y="741" width="0.0105%" height="15" fill="rgb(248,140,0)" fg:x="9483" fg:w="1"/><text x="100.1868%" y="751.50"></text></g><g><title>databend-query`hyper::server::tcp::AddrIncoming::new (1 samples, 0.01%)</title><rect x="99.9368%" y="725" width="0.0105%" height="15" fill="rgb(228,106,3)" fg:x="9483" fg:w="1"/><text x="100.1868%" y="735.50"></text></g><g><title>databend-query`std::net::each_addr (1 samples, 0.01%)</title><rect x="99.9368%" y="709" width="0.0105%" height="15" fill="rgb(209,23,37)" fg:x="9483" fg:w="1"/><text x="100.1868%" y="719.50"></text></g><g><title>databend-query`std::sys_common::net::TcpListener::bind (1 samples, 0.01%)</title><rect x="99.9368%" y="693" width="0.0105%" height="15" fill="rgb(241,93,50)" fg:x="9483" fg:w="1"/><text x="100.1868%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`socket (1 samples, 0.01%)</title><rect x="99.9368%" y="677" width="0.0105%" height="15" fill="rgb(253,46,43)" fg:x="9483" fg:w="1"/><text x="100.1868%" y="687.50"></text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (70 samples, 0.74%)</title><rect x="99.2201%" y="997" width="0.7377%" height="15" fill="rgb(226,206,43)" fg:x="9415" fg:w="70"/><text x="99.4701%" y="1007.50"></text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (70 samples, 0.74%)</title><rect x="99.2201%" y="981" width="0.7377%" height="15" fill="rgb(217,54,7)" fg:x="9415" fg:w="70"/><text x="99.4701%" y="991.50"></text></g><g><title>databend-query`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (70 samples, 0.74%)</title><rect x="99.2201%" y="965" width="0.7377%" height="15" fill="rgb(223,5,52)" fg:x="9415" fg:w="70"/><text x="99.4701%" y="975.50"></text></g><g><title>databend-query`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (70 samples, 0.74%)</title><rect x="99.2201%" y="949" width="0.7377%" height="15" fill="rgb(206,52,46)" fg:x="9415" fg:w="70"/><text x="99.4701%" y="959.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::run (70 samples, 0.74%)</title><rect x="99.2201%" y="933" width="0.7377%" height="15" fill="rgb(253,136,11)" fg:x="9415" fg:w="70"/><text x="99.4701%" y="943.50"></text></g><g><title>databend-query`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (70 samples, 0.74%)</title><rect x="99.2201%" y="917" width="0.7377%" height="15" fill="rgb(208,106,33)" fg:x="9415" fg:w="70"/><text x="99.4701%" y="927.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::run (70 samples, 0.74%)</title><rect x="99.2201%" y="901" width="0.7377%" height="15" fill="rgb(206,54,4)" fg:x="9415" fg:w="70"/><text x="99.4701%" y="911.50"></text></g><g><title>databend-query`tokio::runtime::task::inject::Inject&lt;T&gt;::pop (1 samples, 0.01%)</title><rect x="99.9473%" y="885" width="0.0105%" height="15" fill="rgb(213,3,15)" fg:x="9484" fg:w="1"/><text x="100.1973%" y="895.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Inner::run (71 samples, 0.75%)</title><rect x="99.2201%" y="1077" width="0.7482%" height="15" fill="rgb(252,211,39)" fg:x="9415" fg:w="71"/><text x="99.4701%" y="1087.50"></text></g><g><title>databend-query`tokio::runtime::task::UnownedTask&lt;S&gt;::run (71 samples, 0.75%)</title><rect x="99.2201%" y="1061" width="0.7482%" height="15" fill="rgb(223,6,36)" fg:x="9415" fg:w="71"/><text x="99.4701%" y="1071.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (71 samples, 0.75%)</title><rect x="99.2201%" y="1045" width="0.7482%" height="15" fill="rgb(252,169,45)" fg:x="9415" fg:w="71"/><text x="99.4701%" y="1055.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (71 samples, 0.75%)</title><rect x="99.2201%" y="1029" width="0.7482%" height="15" fill="rgb(212,48,26)" fg:x="9415" fg:w="71"/><text x="99.4701%" y="1039.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::poll_future (71 samples, 0.75%)</title><rect x="99.2201%" y="1013" width="0.7482%" height="15" fill="rgb(251,102,48)" fg:x="9415" fg:w="71"/><text x="99.4701%" y="1023.50"></text></g><g><title>databend-query`std::panicking::try (1 samples, 0.01%)</title><rect x="99.9578%" y="997" width="0.0105%" height="15" fill="rgb(243,208,16)" fg:x="9485" fg:w="1"/><text x="100.2078%" y="1007.50"></text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="99.9578%" y="981" width="0.0105%" height="15" fill="rgb(219,96,24)" fg:x="9485" fg:w="1"/><text x="100.2078%" y="991.50"></text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.01%)</title><rect x="99.9578%" y="965" width="0.0105%" height="15" fill="rgb(219,33,29)" fg:x="9485" fg:w="1"/><text x="100.2078%" y="975.50"></text></g><g><title>databend-query`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.01%)</title><rect x="99.9578%" y="949" width="0.0105%" height="15" fill="rgb(223,176,5)" fg:x="9485" fg:w="1"/><text x="100.2078%" y="959.50"></text></g><g><title>databend-query`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.9578%" y="933" width="0.0105%" height="15" fill="rgb(228,140,14)" fg:x="9485" fg:w="1"/><text x="100.2078%" y="943.50"></text></g><g><title>databend-query`std::fs::OpenOptions::open (1 samples, 0.01%)</title><rect x="99.9578%" y="917" width="0.0105%" height="15" fill="rgb(217,179,31)" fg:x="9485" fg:w="1"/><text x="100.2078%" y="927.50"></text></g><g><title>databend-query`std::fs::OpenOptions::_open (1 samples, 0.01%)</title><rect x="99.9578%" y="901" width="0.0105%" height="15" fill="rgb(230,9,30)" fg:x="9485" fg:w="1"/><text x="100.2078%" y="911.50"></text></g><g><title>databend-query`std::sys::unix::fs::File::open_c (1 samples, 0.01%)</title><rect x="99.9578%" y="885" width="0.0105%" height="15" fill="rgb(230,136,20)" fg:x="9485" fg:w="1"/><text x="100.2078%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.01%)</title><rect x="99.9578%" y="869" width="0.0105%" height="15" fill="rgb(215,210,22)" fg:x="9485" fg:w="1"/><text x="100.2078%" y="879.50"></text></g><g><title>databend-query`crossbeam_channel::channel::Receiver&lt;T&gt;::recv (1 samples, 0.01%)</title><rect x="99.9684%" y="1061" width="0.0105%" height="15" fill="rgb(218,43,5)" fg:x="9486" fg:w="1"/><text x="100.2184%" y="1071.50"></text></g><g><title>databend-query`crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (1 samples, 0.01%)</title><rect x="99.9684%" y="1045" width="0.0105%" height="15" fill="rgb(216,11,5)" fg:x="9486" fg:w="1"/><text x="100.2184%" y="1055.50"></text></g><g><title>databend-query`crossbeam_channel::context::Context::with::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9684%" y="1029" width="0.0105%" height="15" fill="rgb(209,82,29)" fg:x="9486" fg:w="1"/><text x="100.2184%" y="1039.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.01%)</title><rect x="99.9684%" y="1013" width="0.0105%" height="15" fill="rgb(244,115,12)" fg:x="9486" fg:w="1"/><text x="100.2184%" y="1023.50"></text></g><g><title>all (9,489 samples, 100%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(222,82,18)" fg:x="0" fg:w="9489"/><text x="0.2500%" y="1199.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (9,374 samples, 98.79%)</title><rect x="1.2119%" y="1173" width="98.7881%" height="15" fill="rgb(249,227,8)" fg:x="115" fg:w="9374"/><text x="1.4619%" y="1183.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (9,374 samples, 98.79%)</title><rect x="1.2119%" y="1157" width="98.7881%" height="15" fill="rgb(253,141,45)" fg:x="115" fg:w="9374"/><text x="1.4619%" y="1167.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>databend-query`std::sys::unix::thread::Thread::new::thread_start (9,374 samples, 98.79%)</title><rect x="1.2119%" y="1141" width="98.7881%" height="15" fill="rgb(234,184,4)" fg:x="115" fg:w="9374"/><text x="1.4619%" y="1151.50">databend-query`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>databend-query`core::ops::function::FnOnce::call_once{{vtable.shim}} (9,374 samples, 98.79%)</title><rect x="1.2119%" y="1125" width="98.7881%" height="15" fill="rgb(218,194,23)" fg:x="115" fg:w="9374"/><text x="1.4619%" y="1135.50">databend-query`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>databend-query`std::panicking::try (9,374 samples, 98.79%)</title><rect x="1.2119%" y="1109" width="98.7881%" height="15" fill="rgb(235,66,41)" fg:x="115" fg:w="9374"/><text x="1.4619%" y="1119.50">databend-query`std::panicking::try</text></g><g><title>databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace (9,374 samples, 98.79%)</title><rect x="1.2119%" y="1093" width="98.7881%" height="15" fill="rgb(245,217,1)" fg:x="115" fg:w="9374"/><text x="1.4619%" y="1103.50">databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>databend-query`tracing_appender::worker::Worker&lt;T&gt;::work (3 samples, 0.03%)</title><rect x="99.9684%" y="1077" width="0.0316%" height="15" fill="rgb(229,91,1)" fg:x="9486" fg:w="3"/><text x="100.2184%" y="1087.50"></text></g><g><title>databend-query`std::io::Write::write_all (2 samples, 0.02%)</title><rect x="99.9789%" y="1061" width="0.0211%" height="15" fill="rgb(207,101,30)" fg:x="9487" fg:w="2"/><text x="100.2289%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.02%)</title><rect x="99.9789%" y="1045" width="0.0211%" height="15" fill="rgb(223,82,49)" fg:x="9487" fg:w="2"/><text x="100.2289%" y="1055.50"></text></g></svg></svg>