<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1238" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1221.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1221.00"> </text><svg id="frames" x="10" width="1180" total_samples="222"><g><title>databend-query`common_base::runtime::runtime::Runtime::with_default_worker_threads (1 samples, 0.45%)</title><rect x="0.0000%" y="1061" width="0.4505%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1071.50"></text></g><g><title>databend-query`common_base::runtime::runtime::Runtime::create (1 samples, 0.45%)</title><rect x="0.0000%" y="1045" width="0.4505%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1055.50"></text></g><g><title>databend-query`tokio::runtime::builder::Builder::build (1 samples, 0.45%)</title><rect x="0.0000%" y="1029" width="0.4505%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1039.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::MultiThread::new (1 samples, 0.45%)</title><rect x="0.0000%" y="1013" width="0.4505%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1023.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::create (1 samples, 0.45%)</title><rect x="0.0000%" y="997" width="0.4505%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.45%)</title><rect x="0.0000%" y="981" width="0.4505%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.45%)</title><rect x="0.0000%" y="965" width="0.4505%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>databend-query`clap_builder::derive::Parser::parse (1 samples, 0.45%)</title><rect x="0.4505%" y="933" width="0.4505%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.7005%" y="943.50"></text></g><g><title>databend-query`&lt;common_config::config::Config as clap_builder::derive::Args&gt;::augment_args (1 samples, 0.45%)</title><rect x="0.4505%" y="917" width="0.4505%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.7005%" y="927.50"></text></g><g><title>databend-query`&lt;common_config::config::StorageConfig as clap_builder::derive::Args&gt;::augment_args (1 samples, 0.45%)</title><rect x="0.4505%" y="901" width="0.4505%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.7005%" y="911.50"></text></g><g><title>databend-query`&lt;common_config::config::CosStorageConfig as clap_builder::derive::Args&gt;::augment_args (1 samples, 0.45%)</title><rect x="0.4505%" y="885" width="0.4505%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.7005%" y="895.50"></text></g><g><title>databend-query`common_config::config::Config::load (2 samples, 0.90%)</title><rect x="0.4505%" y="949" width="0.9009%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="2"/><text x="0.7005%" y="959.50"></text></g><g><title>databend-query`serfig::builder::Builder&lt;V&gt;::build (1 samples, 0.45%)</title><rect x="0.9009%" y="933" width="0.4505%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="1.1509%" y="943.50"></text></g><g><title>databend-query`serfig::builder::Builder&lt;V&gt;::build_with (1 samples, 0.45%)</title><rect x="0.9009%" y="917" width="0.4505%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="1.1509%" y="927.50"></text></g><g><title>databend-query`&lt;serfig::collectors::structural::Structural&lt;V,R,P&gt; as serfig::collectors::collector::Collector&lt;V&gt;&gt;::collect (1 samples, 0.45%)</title><rect x="0.9009%" y="901" width="0.4505%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="1.1509%" y="911.50"></text></g><g><title>databend-query`&lt;serfig::parsers::toml::Toml as serfig::parsers::parser::Parser&gt;::parse (1 samples, 0.45%)</title><rect x="0.9009%" y="885" width="0.4505%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="1.1509%" y="895.50"></text></g><g><title>databend-query`&lt;toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.45%)</title><rect x="0.9009%" y="869" width="0.4505%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="1.1509%" y="879.50"></text></g><g><title>databend-query`&lt;toml_edit::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.45%)</title><rect x="0.9009%" y="853" width="0.4505%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="1.1509%" y="863.50"></text></g><g><title>databend-query`&lt;toml_edit::de::value::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.45%)</title><rect x="0.9009%" y="837" width="0.4505%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="1.1509%" y="847.50"></text></g><g><title>databend-query`&lt;toml_edit::de::value::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.45%)</title><rect x="0.9009%" y="821" width="0.4505%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="1.1509%" y="831.50"></text></g><g><title>databend-query`&lt;toml_edit::de::table::TableDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.45%)</title><rect x="0.9009%" y="805" width="0.4505%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="1.1509%" y="815.50"></text></g><g><title>databend-query`&lt;toml_edit::de::table::TableMapAccess as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.45%)</title><rect x="0.9009%" y="789" width="0.4505%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="1.1509%" y="799.50"></text></g><g><title>databend-query`&lt;toml_edit::de::value::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.45%)</title><rect x="0.9009%" y="773" width="0.4505%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="1.1509%" y="783.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.45%)</title><rect x="0.9009%" y="757" width="0.4505%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="1.1509%" y="767.50"></text></g><g><title>databend-query`&lt;databend_query::api::http_service::HttpService as databend_query::servers::server::Server&gt;::start::_{{closure}} (1 samples, 0.45%)</title><rect x="1.3514%" y="933" width="0.4505%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="1.6014%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="1.3514%" y="917" width="0.4505%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="1.6014%" y="927.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="1.3514%" y="901" width="0.4505%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="1.6014%" y="911.50"></text></g><g><title>databend-query`databend_query::api::http_service::HttpService::build_router (1 samples, 0.45%)</title><rect x="1.3514%" y="885" width="0.4505%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="1.6014%" y="895.50"></text></g><g><title>databend-query`poem::route::router::Route::try_at (1 samples, 0.45%)</title><rect x="1.3514%" y="869" width="0.4505%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="1.6014%" y="879.50"></text></g><g><title>databend-query`poem::route::router::normalize_path (1 samples, 0.45%)</title><rect x="1.3514%" y="853" width="0.4505%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1"/><text x="1.6014%" y="863.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.45%)</title><rect x="1.3514%" y="837" width="0.4505%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="1.6014%" y="847.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.45%)</title><rect x="1.3514%" y="821" width="0.4505%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="1.6014%" y="831.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.45%)</title><rect x="1.3514%" y="805" width="0.4505%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="1.6014%" y="815.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::pikevm::ActiveStates&gt; (1 samples, 0.45%)</title><rect x="1.3514%" y="789" width="0.4505%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="1.6014%" y="799.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.45%)</title><rect x="1.3514%" y="773" width="0.4505%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="1.6014%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.45%)</title><rect x="1.3514%" y="757" width="0.4505%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="1.6014%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.45%)</title><rect x="1.3514%" y="741" width="0.4505%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="1.6014%" y="751.50"></text></g><g><title>databend-query`&lt;databend_query::servers::http::http_services::HttpHandler as databend_query::servers::server::Server&gt;::start::_{{closure}} (1 samples, 0.45%)</title><rect x="1.8018%" y="933" width="0.4505%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="2.0518%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="1.8018%" y="917" width="0.4505%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="2.0518%" y="927.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="1.8018%" y="901" width="0.4505%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="2.0518%" y="911.50"></text></g><g><title>databend-query`databend_query::servers::http::http_services::HttpHandler::build_router::_{{closure}} (1 samples, 0.45%)</title><rect x="1.8018%" y="885" width="0.4505%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1"/><text x="2.0518%" y="895.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="1.8018%" y="869" width="0.4505%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1"/><text x="2.0518%" y="879.50"></text></g><g><title>databend-query`databend_query::servers::http::v1::http_query_handlers::query_route (1 samples, 0.45%)</title><rect x="1.8018%" y="853" width="0.4505%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="1"/><text x="2.0518%" y="863.50"></text></g><g><title>databend-query`poem::route::router::Route::try_at (1 samples, 0.45%)</title><rect x="1.8018%" y="837" width="0.4505%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="1"/><text x="2.0518%" y="847.50"></text></g><g><title>databend-query`poem::route::router::normalize_path (1 samples, 0.45%)</title><rect x="1.8018%" y="821" width="0.4505%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1"/><text x="2.0518%" y="831.50"></text></g><g><title>databend-query`&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.45%)</title><rect x="1.8018%" y="805" width="0.4505%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="1"/><text x="2.0518%" y="815.50"></text></g><g><title>databend-query`databend_query::entry::start_services::_{{closure}} (3 samples, 1.35%)</title><rect x="1.3514%" y="949" width="1.3514%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="3"/><text x="1.6014%" y="959.50"></text></g><g><title>databend-query`databend_query::clusters::cluster::ClusterDiscovery::register_to_metastore::_{{closure}} (1 samples, 0.45%)</title><rect x="2.2523%" y="933" width="0.4505%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1"/><text x="2.5023%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="2.2523%" y="917" width="0.4505%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="2.5023%" y="927.50"></text></g><g><title>databend-query`reqwest::proxy::Proxy::system (1 samples, 0.45%)</title><rect x="2.7027%" y="837" width="0.4505%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="2.9527%" y="847.50"></text></g><g><title>databend-query`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.45%)</title><rect x="2.7027%" y="821" width="0.4505%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="2.9527%" y="831.50"></text></g><g><title>databend-query`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.45%)</title><rect x="2.7027%" y="805" width="0.4505%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="1"/><text x="2.9527%" y="815.50"></text></g><g><title>Security`SecTrustCreateWithCertificates (1 samples, 0.45%)</title><rect x="3.1532%" y="789" width="0.4505%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="1"/><text x="3.4032%" y="799.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_create_with_target (1 samples, 0.45%)</title><rect x="3.1532%" y="773" width="0.4505%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="1"/><text x="3.4032%" y="783.50"></text></g><g><title>libdispatch.dylib`_dispatch_strdup_if_mutable (1 samples, 0.45%)</title><rect x="3.1532%" y="757" width="0.4505%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="1"/><text x="3.4032%" y="767.50"></text></g><g><title>dyld`dyld4::APIs::_dyld_is_memory_immutable (1 samples, 0.45%)</title><rect x="3.1532%" y="741" width="0.4505%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="1"/><text x="3.4032%" y="751.50"></text></g><g><title>dyld`invocation function for block in dyld4::APIs::_dyld_is_memory_immutable (1 samples, 0.45%)</title><rect x="3.1532%" y="725" width="0.4505%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="1"/><text x="3.4032%" y="735.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke_2 (1 samples, 0.45%)</title><rect x="3.6036%" y="629" width="0.4505%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="1"/><text x="3.8536%" y="639.50"></text></g><g><title>Security`SecXPCDictionaryCopyChainOptional (1 samples, 0.45%)</title><rect x="3.6036%" y="613" width="0.4505%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="1"/><text x="3.8536%" y="623.50"></text></g><g><title>Security`SecCertificateCreateWithXPCArrayAtIndex (1 samples, 0.45%)</title><rect x="3.6036%" y="597" width="0.4505%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="1"/><text x="3.8536%" y="607.50"></text></g><g><title>Security`SecCertificateCreateWithBytes (1 samples, 0.45%)</title><rect x="3.6036%" y="581" width="0.4505%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="1"/><text x="3.8536%" y="591.50"></text></g><g><title>Security`SecCertificateParse (1 samples, 0.45%)</title><rect x="3.6036%" y="565" width="0.4505%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="1"/><text x="3.8536%" y="575.50"></text></g><g><title>Security`createNormalizedX501Name (1 samples, 0.45%)</title><rect x="3.6036%" y="549" width="0.4505%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="1"/><text x="3.8536%" y="559.50"></text></g><g><title>CoreFoundation`__CFDataInit (1 samples, 0.45%)</title><rect x="3.6036%" y="533" width="0.4505%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="1"/><text x="3.8536%" y="543.50"></text></g><g><title>dyld`dyld4::APIs::dyld_program_sdk_at_least (1 samples, 0.45%)</title><rect x="3.6036%" y="517" width="0.4505%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="1"/><text x="3.8536%" y="527.50"></text></g><g><title>Security`securityd_message_with_reply_sync (1 samples, 0.45%)</title><rect x="4.0541%" y="629" width="0.4505%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="1"/><text x="4.3041%" y="639.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (1 samples, 0.45%)</title><rect x="4.0541%" y="613" width="0.4505%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="1"/><text x="4.3041%" y="623.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_send_with_result_and_wait_for_reply (1 samples, 0.45%)</title><rect x="4.0541%" y="597" width="0.4505%" height="15" fill="rgb(213,79,30)" fg:x="9" fg:w="1"/><text x="4.3041%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_and_wait_for_reply (1 samples, 0.45%)</title><rect x="4.0541%" y="581" width="0.4505%" height="15" fill="rgb(246,177,23)" fg:x="9" fg:w="1"/><text x="4.3041%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_msg (1 samples, 0.45%)</title><rect x="4.0541%" y="565" width="0.4505%" height="15" fill="rgb(230,62,27)" fg:x="9" fg:w="1"/><text x="4.3041%" y="575.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_drain (1 samples, 0.45%)</title><rect x="4.0541%" y="549" width="0.4505%" height="15" fill="rgb(216,154,8)" fg:x="9" fg:w="1"/><text x="4.3041%" y="559.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_send (1 samples, 0.45%)</title><rect x="4.0541%" y="533" width="0.4505%" height="15" fill="rgb(244,35,45)" fg:x="9" fg:w="1"/><text x="4.3041%" y="543.50"></text></g><g><title>libdispatch.dylib`_voucher_get_mach_voucher (1 samples, 0.45%)</title><rect x="4.0541%" y="517" width="0.4505%" height="15" fill="rgb(251,115,12)" fg:x="9" fg:w="1"/><text x="4.3041%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`host_create_mach_voucher_trap (1 samples, 0.45%)</title><rect x="4.0541%" y="501" width="0.4505%" height="15" fill="rgb(240,54,50)" fg:x="9" fg:w="1"/><text x="4.3041%" y="511.50"></text></g><g><title>Security`SecTrustEvaluateInternal (3 samples, 1.35%)</title><rect x="3.6036%" y="789" width="1.3514%" height="15" fill="rgb(233,84,52)" fg:x="8" fg:w="3"/><text x="3.8536%" y="799.50"></text></g><g><title>Security`SecTrustEvaluateIfNecessary (3 samples, 1.35%)</title><rect x="3.6036%" y="773" width="1.3514%" height="15" fill="rgb(207,117,47)" fg:x="8" fg:w="3"/><text x="3.8536%" y="783.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (3 samples, 1.35%)</title><rect x="3.6036%" y="757" width="1.3514%" height="15" fill="rgb(249,43,39)" fg:x="8" fg:w="3"/><text x="3.8536%" y="767.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (3 samples, 1.35%)</title><rect x="3.6036%" y="741" width="1.3514%" height="15" fill="rgb(209,38,44)" fg:x="8" fg:w="3"/><text x="3.8536%" y="751.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke (3 samples, 1.35%)</title><rect x="3.6036%" y="725" width="1.3514%" height="15" fill="rgb(236,212,23)" fg:x="8" fg:w="3"/><text x="3.8536%" y="735.50"></text></g><g><title>libsystem_trace.dylib`_os_activity_initiate_impl (3 samples, 1.35%)</title><rect x="3.6036%" y="709" width="1.3514%" height="15" fill="rgb(242,79,21)" fg:x="8" fg:w="3"/><text x="3.8536%" y="719.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_2 (3 samples, 1.35%)</title><rect x="3.6036%" y="693" width="1.3514%" height="15" fill="rgb(211,96,35)" fg:x="8" fg:w="3"/><text x="3.8536%" y="703.50"></text></g><g><title>Security`SecOSStatusWith (3 samples, 1.35%)</title><rect x="3.6036%" y="677" width="1.3514%" height="15" fill="rgb(253,215,40)" fg:x="8" fg:w="3"/><text x="3.8536%" y="687.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_3 (3 samples, 1.35%)</title><rect x="3.6036%" y="661" width="1.3514%" height="15" fill="rgb(211,81,21)" fg:x="8" fg:w="3"/><text x="3.8536%" y="671.50"></text></g><g><title>Security`securityd_send_sync_and_do (3 samples, 1.35%)</title><rect x="3.6036%" y="645" width="1.3514%" height="15" fill="rgb(208,190,38)" fg:x="8" fg:w="3"/><text x="3.8536%" y="655.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (1 samples, 0.45%)</title><rect x="4.5045%" y="629" width="0.4505%" height="15" fill="rgb(235,213,38)" fg:x="10" fg:w="1"/><text x="4.7545%" y="639.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_dispose (1 samples, 0.45%)</title><rect x="4.5045%" y="613" width="0.4505%" height="15" fill="rgb(237,122,38)" fg:x="10" fg:w="1"/><text x="4.7545%" y="623.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_node_free (1 samples, 0.45%)</title><rect x="4.5045%" y="597" width="0.4505%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="1"/><text x="4.7545%" y="607.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (1 samples, 0.45%)</title><rect x="4.5045%" y="581" width="0.4505%" height="15" fill="rgb(240,68,47)" fg:x="10" fg:w="1"/><text x="4.7545%" y="591.50"></text></g><g><title>libxpc.dylib`_xpc_array_dispose (1 samples, 0.45%)</title><rect x="4.5045%" y="565" width="0.4505%" height="15" fill="rgb(210,16,53)" fg:x="10" fg:w="1"/><text x="4.7545%" y="575.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (1 samples, 0.45%)</title><rect x="4.5045%" y="549" width="0.4505%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="1"/><text x="4.7545%" y="559.50"></text></g><g><title>libxpc.dylib`_xpc_array_dispose (1 samples, 0.45%)</title><rect x="4.5045%" y="533" width="0.4505%" height="15" fill="rgb(224,169,11)" fg:x="10" fg:w="1"/><text x="4.7545%" y="543.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (1 samples, 0.45%)</title><rect x="4.5045%" y="517" width="0.4505%" height="15" fill="rgb(250,166,2)" fg:x="10" fg:w="1"/><text x="4.7545%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.45%)</title><rect x="4.5045%" y="501" width="0.4505%" height="15" fill="rgb(242,216,29)" fg:x="10" fg:w="1"/><text x="4.7545%" y="511.50"></text></g><g><title>Security`Security::DLDbListCFPref::searchList (1 samples, 0.45%)</title><rect x="4.9550%" y="773" width="0.4505%" height="15" fill="rgb(230,116,27)" fg:x="11" fg:w="1"/><text x="5.2050%" y="783.50"></text></g><g><title>Security`void std::__1::vector&lt;Security::DLDbIdentifier, std::__1::allocator&lt;Security::DLDbIdentifier&gt; &gt;::__push_back_slow_path&lt;Security::DLDbIdentifier const&amp;&gt; (1 samples, 0.45%)</title><rect x="4.9550%" y="757" width="0.4505%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="1"/><text x="5.2050%" y="767.50"></text></g><g><title>Security`std::__1::__split_buffer&lt;Security::DLDbIdentifier, std::__1::allocator&lt;Security::DLDbIdentifier&gt;&amp;&gt;::__split_buffer(unsigned long, unsigned long, std::__1::allocator (1 samples, 0.45%)</title><rect x="4.9550%" y="741" width="0.4505%" height="15" fill="rgb(253,11,6)" fg:x="11" fg:w="1"/><text x="5.2050%" y="751.50"></text></g><g><title>Security`Security::MDSAttrParser::parseAttrs (1 samples, 0.45%)</title><rect x="5.4054%" y="629" width="0.4505%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="1"/><text x="5.6554%" y="639.50"></text></g><g><title>CoreFoundation`CFBundleCopyResourceURLsOfType (1 samples, 0.45%)</title><rect x="5.4054%" y="613" width="0.4505%" height="15" fill="rgb(236,97,10)" fg:x="12" fg:w="1"/><text x="5.6554%" y="623.50"></text></g><g><title>CoreFoundation`_CFBundleCopyFindResources (1 samples, 0.45%)</title><rect x="5.4054%" y="597" width="0.4505%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="1"/><text x="5.6554%" y="607.50"></text></g><g><title>CoreFoundation`_copyResourceURLsFromBundle (1 samples, 0.45%)</title><rect x="5.4054%" y="581" width="0.4505%" height="15" fill="rgb(216,164,2)" fg:x="12" fg:w="1"/><text x="5.6554%" y="591.50"></text></g><g><title>CoreFoundation`_copyQueryTable (1 samples, 0.45%)</title><rect x="5.4054%" y="565" width="0.4505%" height="15" fill="rgb(220,129,5)" fg:x="12" fg:w="1"/><text x="5.6554%" y="575.50"></text></g><g><title>CoreFoundation`_CFBundleCopyLanguageSearchListInBundle (1 samples, 0.45%)</title><rect x="5.4054%" y="549" width="0.4505%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="1"/><text x="5.6554%" y="559.50"></text></g><g><title>CoreFoundation`_CFBundleCopyPreferredLanguagesInList (1 samples, 0.45%)</title><rect x="5.4054%" y="533" width="0.4505%" height="15" fill="rgb(242,107,0)" fg:x="12" fg:w="1"/><text x="5.6554%" y="543.50"></text></g><g><title>CoreFoundation`_CFBundleCreateMutableArrayOfFallbackLanguages (1 samples, 0.45%)</title><rect x="5.4054%" y="517" width="0.4505%" height="15" fill="rgb(251,28,31)" fg:x="12" fg:w="1"/><text x="5.6554%" y="527.50"></text></g><g><title>libicucore.A.dylib`ualoc_localizationsToUse (1 samples, 0.45%)</title><rect x="5.4054%" y="501" width="0.4505%" height="15" fill="rgb(233,223,10)" fg:x="12" fg:w="1"/><text x="5.6554%" y="511.50"></text></g><g><title>libicucore.A.dylib`0x000000019a2c9b88 (1 samples, 0.45%)</title><rect x="5.4054%" y="485" width="0.4505%" height="15" fill="rgb(215,21,27)" fg:x="12" fg:w="1"/><text x="5.6554%" y="495.50"></text></g><g><title>libicucore.A.dylib`0x000000019a32e9e0 (1 samples, 0.45%)</title><rect x="5.4054%" y="469" width="0.4505%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="1"/><text x="5.6554%" y="479.50"></text></g><g><title>libicucore.A.dylib`0x000000019a331568 (1 samples, 0.45%)</title><rect x="5.4054%" y="453" width="0.4505%" height="15" fill="rgb(244,5,23)" fg:x="12" fg:w="1"/><text x="5.6554%" y="463.50"></text></g><g><title>libicucore.A.dylib`0x000000019a3320b4 (1 samples, 0.45%)</title><rect x="5.4054%" y="437" width="0.4505%" height="15" fill="rgb(226,81,46)" fg:x="12" fg:w="1"/><text x="5.6554%" y="447.50"></text></g><g><title>libicucore.A.dylib`0x000000019a303258 (1 samples, 0.45%)</title><rect x="5.4054%" y="421" width="0.4505%" height="15" fill="rgb(247,70,30)" fg:x="12" fg:w="1"/><text x="5.6554%" y="431.50"></text></g><g><title>libicucore.A.dylib`0x000000019a303f7c (1 samples, 0.45%)</title><rect x="5.4054%" y="405" width="0.4505%" height="15" fill="rgb(212,68,19)" fg:x="12" fg:w="1"/><text x="5.6554%" y="415.50"></text></g><g><title>libsystem_c.dylib`strrchr (1 samples, 0.45%)</title><rect x="5.4054%" y="389" width="0.4505%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="1"/><text x="5.6554%" y="399.50"></text></g><g><title>Security`Security::KeychainCore::StorageManager::getSearchList(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (3 samples, 1.35%)</title><rect x="4.9550%" y="789" width="1.3514%" height="15" fill="rgb(223,113,26)" fg:x="11" fg:w="3"/><text x="5.2050%" y="799.50"></text></g><g><title>Security`Security::KeychainCore::DynamicDLDBList::searchList (2 samples, 0.90%)</title><rect x="5.4054%" y="773" width="0.9009%" height="15" fill="rgb(206,192,2)" fg:x="12" fg:w="2"/><text x="5.6554%" y="783.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery (2 samples, 0.90%)</title><rect x="5.4054%" y="757" width="0.9009%" height="15" fill="rgb(241,108,4)" fg:x="12" fg:w="2"/><text x="5.6554%" y="767.50"></text></g><g><title>Security`Security::MDSClient::Directory::dlGetFirst (2 samples, 0.90%)</title><rect x="5.4054%" y="741" width="0.9009%" height="15" fill="rgb(247,173,49)" fg:x="12" fg:w="2"/><text x="5.6554%" y="751.50"></text></g><g><title>Security`Security::MDSClient::Directory::cdsa (2 samples, 0.90%)</title><rect x="5.4054%" y="725" width="0.9009%" height="15" fill="rgb(224,114,35)" fg:x="12" fg:w="2"/><text x="5.6554%" y="735.50"></text></g><g><title>Security`mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (2 samples, 0.90%)</title><rect x="5.4054%" y="709" width="0.9009%" height="15" fill="rgb(245,159,27)" fg:x="12" fg:w="2"/><text x="5.6554%" y="719.50"></text></g><g><title>Security`Security::MDSSession::DbOpen (2 samples, 0.90%)</title><rect x="5.4054%" y="693" width="0.9009%" height="15" fill="rgb(245,172,44)" fg:x="12" fg:w="2"/><text x="5.6554%" y="703.50"></text></g><g><title>Security`Security::MDSSession::updateDataBases (2 samples, 0.90%)</title><rect x="5.4054%" y="677" width="0.9009%" height="15" fill="rgb(236,23,11)" fg:x="12" fg:w="2"/><text x="5.6554%" y="687.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundleDir (2 samples, 0.90%)</title><rect x="5.4054%" y="661" width="0.9009%" height="15" fill="rgb(205,117,38)" fg:x="12" fg:w="2"/><text x="5.6554%" y="671.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundle (2 samples, 0.90%)</title><rect x="5.4054%" y="645" width="0.9009%" height="15" fill="rgb(237,72,25)" fg:x="12" fg:w="2"/><text x="5.6554%" y="655.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::directDbHand (1 samples, 0.45%)</title><rect x="5.8559%" y="629" width="0.4505%" height="15" fill="rgb(244,70,9)" fg:x="13" fg:w="1"/><text x="6.1059%" y="639.50"></text></g><g><title>Security`Security::MDSSession::dbOpen (1 samples, 0.45%)</title><rect x="5.8559%" y="613" width="0.4505%" height="15" fill="rgb(217,125,39)" fg:x="13" fg:w="1"/><text x="6.1059%" y="623.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.45%)</title><rect x="5.8559%" y="597" width="0.4505%" height="15" fill="rgb(235,36,10)" fg:x="13" fg:w="1"/><text x="6.1059%" y="607.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.45%)</title><rect x="5.8559%" y="581" width="0.4505%" height="15" fill="rgb(251,123,47)" fg:x="13" fg:w="1"/><text x="6.1059%" y="591.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.45%)</title><rect x="5.8559%" y="565" width="0.4505%" height="15" fill="rgb(221,13,13)" fg:x="13" fg:w="1"/><text x="6.1059%" y="575.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.45%)</title><rect x="5.8559%" y="549" width="0.4505%" height="15" fill="rgb(238,131,9)" fg:x="13" fg:w="1"/><text x="6.1059%" y="559.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.45%)</title><rect x="5.8559%" y="533" width="0.4505%" height="15" fill="rgb(211,50,8)" fg:x="13" fg:w="1"/><text x="6.1059%" y="543.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.45%)</title><rect x="5.8559%" y="517" width="0.4505%" height="15" fill="rgb(245,182,24)" fg:x="13" fg:w="1"/><text x="6.1059%" y="527.50"></text></g><g><title>Security`Security::MetaAttribute::unpackAttribute (1 samples, 0.45%)</title><rect x="5.8559%" y="501" width="0.4505%" height="15" fill="rgb(242,14,37)" fg:x="13" fg:w="1"/><text x="6.1059%" y="511.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.45%)</title><rect x="5.8559%" y="485" width="0.4505%" height="15" fill="rgb(246,228,12)" fg:x="13" fg:w="1"/><text x="6.1059%" y="495.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.45%)</title><rect x="5.8559%" y="469" width="0.4505%" height="15" fill="rgb(213,55,15)" fg:x="13" fg:w="1"/><text x="6.1059%" y="479.50"></text></g><g><title>Security`std::__1::pair&lt;std::__1::__tree_iterator&lt;void*, std::__1::__tree_node&lt;void*, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt; &gt;::__emplace_unique_key_args&lt;void*, void* const&amp;&gt; (1 samples, 0.45%)</title><rect x="5.8559%" y="453" width="0.4505%" height="15" fill="rgb(209,9,3)" fg:x="13" fg:w="1"/><text x="6.1059%" y="463.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::CreateTrustSettings (1 samples, 0.45%)</title><rect x="6.3063%" y="789" width="0.4505%" height="15" fill="rgb(230,59,30)" fg:x="14" fg:w="1"/><text x="6.5563%" y="799.50"></text></g><g><title>Security`xpcTrustSettingsRead(Security::Allocator&amp;, SecTrustSettingsDomain, cssm_data&amp;) (1 samples, 0.45%)</title><rect x="6.3063%" y="773" width="0.4505%" height="15" fill="rgb(209,121,21)" fg:x="14" fg:w="1"/><text x="6.5563%" y="783.50"></text></g><g><title>Security`SecTrustSettingsXPCRead (1 samples, 0.45%)</title><rect x="6.3063%" y="757" width="0.4505%" height="15" fill="rgb(220,109,13)" fg:x="14" fg:w="1"/><text x="6.5563%" y="767.50"></text></g><g><title>Security`SecOSStatusWith (1 samples, 0.45%)</title><rect x="6.3063%" y="741" width="0.4505%" height="15" fill="rgb(232,18,1)" fg:x="14" fg:w="1"/><text x="6.5563%" y="751.50"></text></g><g><title>Security`__SecTrustSettingsXPCRead_block_invoke (1 samples, 0.45%)</title><rect x="6.3063%" y="725" width="0.4505%" height="15" fill="rgb(215,41,42)" fg:x="14" fg:w="1"/><text x="6.5563%" y="735.50"></text></g><g><title>Security`securityd_send_sync_and_do (1 samples, 0.45%)</title><rect x="6.3063%" y="709" width="0.4505%" height="15" fill="rgb(224,123,36)" fg:x="14" fg:w="1"/><text x="6.5563%" y="719.50"></text></g><g><title>libxpc.dylib`xpc_dictionary_create (1 samples, 0.45%)</title><rect x="6.3063%" y="693" width="0.4505%" height="15" fill="rgb(240,125,3)" fg:x="14" fg:w="1"/><text x="6.5563%" y="703.50"></text></g><g><title>CoreFoundation`__CFDataInit (1 samples, 0.45%)</title><rect x="6.7568%" y="741" width="0.4505%" height="15" fill="rgb(205,98,50)" fg:x="15" fg:w="1"/><text x="7.0068%" y="751.50"></text></g><g><title>CoreFoundation`__CFDataShouldUseAllocator (1 samples, 0.45%)</title><rect x="6.7568%" y="725" width="0.4505%" height="15" fill="rgb(205,185,37)" fg:x="15" fg:w="1"/><text x="7.0068%" y="735.50"></text></g><g><title>Security`SecCertificateCreateWithData (2 samples, 0.90%)</title><rect x="6.7568%" y="773" width="0.9009%" height="15" fill="rgb(238,207,15)" fg:x="15" fg:w="2"/><text x="7.0068%" y="783.50"></text></g><g><title>Security`SecCertificateParse (2 samples, 0.90%)</title><rect x="6.7568%" y="757" width="0.9009%" height="15" fill="rgb(213,199,42)" fg:x="15" fg:w="2"/><text x="7.0068%" y="767.50"></text></g><g><title>Security`createNormalizedX501Name (1 samples, 0.45%)</title><rect x="7.2072%" y="741" width="0.4505%" height="15" fill="rgb(235,201,11)" fg:x="16" fg:w="1"/><text x="7.4572%" y="751.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::data (1 samples, 0.45%)</title><rect x="7.6577%" y="773" width="0.4505%" height="15" fill="rgb(207,46,11)" fg:x="17" fg:w="1"/><text x="7.9077%" y="783.50"></text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::get (1 samples, 0.45%)</title><rect x="7.6577%" y="757" width="0.4505%" height="15" fill="rgb(241,35,35)" fg:x="17" fg:w="1"/><text x="7.9077%" y="767.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::get (1 samples, 0.45%)</title><rect x="7.6577%" y="741" width="0.4505%" height="15" fill="rgb(243,32,47)" fg:x="17" fg:w="1"/><text x="7.9077%" y="751.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.45%)</title><rect x="7.6577%" y="725" width="0.4505%" height="15" fill="rgb(247,202,23)" fg:x="17" fg:w="1"/><text x="7.9077%" y="735.50"></text></g><g><title>Security`cssm_DataGetFromUniqueRecordId(cssm_dl_db_handle, cssm_db_unique_record const*, cssm_db_record_attribute_data*, cssm_data*) (1 samples, 0.45%)</title><rect x="7.6577%" y="709" width="0.4505%" height="15" fill="rgb(219,102,11)" fg:x="17" fg:w="1"/><text x="7.9077%" y="719.50"></text></g><g><title>Security`SSDLSession::DataGetFromUniqueRecordId (1 samples, 0.45%)</title><rect x="7.6577%" y="693" width="0.4505%" height="15" fill="rgb(243,110,44)" fg:x="17" fg:w="1"/><text x="7.9077%" y="703.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.45%)</title><rect x="7.6577%" y="677" width="0.4505%" height="15" fill="rgb(222,74,54)" fg:x="17" fg:w="1"/><text x="7.9077%" y="687.50"></text></g><g><title>Security`countLegacyAPI (1 samples, 0.45%)</title><rect x="7.6577%" y="661" width="0.4505%" height="15" fill="rgb(216,99,12)" fg:x="17" fg:w="1"/><text x="7.9077%" y="671.50"></text></g><g><title>Foundation`+[NSThread currentThread] (1 samples, 0.45%)</title><rect x="7.6577%" y="645" width="0.4505%" height="15" fill="rgb(226,22,26)" fg:x="17" fg:w="1"/><text x="7.9077%" y="655.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::activate (1 samples, 0.45%)</title><rect x="8.1081%" y="757" width="0.4505%" height="15" fill="rgb(217,163,10)" fg:x="18" fg:w="1"/><text x="8.3581%" y="767.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.45%)</title><rect x="8.1081%" y="741" width="0.4505%" height="15" fill="rgb(213,25,53)" fg:x="18" fg:w="1"/><text x="8.3581%" y="751.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.45%)</title><rect x="8.1081%" y="725" width="0.4505%" height="15" fill="rgb(252,105,26)" fg:x="18" fg:w="1"/><text x="8.3581%" y="735.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.45%)</title><rect x="8.1081%" y="709" width="0.4505%" height="15" fill="rgb(220,39,43)" fg:x="18" fg:w="1"/><text x="8.3581%" y="719.50"></text></g><g><title>Security`SSDLSession::DbOpen (1 samples, 0.45%)</title><rect x="8.1081%" y="693" width="0.4505%" height="15" fill="rgb(229,68,48)" fg:x="18" fg:w="1"/><text x="8.3581%" y="703.50"></text></g><g><title>Security`SSDatabaseImpl::load (1 samples, 0.45%)</title><rect x="8.1081%" y="677" width="0.4505%" height="15" fill="rgb(252,8,32)" fg:x="18" fg:w="1"/><text x="8.3581%" y="687.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.45%)</title><rect x="8.1081%" y="661" width="0.4505%" height="15" fill="rgb(223,20,43)" fg:x="18" fg:w="1"/><text x="8.3581%" y="671.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.45%)</title><rect x="8.1081%" y="645" width="0.4505%" height="15" fill="rgb(229,81,49)" fg:x="18" fg:w="1"/><text x="8.3581%" y="655.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.45%)</title><rect x="8.1081%" y="629" width="0.4505%" height="15" fill="rgb(236,28,36)" fg:x="18" fg:w="1"/><text x="8.3581%" y="639.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.45%)</title><rect x="8.1081%" y="613" width="0.4505%" height="15" fill="rgb(249,185,26)" fg:x="18" fg:w="1"/><text x="8.3581%" y="623.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.45%)</title><rect x="8.1081%" y="597" width="0.4505%" height="15" fill="rgb(249,174,33)" fg:x="18" fg:w="1"/><text x="8.3581%" y="607.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.45%)</title><rect x="8.1081%" y="581" width="0.4505%" height="15" fill="rgb(233,201,37)" fg:x="18" fg:w="1"/><text x="8.3581%" y="591.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.45%)</title><rect x="8.1081%" y="565" width="0.4505%" height="15" fill="rgb(221,78,26)" fg:x="18" fg:w="1"/><text x="8.3581%" y="575.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.45%)</title><rect x="8.1081%" y="549" width="0.4505%" height="15" fill="rgb(250,127,30)" fg:x="18" fg:w="1"/><text x="8.3581%" y="559.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.45%)</title><rect x="8.1081%" y="533" width="0.4505%" height="15" fill="rgb(230,49,44)" fg:x="18" fg:w="1"/><text x="8.3581%" y="543.50"></text></g><g><title>Security`Security::MetaAttribute::unpackAttribute (1 samples, 0.45%)</title><rect x="8.1081%" y="517" width="0.4505%" height="15" fill="rgb(229,67,23)" fg:x="18" fg:w="1"/><text x="8.3581%" y="527.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.45%)</title><rect x="8.1081%" y="501" width="0.4505%" height="15" fill="rgb(249,83,47)" fg:x="18" fg:w="1"/><text x="8.3581%" y="511.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.45%)</title><rect x="8.1081%" y="485" width="0.4505%" height="15" fill="rgb(215,43,3)" fg:x="18" fg:w="1"/><text x="8.3581%" y="495.50"></text></g><g><title>Security`std::__1::pair&lt;std::__1::__tree_iterator&lt;void*, std::__1::__tree_node&lt;void*, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt; &gt;::__emplace_unique_key_args&lt;void*, void* const&amp;&gt; (1 samples, 0.45%)</title><rect x="8.1081%" y="469" width="0.4505%" height="15" fill="rgb(238,154,13)" fg:x="18" fg:w="1"/><text x="8.3581%" y="479.50"></text></g><g><title>Security`SSDLSession::DataGetFromUniqueRecordId (1 samples, 0.45%)</title><rect x="8.5586%" y="677" width="0.4505%" height="15" fill="rgb(219,56,2)" fg:x="19" fg:w="1"/><text x="8.8086%" y="687.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.45%)</title><rect x="8.5586%" y="661" width="0.4505%" height="15" fill="rgb(233,0,4)" fg:x="19" fg:w="1"/><text x="8.8086%" y="671.50"></text></g><g><title>Security`cssm_DataGetFromUniqueRecordId(cssm_dl_db_handle, cssm_db_unique_record const*, cssm_db_record_attribute_data*, cssm_data*) (1 samples, 0.45%)</title><rect x="8.5586%" y="645" width="0.4505%" height="15" fill="rgb(235,30,7)" fg:x="19" fg:w="1"/><text x="8.8086%" y="655.50"></text></g><g><title>Security`Security::DatabaseSession::DataGetFromUniqueRecordId (1 samples, 0.45%)</title><rect x="8.5586%" y="629" width="0.4505%" height="15" fill="rgb(250,79,13)" fg:x="19" fg:w="1"/><text x="8.8086%" y="639.50"></text></g><g><title>Security`Security::AppleDatabase::dataGetFromUniqueRecordId (1 samples, 0.45%)</title><rect x="8.5586%" y="613" width="0.4505%" height="15" fill="rgb(211,146,34)" fg:x="19" fg:w="1"/><text x="8.8086%" y="623.50"></text></g><g><title>Security`Security::Table::getRecord (1 samples, 0.45%)</title><rect x="8.5586%" y="597" width="0.4505%" height="15" fill="rgb(228,22,38)" fg:x="19" fg:w="1"/><text x="8.8086%" y="607.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.45%)</title><rect x="8.5586%" y="581" width="0.4505%" height="15" fill="rgb(235,168,5)" fg:x="19" fg:w="1"/><text x="8.8086%" y="591.50"></text></g><g><title>Security`Security::MetaAttribute::unpackAttribute (1 samples, 0.45%)</title><rect x="8.5586%" y="565" width="0.4505%" height="15" fill="rgb(221,155,16)" fg:x="19" fg:w="1"/><text x="8.8086%" y="575.50"></text></g><g><title>Security`Security::TypedMetaAttribute&lt;Security::BlobValue&gt;::unpackValue (1 samples, 0.45%)</title><rect x="8.5586%" y="549" width="0.4505%" height="15" fill="rgb(215,215,53)" fg:x="19" fg:w="1"/><text x="8.8086%" y="559.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.45%)</title><rect x="8.5586%" y="533" width="0.4505%" height="15" fill="rgb(223,4,10)" fg:x="19" fg:w="1"/><text x="8.8086%" y="543.50"></text></g><g><title>Security`Security::PluginSession::malloc (1 samples, 0.45%)</title><rect x="8.5586%" y="517" width="0.4505%" height="15" fill="rgb(234,103,6)" fg:x="19" fg:w="1"/><text x="8.8086%" y="527.50"></text></g><g><title>Security`Attachment::upcallMalloc (1 samples, 0.45%)</title><rect x="8.5586%" y="501" width="0.4505%" height="15" fill="rgb(227,97,0)" fg:x="19" fg:w="1"/><text x="8.8086%" y="511.50"></text></g><g><title>Security`Security::CssmMemoryFunctionsAllocator::malloc (1 samples, 0.45%)</title><rect x="8.5586%" y="485" width="0.4505%" height="15" fill="rgb(234,150,53)" fg:x="19" fg:w="1"/><text x="8.8086%" y="495.50"></text></g><g><title>Security`Security::PluginSession::malloc (1 samples, 0.45%)</title><rect x="8.5586%" y="469" width="0.4505%" height="15" fill="rgb(228,201,54)" fg:x="19" fg:w="1"/><text x="8.8086%" y="479.50"></text></g><g><title>Security`Attachment::upcallMalloc (1 samples, 0.45%)</title><rect x="8.5586%" y="453" width="0.4505%" height="15" fill="rgb(222,22,37)" fg:x="19" fg:w="1"/><text x="8.8086%" y="463.50"></text></g><g><title>libc++abi.dylib`__dynamic_cast (1 samples, 0.45%)</title><rect x="8.5586%" y="437" width="0.4505%" height="15" fill="rgb(237,53,32)" fg:x="19" fg:w="1"/><text x="8.8086%" y="447.50"></text></g><g><title>libc++abi.dylib`__cxxabiv1::__vmi_class_type_info::search_below_dst (1 samples, 0.45%)</title><rect x="8.5586%" y="421" width="0.4505%" height="15" fill="rgb(233,25,53)" fg:x="19" fg:w="1"/><text x="8.8086%" y="431.50"></text></g><g><title>libc++abi.dylib`std::type_info::operator== (1 samples, 0.45%)</title><rect x="8.5586%" y="405" width="0.4505%" height="15" fill="rgb(210,40,34)" fg:x="19" fg:w="1"/><text x="8.8086%" y="415.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::item (2 samples, 0.90%)</title><rect x="8.5586%" y="757" width="0.9009%" height="15" fill="rgb(241,220,44)" fg:x="19" fg:w="2"/><text x="8.8086%" y="767.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::makePrimaryKey (2 samples, 0.90%)</title><rect x="8.5586%" y="741" width="0.9009%" height="15" fill="rgb(235,28,35)" fg:x="19" fg:w="2"/><text x="8.8086%" y="751.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::get (2 samples, 0.90%)</title><rect x="8.5586%" y="725" width="0.9009%" height="15" fill="rgb(210,56,17)" fg:x="19" fg:w="2"/><text x="8.8086%" y="735.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (2 samples, 0.90%)</title><rect x="8.5586%" y="709" width="0.9009%" height="15" fill="rgb(224,130,29)" fg:x="19" fg:w="2"/><text x="8.8086%" y="719.50"></text></g><g><title>Security`cssm_DataGetFromUniqueRecordId(cssm_dl_db_handle, cssm_db_unique_record const*, cssm_db_record_attribute_data*, cssm_data*) (2 samples, 0.90%)</title><rect x="8.5586%" y="693" width="0.9009%" height="15" fill="rgb(235,212,8)" fg:x="19" fg:w="2"/><text x="8.8086%" y="703.50"></text></g><g><title>Security`Security::CssmPlugin::find (1 samples, 0.45%)</title><rect x="9.0090%" y="677" width="0.4505%" height="15" fill="rgb(223,33,50)" fg:x="20" fg:w="1"/><text x="9.2590%" y="687.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_unlock (1 samples, 0.45%)</title><rect x="9.0090%" y="661" width="0.4505%" height="15" fill="rgb(219,149,13)" fg:x="20" fg:w="1"/><text x="9.2590%" y="671.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.45%)</title><rect x="9.4595%" y="677" width="0.4505%" height="15" fill="rgb(250,156,29)" fg:x="21" fg:w="1"/><text x="9.7095%" y="687.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.45%)</title><rect x="9.4595%" y="661" width="0.4505%" height="15" fill="rgb(216,193,19)" fg:x="21" fg:w="1"/><text x="9.7095%" y="671.50"></text></g><g><title>Security`SSDLSession::DbOpen (1 samples, 0.45%)</title><rect x="9.4595%" y="645" width="0.4505%" height="15" fill="rgb(216,135,14)" fg:x="21" fg:w="1"/><text x="9.7095%" y="655.50"></text></g><g><title>Security`SSDatabaseImpl::load (1 samples, 0.45%)</title><rect x="9.4595%" y="629" width="0.4505%" height="15" fill="rgb(241,47,5)" fg:x="21" fg:w="1"/><text x="9.7095%" y="639.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.45%)</title><rect x="9.4595%" y="613" width="0.4505%" height="15" fill="rgb(233,42,35)" fg:x="21" fg:w="1"/><text x="9.7095%" y="623.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.45%)</title><rect x="9.4595%" y="597" width="0.4505%" height="15" fill="rgb(231,13,6)" fg:x="21" fg:w="1"/><text x="9.7095%" y="607.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.45%)</title><rect x="9.4595%" y="581" width="0.4505%" height="15" fill="rgb(207,181,40)" fg:x="21" fg:w="1"/><text x="9.7095%" y="591.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.45%)</title><rect x="9.4595%" y="565" width="0.4505%" height="15" fill="rgb(254,173,49)" fg:x="21" fg:w="1"/><text x="9.7095%" y="575.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.45%)</title><rect x="9.4595%" y="549" width="0.4505%" height="15" fill="rgb(221,1,38)" fg:x="21" fg:w="1"/><text x="9.7095%" y="559.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.45%)</title><rect x="9.4595%" y="533" width="0.4505%" height="15" fill="rgb(206,124,46)" fg:x="21" fg:w="1"/><text x="9.7095%" y="543.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.45%)</title><rect x="9.4595%" y="517" width="0.4505%" height="15" fill="rgb(249,21,11)" fg:x="21" fg:w="1"/><text x="9.7095%" y="527.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.45%)</title><rect x="9.4595%" y="501" width="0.4505%" height="15" fill="rgb(222,201,40)" fg:x="21" fg:w="1"/><text x="9.7095%" y="511.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.45%)</title><rect x="9.4595%" y="485" width="0.4505%" height="15" fill="rgb(235,61,29)" fg:x="21" fg:w="1"/><text x="9.7095%" y="495.50"></text></g><g><title>Security`Security::MetaAttribute::unpackAttribute (1 samples, 0.45%)</title><rect x="9.4595%" y="469" width="0.4505%" height="15" fill="rgb(219,207,3)" fg:x="21" fg:w="1"/><text x="9.7095%" y="479.50"></text></g><g><title>Security`Security::TypedMetaAttribute&lt;Security::UInt32Value&gt;::unpackValue (1 samples, 0.45%)</title><rect x="9.4595%" y="453" width="0.4505%" height="15" fill="rgb(222,56,46)" fg:x="21" fg:w="1"/><text x="9.7095%" y="463.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.45%)</title><rect x="9.4595%" y="437" width="0.4505%" height="15" fill="rgb(239,76,54)" fg:x="21" fg:w="1"/><text x="9.7095%" y="447.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.45%)</title><rect x="9.4595%" y="421" width="0.4505%" height="15" fill="rgb(231,124,27)" fg:x="21" fg:w="1"/><text x="9.7095%" y="431.50"></text></g><g><title>Security`std::__1::pair&lt;std::__1::__tree_iterator&lt;void*, std::__1::__tree_node&lt;void*, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt; &gt;::__emplace_unique_key_args&lt;void*, void* const&amp;&gt; (1 samples, 0.45%)</title><rect x="9.4595%" y="405" width="0.4505%" height="15" fill="rgb(249,195,6)" fg:x="21" fg:w="1"/><text x="9.7095%" y="415.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.45%)</title><rect x="9.4595%" y="389" width="0.4505%" height="15" fill="rgb(237,174,47)" fg:x="21" fg:w="1"/><text x="9.7095%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.45%)</title><rect x="9.4595%" y="373" width="0.4505%" height="15" fill="rgb(206,201,31)" fg:x="21" fg:w="1"/><text x="9.7095%" y="383.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::performKeychainUpgradeIfNeeded (3 samples, 1.35%)</title><rect x="9.4595%" y="757" width="1.3514%" height="15" fill="rgb(231,57,52)" fg:x="21" fg:w="3"/><text x="9.7095%" y="767.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::dbBlobVersion (3 samples, 1.35%)</title><rect x="9.4595%" y="741" width="1.3514%" height="15" fill="rgb(248,177,22)" fg:x="21" fg:w="3"/><text x="9.7095%" y="751.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::handle (3 samples, 1.35%)</title><rect x="9.4595%" y="725" width="1.3514%" height="15" fill="rgb(215,211,37)" fg:x="21" fg:w="3"/><text x="9.7095%" y="735.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::activate (3 samples, 1.35%)</title><rect x="9.4595%" y="709" width="1.3514%" height="15" fill="rgb(241,128,51)" fg:x="21" fg:w="3"/><text x="9.7095%" y="719.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (3 samples, 1.35%)</title><rect x="9.4595%" y="693" width="1.3514%" height="15" fill="rgb(227,165,31)" fg:x="21" fg:w="3"/><text x="9.7095%" y="703.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::defaultCredentials (2 samples, 0.90%)</title><rect x="9.9099%" y="677" width="0.9009%" height="15" fill="rgb(228,167,24)" fg:x="22" fg:w="2"/><text x="10.1599%" y="687.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::keychainSchema (2 samples, 0.90%)</title><rect x="9.9099%" y="661" width="0.9009%" height="15" fill="rgb(228,143,12)" fg:x="22" fg:w="2"/><text x="10.1599%" y="671.50"></text></g><g><title>Security`Security::CssmClient::DbDbCursorImpl::next (2 samples, 0.90%)</title><rect x="9.9099%" y="645" width="0.9009%" height="15" fill="rgb(249,149,8)" fg:x="22" fg:w="2"/><text x="10.1599%" y="655.50"></text></g><g><title>Security`CSSM_DL_DataGetNext (2 samples, 0.90%)</title><rect x="9.9099%" y="629" width="0.9009%" height="15" fill="rgb(243,35,44)" fg:x="22" fg:w="2"/><text x="10.1599%" y="639.50"></text></g><g><title>Security`cssm_DataGetNext(cssm_dl_db_handle, long, cssm_db_record_attribute_data*, cssm_data*, cssm_db_unique_record**) (2 samples, 0.90%)</title><rect x="9.9099%" y="613" width="0.9009%" height="15" fill="rgb(246,89,9)" fg:x="22" fg:w="2"/><text x="10.1599%" y="623.50"></text></g><g><title>Security`SSDLSession::DataGetNext (2 samples, 0.90%)</title><rect x="9.9099%" y="597" width="0.9009%" height="15" fill="rgb(233,213,13)" fg:x="22" fg:w="2"/><text x="10.1599%" y="607.50"></text></g><g><title>Security`SSDLSession::makeSSUniqueRecord (2 samples, 0.90%)</title><rect x="9.9099%" y="581" width="0.9009%" height="15" fill="rgb(233,141,41)" fg:x="22" fg:w="2"/><text x="10.1599%" y="591.50"></text></g><g><title>Security`Security::PluginSession::malloc (2 samples, 0.90%)</title><rect x="9.9099%" y="565" width="0.9009%" height="15" fill="rgb(239,167,4)" fg:x="22" fg:w="2"/><text x="10.1599%" y="575.50"></text></g><g><title>Security`Attachment::upcallMalloc (2 samples, 0.90%)</title><rect x="9.9099%" y="549" width="0.9009%" height="15" fill="rgb(209,217,16)" fg:x="22" fg:w="2"/><text x="10.1599%" y="559.50"></text></g><g><title>libc++abi.dylib`__dynamic_cast (1 samples, 0.45%)</title><rect x="10.3604%" y="533" width="0.4505%" height="15" fill="rgb(219,88,35)" fg:x="23" fg:w="1"/><text x="10.6104%" y="543.50"></text></g><g><title>libc++abi.dylib`__cxxabiv1::__si_class_type_info::search_below_dst (1 samples, 0.45%)</title><rect x="10.3604%" y="517" width="0.4505%" height="15" fill="rgb(220,193,23)" fg:x="23" fg:w="1"/><text x="10.6104%" y="527.50"></text></g><g><title>libc++abi.dylib`std::type_info::operator== (1 samples, 0.45%)</title><rect x="10.3604%" y="501" width="0.4505%" height="15" fill="rgb(230,90,52)" fg:x="23" fg:w="1"/><text x="10.6104%" y="511.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::findQualifiedCerts(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (10 samples, 4.50%)</title><rect x="6.7568%" y="789" width="4.5045%" height="15" fill="rgb(252,106,19)" fg:x="15" fg:w="10"/><text x="7.0068%" y="799.50">Secur..</text></g><g><title>Security`Security::KeychainCore::KCCursorImpl::next (7 samples, 3.15%)</title><rect x="8.1081%" y="773" width="3.1532%" height="15" fill="rgb(206,74,20)" fg:x="18" fg:w="7"/><text x="8.3581%" y="783.50">Sec..</text></g><g><title>Security`Security::SecPointerBase::operator= (1 samples, 0.45%)</title><rect x="10.8108%" y="757" width="0.4505%" height="15" fill="rgb(230,138,44)" fg:x="24" fg:w="1"/><text x="11.0608%" y="767.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.45%)</title><rect x="10.8108%" y="741" width="0.4505%" height="15" fill="rgb(235,182,43)" fg:x="24" fg:w="1"/><text x="11.0608%" y="751.50"></text></g><g><title>Security`Security::CFClass::refCountForType (1 samples, 0.45%)</title><rect x="10.8108%" y="725" width="0.4505%" height="15" fill="rgb(242,16,51)" fg:x="24" fg:w="1"/><text x="11.0608%" y="735.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::~Certificate (1 samples, 0.45%)</title><rect x="10.8108%" y="709" width="0.4505%" height="15" fill="rgb(248,9,4)" fg:x="24" fg:w="1"/><text x="11.0608%" y="719.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::~Certificate (1 samples, 0.45%)</title><rect x="10.8108%" y="693" width="0.4505%" height="15" fill="rgb(210,31,22)" fg:x="24" fg:w="1"/><text x="11.0608%" y="703.50"></text></g><g><title>Security`Security::KeychainCore::ItemImpl::~ItemImpl (1 samples, 0.45%)</title><rect x="10.8108%" y="677" width="0.4505%" height="15" fill="rgb(239,54,39)" fg:x="24" fg:w="1"/><text x="11.0608%" y="687.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (1 samples, 0.45%)</title><rect x="10.8108%" y="661" width="0.4505%" height="15" fill="rgb(230,99,41)" fg:x="24" fg:w="1"/><text x="11.0608%" y="671.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (1 samples, 0.45%)</title><rect x="10.8108%" y="645" width="0.4505%" height="15" fill="rgb(253,106,12)" fg:x="24" fg:w="1"/><text x="11.0608%" y="655.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (1 samples, 0.45%)</title><rect x="10.8108%" y="629" width="0.4505%" height="15" fill="rgb(213,46,41)" fg:x="24" fg:w="1"/><text x="11.0608%" y="639.50"></text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::~SSDbUniqueRecordImpl (1 samples, 0.45%)</title><rect x="10.8108%" y="613" width="0.4505%" height="15" fill="rgb(215,133,35)" fg:x="24" fg:w="1"/><text x="11.0608%" y="623.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::~DbUniqueRecordImpl (1 samples, 0.45%)</title><rect x="10.8108%" y="597" width="0.4505%" height="15" fill="rgb(213,28,5)" fg:x="24" fg:w="1"/><text x="11.0608%" y="607.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::deactivate (1 samples, 0.45%)</title><rect x="10.8108%" y="581" width="0.4505%" height="15" fill="rgb(215,77,49)" fg:x="24" fg:w="1"/><text x="11.0608%" y="591.50"></text></g><g><title>Security`CSSM_DL_FreeUniqueRecord (1 samples, 0.45%)</title><rect x="10.8108%" y="565" width="0.4505%" height="15" fill="rgb(248,100,22)" fg:x="24" fg:w="1"/><text x="11.0608%" y="575.50"></text></g><g><title>Security`cssm_FreeUniqueRecord(cssm_dl_db_handle, cssm_db_unique_record*) (1 samples, 0.45%)</title><rect x="10.8108%" y="549" width="0.4505%" height="15" fill="rgb(208,67,9)" fg:x="24" fg:w="1"/><text x="11.0608%" y="559.50"></text></g><g><title>Security`non-virtual thunk to SSDLSession::FreeUniqueRecord (1 samples, 0.45%)</title><rect x="10.8108%" y="533" width="0.4505%" height="15" fill="rgb(219,133,21)" fg:x="24" fg:w="1"/><text x="11.0608%" y="543.50"></text></g><g><title>Security`SSDLSession::killSSUniqueRecord (1 samples, 0.45%)</title><rect x="10.8108%" y="517" width="0.4505%" height="15" fill="rgb(246,46,29)" fg:x="24" fg:w="1"/><text x="11.0608%" y="527.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (1 samples, 0.45%)</title><rect x="10.8108%" y="501" width="0.4505%" height="15" fill="rgb(246,185,52)" fg:x="24" fg:w="1"/><text x="11.0608%" y="511.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (1 samples, 0.45%)</title><rect x="10.8108%" y="485" width="0.4505%" height="15" fill="rgb(252,136,11)" fg:x="24" fg:w="1"/><text x="11.0608%" y="495.50"></text></g><g><title>databend-query`security_framework::trust_settings::TrustSettings::iter (19 samples, 8.56%)</title><rect x="3.1532%" y="821" width="8.5586%" height="15" fill="rgb(219,138,53)" fg:x="7" fg:w="19"/><text x="3.4032%" y="831.50">databend-que..</text></g><g><title>Security`SecTrustSettingsCopyCertificates (19 samples, 8.56%)</title><rect x="3.1532%" y="805" width="8.5586%" height="15" fill="rgb(211,51,23)" fg:x="7" fg:w="19"/><text x="3.4032%" y="815.50">Security`Sec..</text></g><g><title>Security`Security::KeychainCore::TrustSettings::~TrustSettings (1 samples, 0.45%)</title><rect x="11.2613%" y="789" width="0.4505%" height="15" fill="rgb(247,221,28)" fg:x="25" fg:w="1"/><text x="11.5113%" y="799.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (1 samples, 0.45%)</title><rect x="11.2613%" y="773" width="0.4505%" height="15" fill="rgb(251,222,45)" fg:x="25" fg:w="1"/><text x="11.5113%" y="783.50"></text></g><g><title>CoreFoundation`cow_cleanup (1 samples, 0.45%)</title><rect x="11.2613%" y="757" width="0.4505%" height="15" fill="rgb(217,162,53)" fg:x="25" fg:w="1"/><text x="11.5113%" y="767.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (1 samples, 0.45%)</title><rect x="11.2613%" y="741" width="0.4505%" height="15" fill="rgb(229,93,14)" fg:x="25" fg:w="1"/><text x="11.5113%" y="751.50"></text></g><g><title>CoreFoundation`cow_cleanup (1 samples, 0.45%)</title><rect x="11.2613%" y="725" width="0.4505%" height="15" fill="rgb(209,67,49)" fg:x="25" fg:w="1"/><text x="11.5113%" y="735.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.45%)</title><rect x="11.2613%" y="709" width="0.4505%" height="15" fill="rgb(213,87,29)" fg:x="25" fg:w="1"/><text x="11.5113%" y="719.50"></text></g><g><title>CoreFoundation`__CFDataDeallocate (1 samples, 0.45%)</title><rect x="11.2613%" y="693" width="0.4505%" height="15" fill="rgb(205,151,52)" fg:x="25" fg:w="1"/><text x="11.5113%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.45%)</title><rect x="11.2613%" y="677" width="0.4505%" height="15" fill="rgb(253,215,39)" fg:x="25" fg:w="1"/><text x="11.5113%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.45%)</title><rect x="11.2613%" y="661" width="0.4505%" height="15" fill="rgb(221,220,41)" fg:x="25" fg:w="1"/><text x="11.5113%" y="671.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.45%)</title><rect x="11.2613%" y="645" width="0.4505%" height="15" fill="rgb(218,133,21)" fg:x="25" fg:w="1"/><text x="11.5113%" y="655.50"></text></g><g><title>CoreFoundation`-[__NSCFString retain] (1 samples, 0.45%)</title><rect x="12.1622%" y="629" width="0.4505%" height="15" fill="rgb(221,193,43)" fg:x="27" fg:w="1"/><text x="12.4122%" y="639.50"></text></g><g><title>CoreFoundation`_CFRetain (1 samples, 0.45%)</title><rect x="12.1622%" y="613" width="0.4505%" height="15" fill="rgb(240,128,52)" fg:x="27" fg:w="1"/><text x="12.4122%" y="623.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (3 samples, 1.35%)</title><rect x="11.7117%" y="645" width="1.3514%" height="15" fill="rgb(253,114,12)" fg:x="26" fg:w="3"/><text x="11.9617%" y="655.50"></text></g><g><title>CoreFoundation`mdict_rehashd (1 samples, 0.45%)</title><rect x="12.6126%" y="629" width="0.4505%" height="15" fill="rgb(215,223,47)" fg:x="28" fg:w="1"/><text x="12.8626%" y="639.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$objc_retain (1 samples, 0.45%)</title><rect x="13.0631%" y="645" width="0.4505%" height="15" fill="rgb(248,225,23)" fg:x="29" fg:w="1"/><text x="13.3131%" y="655.50"></text></g><g><title>CoreFoundation`__CFStringHash (3 samples, 1.35%)</title><rect x="13.5135%" y="645" width="1.3514%" height="15" fill="rgb(250,108,0)" fg:x="30" fg:w="3"/><text x="13.7635%" y="655.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (4 samples, 1.80%)</title><rect x="14.8649%" y="629" width="1.8018%" height="15" fill="rgb(228,208,7)" fg:x="33" fg:w="4"/><text x="15.1149%" y="639.50">C..</text></g><g><title>CoreFoundation`-[__NSDictionaryM _mutate] (2 samples, 0.90%)</title><rect x="15.7658%" y="613" width="0.9009%" height="15" fill="rgb(244,45,10)" fg:x="35" fg:w="2"/><text x="16.0158%" y="623.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM _mutate] (1 samples, 0.45%)</title><rect x="16.6667%" y="629" width="0.4505%" height="15" fill="rgb(207,125,25)" fg:x="37" fg:w="1"/><text x="16.9167%" y="639.50"></text></g><g><title>CoreFoundation`CFDictionaryCreateMutable (2 samples, 0.90%)</title><rect x="17.1171%" y="629" width="0.9009%" height="15" fill="rgb(210,195,18)" fg:x="38" fg:w="2"/><text x="17.3671%" y="639.50"></text></g><g><title>CoreFoundation`__NSDictionaryM_new (2 samples, 0.90%)</title><rect x="17.1171%" y="613" width="0.9009%" height="15" fill="rgb(249,80,12)" fg:x="38" fg:w="2"/><text x="17.3671%" y="623.50"></text></g><g><title>CoreFoundation`__CFAllocateObject (1 samples, 0.45%)</title><rect x="17.5676%" y="597" width="0.4505%" height="15" fill="rgb(221,65,9)" fg:x="39" fg:w="1"/><text x="17.8176%" y="607.50"></text></g><g><title>libobjc.A.dylib`class_createInstance (1 samples, 0.45%)</title><rect x="17.5676%" y="581" width="0.4505%" height="15" fill="rgb(235,49,36)" fg:x="39" fg:w="1"/><text x="17.8176%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.45%)</title><rect x="17.5676%" y="565" width="0.4505%" height="15" fill="rgb(225,32,20)" fg:x="39" fg:w="1"/><text x="17.8176%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.45%)</title><rect x="17.5676%" y="549" width="0.4505%" height="15" fill="rgb(215,141,46)" fg:x="39" fg:w="1"/><text x="17.8176%" y="559.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.45%)</title><rect x="17.5676%" y="533" width="0.4505%" height="15" fill="rgb(250,160,47)" fg:x="39" fg:w="1"/><text x="17.8176%" y="543.50"></text></g><g><title>CoreFoundation`CFDictionarySetValue (1 samples, 0.45%)</title><rect x="18.0180%" y="629" width="0.4505%" height="15" fill="rgb(216,222,40)" fg:x="40" fg:w="1"/><text x="18.2680%" y="639.50"></text></g><g><title>CoreFoundation`CFRelease (2 samples, 0.90%)</title><rect x="18.4685%" y="629" width="0.9009%" height="15" fill="rgb(234,217,39)" fg:x="41" fg:w="2"/><text x="18.7185%" y="639.50"></text></g><g><title>CoreFoundation`_CFRetain (1 samples, 0.45%)</title><rect x="19.3694%" y="629" width="0.4505%" height="15" fill="rgb(207,178,40)" fg:x="43" fg:w="1"/><text x="19.6194%" y="639.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.45%)</title><rect x="19.8198%" y="629" width="0.4505%" height="15" fill="rgb(221,136,13)" fg:x="44" fg:w="1"/><text x="20.0698%" y="639.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (2 samples, 0.90%)</title><rect x="20.7207%" y="613" width="0.9009%" height="15" fill="rgb(249,199,10)" fg:x="46" fg:w="2"/><text x="20.9707%" y="623.50"></text></g><g><title>CoreFoundation`CFStringGetBytes (1 samples, 0.45%)</title><rect x="21.1712%" y="597" width="0.4505%" height="15" fill="rgb(249,222,13)" fg:x="47" fg:w="1"/><text x="21.4212%" y="607.50"></text></g><g><title>CoreFoundation`__CFSearchStringROM (1 samples, 0.45%)</title><rect x="21.6216%" y="581" width="0.4505%" height="15" fill="rgb(244,185,38)" fg:x="48" fg:w="1"/><text x="21.8716%" y="591.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (4 samples, 1.80%)</title><rect x="21.6216%" y="613" width="1.8018%" height="15" fill="rgb(236,202,9)" fg:x="48" fg:w="4"/><text x="21.8716%" y="623.50">C..</text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (4 samples, 1.80%)</title><rect x="21.6216%" y="597" width="1.8018%" height="15" fill="rgb(250,229,37)" fg:x="48" fg:w="4"/><text x="21.8716%" y="607.50">C..</text></g><g><title>CoreFoundation`__CFStrHashEightBit2 (3 samples, 1.35%)</title><rect x="22.0721%" y="581" width="1.3514%" height="15" fill="rgb(206,174,23)" fg:x="49" fg:w="3"/><text x="22.3221%" y="591.50"></text></g><g><title>CoreFoundation`parseStringTag (8 samples, 3.60%)</title><rect x="20.2703%" y="629" width="3.6036%" height="15" fill="rgb(211,33,43)" fg:x="45" fg:w="8"/><text x="20.5203%" y="639.50">Core..</text></g><g><title>libobjc.A.dylib`object_getClass (1 samples, 0.45%)</title><rect x="23.4234%" y="613" width="0.4505%" height="15" fill="rgb(245,58,50)" fg:x="52" fg:w="1"/><text x="23.6734%" y="623.50"></text></g><g><title>CoreFoundation`CFDataReplaceBytes (1 samples, 0.45%)</title><rect x="30.6306%" y="597" width="0.4505%" height="15" fill="rgb(244,68,36)" fg:x="68" fg:w="1"/><text x="30.8806%" y="607.50"></text></g><g><title>CoreFoundation`__CFDataShouldUseAllocator (1 samples, 0.45%)</title><rect x="31.0811%" y="597" width="0.4505%" height="15" fill="rgb(232,229,15)" fg:x="69" fg:w="1"/><text x="31.3311%" y="607.50"></text></g><g><title>CoreFoundation`__CFDataInit (3 samples, 1.35%)</title><rect x="30.6306%" y="613" width="1.3514%" height="15" fill="rgb(254,30,23)" fg:x="68" fg:w="3"/><text x="30.8806%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.45%)</title><rect x="31.5315%" y="597" width="0.4505%" height="15" fill="rgb(235,160,14)" fg:x="70" fg:w="1"/><text x="31.7815%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.45%)</title><rect x="31.5315%" y="581" width="0.4505%" height="15" fill="rgb(212,155,44)" fg:x="70" fg:w="1"/><text x="31.7815%" y="591.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (1 samples, 0.45%)</title><rect x="32.4324%" y="581" width="0.4505%" height="15" fill="rgb(226,2,50)" fg:x="72" fg:w="1"/><text x="32.6824%" y="591.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (1 samples, 0.45%)</title><rect x="32.4324%" y="565" width="0.4505%" height="15" fill="rgb(234,177,6)" fg:x="72" fg:w="1"/><text x="32.6824%" y="575.50"></text></g><g><title>CoreFoundation`__CFAllocatorSystemAllocate (1 samples, 0.45%)</title><rect x="32.4324%" y="549" width="0.4505%" height="15" fill="rgb(217,24,9)" fg:x="72" fg:w="1"/><text x="32.6824%" y="559.50"></text></g><g><title>CoreFoundation`CFStringGetBytes (1 samples, 0.45%)</title><rect x="32.8829%" y="581" width="0.4505%" height="15" fill="rgb(220,13,46)" fg:x="73" fg:w="1"/><text x="33.1329%" y="591.50"></text></g><g><title>CoreFoundation`_CFGetTSDCreateIfNeeded (1 samples, 0.45%)</title><rect x="33.3333%" y="581" width="0.4505%" height="15" fill="rgb(239,221,27)" fg:x="74" fg:w="1"/><text x="33.5833%" y="591.50"></text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (1 samples, 0.45%)</title><rect x="33.7838%" y="581" width="0.4505%" height="15" fill="rgb(222,198,25)" fg:x="75" fg:w="1"/><text x="34.0338%" y="591.50"></text></g><g><title>CoreFoundation`__CFStrAllocateMutableContents (1 samples, 0.45%)</title><rect x="33.7838%" y="565" width="0.4505%" height="15" fill="rgb(211,99,13)" fg:x="75" fg:w="1"/><text x="34.0338%" y="575.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$malloc_default_zone (1 samples, 0.45%)</title><rect x="33.7838%" y="549" width="0.4505%" height="15" fill="rgb(232,111,31)" fg:x="75" fg:w="1"/><text x="34.0338%" y="559.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (5 samples, 2.25%)</title><rect x="32.4324%" y="597" width="2.2523%" height="15" fill="rgb(245,82,37)" fg:x="72" fg:w="5"/><text x="32.6824%" y="607.50">C..</text></g><g><title>libsystem_malloc.dylib`default_zone_good_size (1 samples, 0.45%)</title><rect x="34.2342%" y="581" width="0.4505%" height="15" fill="rgb(227,149,46)" fg:x="76" fg:w="1"/><text x="34.4842%" y="591.50"></text></g><g><title>CoreFoundation`__CFSearchStringROM (1 samples, 0.45%)</title><rect x="34.6847%" y="581" width="0.4505%" height="15" fill="rgb(218,36,50)" fg:x="77" fg:w="1"/><text x="34.9347%" y="591.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (3 samples, 1.35%)</title><rect x="35.1351%" y="581" width="1.3514%" height="15" fill="rgb(226,80,48)" fg:x="78" fg:w="3"/><text x="35.3851%" y="591.50"></text></g><g><title>CoreFoundation`__CFSearchStringROM (1 samples, 0.45%)</title><rect x="36.0360%" y="565" width="0.4505%" height="15" fill="rgb(238,224,15)" fg:x="80" fg:w="1"/><text x="36.2860%" y="575.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (5 samples, 2.25%)</title><rect x="34.6847%" y="597" width="2.2523%" height="15" fill="rgb(241,136,10)" fg:x="77" fg:w="5"/><text x="34.9347%" y="607.50">C..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.45%)</title><rect x="36.4865%" y="581" width="0.4505%" height="15" fill="rgb(208,32,45)" fg:x="81" fg:w="1"/><text x="36.7365%" y="591.50"></text></g><g><title>CoreFoundation`parseStringTag (12 samples, 5.41%)</title><rect x="31.9820%" y="613" width="5.4054%" height="15" fill="rgb(207,135,9)" fg:x="71" fg:w="12"/><text x="32.2320%" y="623.50">CoreFou..</text></g><g><title>Foundation`-[NSPlaceholderMutableString initWithString:] (1 samples, 0.45%)</title><rect x="36.9369%" y="597" width="0.4505%" height="15" fill="rgb(206,86,44)" fg:x="82" fg:w="1"/><text x="37.1869%" y="607.50"></text></g><g><title>CoreFoundation`CFStringAppend (1 samples, 0.45%)</title><rect x="36.9369%" y="581" width="0.4505%" height="15" fill="rgb(245,177,15)" fg:x="82" fg:w="1"/><text x="37.1869%" y="591.50"></text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (1 samples, 0.45%)</title><rect x="36.9369%" y="565" width="0.4505%" height="15" fill="rgb(206,64,50)" fg:x="82" fg:w="1"/><text x="37.1869%" y="575.50"></text></g><g><title>CoreFoundation`__CFStrAllocateMutableContents (1 samples, 0.45%)</title><rect x="36.9369%" y="549" width="0.4505%" height="15" fill="rgb(234,36,40)" fg:x="82" fg:w="1"/><text x="37.1869%" y="559.50"></text></g><g><title>CoreFoundation`CFAllocatorAllocate (1 samples, 0.45%)</title><rect x="36.9369%" y="533" width="0.4505%" height="15" fill="rgb(213,64,8)" fg:x="82" fg:w="1"/><text x="37.1869%" y="543.50"></text></g><g><title>CoreFoundation`CFAllocatorAllocate (1 samples, 0.45%)</title><rect x="37.3874%" y="517" width="0.4505%" height="15" fill="rgb(210,75,36)" fg:x="83" fg:w="1"/><text x="37.6374%" y="527.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (2 samples, 0.90%)</title><rect x="37.3874%" y="549" width="0.9009%" height="15" fill="rgb(229,88,21)" fg:x="83" fg:w="2"/><text x="37.6374%" y="559.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (2 samples, 0.90%)</title><rect x="37.3874%" y="533" width="0.9009%" height="15" fill="rgb(252,204,47)" fg:x="83" fg:w="2"/><text x="37.6374%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.45%)</title><rect x="37.8378%" y="517" width="0.4505%" height="15" fill="rgb(208,77,27)" fg:x="84" fg:w="1"/><text x="38.0878%" y="527.50"></text></g><g><title>CoreFoundation`parseXMLElement (3 samples, 1.35%)</title><rect x="37.3874%" y="613" width="1.3514%" height="15" fill="rgb(221,76,26)" fg:x="83" fg:w="3"/><text x="37.6374%" y="623.50"></text></g><g><title>CoreFoundation`parseXMLElement (3 samples, 1.35%)</title><rect x="37.3874%" y="597" width="1.3514%" height="15" fill="rgb(225,139,18)" fg:x="83" fg:w="3"/><text x="37.6374%" y="607.50"></text></g><g><title>CoreFoundation`parseStringTag (3 samples, 1.35%)</title><rect x="37.3874%" y="581" width="1.3514%" height="15" fill="rgb(230,137,11)" fg:x="83" fg:w="3"/><text x="37.6374%" y="591.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (3 samples, 1.35%)</title><rect x="37.3874%" y="565" width="1.3514%" height="15" fill="rgb(212,28,1)" fg:x="83" fg:w="3"/><text x="37.6374%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.45%)</title><rect x="38.2883%" y="549" width="0.4505%" height="15" fill="rgb(248,164,17)" fg:x="85" fg:w="1"/><text x="38.5383%" y="559.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::initFromData (62 samples, 27.93%)</title><rect x="11.7117%" y="757" width="27.9279%" height="15" fill="rgb(222,171,42)" fg:x="26" fg:w="62"/><text x="11.9617%" y="767.50">Security`Security::KeychainCore::TrustSetting..</text></g><g><title>CoreFoundation`CFPropertyListCreateFromXMLData (62 samples, 27.93%)</title><rect x="11.7117%" y="741" width="27.9279%" height="15" fill="rgb(243,84,45)" fg:x="26" fg:w="62"/><text x="11.9617%" y="751.50">CoreFoundation`CFPropertyListCreateFromXMLData</text></g><g><title>CoreFoundation`_CFPropertyListCreateWithData (62 samples, 27.93%)</title><rect x="11.7117%" y="725" width="27.9279%" height="15" fill="rgb(252,49,23)" fg:x="26" fg:w="62"/><text x="11.9617%" y="735.50">CoreFoundation`_CFPropertyListCreateWithData</text></g><g><title>CoreFoundation`_CFPropertyListCreateFromUTF8Data (62 samples, 27.93%)</title><rect x="11.7117%" y="709" width="27.9279%" height="15" fill="rgb(215,19,7)" fg:x="26" fg:w="62"/><text x="11.9617%" y="719.50">CoreFoundation`_CFPropertyListCreateFromUTF8D..</text></g><g><title>CoreFoundation`parseXMLElement (62 samples, 27.93%)</title><rect x="11.7117%" y="693" width="27.9279%" height="15" fill="rgb(238,81,41)" fg:x="26" fg:w="62"/><text x="11.9617%" y="703.50">CoreFoundation`parseXMLElement</text></g><g><title>CoreFoundation`parseXMLElement (62 samples, 27.93%)</title><rect x="11.7117%" y="677" width="27.9279%" height="15" fill="rgb(210,199,37)" fg:x="26" fg:w="62"/><text x="11.9617%" y="687.50">CoreFoundation`parseXMLElement</text></g><g><title>CoreFoundation`parseXMLElement (62 samples, 27.93%)</title><rect x="11.7117%" y="661" width="27.9279%" height="15" fill="rgb(244,192,49)" fg:x="26" fg:w="62"/><text x="11.9617%" y="671.50">CoreFoundation`parseXMLElement</text></g><g><title>CoreFoundation`parseXMLElement (55 samples, 24.77%)</title><rect x="14.8649%" y="645" width="24.7748%" height="15" fill="rgb(226,211,11)" fg:x="33" fg:w="55"/><text x="15.1149%" y="655.50">CoreFoundation`parseXMLElement</text></g><g><title>CoreFoundation`parseXMLElement (35 samples, 15.77%)</title><rect x="23.8739%" y="629" width="15.7658%" height="15" fill="rgb(236,162,54)" fg:x="53" fg:w="35"/><text x="24.1239%" y="639.50">CoreFoundation`parseXMLE..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.90%)</title><rect x="38.7387%" y="613" width="0.9009%" height="15" fill="rgb(220,229,9)" fg:x="86" fg:w="2"/><text x="38.9887%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.90%)</title><rect x="38.7387%" y="597" width="0.9009%" height="15" fill="rgb(250,87,22)" fg:x="86" fg:w="2"/><text x="38.9887%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.90%)</title><rect x="38.7387%" y="581" width="0.9009%" height="15" fill="rgb(239,43,17)" fg:x="86" fg:w="2"/><text x="38.9887%" y="591.50"></text></g><g><title>CoreFoundation`-[__NSCFString isEqual:] (1 samples, 0.45%)</title><rect x="39.6396%" y="741" width="0.4505%" height="15" fill="rgb(231,177,25)" fg:x="88" fg:w="1"/><text x="39.8896%" y="751.50"></text></g><g><title>CoreFoundation`__CFStringEqual (2 samples, 0.90%)</title><rect x="40.0901%" y="709" width="0.9009%" height="15" fill="rgb(219,179,1)" fg:x="89" fg:w="2"/><text x="40.3401%" y="719.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM objectForKey:] (3 samples, 1.35%)</title><rect x="40.0901%" y="741" width="1.3514%" height="15" fill="rgb(238,219,53)" fg:x="89" fg:w="3"/><text x="40.3401%" y="751.50"></text></g><g><title>CoreFoundation`-[__NSCFString isEqual:] (3 samples, 1.35%)</title><rect x="40.0901%" y="725" width="1.3514%" height="15" fill="rgb(232,167,36)" fg:x="89" fg:w="3"/><text x="40.3401%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.45%)</title><rect x="40.9910%" y="709" width="0.4505%" height="15" fill="rgb(244,19,51)" fg:x="91" fg:w="1"/><text x="41.2410%" y="719.50"></text></g><g><title>CoreFoundation`CFDictionaryGetValue (3 samples, 1.35%)</title><rect x="41.4414%" y="741" width="1.3514%" height="15" fill="rgb(224,6,22)" fg:x="92" fg:w="3"/><text x="41.6914%" y="751.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::CreateTrustSettings (70 samples, 31.53%)</title><rect x="11.7117%" y="773" width="31.5315%" height="15" fill="rgb(224,145,5)" fg:x="26" fg:w="70"/><text x="11.9617%" y="783.50">Security`Security::KeychainCore::TrustSettings::Cre..</text></g><g><title>Security`Security::KeychainCore::TrustSettings::validatePropList (8 samples, 3.60%)</title><rect x="39.6396%" y="757" width="3.6036%" height="15" fill="rgb(234,130,49)" fg:x="88" fg:w="8"/><text x="39.8896%" y="767.50">Secu..</text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.45%)</title><rect x="42.7928%" y="741" width="0.4505%" height="15" fill="rgb(254,6,2)" fg:x="95" fg:w="1"/><text x="43.0428%" y="751.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.45%)</title><rect x="44.1441%" y="709" width="0.4505%" height="15" fill="rgb(208,96,46)" fg:x="98" fg:w="1"/><text x="44.3941%" y="719.50"></text></g><g><title>CoreFoundation`-[__NSArrayM dealloc] (1 samples, 0.45%)</title><rect x="45.4955%" y="693" width="0.4505%" height="15" fill="rgb(239,3,39)" fg:x="101" fg:w="1"/><text x="45.7455%" y="703.50"></text></g><g><title>CoreFoundation`__RELEASE_OBJECTS_IN_THE_ARRAY__ (1 samples, 0.45%)</title><rect x="45.4955%" y="677" width="0.4505%" height="15" fill="rgb(233,210,1)" fg:x="101" fg:w="1"/><text x="45.7455%" y="687.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (1 samples, 0.45%)</title><rect x="45.4955%" y="661" width="0.4505%" height="15" fill="rgb(244,137,37)" fg:x="101" fg:w="1"/><text x="45.7455%" y="671.50"></text></g><g><title>CoreFoundation`cow_cleanup (1 samples, 0.45%)</title><rect x="45.4955%" y="645" width="0.4505%" height="15" fill="rgb(240,136,2)" fg:x="101" fg:w="1"/><text x="45.7455%" y="655.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.45%)</title><rect x="45.4955%" y="629" width="0.4505%" height="15" fill="rgb(239,18,37)" fg:x="101" fg:w="1"/><text x="45.7455%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.45%)</title><rect x="45.4955%" y="613" width="0.4505%" height="15" fill="rgb(218,185,22)" fg:x="101" fg:w="1"/><text x="45.7455%" y="623.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$object_getClass (1 samples, 0.45%)</title><rect x="45.9459%" y="693" width="0.4505%" height="15" fill="rgb(225,218,4)" fg:x="102" fg:w="1"/><text x="46.1959%" y="703.50"></text></g><g><title>CoreFoundation`__CFDataDeallocate (1 samples, 0.45%)</title><rect x="46.3964%" y="677" width="0.4505%" height="15" fill="rgb(230,182,32)" fg:x="103" fg:w="1"/><text x="46.6464%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.45%)</title><rect x="46.3964%" y="661" width="0.4505%" height="15" fill="rgb(242,56,43)" fg:x="103" fg:w="1"/><text x="46.6464%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.45%)</title><rect x="46.3964%" y="645" width="0.4505%" height="15" fill="rgb(233,99,24)" fg:x="103" fg:w="1"/><text x="46.6464%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.45%)</title><rect x="46.3964%" y="629" width="0.4505%" height="15" fill="rgb(234,209,42)" fg:x="103" fg:w="1"/><text x="46.6464%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_free (1 samples, 0.45%)</title><rect x="46.8468%" y="661" width="0.4505%" height="15" fill="rgb(227,7,12)" fg:x="104" fg:w="1"/><text x="47.0968%" y="671.50"></text></g><g><title>CoreFoundation`__CFStringDeallocate (2 samples, 0.90%)</title><rect x="46.8468%" y="677" width="0.9009%" height="15" fill="rgb(245,203,43)" fg:x="104" fg:w="2"/><text x="47.0968%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.45%)</title><rect x="47.2973%" y="661" width="0.4505%" height="15" fill="rgb(238,205,33)" fg:x="105" fg:w="1"/><text x="47.5473%" y="671.50"></text></g><g><title>CoreFoundation`cow_cleanup (8 samples, 3.60%)</title><rect x="44.5946%" y="709" width="3.6036%" height="15" fill="rgb(231,56,7)" fg:x="99" fg:w="8"/><text x="44.8446%" y="719.50">Core..</text></g><g><title>CoreFoundation`_CFRelease (4 samples, 1.80%)</title><rect x="46.3964%" y="693" width="1.8018%" height="15" fill="rgb(244,186,29)" fg:x="103" fg:w="4"/><text x="46.6464%" y="703.50">C..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.45%)</title><rect x="47.7477%" y="677" width="0.4505%" height="15" fill="rgb(234,111,31)" fg:x="106" fg:w="1"/><text x="47.9977%" y="687.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (10 samples, 4.50%)</title><rect x="44.1441%" y="725" width="4.5045%" height="15" fill="rgb(241,149,10)" fg:x="98" fg:w="10"/><text x="44.3941%" y="735.50">CoreF..</text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.45%)</title><rect x="48.1982%" y="709" width="0.4505%" height="15" fill="rgb(249,206,44)" fg:x="107" fg:w="1"/><text x="48.4482%" y="719.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::~TrustSettings (13 samples, 5.86%)</title><rect x="43.2432%" y="773" width="5.8559%" height="15" fill="rgb(251,153,30)" fg:x="96" fg:w="13"/><text x="43.4932%" y="783.50">Securit..</text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (13 samples, 5.86%)</title><rect x="43.2432%" y="757" width="5.8559%" height="15" fill="rgb(239,152,38)" fg:x="96" fg:w="13"/><text x="43.4932%" y="767.50">CoreFou..</text></g><g><title>CoreFoundation`cow_cleanup (13 samples, 5.86%)</title><rect x="43.2432%" y="741" width="5.8559%" height="15" fill="rgb(249,139,47)" fg:x="96" fg:w="13"/><text x="43.4932%" y="751.50">CoreFou..</text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.45%)</title><rect x="48.6486%" y="725" width="0.4505%" height="15" fill="rgb(244,64,35)" fg:x="108" fg:w="1"/><text x="48.8986%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.45%)</title><rect x="48.6486%" y="709" width="0.4505%" height="15" fill="rgb(216,46,15)" fg:x="108" fg:w="1"/><text x="48.8986%" y="719.50"></text></g><g><title>databend-query`common_sharing::share_endpoint::ShareEndpointManager::init (104 samples, 46.85%)</title><rect x="2.7027%" y="885" width="46.8468%" height="15" fill="rgb(250,74,19)" fg:x="6" fg:w="104"/><text x="2.9527%" y="895.50">databend-query`common_sharing::share_endpoint::ShareEndpointManager::init</text></g><g><title>databend-query`opendal::raw::http_util::client::HttpClient::build (104 samples, 46.85%)</title><rect x="2.7027%" y="869" width="46.8468%" height="15" fill="rgb(249,42,33)" fg:x="6" fg:w="104"/><text x="2.9527%" y="879.50">databend-query`opendal::raw::http_util::client::HttpClient::build</text></g><g><title>databend-query`reqwest::async_impl::client::ClientBuilder::build (104 samples, 46.85%)</title><rect x="2.7027%" y="853" width="46.8468%" height="15" fill="rgb(242,149,17)" fg:x="6" fg:w="104"/><text x="2.9527%" y="863.50">databend-query`reqwest::async_impl::client::ClientBuilder::build</text></g><g><title>databend-query`rustls_native_certs::load_native_certs (103 samples, 46.40%)</title><rect x="3.1532%" y="837" width="46.3964%" height="15" fill="rgb(244,29,21)" fg:x="7" fg:w="103"/><text x="3.4032%" y="847.50">databend-query`rustls_native_certs::load_native_certs</text></g><g><title>databend-query`security_framework::trust_settings::TrustSettings::tls_trust_settings_for_certificate (84 samples, 37.84%)</title><rect x="11.7117%" y="821" width="37.8378%" height="15" fill="rgb(220,130,37)" fg:x="26" fg:w="84"/><text x="11.9617%" y="831.50">databend-query`security_framework::trust_settings::TrustSettin..</text></g><g><title>Security`SecTrustSettingsCopyTrustSettings (84 samples, 37.84%)</title><rect x="11.7117%" y="805" width="37.8378%" height="15" fill="rgb(211,67,2)" fg:x="26" fg:w="84"/><text x="11.9617%" y="815.50">Security`SecTrustSettingsCopyTrustSettings</text></g><g><title>Security`tsCopyTrustSettings(__SecCertificate*, SecTrustSettingsDomain, __CFArray const**, __CFDate const**) (84 samples, 37.84%)</title><rect x="11.7117%" y="789" width="37.8378%" height="15" fill="rgb(235,68,52)" fg:x="26" fg:w="84"/><text x="11.9617%" y="799.50">Security`tsCopyTrustSettings(__SecCertificate*, SecTrustSettin..</text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.45%)</title><rect x="49.0991%" y="773" width="0.4505%" height="15" fill="rgb(246,142,3)" fg:x="109" fg:w="1"/><text x="49.3491%" y="783.50"></text></g><g><title>databend-query`common_tracing::init::init_logging (1 samples, 0.45%)</title><rect x="49.5495%" y="885" width="0.4505%" height="15" fill="rgb(241,25,7)" fg:x="110" fg:w="1"/><text x="49.7995%" y="895.50"></text></g><g><title>databend-query`common_tracing::loggers::new_file_log_writer (1 samples, 0.45%)</title><rect x="49.5495%" y="869" width="0.4505%" height="15" fill="rgb(242,119,39)" fg:x="110" fg:w="1"/><text x="49.7995%" y="879.50"></text></g><g><title>databend-query`tracing_appender::rolling::RollingFileAppender::new (1 samples, 0.45%)</title><rect x="49.5495%" y="853" width="0.4505%" height="15" fill="rgb(241,98,45)" fg:x="110" fg:w="1"/><text x="49.7995%" y="863.50"></text></g><g><title>databend-query`tracing_appender::rolling::Inner::new (1 samples, 0.45%)</title><rect x="49.5495%" y="837" width="0.4505%" height="15" fill="rgb(254,28,30)" fg:x="110" fg:w="1"/><text x="49.7995%" y="847.50"></text></g><g><title>databend-query`tracing_appender::rolling::create_writer (1 samples, 0.45%)</title><rect x="49.5495%" y="821" width="0.4505%" height="15" fill="rgb(241,142,54)" fg:x="110" fg:w="1"/><text x="49.7995%" y="831.50"></text></g><g><title>databend-query`std::fs::OpenOptions::_open (1 samples, 0.45%)</title><rect x="49.5495%" y="805" width="0.4505%" height="15" fill="rgb(222,85,15)" fg:x="110" fg:w="1"/><text x="49.7995%" y="815.50"></text></g><g><title>databend-query`std::sys::unix::fs::File::open_c (1 samples, 0.45%)</title><rect x="49.5495%" y="789" width="0.4505%" height="15" fill="rgb(210,85,47)" fg:x="110" fg:w="1"/><text x="49.7995%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.45%)</title><rect x="49.5495%" y="773" width="0.4505%" height="15" fill="rgb(224,206,25)" fg:x="110" fg:w="1"/><text x="49.7995%" y="783.50"></text></g><g><title>databend-query`common_storage::operator::DataOperator::try_create::_{{closure}} (1 samples, 0.45%)</title><rect x="50.0000%" y="869" width="0.4505%" height="15" fill="rgb(243,201,19)" fg:x="111" fg:w="1"/><text x="50.2500%" y="879.50"></text></g><g><title>databend-query`&lt;common_meta_app::storage::storage_params::StorageParams as core::clone::Clone&gt;::clone (1 samples, 0.45%)</title><rect x="50.0000%" y="853" width="0.4505%" height="15" fill="rgb(236,59,4)" fg:x="111" fg:w="1"/><text x="50.2500%" y="863.50"></text></g><g><title>databend-query`common_meta_store::MetaStoreProvider::create_meta_store::_{{closure}} (1 samples, 0.45%)</title><rect x="50.4505%" y="853" width="0.4505%" height="15" fill="rgb(254,179,45)" fg:x="112" fg:w="1"/><text x="50.7005%" y="863.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::try_new (1 samples, 0.45%)</title><rect x="50.4505%" y="837" width="0.4505%" height="15" fill="rgb(226,14,10)" fg:x="112" fg:w="1"/><text x="50.7005%" y="847.50"></text></g><g><title>databend-query`common_meta_client::grpc_client::MetaGrpcClient::try_create (1 samples, 0.45%)</title><rect x="50.4505%" y="821" width="0.4505%" height="15" fill="rgb(244,27,41)" fg:x="112" fg:w="1"/><text x="50.7005%" y="831.50"></text></g><g><title>databend-query`std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.45%)</title><rect x="50.4505%" y="805" width="0.4505%" height="15" fill="rgb(235,35,32)" fg:x="112" fg:w="1"/><text x="50.7005%" y="815.50"></text></g><g><title>databend-query`std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.45%)</title><rect x="50.4505%" y="789" width="0.4505%" height="15" fill="rgb(218,68,31)" fg:x="112" fg:w="1"/><text x="50.7005%" y="799.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.45%)</title><rect x="50.4505%" y="773" width="0.4505%" height="15" fill="rgb(207,120,37)" fg:x="112" fg:w="1"/><text x="50.7005%" y="783.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.45%)</title><rect x="50.4505%" y="757" width="0.4505%" height="15" fill="rgb(227,98,0)" fg:x="112" fg:w="1"/><text x="50.7005%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.45%)</title><rect x="50.4505%" y="741" width="0.4505%" height="15" fill="rgb(207,7,3)" fg:x="112" fg:w="1"/><text x="50.7005%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.45%)</title><rect x="50.4505%" y="725" width="0.4505%" height="15" fill="rgb(206,98,19)" fg:x="112" fg:w="1"/><text x="50.7005%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.45%)</title><rect x="50.4505%" y="709" width="0.4505%" height="15" fill="rgb(217,5,26)" fg:x="112" fg:w="1"/><text x="50.7005%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.45%)</title><rect x="50.4505%" y="693" width="0.4505%" height="15" fill="rgb(235,190,38)" fg:x="112" fg:w="1"/><text x="50.7005%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.45%)</title><rect x="50.4505%" y="677" width="0.4505%" height="15" fill="rgb(247,86,24)" fg:x="112" fg:w="1"/><text x="50.7005%" y="687.50"></text></g><g><title>databend-query`common_storages_system::log_queue::SystemLogTable&lt;Event&gt;::create (1 samples, 0.45%)</title><rect x="50.9009%" y="837" width="0.4505%" height="15" fill="rgb(205,101,16)" fg:x="113" fg:w="1"/><text x="51.1509%" y="847.50"></text></g><g><title>databend-query`common_storages_system::log_queue::SystemLogQueue&lt;Event&gt;::init (1 samples, 0.45%)</title><rect x="50.9009%" y="821" width="0.4505%" height="15" fill="rgb(246,168,33)" fg:x="113" fg:w="1"/><text x="51.1509%" y="831.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.45%)</title><rect x="50.9009%" y="805" width="0.4505%" height="15" fill="rgb(231,114,1)" fg:x="113" fg:w="1"/><text x="51.1509%" y="815.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.45%)</title><rect x="50.9009%" y="789" width="0.4505%" height="15" fill="rgb(207,184,53)" fg:x="113" fg:w="1"/><text x="51.1509%" y="799.50"></text></g><g><title>databend-query`&lt;common_base::runtime::catch_unwind::CatchUnwindFuture&lt;F&gt; as core::future::future::Future&gt;::poll (114 samples, 51.35%)</title><rect x="0.4505%" y="1029" width="51.3514%" height="15" fill="rgb(224,95,51)" fg:x="1" fg:w="114"/><text x="0.7005%" y="1039.50">databend-query`&lt;common_base::runtime::catch_unwind::CatchUnwindFuture&lt;F&gt; as core::fut..</text></g><g><title>databend-query`std::panicking::try (114 samples, 51.35%)</title><rect x="0.4505%" y="1013" width="51.3514%" height="15" fill="rgb(212,188,45)" fg:x="1" fg:w="114"/><text x="0.7005%" y="1023.50">databend-query`std::panicking::try</text></g><g><title>databend-query`&lt;async_backtrace::framed::Framed&lt;F&gt; as core::future::future::Future&gt;::poll{{reify.shim}} (114 samples, 51.35%)</title><rect x="0.4505%" y="997" width="51.3514%" height="15" fill="rgb(223,154,38)" fg:x="1" fg:w="114"/><text x="0.7005%" y="1007.50">databend-query`&lt;async_backtrace::framed::Framed&lt;F&gt; as core::future::future::Future&gt;::..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (114 samples, 51.35%)</title><rect x="0.4505%" y="981" width="51.3514%" height="15" fill="rgb(251,22,52)" fg:x="1" fg:w="114"/><text x="0.7005%" y="991.50">databend-query`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>databend-query`databend_query::main_entrypoint::_{{closure}} (114 samples, 51.35%)</title><rect x="0.4505%" y="965" width="51.3514%" height="15" fill="rgb(229,209,22)" fg:x="1" fg:w="114"/><text x="0.7005%" y="975.50">databend-query`databend_query::main_entrypoint::_{{closure}}</text></g><g><title>databend-query`databend_query::global_services::GlobalServices::init::_{{closure}} (109 samples, 49.10%)</title><rect x="2.7027%" y="949" width="49.0991%" height="15" fill="rgb(234,138,34)" fg:x="6" fg:w="109"/><text x="2.9527%" y="959.50">databend-query`databend_query::global_services::GlobalServices::init::_{{closure}}</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (109 samples, 49.10%)</title><rect x="2.7027%" y="933" width="49.0991%" height="15" fill="rgb(212,95,11)" fg:x="6" fg:w="109"/><text x="2.9527%" y="943.50">databend-query`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (109 samples, 49.10%)</title><rect x="2.7027%" y="917" width="49.0991%" height="15" fill="rgb(240,179,47)" fg:x="6" fg:w="109"/><text x="2.9527%" y="927.50">databend-query`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>databend-query`databend_query::global_services::GlobalServices::init_with::_{{closure}}::_{{closure}} (109 samples, 49.10%)</title><rect x="2.7027%" y="901" width="49.0991%" height="15" fill="rgb(240,163,11)" fg:x="6" fg:w="109"/><text x="2.9527%" y="911.50">databend-query`databend_query::global_services::GlobalServices::init_with::_{{clo..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 1.80%)</title><rect x="50.0000%" y="885" width="1.8018%" height="15" fill="rgb(236,37,12)" fg:x="111" fg:w="4"/><text x="50.2500%" y="895.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="50.4505%" y="869" width="1.3514%" height="15" fill="rgb(232,164,16)" fg:x="112" fg:w="3"/><text x="50.7005%" y="879.50"></text></g><g><title>databend-query`databend_query::databases::system::system_database::SystemDatabase::create (2 samples, 0.90%)</title><rect x="50.9009%" y="853" width="0.9009%" height="15" fill="rgb(244,205,15)" fg:x="113" fg:w="2"/><text x="51.1509%" y="863.50"></text></g><g><title>databend-query`common_storages_system::tables_table::TablesTable&lt;_&gt;::create (1 samples, 0.45%)</title><rect x="51.3514%" y="837" width="0.4505%" height="15" fill="rgb(223,117,47)" fg:x="114" fg:w="1"/><text x="51.6014%" y="847.50"></text></g><g><title>databend-query`common_storages_system::tables_table::TablesTable&lt;_&gt;::schema (1 samples, 0.45%)</title><rect x="51.3514%" y="821" width="0.4505%" height="15" fill="rgb(244,107,35)" fg:x="114" fg:w="1"/><text x="51.6014%" y="831.50"></text></g><g><title>databend-query`common_expression::schema::TableSchemaRefExt::create (1 samples, 0.45%)</title><rect x="51.3514%" y="805" width="0.4505%" height="15" fill="rgb(205,140,8)" fg:x="114" fg:w="1"/><text x="51.6014%" y="815.50"></text></g><g><title>databend-query`common_expression::schema::TableSchema::build_members_from_fields (1 samples, 0.45%)</title><rect x="51.3514%" y="789" width="0.4505%" height="15" fill="rgb(228,84,46)" fg:x="114" fg:w="1"/><text x="51.6014%" y="799.50"></text></g><g><title>databend-query`common_expression::schema::TableField::build_column_id (1 samples, 0.45%)</title><rect x="51.3514%" y="773" width="0.4505%" height="15" fill="rgb(254,188,9)" fg:x="114" fg:w="1"/><text x="51.6014%" y="783.50"></text></g><g><title>databend-query`alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.45%)</title><rect x="51.3514%" y="757" width="0.4505%" height="15" fill="rgb(206,112,54)" fg:x="114" fg:w="1"/><text x="51.6014%" y="767.50"></text></g><g><title>dyld`start (116 samples, 52.25%)</title><rect x="0.0000%" y="1173" width="52.2523%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="116"/><text x="0.2500%" y="1183.50">dyld`start</text></g><g><title>databend-query`main (116 samples, 52.25%)</title><rect x="0.0000%" y="1157" width="52.2523%" height="15" fill="rgb(214,194,35)" fg:x="0" fg:w="116"/><text x="0.2500%" y="1167.50">databend-query`main</text></g><g><title>databend-query`std::rt::lang_start (116 samples, 52.25%)</title><rect x="0.0000%" y="1141" width="52.2523%" height="15" fill="rgb(249,28,3)" fg:x="0" fg:w="116"/><text x="0.2500%" y="1151.50">databend-query`std::rt::lang_start</text></g><g><title>databend-query`std::rt::lang_start_internal (116 samples, 52.25%)</title><rect x="0.0000%" y="1125" width="52.2523%" height="15" fill="rgb(222,56,52)" fg:x="0" fg:w="116"/><text x="0.2500%" y="1135.50">databend-query`std::rt::lang_start_internal</text></g><g><title>databend-query`std::rt::lang_start::_{{closure}} (116 samples, 52.25%)</title><rect x="0.0000%" y="1109" width="52.2523%" height="15" fill="rgb(245,217,50)" fg:x="0" fg:w="116"/><text x="0.2500%" y="1119.50">databend-query`std::rt::lang_start::_{{closure}}</text></g><g><title>databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace (116 samples, 52.25%)</title><rect x="0.0000%" y="1093" width="52.2523%" height="15" fill="rgb(213,201,24)" fg:x="0" fg:w="116"/><text x="0.2500%" y="1103.50">databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>databend-query`databend_query::main (116 samples, 52.25%)</title><rect x="0.0000%" y="1077" width="52.2523%" height="15" fill="rgb(248,116,28)" fg:x="0" fg:w="116"/><text x="0.2500%" y="1087.50">databend-query`databend_query::main</text></g><g><title>databend-query`tokio::runtime::handle::Handle::block_on (115 samples, 51.80%)</title><rect x="0.4505%" y="1061" width="51.8018%" height="15" fill="rgb(219,72,43)" fg:x="1" fg:w="115"/><text x="0.7005%" y="1071.50">databend-query`tokio::runtime::handle::Handle::block_on</text></g><g><title>databend-query`tokio::runtime::park::CachedParkThread::block_on (115 samples, 51.80%)</title><rect x="0.4505%" y="1045" width="51.8018%" height="15" fill="rgb(209,138,14)" fg:x="1" fg:w="115"/><text x="0.7005%" y="1055.50">databend-query`tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>databend-query`tokio::runtime::park::Inner::park (1 samples, 0.45%)</title><rect x="51.8018%" y="1029" width="0.4505%" height="15" fill="rgb(222,18,33)" fg:x="115" fg:w="1"/><text x="52.0518%" y="1039.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.45%)</title><rect x="51.8018%" y="1013" width="0.4505%" height="15" fill="rgb(213,199,7)" fg:x="115" fg:w="1"/><text x="52.0518%" y="1023.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.45%)</title><rect x="51.8018%" y="997" width="0.4505%" height="15" fill="rgb(250,110,10)" fg:x="115" fg:w="1"/><text x="52.0518%" y="1007.50"></text></g><g><title>libsystem_platform.dylib`_sigtramp (1 samples, 0.45%)</title><rect x="51.8018%" y="981" width="0.4505%" height="15" fill="rgb(248,123,6)" fg:x="115" fg:w="1"/><text x="52.0518%" y="991.50"></text></g><g><title>databend-query`signal_hook_registry::handler (1 samples, 0.45%)</title><rect x="51.8018%" y="965" width="0.4505%" height="15" fill="rgb(206,91,31)" fg:x="115" fg:w="1"/><text x="52.0518%" y="975.50"></text></g><g><title>databend-query`signal_hook_registry::register::_{{closure}} (1 samples, 0.45%)</title><rect x="51.8018%" y="949" width="0.4505%" height="15" fill="rgb(211,154,13)" fg:x="115" fg:w="1"/><text x="52.0518%" y="959.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.45%)</title><rect x="51.8018%" y="933" width="0.4505%" height="15" fill="rgb(225,148,7)" fg:x="115" fg:w="1"/><text x="52.0518%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.45%)</title><rect x="52.2523%" y="1173" width="0.4505%" height="15" fill="rgb(220,160,43)" fg:x="116" fg:w="1"/><text x="52.5023%" y="1183.50"></text></g><g><title>Security`Attachment::detach (3 samples, 1.35%)</title><rect x="52.7027%" y="805" width="1.3514%" height="15" fill="rgb(213,52,39)" fg:x="117" fg:w="3"/><text x="52.9527%" y="815.50"></text></g><g><title>Security`CSSM_SPI_ModuleDetach__apple_cspdl (3 samples, 1.35%)</title><rect x="52.7027%" y="789" width="1.3514%" height="15" fill="rgb(243,137,7)" fg:x="117" fg:w="3"/><text x="52.9527%" y="799.50"></text></g><g><title>Security`Security::CssmPlugin::moduleDetach (3 samples, 1.35%)</title><rect x="52.7027%" y="773" width="1.3514%" height="15" fill="rgb(230,79,13)" fg:x="117" fg:w="3"/><text x="52.9527%" y="783.50"></text></g><g><title>Security`SSDLSession::~SSDLSession (3 samples, 1.35%)</title><rect x="52.7027%" y="757" width="1.3514%" height="15" fill="rgb(247,105,23)" fg:x="117" fg:w="3"/><text x="52.9527%" y="767.50"></text></g><g><title>Security`SSDLSession::~SSDLSession (3 samples, 1.35%)</title><rect x="52.7027%" y="741" width="1.3514%" height="15" fill="rgb(223,179,41)" fg:x="117" fg:w="3"/><text x="52.9527%" y="751.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::close (3 samples, 1.35%)</title><rect x="52.7027%" y="725" width="1.3514%" height="15" fill="rgb(218,9,34)" fg:x="117" fg:w="3"/><text x="52.9527%" y="735.50"></text></g><g><title>Security`CSSM_DL_DbClose (3 samples, 1.35%)</title><rect x="52.7027%" y="709" width="1.3514%" height="15" fill="rgb(222,106,8)" fg:x="117" fg:w="3"/><text x="52.9527%" y="719.50"></text></g><g><title>Security`cssm_DbClose(cssm_dl_db_handle) (3 samples, 1.35%)</title><rect x="52.7027%" y="693" width="1.3514%" height="15" fill="rgb(211,220,0)" fg:x="117" fg:w="3"/><text x="52.9527%" y="703.50"></text></g><g><title>Security`Security::DatabaseSession::DbClose (3 samples, 1.35%)</title><rect x="52.7027%" y="677" width="1.3514%" height="15" fill="rgb(229,52,16)" fg:x="117" fg:w="3"/><text x="52.9527%" y="687.50"></text></g><g><title>Security`Security::DatabaseManager::dbClose (3 samples, 1.35%)</title><rect x="52.7027%" y="661" width="1.3514%" height="15" fill="rgb(212,155,18)" fg:x="117" fg:w="3"/><text x="52.9527%" y="671.50"></text></g><g><title>Security`Security::Database::_dbClose (3 samples, 1.35%)</title><rect x="52.7027%" y="645" width="1.3514%" height="15" fill="rgb(242,21,14)" fg:x="117" fg:w="3"/><text x="52.9527%" y="655.50"></text></g><g><title>Security`Security::AppleDatabase::dbClose (3 samples, 1.35%)</title><rect x="52.7027%" y="629" width="1.3514%" height="15" fill="rgb(222,19,48)" fg:x="117" fg:w="3"/><text x="52.9527%" y="639.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::DbVersion const&gt;::setPointer (3 samples, 1.35%)</title><rect x="52.7027%" y="613" width="1.3514%" height="15" fill="rgb(232,45,27)" fg:x="117" fg:w="3"/><text x="52.9527%" y="623.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::DbVersion const&gt;::release_internal (3 samples, 1.35%)</title><rect x="52.7027%" y="597" width="1.3514%" height="15" fill="rgb(249,103,42)" fg:x="117" fg:w="3"/><text x="52.9527%" y="607.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::AtomicBufferedFile&gt;::~RefPointer (3 samples, 1.35%)</title><rect x="52.7027%" y="581" width="1.3514%" height="15" fill="rgb(246,81,33)" fg:x="117" fg:w="3"/><text x="52.9527%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 1.35%)</title><rect x="52.7027%" y="565" width="1.3514%" height="15" fill="rgb(252,33,42)" fg:x="117" fg:w="3"/><text x="52.9527%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 1.35%)</title><rect x="52.7027%" y="549" width="1.3514%" height="15" fill="rgb(209,212,41)" fg:x="117" fg:w="3"/><text x="52.9527%" y="559.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (4 samples, 1.80%)</title><rect x="52.7027%" y="1173" width="1.8018%" height="15" fill="rgb(207,154,6)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1183.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (4 samples, 1.80%)</title><rect x="52.7027%" y="1157" width="1.8018%" height="15" fill="rgb(223,64,47)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1167.50">l..</text></g><g><title>libdispatch.dylib`_dispatch_worker_thread2 (4 samples, 1.80%)</title><rect x="52.7027%" y="1141" width="1.8018%" height="15" fill="rgb(211,161,38)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1151.50">l..</text></g><g><title>libdispatch.dylib`_dispatch_root_queue_drain (4 samples, 1.80%)</title><rect x="52.7027%" y="1125" width="1.8018%" height="15" fill="rgb(219,138,40)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1135.50">l..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (4 samples, 1.80%)</title><rect x="52.7027%" y="1109" width="1.8018%" height="15" fill="rgb(241,228,46)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1119.50">l..</text></g><g><title>libdispatch.dylib`_dispatch_call_block_and_release (4 samples, 1.80%)</title><rect x="52.7027%" y="1093" width="1.8018%" height="15" fill="rgb(223,209,38)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1103.50">l..</text></g><g><title>CoreFoundation`_CFRelease (4 samples, 1.80%)</title><rect x="52.7027%" y="1077" width="1.8018%" height="15" fill="rgb(236,164,45)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1087.50">C..</text></g><g><title>Security`Security::CFClass::refCountForType (4 samples, 1.80%)</title><rect x="52.7027%" y="1061" width="1.8018%" height="15" fill="rgb(231,15,5)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1071.50">S..</text></g><g><title>Security`Security::KeychainCore::KeychainImpl::~KeychainImpl (4 samples, 1.80%)</title><rect x="52.7027%" y="1045" width="1.8018%" height="15" fill="rgb(252,35,15)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1055.50">S..</text></g><g><title>Security`Security::KeychainCore::KeychainImpl::~KeychainImpl (4 samples, 1.80%)</title><rect x="52.7027%" y="1029" width="1.8018%" height="15" fill="rgb(248,181,18)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1039.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (4 samples, 1.80%)</title><rect x="52.7027%" y="1013" width="1.8018%" height="15" fill="rgb(233,39,42)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1023.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (4 samples, 1.80%)</title><rect x="52.7027%" y="997" width="1.8018%" height="15" fill="rgb(238,110,33)" fg:x="117" fg:w="4"/><text x="52.9527%" y="1007.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (4 samples, 1.80%)</title><rect x="52.7027%" y="981" width="1.8018%" height="15" fill="rgb(233,195,10)" fg:x="117" fg:w="4"/><text x="52.9527%" y="991.50">S..</text></g><g><title>Security`Security::CssmClient::SSDbImpl::~SSDbImpl (4 samples, 1.80%)</title><rect x="52.7027%" y="965" width="1.8018%" height="15" fill="rgb(254,105,3)" fg:x="117" fg:w="4"/><text x="52.9527%" y="975.50">S..</text></g><g><title>Security`Security::CssmClient::ObjectImpl::~ObjectImpl (4 samples, 1.80%)</title><rect x="52.7027%" y="949" width="1.8018%" height="15" fill="rgb(221,225,9)" fg:x="117" fg:w="4"/><text x="52.9527%" y="959.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (4 samples, 1.80%)</title><rect x="52.7027%" y="933" width="1.8018%" height="15" fill="rgb(224,227,45)" fg:x="117" fg:w="4"/><text x="52.9527%" y="943.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (4 samples, 1.80%)</title><rect x="52.7027%" y="917" width="1.8018%" height="15" fill="rgb(229,198,43)" fg:x="117" fg:w="4"/><text x="52.9527%" y="927.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (4 samples, 1.80%)</title><rect x="52.7027%" y="901" width="1.8018%" height="15" fill="rgb(206,209,35)" fg:x="117" fg:w="4"/><text x="52.9527%" y="911.50">S..</text></g><g><title>Security`non-virtual thunk to Security::CssmClient::SSCSPDLImpl::~SSCSPDLImpl (4 samples, 1.80%)</title><rect x="52.7027%" y="885" width="1.8018%" height="15" fill="rgb(245,195,53)" fg:x="117" fg:w="4"/><text x="52.9527%" y="895.50">S..</text></g><g><title>Security`Security::CssmClient::CSPDLImpl::~CSPDLImpl (4 samples, 1.80%)</title><rect x="52.7027%" y="869" width="1.8018%" height="15" fill="rgb(240,92,26)" fg:x="117" fg:w="4"/><text x="52.9527%" y="879.50">S..</text></g><g><title>Security`Security::CssmClient::AttachmentImpl::~AttachmentImpl (4 samples, 1.80%)</title><rect x="52.7027%" y="853" width="1.8018%" height="15" fill="rgb(207,40,23)" fg:x="117" fg:w="4"/><text x="52.9527%" y="863.50">S..</text></g><g><title>Security`Security::CssmClient::AttachmentImpl::deactivate (4 samples, 1.80%)</title><rect x="52.7027%" y="837" width="1.8018%" height="15" fill="rgb(223,111,35)" fg:x="117" fg:w="4"/><text x="52.9527%" y="847.50">S..</text></g><g><title>Security`CSSM_ModuleDetach (4 samples, 1.80%)</title><rect x="52.7027%" y="821" width="1.8018%" height="15" fill="rgb(229,147,28)" fg:x="117" fg:w="4"/><text x="52.9527%" y="831.50">S..</text></g><g><title>Security`countLegacyAPI (1 samples, 0.45%)</title><rect x="54.0541%" y="805" width="0.4505%" height="15" fill="rgb(211,29,28)" fg:x="120" fg:w="1"/><text x="54.3041%" y="815.50"></text></g><g><title>Foundation`_NSThreadGet0 (1 samples, 0.45%)</title><rect x="54.0541%" y="789" width="0.4505%" height="15" fill="rgb(228,72,33)" fg:x="120" fg:w="1"/><text x="54.3041%" y="799.50"></text></g><g><title>libobjc.A.dylib`objc_opt_new (1 samples, 0.45%)</title><rect x="54.0541%" y="773" width="0.4505%" height="15" fill="rgb(205,214,31)" fg:x="120" fg:w="1"/><text x="54.3041%" y="783.50"></text></g><g><title>libobjc.A.dylib`_objc_rootAllocWithZone (1 samples, 0.45%)</title><rect x="54.0541%" y="757" width="0.4505%" height="15" fill="rgb(224,111,15)" fg:x="120" fg:w="1"/><text x="54.3041%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.45%)</title><rect x="54.0541%" y="741" width="0.4505%" height="15" fill="rgb(253,21,26)" fg:x="120" fg:w="1"/><text x="54.3041%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.45%)</title><rect x="54.0541%" y="725" width="0.4505%" height="15" fill="rgb(245,139,43)" fg:x="120" fg:w="1"/><text x="54.3041%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.45%)</title><rect x="54.0541%" y="709" width="0.4505%" height="15" fill="rgb(252,170,7)" fg:x="120" fg:w="1"/><text x="54.3041%" y="719.50"></text></g><g><title>databend-query`core::ops::function::FnOnce::call_once (1 samples, 0.45%)</title><rect x="54.5045%" y="1077" width="0.4505%" height="15" fill="rgb(231,118,14)" fg:x="121" fg:w="1"/><text x="54.7545%" y="1087.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute (1 samples, 0.45%)</title><rect x="54.5045%" y="1061" width="0.4505%" height="15" fill="rgb(238,83,0)" fg:x="121" fg:w="1"/><text x="54.7545%" y="1071.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::on_finished (1 samples, 0.45%)</title><rect x="54.5045%" y="1045" width="0.4505%" height="15" fill="rgb(221,39,39)" fg:x="121" fg:w="1"/><text x="54.7545%" y="1055.50"></text></g><g><title>databend-query`common_base::runtime::catch_unwind::catch_unwind (1 samples, 0.45%)</title><rect x="54.5045%" y="1029" width="0.4505%" height="15" fill="rgb(222,119,46)" fg:x="121" fg:w="1"/><text x="54.7545%" y="1039.50"></text></g><g><title>databend-query`std::panicking::try (1 samples, 0.45%)</title><rect x="54.5045%" y="1013" width="0.4505%" height="15" fill="rgb(222,165,49)" fg:x="121" fg:w="1"/><text x="54.7545%" y="1023.50"></text></g><g><title>databend-query`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.45%)</title><rect x="54.5045%" y="997" width="0.4505%" height="15" fill="rgb(219,113,52)" fg:x="121" fg:w="1"/><text x="54.7545%" y="1007.50"></text></g><g><title>databend-query`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.45%)</title><rect x="54.5045%" y="981" width="0.4505%" height="15" fill="rgb(214,7,15)" fg:x="121" fg:w="1"/><text x="54.7545%" y="991.50"></text></g><g><title>databend-query`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.45%)</title><rect x="54.5045%" y="965" width="0.4505%" height="15" fill="rgb(235,32,4)" fg:x="121" fg:w="1"/><text x="54.7545%" y="975.50"></text></g><g><title>databend-query`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.45%)</title><rect x="54.5045%" y="949" width="0.4505%" height="15" fill="rgb(238,90,54)" fg:x="121" fg:w="1"/><text x="54.7545%" y="959.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter::Interpreter::execute::_{{closure}}::_{{closure}}::_{{closure}} (1 samples, 0.45%)</title><rect x="54.5045%" y="933" width="0.4505%" height="15" fill="rgb(213,208,19)" fg:x="121" fg:w="1"/><text x="54.7545%" y="943.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_metrics::InterpreterMetrics::record_query_finished (1 samples, 0.45%)</title><rect x="54.5045%" y="917" width="0.4505%" height="15" fill="rgb(233,156,4)" fg:x="121" fg:w="1"/><text x="54.7545%" y="927.50"></text></g><g><title>databend-query`prometheus_client::metrics::family::Family&lt;S,M,C&gt;::get_or_create (1 samples, 0.45%)</title><rect x="54.5045%" y="901" width="0.4505%" height="15" fill="rgb(207,194,5)" fg:x="121" fg:w="1"/><text x="54.7545%" y="911.50"></text></g><g><title>databend-query`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.45%)</title><rect x="54.5045%" y="885" width="0.4505%" height="15" fill="rgb(206,111,30)" fg:x="121" fg:w="1"/><text x="54.7545%" y="895.50"></text></g><g><title>databend-query`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.45%)</title><rect x="54.5045%" y="869" width="0.4505%" height="15" fill="rgb(243,70,54)" fg:x="121" fg:w="1"/><text x="54.7545%" y="879.50"></text></g><g><title>databend-query`hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.45%)</title><rect x="54.5045%" y="853" width="0.4505%" height="15" fill="rgb(242,28,8)" fg:x="121" fg:w="1"/><text x="54.7545%" y="863.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.45%)</title><rect x="54.5045%" y="837" width="0.4505%" height="15" fill="rgb(219,106,18)" fg:x="121" fg:w="1"/><text x="54.7545%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.45%)</title><rect x="54.5045%" y="821" width="0.4505%" height="15" fill="rgb(244,222,10)" fg:x="121" fg:w="1"/><text x="54.7545%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.45%)</title><rect x="54.5045%" y="805" width="0.4505%" height="15" fill="rgb(236,179,52)" fg:x="121" fg:w="1"/><text x="54.7545%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.45%)</title><rect x="54.5045%" y="789" width="0.4505%" height="15" fill="rgb(213,23,39)" fg:x="121" fg:w="1"/><text x="54.7545%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.45%)</title><rect x="54.5045%" y="773" width="0.4505%" height="15" fill="rgb(238,48,10)" fg:x="121" fg:w="1"/><text x="54.7545%" y="783.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (1 samples, 0.45%)</title><rect x="54.9550%" y="1077" width="0.4505%" height="15" fill="rgb(251,196,23)" fg:x="122" fg:w="1"/><text x="55.2050%" y="1087.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::BlockingPool::shutdown (1 samples, 0.45%)</title><rect x="54.9550%" y="1061" width="0.4505%" height="15" fill="rgb(250,152,24)" fg:x="122" fg:w="1"/><text x="55.2050%" y="1071.50"></text></g><g><title>databend-query`std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.45%)</title><rect x="54.9550%" y="1045" width="0.4505%" height="15" fill="rgb(209,150,17)" fg:x="122" fg:w="1"/><text x="55.2050%" y="1055.50"></text></g><g><title>databend-query`std::sys::unix::thread::Thread::join (1 samples, 0.45%)</title><rect x="54.9550%" y="1029" width="0.4505%" height="15" fill="rgb(234,202,34)" fg:x="122" fg:w="1"/><text x="55.2050%" y="1039.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (1 samples, 0.45%)</title><rect x="54.9550%" y="1013" width="0.4505%" height="15" fill="rgb(253,148,53)" fg:x="122" fg:w="1"/><text x="55.2050%" y="1023.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (1 samples, 0.45%)</title><rect x="54.9550%" y="997" width="0.4505%" height="15" fill="rgb(218,129,16)" fg:x="122" fg:w="1"/><text x="55.2050%" y="1007.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.45%)</title><rect x="54.9550%" y="981" width="0.4505%" height="15" fill="rgb(216,85,19)" fg:x="122" fg:w="1"/><text x="55.2050%" y="991.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.45%)</title><rect x="55.4054%" y="981" width="0.4505%" height="15" fill="rgb(235,228,7)" fg:x="123" fg:w="1"/><text x="55.6554%" y="991.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_condvar::WorkersCondvar::wait (2 samples, 0.90%)</title><rect x="55.4054%" y="997" width="0.9009%" height="15" fill="rgb(245,175,0)" fg:x="123" fg:w="2"/><text x="55.6554%" y="1007.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.45%)</title><rect x="55.8559%" y="981" width="0.4505%" height="15" fill="rgb(208,168,36)" fg:x="124" fg:w="1"/><text x="56.1059%" y="991.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::RunningGraph::schedule_queue (1 samples, 0.45%)</title><rect x="56.3063%" y="997" width="0.4505%" height="15" fill="rgb(246,171,24)" fg:x="125" fg:w="1"/><text x="56.5563%" y="1007.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ExecutingGraph::schedule_queue (1 samples, 0.45%)</title><rect x="56.3063%" y="981" width="0.4505%" height="15" fill="rgb(215,142,24)" fg:x="125" fg:w="1"/><text x="56.5563%" y="991.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::event (1 samples, 0.45%)</title><rect x="56.3063%" y="965" width="0.4505%" height="15" fill="rgb(250,187,7)" fg:x="125" fg:w="1"/><text x="56.5563%" y="975.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::process (1 samples, 0.45%)</title><rect x="56.7568%" y="965" width="0.4505%" height="15" fill="rgb(228,66,33)" fg:x="126" fg:w="1"/><text x="57.0068%" y="975.50"></text></g><g><title>databend-query`&lt;common_pipeline_transforms::processors::transforms::transform_sort_partial::TransformSortPartial as common_pipeline_transforms::processors::transforms::transform::Transform&gt;::transform (1 samples, 0.45%)</title><rect x="56.7568%" y="949" width="0.4505%" height="15" fill="rgb(234,215,21)" fg:x="126" fg:w="1"/><text x="57.0068%" y="959.50"></text></g><g><title>databend-query`common_expression::kernels::sort::_&lt;impl common_expression::block::DataBlock&gt;::sort (1 samples, 0.45%)</title><rect x="56.7568%" y="933" width="0.4505%" height="15" fill="rgb(222,191,20)" fg:x="126" fg:w="1"/><text x="57.0068%" y="943.50"></text></g><g><title>databend-query`common_arrow::arrow::compute::sort::lex_sort::lexsort_to_indices_impl (1 samples, 0.45%)</title><rect x="56.7568%" y="917" width="0.4505%" height="15" fill="rgb(245,79,54)" fg:x="126" fg:w="1"/><text x="57.0068%" y="927.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.45%)</title><rect x="56.7568%" y="901" width="0.4505%" height="15" fill="rgb(240,10,37)" fg:x="126" fg:w="1"/><text x="57.0068%" y="911.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::operations::read::parquet_data_source_deserializer::DeserializeDataTransform as common_pipeline_core::processors::processor::Processor&gt;::process (1 samples, 0.45%)</title><rect x="57.2072%" y="965" width="0.4505%" height="15" fill="rgb(214,192,32)" fg:x="127" fg:w="1"/><text x="57.4572%" y="975.50"></text></g><g><title>databend-query`common_storages_fuse::io::read::block::block_reader_parquet_deserialize::_&lt;impl common_storages_fuse::io::read::block::block_reader::BlockReader&gt;::deserialize_field (1 samples, 0.45%)</title><rect x="57.2072%" y="949" width="0.4505%" height="15" fill="rgb(209,36,54)" fg:x="127" fg:w="1"/><text x="57.4572%" y="959.50"></text></g><g><title>databend-query`common_expression::function::FunctionRegistry::search_candidates (1 samples, 0.45%)</title><rect x="57.6577%" y="805" width="0.4505%" height="15" fill="rgb(220,10,11)" fg:x="128" fg:w="1"/><text x="57.9077%" y="815.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.45%)</title><rect x="57.6577%" y="789" width="0.4505%" height="15" fill="rgb(221,106,17)" fg:x="128" fg:w="1"/><text x="57.9077%" y="799.50"></text></g><g><title>databend-query`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.45%)</title><rect x="57.6577%" y="773" width="0.4505%" height="15" fill="rgb(251,142,44)" fg:x="128" fg:w="1"/><text x="57.9077%" y="783.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.45%)</title><rect x="57.6577%" y="757" width="0.4505%" height="15" fill="rgb(238,13,15)" fg:x="128" fg:w="1"/><text x="57.9077%" y="767.50"></text></g><g><title>databend-query`common_expression::type_check::check (2 samples, 0.90%)</title><rect x="57.6577%" y="917" width="0.9009%" height="15" fill="rgb(208,107,27)" fg:x="128" fg:w="2"/><text x="57.9077%" y="927.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (2 samples, 0.90%)</title><rect x="57.6577%" y="901" width="0.9009%" height="15" fill="rgb(205,136,37)" fg:x="128" fg:w="2"/><text x="57.9077%" y="911.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.90%)</title><rect x="57.6577%" y="885" width="0.9009%" height="15" fill="rgb(250,205,27)" fg:x="128" fg:w="2"/><text x="57.9077%" y="895.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.90%)</title><rect x="57.6577%" y="869" width="0.9009%" height="15" fill="rgb(210,80,43)" fg:x="128" fg:w="2"/><text x="57.9077%" y="879.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.90%)</title><rect x="57.6577%" y="853" width="0.9009%" height="15" fill="rgb(247,160,36)" fg:x="128" fg:w="2"/><text x="57.9077%" y="863.50"></text></g><g><title>databend-query`common_expression::type_check::check (2 samples, 0.90%)</title><rect x="57.6577%" y="837" width="0.9009%" height="15" fill="rgb(234,13,49)" fg:x="128" fg:w="2"/><text x="57.9077%" y="847.50"></text></g><g><title>databend-query`common_expression::type_check::check_function (2 samples, 0.90%)</title><rect x="57.6577%" y="821" width="0.9009%" height="15" fill="rgb(234,122,0)" fg:x="128" fg:w="2"/><text x="57.9077%" y="831.50"></text></g><g><title>databend-query`common_expression::type_check::try_check_function (1 samples, 0.45%)</title><rect x="58.1081%" y="805" width="0.4505%" height="15" fill="rgb(207,146,38)" fg:x="129" fg:w="1"/><text x="58.3581%" y="815.50"></text></g><g><title>databend-query`common_expression::type_check::try_unify_signature (1 samples, 0.45%)</title><rect x="58.1081%" y="789" width="0.4505%" height="15" fill="rgb(207,177,25)" fg:x="129" fg:w="1"/><text x="58.3581%" y="799.50"></text></g><g><title>databend-query`common_expression::type_check::Substitution::merge (1 samples, 0.45%)</title><rect x="58.1081%" y="773" width="0.4505%" height="15" fill="rgb(211,178,42)" fg:x="129" fg:w="1"/><text x="58.3581%" y="783.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.45%)</title><rect x="58.1081%" y="757" width="0.4505%" height="15" fill="rgb(230,69,54)" fg:x="129" fg:w="1"/><text x="58.3581%" y="767.50"></text></g><g><title>databend-query`core::hash::BuildHasher::hash_one (1 samples, 0.45%)</title><rect x="58.1081%" y="741" width="0.4505%" height="15" fill="rgb(214,135,41)" fg:x="129" fg:w="1"/><text x="58.3581%" y="751.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_threads::_{{closure}} (8 samples, 3.60%)</title><rect x="55.4054%" y="1077" width="3.6036%" height="15" fill="rgb(237,67,25)" fg:x="123" fg:w="8"/><text x="55.6554%" y="1087.50">data..</text></g><g><title>databend-query`common_base::runtime::catch_unwind::catch_unwind (8 samples, 3.60%)</title><rect x="55.4054%" y="1061" width="3.6036%" height="15" fill="rgb(222,189,50)" fg:x="123" fg:w="8"/><text x="55.6554%" y="1071.50">data..</text></g><g><title>databend-query`std::panicking::try (8 samples, 3.60%)</title><rect x="55.4054%" y="1045" width="3.6036%" height="15" fill="rgb(245,148,34)" fg:x="123" fg:w="8"/><text x="55.6554%" y="1055.50">data..</text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8 samples, 3.60%)</title><rect x="55.4054%" y="1029" width="3.6036%" height="15" fill="rgb(222,29,6)" fg:x="123" fg:w="8"/><text x="55.6554%" y="1039.50">data..</text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_single_thread (8 samples, 3.60%)</title><rect x="55.4054%" y="1013" width="3.6036%" height="15" fill="rgb(221,189,43)" fg:x="123" fg:w="8"/><text x="55.6554%" y="1023.50">data..</text></g><g><title>databend-query`databend_query::pipelines::executor::executor_worker_context::ExecutorWorkerContext::execute_sync_task (5 samples, 2.25%)</title><rect x="56.7568%" y="997" width="2.2523%" height="15" fill="rgb(207,36,27)" fg:x="126" fg:w="5"/><text x="57.0068%" y="1007.50">d..</text></g><g><title>databend-query`common_pipeline_core::processors::processor::ProcessorPtr::process (5 samples, 2.25%)</title><rect x="56.7568%" y="981" width="2.2523%" height="15" fill="rgb(217,90,24)" fg:x="126" fg:w="5"/><text x="57.0068%" y="991.50">d..</text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::hash_join::transform_hash_join_build::TransformHashJoinBuild as common_pipeline_core::processors::processor::Processor&gt;::process (3 samples, 1.35%)</title><rect x="57.6577%" y="965" width="1.3514%" height="15" fill="rgb(224,66,35)" fg:x="128" fg:w="3"/><text x="57.9077%" y="975.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_state::HashJoinState::generate_runtime_filters (3 samples, 1.35%)</title><rect x="57.6577%" y="949" width="1.3514%" height="15" fill="rgb(221,13,50)" fg:x="128" fg:w="3"/><text x="57.9077%" y="959.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::util::inlist_filter (3 samples, 1.35%)</title><rect x="57.6577%" y="933" width="1.3514%" height="15" fill="rgb(236,68,49)" fg:x="128" fg:w="3"/><text x="57.9077%" y="943.50"></text></g><g><title>databend-query`common_expression::values::Value&lt;common_expression::types::any::AnyType&gt;::convert_to_full_column (1 samples, 0.45%)</title><rect x="58.5586%" y="917" width="0.4505%" height="15" fill="rgb(229,146,28)" fg:x="130" fg:w="1"/><text x="58.8086%" y="927.50"></text></g><g><title>databend-query`common_expression::values::ColumnBuilder::repeat (1 samples, 0.45%)</title><rect x="58.5586%" y="901" width="0.4505%" height="15" fill="rgb(225,31,38)" fg:x="130" fg:w="1"/><text x="58.8086%" y="911.50"></text></g><g><title>databend-query`common_expression::types::array::ArrayColumnBuilder&lt;T&gt;::repeat (1 samples, 0.45%)</title><rect x="58.5586%" y="885" width="0.4505%" height="15" fill="rgb(250,208,3)" fg:x="130" fg:w="1"/><text x="58.8086%" y="895.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.45%)</title><rect x="58.5586%" y="869" width="0.4505%" height="15" fill="rgb(246,54,23)" fg:x="130" fg:w="1"/><text x="58.8086%" y="879.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.45%)</title><rect x="59.0090%" y="1061" width="0.4505%" height="15" fill="rgb(243,76,11)" fg:x="131" fg:w="1"/><text x="59.2590%" y="1071.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.45%)</title><rect x="59.0090%" y="1045" width="0.4505%" height="15" fill="rgb(245,21,50)" fg:x="131" fg:w="1"/><text x="59.2590%" y="1055.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.45%)</title><rect x="59.0090%" y="1029" width="0.4505%" height="15" fill="rgb(228,9,43)" fg:x="131" fg:w="1"/><text x="59.2590%" y="1039.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.45%)</title><rect x="59.0090%" y="1013" width="0.4505%" height="15" fill="rgb(208,100,47)" fg:x="131" fg:w="1"/><text x="59.2590%" y="1023.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.45%)</title><rect x="59.4595%" y="837" width="0.4505%" height="15" fill="rgb(232,26,8)" fg:x="132" fg:w="1"/><text x="59.7095%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.45%)</title><rect x="59.4595%" y="821" width="0.4505%" height="15" fill="rgb(216,166,38)" fg:x="132" fg:w="1"/><text x="59.7095%" y="831.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3 samples, 1.35%)</title><rect x="59.4595%" y="869" width="1.3514%" height="15" fill="rgb(251,202,51)" fg:x="132" fg:w="3"/><text x="59.7095%" y="879.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::park::Parker::park (3 samples, 1.35%)</title><rect x="59.4595%" y="853" width="1.3514%" height="15" fill="rgb(254,216,34)" fg:x="132" fg:w="3"/><text x="59.7095%" y="863.50"></text></g><g><title>databend-query`tokio::runtime::time::Driver::park_internal (2 samples, 0.90%)</title><rect x="59.9099%" y="837" width="0.9009%" height="15" fill="rgb(251,32,27)" fg:x="133" fg:w="2"/><text x="60.1599%" y="847.50"></text></g><g><title>databend-query`tokio::runtime::driver::IoStack::park_timeout (2 samples, 0.90%)</title><rect x="59.9099%" y="821" width="0.9009%" height="15" fill="rgb(208,127,28)" fg:x="133" fg:w="2"/><text x="60.1599%" y="831.50"></text></g><g><title>databend-query`tokio::runtime::io::Driver::turn (2 samples, 0.90%)</title><rect x="59.9099%" y="805" width="0.9009%" height="15" fill="rgb(224,137,22)" fg:x="133" fg:w="2"/><text x="60.1599%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`kevent (2 samples, 0.90%)</title><rect x="59.9099%" y="789" width="0.9009%" height="15" fill="rgb(254,70,32)" fg:x="133" fg:w="2"/><text x="60.1599%" y="799.50"></text></g><g><title>databend-query`&lt;opendal::layers::error_context::ErrorContextWrapper&lt;T&gt; as opendal::raw::oio::read::api::Read&gt;::poll_read (1 samples, 0.45%)</title><rect x="61.2613%" y="709" width="0.4505%" height="15" fill="rgb(229,75,37)" fg:x="136" fg:w="1"/><text x="61.5113%" y="719.50"></text></g><g><title>databend-query`&lt;opendal::raw::oio::read::tokio_read::TokioReader&lt;R&gt; as opendal::raw::oio::read::api::Read&gt;::poll_read (1 samples, 0.45%)</title><rect x="61.2613%" y="693" width="0.4505%" height="15" fill="rgb(252,64,23)" fg:x="136" fg:w="1"/><text x="61.5113%" y="703.50"></text></g><g><title>databend-query`&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.45%)</title><rect x="61.2613%" y="677" width="0.4505%" height="15" fill="rgb(232,162,48)" fg:x="136" fg:w="1"/><text x="61.5113%" y="687.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.45%)</title><rect x="61.2613%" y="661" width="0.4505%" height="15" fill="rgb(246,160,12)" fg:x="136" fg:w="1"/><text x="61.5113%" y="671.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.45%)</title><rect x="61.2613%" y="645" width="0.4505%" height="15" fill="rgb(247,166,0)" fg:x="136" fg:w="1"/><text x="61.5113%" y="655.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (1 samples, 0.45%)</title><rect x="61.2613%" y="629" width="0.4505%" height="15" fill="rgb(249,219,21)" fg:x="136" fg:w="1"/><text x="61.5113%" y="639.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.45%)</title><rect x="61.2613%" y="613" width="0.4505%" height="15" fill="rgb(205,209,3)" fg:x="136" fg:w="1"/><text x="61.5113%" y="623.50"></text></g><g><title>databend-query`parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.45%)</title><rect x="61.2613%" y="597" width="0.4505%" height="15" fill="rgb(243,44,1)" fg:x="136" fg:w="1"/><text x="61.5113%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.45%)</title><rect x="61.2613%" y="581" width="0.4505%" height="15" fill="rgb(206,159,16)" fg:x="136" fg:w="1"/><text x="61.5113%" y="591.50"></text></g><g><title>databend-query`&lt;opendal::layers::error_context::ErrorContextAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read::_{{closure}} (1 samples, 0.45%)</title><rect x="61.7117%" y="661" width="0.4505%" height="15" fill="rgb(244,77,30)" fg:x="137" fg:w="1"/><text x="61.9617%" y="671.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="61.7117%" y="645" width="0.4505%" height="15" fill="rgb(218,69,12)" fg:x="137" fg:w="1"/><text x="61.9617%" y="655.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="61.7117%" y="629" width="0.4505%" height="15" fill="rgb(212,87,7)" fg:x="137" fg:w="1"/><text x="61.9617%" y="639.50"></text></g><g><title>databend-query`&lt;opendal::services::fs::backend::FsBackend as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (1 samples, 0.45%)</title><rect x="61.7117%" y="613" width="0.4505%" height="15" fill="rgb(245,114,25)" fg:x="137" fg:w="1"/><text x="61.9617%" y="623.50"></text></g><g><title>databend-query`tokio::fs::open_options::OpenOptions::open::_{{closure}} (1 samples, 0.45%)</title><rect x="61.7117%" y="597" width="0.4505%" height="15" fill="rgb(210,61,42)" fg:x="137" fg:w="1"/><text x="61.9617%" y="607.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.45%)</title><rect x="61.7117%" y="581" width="0.4505%" height="15" fill="rgb(211,52,33)" fg:x="137" fg:w="1"/><text x="61.9617%" y="591.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.45%)</title><rect x="61.7117%" y="565" width="0.4505%" height="15" fill="rgb(234,58,33)" fg:x="137" fg:w="1"/><text x="61.9617%" y="575.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (1 samples, 0.45%)</title><rect x="61.7117%" y="549" width="0.4505%" height="15" fill="rgb(220,115,36)" fg:x="137" fg:w="1"/><text x="61.9617%" y="559.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.45%)</title><rect x="61.7117%" y="533" width="0.4505%" height="15" fill="rgb(243,153,54)" fg:x="137" fg:w="1"/><text x="61.9617%" y="543.50"></text></g><g><title>databend-query`parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.45%)</title><rect x="61.7117%" y="517" width="0.4505%" height="15" fill="rgb(251,47,18)" fg:x="137" fg:w="1"/><text x="61.9617%" y="527.50"></text></g><g><title>databend-query`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.45%)</title><rect x="61.7117%" y="501" width="0.4505%" height="15" fill="rgb(242,102,42)" fg:x="137" fg:w="1"/><text x="61.9617%" y="511.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.45%)</title><rect x="61.7117%" y="485" width="0.4505%" height="15" fill="rgb(234,31,38)" fg:x="137" fg:w="1"/><text x="61.9617%" y="495.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (1 samples, 0.45%)</title><rect x="61.7117%" y="469" width="0.4505%" height="15" fill="rgb(221,117,51)" fg:x="137" fg:w="1"/><text x="61.9617%" y="479.50"></text></g><g><title>databend-query`&lt;common_base::runtime::runtime_tracker::TrackedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.35%)</title><rect x="61.2613%" y="741" width="1.3514%" height="15" fill="rgb(212,20,18)" fg:x="136" fg:w="3"/><text x="61.5113%" y="751.50"></text></g><g><title>databend-query`&lt;opendal::raw::oio::read::file_read::FileReader&lt;A,R&gt; as opendal::raw::oio::read::api::Read&gt;::poll_read (3 samples, 1.35%)</title><rect x="61.2613%" y="725" width="1.3514%" height="15" fill="rgb(245,133,36)" fg:x="136" fg:w="3"/><text x="61.5113%" y="735.50"></text></g><g><title>databend-query`opendal::raw::oio::read::file_read::FileReader&lt;A,R&gt;::read_future::_{{closure}} (2 samples, 0.90%)</title><rect x="61.7117%" y="709" width="0.9009%" height="15" fill="rgb(212,6,19)" fg:x="137" fg:w="2"/><text x="61.9617%" y="719.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::read::_{{closure}} (2 samples, 0.90%)</title><rect x="61.7117%" y="693" width="0.9009%" height="15" fill="rgb(218,1,36)" fg:x="137" fg:w="2"/><text x="61.9617%" y="703.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::read::_{{closure}} (2 samples, 0.90%)</title><rect x="61.7117%" y="677" width="0.9009%" height="15" fill="rgb(246,84,54)" fg:x="137" fg:w="2"/><text x="61.9617%" y="687.50"></text></g><g><title>databend-query`&lt;opendal::layers::error_context::ErrorContextAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::read (1 samples, 0.45%)</title><rect x="62.1622%" y="661" width="0.4505%" height="15" fill="rgb(242,110,6)" fg:x="138" fg:w="1"/><text x="62.4122%" y="671.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.45%)</title><rect x="62.1622%" y="645" width="0.4505%" height="15" fill="rgb(214,47,5)" fg:x="138" fg:w="1"/><text x="62.4122%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.45%)</title><rect x="62.1622%" y="629" width="0.4505%" height="15" fill="rgb(218,159,25)" fg:x="138" fg:w="1"/><text x="62.4122%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.45%)</title><rect x="62.1622%" y="613" width="0.4505%" height="15" fill="rgb(215,211,28)" fg:x="138" fg:w="1"/><text x="62.4122%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.45%)</title><rect x="62.1622%" y="597" width="0.4505%" height="15" fill="rgb(238,59,32)" fg:x="138" fg:w="1"/><text x="62.4122%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.45%)</title><rect x="62.1622%" y="581" width="0.4505%" height="15" fill="rgb(226,82,3)" fg:x="138" fg:w="1"/><text x="62.4122%" y="591.50"></text></g><g><title>databend-query`&lt;hyper::client::service::Connect&lt;C,B,T&gt; as tower_service::Service&lt;T&gt;&gt;::call::_{{closure}}::_{{closure}} (2 samples, 0.90%)</title><rect x="62.6126%" y="741" width="0.9009%" height="15" fill="rgb(240,164,32)" fg:x="139" fg:w="2"/><text x="62.8626%" y="751.50"></text></g><g><title>databend-query`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.90%)</title><rect x="62.6126%" y="725" width="0.9009%" height="15" fill="rgb(232,46,7)" fg:x="139" fg:w="2"/><text x="62.8626%" y="735.50"></text></g><g><title>databend-query`&lt;hyper::proto::h2::client::ClientTask&lt;B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.90%)</title><rect x="62.6126%" y="709" width="0.9009%" height="15" fill="rgb(229,129,53)" fg:x="139" fg:w="2"/><text x="62.8626%" y="719.50"></text></g><g><title>databend-query`h2::client::SendRequest&lt;B&gt;::send_request (1 samples, 0.45%)</title><rect x="63.0631%" y="693" width="0.4505%" height="15" fill="rgb(234,188,29)" fg:x="140" fg:w="1"/><text x="63.3131%" y="703.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Streams&lt;B,P&gt;::send_request (1 samples, 0.45%)</title><rect x="63.0631%" y="677" width="0.4505%" height="15" fill="rgb(246,141,4)" fg:x="140" fg:w="1"/><text x="63.3131%" y="687.50"></text></g><g><title>databend-query`h2::proto::streams::send::Send::send_headers (1 samples, 0.45%)</title><rect x="63.0631%" y="661" width="0.4505%" height="15" fill="rgb(229,23,39)" fg:x="140" fg:w="1"/><text x="63.3131%" y="671.50"></text></g><g><title>databend-query`h2::proto::streams::send::Send::check_headers (1 samples, 0.45%)</title><rect x="63.0631%" y="645" width="0.4505%" height="15" fill="rgb(206,12,3)" fg:x="140" fg:w="1"/><text x="63.3131%" y="655.50"></text></g><g><title>databend-query`&lt;tower::buffer::worker::Worker&lt;T,Request&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="63.5135%" y="741" width="0.4505%" height="15" fill="rgb(252,226,20)" fg:x="141" fg:w="1"/><text x="63.7635%" y="751.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.45%)</title><rect x="63.5135%" y="725" width="0.4505%" height="15" fill="rgb(216,123,35)" fg:x="141" fg:w="1"/><text x="63.7635%" y="735.50"></text></g><g><title>databend-query`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (1 samples, 0.45%)</title><rect x="63.5135%" y="709" width="0.4505%" height="15" fill="rgb(212,68,40)" fg:x="141" fg:w="1"/><text x="63.7635%" y="719.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.45%)</title><rect x="63.5135%" y="693" width="0.4505%" height="15" fill="rgb(254,125,32)" fg:x="141" fg:w="1"/><text x="63.7635%" y="703.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::reconnect::Reconnect&lt;M,Target&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.45%)</title><rect x="63.5135%" y="677" width="0.4505%" height="15" fill="rgb(253,97,22)" fg:x="141" fg:w="1"/><text x="63.7635%" y="687.50"></text></g><g><title>databend-query`h2::proto::connection::Connection&lt;T,P,B&gt;::poll_ready (1 samples, 0.45%)</title><rect x="63.9640%" y="661" width="0.4505%" height="15" fill="rgb(241,101,14)" fg:x="142" fg:w="1"/><text x="64.2140%" y="671.50"></text></g><g><title>databend-query`h2::codec::framed_write::Encoder&lt;B&gt;::buffer (1 samples, 0.45%)</title><rect x="64.4144%" y="613" width="0.4505%" height="15" fill="rgb(238,103,29)" fg:x="143" fg:w="1"/><text x="64.6644%" y="623.50"></text></g><g><title>databend-query`tracing::__macro_support::__tracing_log (1 samples, 0.45%)</title><rect x="64.4144%" y="597" width="0.4505%" height="15" fill="rgb(233,195,47)" fg:x="143" fg:w="1"/><text x="64.6644%" y="607.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="64.4144%" y="581" width="0.4505%" height="15" fill="rgb(246,218,30)" fg:x="143" fg:w="1"/><text x="64.6644%" y="591.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="64.4144%" y="565" width="0.4505%" height="15" fill="rgb(219,145,47)" fg:x="143" fg:w="1"/><text x="64.6644%" y="575.50"></text></g><g><title>databend-query`fern::log_impl::Dispatch::shallow_enabled (1 samples, 0.45%)</title><rect x="64.4144%" y="549" width="0.4505%" height="15" fill="rgb(243,12,26)" fg:x="143" fg:w="1"/><text x="64.6644%" y="559.50"></text></g><g><title>databend-query`hyper::proto::h2::client::conn_task::_{{closure}} (3 samples, 1.35%)</title><rect x="63.9640%" y="741" width="1.3514%" height="15" fill="rgb(214,87,16)" fg:x="142" fg:w="3"/><text x="64.2140%" y="751.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 1.35%)</title><rect x="63.9640%" y="725" width="1.3514%" height="15" fill="rgb(208,99,42)" fg:x="142" fg:w="3"/><text x="64.2140%" y="735.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 1.35%)</title><rect x="63.9640%" y="709" width="1.3514%" height="15" fill="rgb(253,99,2)" fg:x="142" fg:w="3"/><text x="64.2140%" y="719.50"></text></g><g><title>databend-query`&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (3 samples, 1.35%)</title><rect x="63.9640%" y="693" width="1.3514%" height="15" fill="rgb(220,168,23)" fg:x="142" fg:w="3"/><text x="64.2140%" y="703.50"></text></g><g><title>databend-query`h2::proto::connection::Connection&lt;T,P,B&gt;::poll (3 samples, 1.35%)</title><rect x="63.9640%" y="677" width="1.3514%" height="15" fill="rgb(242,38,24)" fg:x="142" fg:w="3"/><text x="64.2140%" y="687.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Streams&lt;B,P&gt;::poll_complete (2 samples, 0.90%)</title><rect x="64.4144%" y="661" width="0.9009%" height="15" fill="rgb(225,182,9)" fg:x="143" fg:w="2"/><text x="64.6644%" y="671.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Inner::poll_complete (2 samples, 0.90%)</title><rect x="64.4144%" y="645" width="0.9009%" height="15" fill="rgb(243,178,37)" fg:x="143" fg:w="2"/><text x="64.6644%" y="655.50"></text></g><g><title>databend-query`h2::proto::streams::prioritize::Prioritize::poll_complete (2 samples, 0.90%)</title><rect x="64.4144%" y="629" width="0.9009%" height="15" fill="rgb(232,139,19)" fg:x="143" fg:w="2"/><text x="64.6644%" y="639.50"></text></g><g><title>databend-query`h2::codec::framed_write::FramedWrite&lt;T,B&gt;::flush (1 samples, 0.45%)</title><rect x="64.8649%" y="613" width="0.4505%" height="15" fill="rgb(225,201,24)" fg:x="144" fg:w="1"/><text x="65.1149%" y="623.50"></text></g><g><title>databend-query`h2::codec::framed_write::write (1 samples, 0.45%)</title><rect x="64.8649%" y="597" width="0.4505%" height="15" fill="rgb(221,47,46)" fg:x="144" fg:w="1"/><text x="65.1149%" y="607.50"></text></g><g><title>databend-query`tokio::net::tcp::stream::TcpStream::poll_write_priv (1 samples, 0.45%)</title><rect x="64.8649%" y="581" width="0.4505%" height="15" fill="rgb(249,23,13)" fg:x="144" fg:w="1"/><text x="65.1149%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1 samples, 0.45%)</title><rect x="64.8649%" y="565" width="0.4505%" height="15" fill="rgb(219,9,5)" fg:x="144" fg:w="1"/><text x="65.1149%" y="575.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="65.7658%" y="581" width="0.4505%" height="15" fill="rgb(254,171,16)" fg:x="146" fg:w="1"/><text x="66.0158%" y="591.50"></text></g><g><title>databend-query`&lt;tower::util::ready::ReadyOneshot&lt;T,Request&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="65.7658%" y="565" width="0.4505%" height="15" fill="rgb(230,171,20)" fg:x="146" fg:w="1"/><text x="66.0158%" y="575.50"></text></g><g><title>databend-query`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (1 samples, 0.45%)</title><rect x="65.7658%" y="549" width="0.4505%" height="15" fill="rgb(210,71,41)" fg:x="146" fg:w="1"/><text x="66.0158%" y="559.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.45%)</title><rect x="65.7658%" y="533" width="0.4505%" height="15" fill="rgb(206,173,20)" fg:x="146" fg:w="1"/><text x="66.0158%" y="543.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.45%)</title><rect x="65.7658%" y="517" width="0.4505%" height="15" fill="rgb(233,88,34)" fg:x="146" fg:w="1"/><text x="66.0158%" y="527.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::reconnect::Reconnect&lt;M,Target&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.45%)</title><rect x="65.7658%" y="501" width="0.4505%" height="15" fill="rgb(223,209,46)" fg:x="146" fg:w="1"/><text x="66.0158%" y="511.50"></text></g><g><title>databend-query`&lt;hyper::client::service::Connect&lt;C,B,T&gt; as tower_service::Service&lt;T&gt;&gt;::call::_{{closure}} (1 samples, 0.45%)</title><rect x="65.7658%" y="485" width="0.4505%" height="15" fill="rgb(250,43,18)" fg:x="146" fg:w="1"/><text x="66.0158%" y="495.50"></text></g><g><title>databend-query`h2::codec::framed_write::Encoder&lt;B&gt;::buffer (1 samples, 0.45%)</title><rect x="65.7658%" y="469" width="0.4505%" height="15" fill="rgb(208,13,10)" fg:x="146" fg:w="1"/><text x="66.0158%" y="479.50"></text></g><g><title>databend-query`tracing::__macro_support::__tracing_log (1 samples, 0.45%)</title><rect x="65.7658%" y="453" width="0.4505%" height="15" fill="rgb(212,200,36)" fg:x="146" fg:w="1"/><text x="66.0158%" y="463.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="65.7658%" y="437" width="0.4505%" height="15" fill="rgb(225,90,30)" fg:x="146" fg:w="1"/><text x="66.0158%" y="447.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="65.7658%" y="421" width="0.4505%" height="15" fill="rgb(236,182,39)" fg:x="146" fg:w="1"/><text x="66.0158%" y="431.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="65.7658%" y="405" width="0.4505%" height="15" fill="rgb(212,144,35)" fg:x="146" fg:w="1"/><text x="66.0158%" y="415.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="65.7658%" y="389" width="0.4505%" height="15" fill="rgb(228,63,44)" fg:x="146" fg:w="1"/><text x="66.0158%" y="399.50"></text></g><g><title>databend-query`core::ops::function::Fn::call (1 samples, 0.45%)</title><rect x="65.7658%" y="373" width="0.4505%" height="15" fill="rgb(228,109,6)" fg:x="146" fg:w="1"/><text x="66.0158%" y="383.50"></text></g><g><title>databend-query`common_tracing::init::format_text_log (1 samples, 0.45%)</title><rect x="65.7658%" y="357" width="0.4505%" height="15" fill="rgb(238,117,24)" fg:x="146" fg:w="1"/><text x="66.0158%" y="367.50"></text></g><g><title>databend-query`fern::log_impl::FormatCallback::finish (1 samples, 0.45%)</title><rect x="65.7658%" y="341" width="0.4505%" height="15" fill="rgb(242,26,26)" fg:x="146" fg:w="1"/><text x="66.0158%" y="351.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Writer as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="65.7658%" y="325" width="0.4505%" height="15" fill="rgb(221,92,48)" fg:x="146" fg:w="1"/><text x="66.0158%" y="335.50"></text></g><g><title>databend-query`std::io::Write::write_fmt (1 samples, 0.45%)</title><rect x="65.7658%" y="309" width="0.4505%" height="15" fill="rgb(209,209,32)" fg:x="146" fg:w="1"/><text x="66.0158%" y="319.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="65.7658%" y="293" width="0.4505%" height="15" fill="rgb(221,70,22)" fg:x="146" fg:w="1"/><text x="66.0158%" y="303.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="65.7658%" y="277" width="0.4505%" height="15" fill="rgb(248,145,5)" fg:x="146" fg:w="1"/><text x="66.0158%" y="287.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="65.7658%" y="261" width="0.4505%" height="15" fill="rgb(226,116,26)" fg:x="146" fg:w="1"/><text x="66.0158%" y="271.50"></text></g><g><title>databend-query`&lt;tracing::log::LogValueSet as core::fmt::Display&gt;::fmt (1 samples, 0.45%)</title><rect x="65.7658%" y="245" width="0.4505%" height="15" fill="rgb(244,5,17)" fg:x="146" fg:w="1"/><text x="66.0158%" y="255.50"></text></g><g><title>databend-query`tracing_core::field::ValueSet::record (1 samples, 0.45%)</title><rect x="65.7658%" y="229" width="0.4505%" height="15" fill="rgb(252,159,33)" fg:x="146" fg:w="1"/><text x="66.0158%" y="239.50"></text></g><g><title>databend-query`&lt;&lt;tracing::log::LogValueSet as core::fmt::Display&gt;::fmt::LogVisitor as tracing_core::field::Visit&gt;::record_debug (1 samples, 0.45%)</title><rect x="65.7658%" y="213" width="0.4505%" height="15" fill="rgb(206,71,0)" fg:x="146" fg:w="1"/><text x="66.0158%" y="223.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="65.7658%" y="197" width="0.4505%" height="15" fill="rgb(233,118,54)" fg:x="146" fg:w="1"/><text x="66.0158%" y="207.50"></text></g><g><title>databend-query`&lt;h2::frame::settings::Settings as core::fmt::Debug&gt;::fmt (1 samples, 0.45%)</title><rect x="65.7658%" y="181" width="0.4505%" height="15" fill="rgb(234,83,48)" fg:x="146" fg:w="1"/><text x="66.0158%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.45%)</title><rect x="65.7658%" y="165" width="0.4505%" height="15" fill="rgb(228,3,54)" fg:x="146" fg:w="1"/><text x="66.0158%" y="175.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.90%)</title><rect x="65.7658%" y="597" width="0.9009%" height="15" fill="rgb(226,155,13)" fg:x="146" fg:w="2"/><text x="66.0158%" y="607.50"></text></g><g><title>databend-query`&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.45%)</title><rect x="66.2162%" y="581" width="0.4505%" height="15" fill="rgb(241,28,37)" fg:x="147" fg:w="1"/><text x="66.4662%" y="591.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.35%)</title><rect x="65.7658%" y="613" width="1.3514%" height="15" fill="rgb(233,93,10)" fg:x="146" fg:w="3"/><text x="66.0158%" y="623.50"></text></g><g><title>databend-query`&lt;tonic::service::interceptor::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="66.6667%" y="597" width="0.4505%" height="15" fill="rgb(225,113,19)" fg:x="148" fg:w="1"/><text x="66.9167%" y="607.50"></text></g><g><title>databend-query`&lt;tonic::transport::channel::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="66.6667%" y="581" width="0.4505%" height="15" fill="rgb(241,2,18)" fg:x="148" fg:w="1"/><text x="66.9167%" y="591.50"></text></g><g><title>databend-query`&lt;tower::buffer::future::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="66.6667%" y="565" width="0.4505%" height="15" fill="rgb(228,207,21)" fg:x="148" fg:w="1"/><text x="66.9167%" y="575.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="66.6667%" y="549" width="0.4505%" height="15" fill="rgb(213,211,35)" fg:x="148" fg:w="1"/><text x="66.9167%" y="559.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::add_origin::AddOrigin&lt;T&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call::_{{closure}} (1 samples, 0.45%)</title><rect x="66.6667%" y="533" width="0.4505%" height="15" fill="rgb(209,83,10)" fg:x="148" fg:w="1"/><text x="66.9167%" y="543.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::grpc_timeout::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="66.6667%" y="517" width="0.4505%" height="15" fill="rgb(209,164,1)" fg:x="148" fg:w="1"/><text x="66.9167%" y="527.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="66.6667%" y="501" width="0.4505%" height="15" fill="rgb(213,184,43)" fg:x="148" fg:w="1"/><text x="66.9167%" y="511.50"></text></g><g><title>databend-query`&lt;tower::util::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="66.6667%" y="485" width="0.4505%" height="15" fill="rgb(231,61,34)" fg:x="148" fg:w="1"/><text x="66.9167%" y="495.50"></text></g><g><title>databend-query`&lt;tonic::transport::service::reconnect::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="66.6667%" y="469" width="0.4505%" height="15" fill="rgb(235,75,3)" fg:x="148" fg:w="1"/><text x="66.9167%" y="479.50"></text></g><g><title>databend-query`&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="66.6667%" y="453" width="0.4505%" height="15" fill="rgb(220,106,47)" fg:x="148" fg:w="1"/><text x="66.9167%" y="463.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 1.80%)</title><rect x="65.7658%" y="629" width="1.8018%" height="15" fill="rgb(210,196,33)" fg:x="146" fg:w="4"/><text x="66.0158%" y="639.50">d..</text></g><g><title>databend-query`core::str::_&lt;impl str&gt;::trim_end_matches (1 samples, 0.45%)</title><rect x="67.1171%" y="613" width="0.4505%" height="15" fill="rgb(229,154,42)" fg:x="149" fg:w="1"/><text x="67.3671%" y="623.50"></text></g><g><title>databend-query`&lt;common_base::future::TimingFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (5 samples, 2.25%)</title><rect x="65.7658%" y="645" width="2.2523%" height="15" fill="rgb(228,114,26)" fg:x="146" fg:w="5"/><text x="66.0158%" y="655.50">d..</text></g><g><title>databend-query`http::extensions::Extensions::insert (1 samples, 0.45%)</title><rect x="67.5676%" y="629" width="0.4505%" height="15" fill="rgb(208,144,1)" fg:x="150" fg:w="1"/><text x="67.8176%" y="639.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.45%)</title><rect x="67.5676%" y="613" width="0.4505%" height="15" fill="rgb(239,112,37)" fg:x="150" fg:w="1"/><text x="67.8176%" y="623.50"></text></g><g><title>databend-query`&lt;common_base::future::TimingFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (6 samples, 2.70%)</title><rect x="65.7658%" y="677" width="2.7027%" height="15" fill="rgb(210,96,50)" fg:x="146" fg:w="6"/><text x="66.0158%" y="687.50">da..</text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 2.70%)</title><rect x="65.7658%" y="661" width="2.7027%" height="15" fill="rgb(222,178,2)" fg:x="146" fg:w="6"/><text x="66.0158%" y="671.50">da..</text></g><g><title>databend-query`log::__private_api_log (1 samples, 0.45%)</title><rect x="68.0180%" y="645" width="0.4505%" height="15" fill="rgb(226,74,18)" fg:x="151" fg:w="1"/><text x="68.2680%" y="655.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.0180%" y="629" width="0.4505%" height="15" fill="rgb(225,67,54)" fg:x="151" fg:w="1"/><text x="68.2680%" y="639.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.0180%" y="613" width="0.4505%" height="15" fill="rgb(251,92,32)" fg:x="151" fg:w="1"/><text x="68.2680%" y="623.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.0180%" y="597" width="0.4505%" height="15" fill="rgb(228,149,22)" fg:x="151" fg:w="1"/><text x="68.2680%" y="607.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.0180%" y="581" width="0.4505%" height="15" fill="rgb(243,54,13)" fg:x="151" fg:w="1"/><text x="68.2680%" y="591.50"></text></g><g><title>databend-query`core::ops::function::Fn::call (1 samples, 0.45%)</title><rect x="68.0180%" y="565" width="0.4505%" height="15" fill="rgb(243,180,28)" fg:x="151" fg:w="1"/><text x="68.2680%" y="575.50"></text></g><g><title>databend-query`common_tracing::init::format_text_log (1 samples, 0.45%)</title><rect x="68.0180%" y="549" width="0.4505%" height="15" fill="rgb(208,167,24)" fg:x="151" fg:w="1"/><text x="68.2680%" y="559.50"></text></g><g><title>databend-query`fern::log_impl::FormatCallback::finish (1 samples, 0.45%)</title><rect x="68.0180%" y="533" width="0.4505%" height="15" fill="rgb(245,73,45)" fg:x="151" fg:w="1"/><text x="68.2680%" y="543.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Writer as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.0180%" y="517" width="0.4505%" height="15" fill="rgb(237,203,48)" fg:x="151" fg:w="1"/><text x="68.2680%" y="527.50"></text></g><g><title>databend-query`std::io::Write::write_fmt (1 samples, 0.45%)</title><rect x="68.0180%" y="501" width="0.4505%" height="15" fill="rgb(211,197,16)" fg:x="151" fg:w="1"/><text x="68.2680%" y="511.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="68.0180%" y="485" width="0.4505%" height="15" fill="rgb(243,99,51)" fg:x="151" fg:w="1"/><text x="68.2680%" y="495.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="68.0180%" y="469" width="0.4505%" height="15" fill="rgb(215,123,29)" fg:x="151" fg:w="1"/><text x="68.2680%" y="479.50"></text></g><g><title>databend-query`&lt;common_tracing::init::format_text_log::KvDisplay as core::fmt::Display&gt;::fmt (1 samples, 0.45%)</title><rect x="68.0180%" y="453" width="0.4505%" height="15" fill="rgb(239,186,37)" fg:x="151" fg:w="1"/><text x="68.2680%" y="463.50"></text></g><g><title>databend-query`&lt;core::option::Option&lt;S&gt; as log::kv::source::Source&gt;::visit (1 samples, 0.45%)</title><rect x="68.0180%" y="437" width="0.4505%" height="15" fill="rgb(252,136,39)" fg:x="151" fg:w="1"/><text x="68.2680%" y="447.50"></text></g><g><title>databend-query`&lt;[S] as log::kv::source::Source&gt;::visit (1 samples, 0.45%)</title><rect x="68.0180%" y="421" width="0.4505%" height="15" fill="rgb(223,213,32)" fg:x="151" fg:w="1"/><text x="68.2680%" y="431.50"></text></g><g><title>databend-query`&lt;common_tracing::init::format_text_log::KvWriter as log::kv::source::Visitor&gt;::visit_pair (1 samples, 0.45%)</title><rect x="68.0180%" y="405" width="0.4505%" height="15" fill="rgb(233,115,5)" fg:x="151" fg:w="1"/><text x="68.2680%" y="415.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="68.0180%" y="389" width="0.4505%" height="15" fill="rgb(207,226,44)" fg:x="151" fg:w="1"/><text x="68.2680%" y="399.50"></text></g><g><title>databend-query`value_bag::internal::fmt::_&lt;impl core::fmt::Display for value_bag::ValueBag&gt;::fmt (1 samples, 0.45%)</title><rect x="68.0180%" y="373" width="0.4505%" height="15" fill="rgb(208,126,0)" fg:x="151" fg:w="1"/><text x="68.2680%" y="383.50"></text></g><g><title>databend-query`&lt;core::result::Result&lt;T,E&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.45%)</title><rect x="68.0180%" y="357" width="0.4505%" height="15" fill="rgb(244,66,21)" fg:x="151" fg:w="1"/><text x="68.2680%" y="367.50"></text></g><g><title>databend-query`core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.45%)</title><rect x="68.0180%" y="341" width="0.4505%" height="15" fill="rgb(222,97,12)" fg:x="151" fg:w="1"/><text x="68.2680%" y="351.50"></text></g><g><title>databend-query`core::fmt::builders::DebugTuple::field (1 samples, 0.45%)</title><rect x="68.0180%" y="325" width="0.4505%" height="15" fill="rgb(219,213,19)" fg:x="151" fg:w="1"/><text x="68.2680%" y="335.50"></text></g><g><title>databend-query`&lt;tonic::response::Response&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.45%)</title><rect x="68.0180%" y="309" width="0.4505%" height="15" fill="rgb(252,169,30)" fg:x="151" fg:w="1"/><text x="68.2680%" y="319.50"></text></g><g><title>databend-query`core::fmt::Formatter::debug_struct_field3_finish (1 samples, 0.45%)</title><rect x="68.0180%" y="293" width="0.4505%" height="15" fill="rgb(206,32,51)" fg:x="151" fg:w="1"/><text x="68.2680%" y="303.50"></text></g><g><title>databend-query`core::fmt::builders::DebugStruct::field (1 samples, 0.45%)</title><rect x="68.0180%" y="277" width="0.4505%" height="15" fill="rgb(250,172,42)" fg:x="151" fg:w="1"/><text x="68.2680%" y="287.50"></text></g><g><title>databend-query`&lt;common_meta_types::protobuf::RaftReply as core::fmt::Debug&gt;::fmt (1 samples, 0.45%)</title><rect x="68.0180%" y="261" width="0.4505%" height="15" fill="rgb(209,34,43)" fg:x="151" fg:w="1"/><text x="68.2680%" y="271.50"></text></g><g><title>databend-query`core::fmt::builders::DebugStruct::field (1 samples, 0.45%)</title><rect x="68.0180%" y="245" width="0.4505%" height="15" fill="rgb(223,11,35)" fg:x="151" fg:w="1"/><text x="68.2680%" y="255.50"></text></g><g><title>databend-query`core::char::methods::_&lt;impl char&gt;::escape_debug_ext (1 samples, 0.45%)</title><rect x="68.0180%" y="229" width="0.4505%" height="15" fill="rgb(251,219,26)" fg:x="151" fg:w="1"/><text x="68.2680%" y="239.50"></text></g><g><title>databend-query`&lt;common_base::runtime::runtime_tracker::UnlimitedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 3.60%)</title><rect x="65.3153%" y="725" width="3.6036%" height="15" fill="rgb(231,119,3)" fg:x="145" fg:w="8"/><text x="65.5653%" y="735.50">data..</text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 3.60%)</title><rect x="65.3153%" y="709" width="3.6036%" height="15" fill="rgb(216,97,11)" fg:x="145" fg:w="8"/><text x="65.5653%" y="719.50">data..</text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 3.15%)</title><rect x="65.7658%" y="693" width="3.1532%" height="15" fill="rgb(223,59,9)" fg:x="146" fg:w="7"/><text x="66.0158%" y="703.50">dat..</text></g><g><title>databend-query`log::__private_api_log (1 samples, 0.45%)</title><rect x="68.4685%" y="677" width="0.4505%" height="15" fill="rgb(233,93,31)" fg:x="152" fg:w="1"/><text x="68.7185%" y="687.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.4685%" y="661" width="0.4505%" height="15" fill="rgb(239,81,33)" fg:x="152" fg:w="1"/><text x="68.7185%" y="671.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.4685%" y="645" width="0.4505%" height="15" fill="rgb(213,120,34)" fg:x="152" fg:w="1"/><text x="68.7185%" y="655.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.4685%" y="629" width="0.4505%" height="15" fill="rgb(243,49,53)" fg:x="152" fg:w="1"/><text x="68.7185%" y="639.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.4685%" y="613" width="0.4505%" height="15" fill="rgb(247,216,33)" fg:x="152" fg:w="1"/><text x="68.7185%" y="623.50"></text></g><g><title>databend-query`core::ops::function::Fn::call (1 samples, 0.45%)</title><rect x="68.4685%" y="597" width="0.4505%" height="15" fill="rgb(226,26,14)" fg:x="152" fg:w="1"/><text x="68.7185%" y="607.50"></text></g><g><title>databend-query`common_tracing::init::format_text_log (1 samples, 0.45%)</title><rect x="68.4685%" y="581" width="0.4505%" height="15" fill="rgb(215,49,53)" fg:x="152" fg:w="1"/><text x="68.7185%" y="591.50"></text></g><g><title>databend-query`fern::log_impl::FormatCallback::finish (1 samples, 0.45%)</title><rect x="68.4685%" y="565" width="0.4505%" height="15" fill="rgb(245,162,40)" fg:x="152" fg:w="1"/><text x="68.7185%" y="575.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Writer as log::Log&gt;::log (1 samples, 0.45%)</title><rect x="68.4685%" y="549" width="0.4505%" height="15" fill="rgb(229,68,17)" fg:x="152" fg:w="1"/><text x="68.7185%" y="559.50"></text></g><g><title>databend-query`std::io::Write::write_fmt (1 samples, 0.45%)</title><rect x="68.4685%" y="533" width="0.4505%" height="15" fill="rgb(213,182,10)" fg:x="152" fg:w="1"/><text x="68.7185%" y="543.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="68.4685%" y="517" width="0.4505%" height="15" fill="rgb(245,125,30)" fg:x="152" fg:w="1"/><text x="68.7185%" y="527.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="68.4685%" y="501" width="0.4505%" height="15" fill="rgb(232,202,2)" fg:x="152" fg:w="1"/><text x="68.7185%" y="511.50"></text></g><g><title>databend-query`&lt;common_tracing::init::format_text_log::KvDisplay as core::fmt::Display&gt;::fmt (1 samples, 0.45%)</title><rect x="68.4685%" y="485" width="0.4505%" height="15" fill="rgb(237,140,51)" fg:x="152" fg:w="1"/><text x="68.7185%" y="495.50"></text></g><g><title>databend-query`&lt;core::option::Option&lt;S&gt; as log::kv::source::Source&gt;::visit (1 samples, 0.45%)</title><rect x="68.4685%" y="469" width="0.4505%" height="15" fill="rgb(236,157,25)" fg:x="152" fg:w="1"/><text x="68.7185%" y="479.50"></text></g><g><title>databend-query`&lt;[S] as log::kv::source::Source&gt;::visit (1 samples, 0.45%)</title><rect x="68.4685%" y="453" width="0.4505%" height="15" fill="rgb(219,209,0)" fg:x="152" fg:w="1"/><text x="68.7185%" y="463.50"></text></g><g><title>databend-query`&lt;common_tracing::init::format_text_log::KvWriter as log::kv::source::Visitor&gt;::visit_pair (1 samples, 0.45%)</title><rect x="68.4685%" y="437" width="0.4505%" height="15" fill="rgb(240,116,54)" fg:x="152" fg:w="1"/><text x="68.7185%" y="447.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="68.4685%" y="421" width="0.4505%" height="15" fill="rgb(216,10,36)" fg:x="152" fg:w="1"/><text x="68.7185%" y="431.50"></text></g><g><title>databend-query`value_bag::internal::fmt::_&lt;impl core::fmt::Display for value_bag::ValueBag&gt;::fmt (1 samples, 0.45%)</title><rect x="68.4685%" y="405" width="0.4505%" height="15" fill="rgb(222,72,44)" fg:x="152" fg:w="1"/><text x="68.7185%" y="415.50"></text></g><g><title>databend-query`&lt;common_base::runtime::runtime_tracker::TrackedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="68.9189%" y="709" width="0.4505%" height="15" fill="rgb(232,159,9)" fg:x="153" fg:w="1"/><text x="69.1689%" y="719.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="68.9189%" y="693" width="0.4505%" height="15" fill="rgb(210,39,32)" fg:x="153" fg:w="1"/><text x="69.1689%" y="703.50"></text></g><g><title>databend-query`common_base::runtime::catch_unwind::catch_unwind (1 samples, 0.45%)</title><rect x="68.9189%" y="677" width="0.4505%" height="15" fill="rgb(216,194,45)" fg:x="153" fg:w="1"/><text x="69.1689%" y="687.50"></text></g><g><title>databend-query`std::panicking::try (1 samples, 0.45%)</title><rect x="68.9189%" y="661" width="0.4505%" height="15" fill="rgb(218,18,35)" fg:x="153" fg:w="1"/><text x="69.1689%" y="671.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask::create::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="645" width="0.4505%" height="15" fill="rgb(207,83,51)" fg:x="153" fg:w="1"/><text x="69.1689%" y="655.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="68.9189%" y="629" width="0.4505%" height="15" fill="rgb(225,63,43)" fg:x="153" fg:w="1"/><text x="69.1689%" y="639.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask::create::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="613" width="0.4505%" height="15" fill="rgb(207,57,36)" fg:x="153" fg:w="1"/><text x="69.1689%" y="623.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="68.9189%" y="597" width="0.4505%" height="15" fill="rgb(216,99,33)" fg:x="153" fg:w="1"/><text x="69.1689%" y="607.50"></text></g><g><title>databend-query`common_pipeline_core::processors::processor::ProcessorPtr::async_process::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="581" width="0.4505%" height="15" fill="rgb(225,42,16)" fg:x="153" fg:w="1"/><text x="69.1689%" y="591.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="68.9189%" y="565" width="0.4505%" height="15" fill="rgb(220,201,45)" fg:x="153" fg:w="1"/><text x="69.1689%" y="575.50"></text></g><g><title>databend-query`&lt;alloc::boxed::Box&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::async_process::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="549" width="0.4505%" height="15" fill="rgb(225,33,4)" fg:x="153" fg:w="1"/><text x="69.1689%" y="559.50"></text></g><g><title>databend-query`&lt;common_pipeline_sources::async_source::AsyncSourcer&lt;T&gt; as common_pipeline_core::processors::processor::Processor&gt;::async_process::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="533" width="0.4505%" height="15" fill="rgb(224,33,50)" fg:x="153" fg:w="1"/><text x="69.1689%" y="543.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="68.9189%" y="517" width="0.4505%" height="15" fill="rgb(246,198,51)" fg:x="153" fg:w="1"/><text x="69.1689%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="68.9189%" y="501" width="0.4505%" height="15" fill="rgb(205,22,4)" fg:x="153" fg:w="1"/><text x="69.1689%" y="511.50"></text></g><g><title>databend-query`&lt;common_storages_system::tables_table::TablesTable&lt;_&gt; as common_storages_system::table::AsyncSystemTable&gt;::get_full_data::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="485" width="0.4505%" height="15" fill="rgb(206,3,8)" fg:x="153" fg:w="1"/><text x="69.1689%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="68.9189%" y="469" width="0.4505%" height="15" fill="rgb(251,23,15)" fg:x="153" fg:w="1"/><text x="69.1689%" y="479.50"></text></g><g><title>databend-query`&lt;common_storages_system::tables_table::TablesTable&lt;_&gt; as common_storages_system::tables_table::HistoryAware&gt;::list_tables::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="453" width="0.4505%" height="15" fill="rgb(252,88,28)" fg:x="153" fg:w="1"/><text x="69.1689%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="68.9189%" y="437" width="0.4505%" height="15" fill="rgb(212,127,14)" fg:x="153" fg:w="1"/><text x="69.1689%" y="447.50"></text></g><g><title>databend-query`&lt;databend_query::catalogs::default::database_catalog::DatabaseCatalog as common_catalog::catalog::interface::Catalog&gt;::list_tables::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="421" width="0.4505%" height="15" fill="rgb(247,145,37)" fg:x="153" fg:w="1"/><text x="69.1689%" y="431.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="68.9189%" y="405" width="0.4505%" height="15" fill="rgb(209,117,53)" fg:x="153" fg:w="1"/><text x="69.1689%" y="415.50"></text></g><g><title>databend-query`&lt;databend_query::catalogs::default::mutable_catalog::MutableCatalog as common_catalog::catalog::interface::Catalog&gt;::list_tables::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="389" width="0.4505%" height="15" fill="rgb(212,90,42)" fg:x="153" fg:w="1"/><text x="69.1689%" y="399.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="68.9189%" y="373" width="0.4505%" height="15" fill="rgb(218,164,37)" fg:x="153" fg:w="1"/><text x="69.1689%" y="383.50"></text></g><g><title>databend-query`&lt;databend_query::databases::default::default_database::DefaultDatabase as common_catalog::database::Database&gt;::list_tables::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="357" width="0.4505%" height="15" fill="rgb(246,65,34)" fg:x="153" fg:w="1"/><text x="69.1689%" y="367.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="68.9189%" y="341" width="0.4505%" height="15" fill="rgb(231,100,33)" fg:x="153" fg:w="1"/><text x="69.1689%" y="351.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="68.9189%" y="325" width="0.4505%" height="15" fill="rgb(228,126,14)" fg:x="153" fg:w="1"/><text x="69.1689%" y="335.50"></text></g><g><title>databend-query`common_meta_api::util::list_tables_from_unshare_db::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="309" width="0.4505%" height="15" fill="rgb(215,173,21)" fg:x="153" fg:w="1"/><text x="69.1689%" y="319.50"></text></g><g><title>databend-query`common_meta_api::util::get_tableinfos_by_ids::_{{closure}} (1 samples, 0.45%)</title><rect x="68.9189%" y="293" width="0.4505%" height="15" fill="rgb(210,6,40)" fg:x="153" fg:w="1"/><text x="69.1689%" y="303.50"></text></g><g><title>databend-query`common_meta_api::util::deserialize_struct (1 samples, 0.45%)</title><rect x="68.9189%" y="277" width="0.4505%" height="15" fill="rgb(212,48,18)" fg:x="153" fg:w="1"/><text x="69.1689%" y="287.50"></text></g><g><title>databend-query`prost::message::Message::decode (1 samples, 0.45%)</title><rect x="68.9189%" y="261" width="0.4505%" height="15" fill="rgb(230,214,11)" fg:x="153" fg:w="1"/><text x="69.1689%" y="271.50"></text></g><g><title>databend-query`prost::message::Message::merge (1 samples, 0.45%)</title><rect x="68.9189%" y="245" width="0.4505%" height="15" fill="rgb(254,105,39)" fg:x="153" fg:w="1"/><text x="69.1689%" y="255.50"></text></g><g><title>databend-query`&lt;common_protos::pb::TableMeta as prost::message::Message&gt;::merge_field (1 samples, 0.45%)</title><rect x="68.9189%" y="229" width="0.4505%" height="15" fill="rgb(245,158,5)" fg:x="153" fg:w="1"/><text x="69.1689%" y="239.50"></text></g><g><title>databend-query`prost::encoding::merge_loop (1 samples, 0.45%)</title><rect x="68.9189%" y="213" width="0.4505%" height="15" fill="rgb(249,208,11)" fg:x="153" fg:w="1"/><text x="69.1689%" y="223.50"></text></g><g><title>databend-query`&lt;common_protos::pb::DataSchema as prost::message::Message&gt;::merge_field (1 samples, 0.45%)</title><rect x="68.9189%" y="197" width="0.4505%" height="15" fill="rgb(210,39,28)" fg:x="153" fg:w="1"/><text x="69.1689%" y="207.50"></text></g><g><title>databend-query`prost::encoding::message::merge_repeated (1 samples, 0.45%)</title><rect x="68.9189%" y="181" width="0.4505%" height="15" fill="rgb(211,56,53)" fg:x="153" fg:w="1"/><text x="69.1689%" y="191.50"></text></g><g><title>databend-query`prost::encoding::merge_loop (1 samples, 0.45%)</title><rect x="68.9189%" y="165" width="0.4505%" height="15" fill="rgb(226,201,30)" fg:x="153" fg:w="1"/><text x="69.1689%" y="175.50"></text></g><g><title>databend-query`&lt;common_protos::pb::DataField as prost::message::Message&gt;::merge_field (1 samples, 0.45%)</title><rect x="68.9189%" y="149" width="0.4505%" height="15" fill="rgb(239,101,34)" fg:x="153" fg:w="1"/><text x="69.1689%" y="159.50"></text></g><g><title>databend-query`&lt;common_protos::pb::DataType as prost::message::Message&gt;::merge_field (1 samples, 0.45%)</title><rect x="68.9189%" y="133" width="0.4505%" height="15" fill="rgb(226,209,5)" fg:x="153" fg:w="1"/><text x="69.1689%" y="143.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (1 samples, 0.45%)</title><rect x="69.3694%" y="533" width="0.4505%" height="15" fill="rgb(250,105,47)" fg:x="154" fg:w="1"/><text x="69.6194%" y="543.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="69.3694%" y="517" width="0.4505%" height="15" fill="rgb(230,72,3)" fg:x="154" fg:w="1"/><text x="69.6194%" y="527.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (1 samples, 0.45%)</title><rect x="69.3694%" y="501" width="0.4505%" height="15" fill="rgb(232,218,39)" fg:x="154" fg:w="1"/><text x="69.6194%" y="511.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (1 samples, 0.45%)</title><rect x="69.3694%" y="485" width="0.4505%" height="15" fill="rgb(248,166,6)" fg:x="154" fg:w="1"/><text x="69.6194%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="69.3694%" y="469" width="0.4505%" height="15" fill="rgb(247,89,20)" fg:x="154" fg:w="1"/><text x="69.6194%" y="479.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (1 samples, 0.45%)</title><rect x="69.3694%" y="453" width="0.4505%" height="15" fill="rgb(248,130,54)" fg:x="154" fg:w="1"/><text x="69.6194%" y="463.50"></text></g><g><title>databend-query`&lt;dyn common_catalog::table::Table as common_sql::executor::table_read_plan::ToReadDataSourcePlan&gt;::read_plan_with_catalog::_{{closure}} (1 samples, 0.45%)</title><rect x="69.3694%" y="437" width="0.4505%" height="15" fill="rgb(234,196,4)" fg:x="154" fg:w="1"/><text x="69.6194%" y="447.50"></text></g><g><title>databend-query`&lt;dyn common_catalog::table::Table as common_sql::executor::table_read_plan::ToReadDataSourcePlan&gt;::read_plan_with_catalog::_{{closure}}::_{{closure}} (1 samples, 0.45%)</title><rect x="69.3694%" y="421" width="0.4505%" height="15" fill="rgb(250,143,31)" fg:x="154" fg:w="1"/><text x="69.6194%" y="431.50"></text></g><g><title>databend-query`common_storages_fuse::operations::read_partitions::_&lt;impl common_storages_fuse::fuse_table::FuseTable&gt;::read_partitions_with_metas (1 samples, 0.45%)</title><rect x="69.8198%" y="341" width="0.4505%" height="15" fill="rgb(211,110,34)" fg:x="155" fg:w="1"/><text x="70.0698%" y="351.50"></text></g><g><title>databend-query`common_storages_fuse::operations::read_partitions::_&lt;impl common_storages_fuse::fuse_table::FuseTable&gt;::to_partitions (1 samples, 0.45%)</title><rect x="69.8198%" y="325" width="0.4505%" height="15" fill="rgb(215,124,48)" fg:x="155" fg:w="1"/><text x="70.0698%" y="335.50"></text></g><g><title>databend-query`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.45%)</title><rect x="69.8198%" y="309" width="0.4505%" height="15" fill="rgb(216,46,13)" fg:x="155" fg:w="1"/><text x="70.0698%" y="319.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.45%)</title><rect x="69.8198%" y="293" width="0.4505%" height="15" fill="rgb(205,184,25)" fg:x="155" fg:w="1"/><text x="70.0698%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.45%)</title><rect x="69.8198%" y="277" width="0.4505%" height="15" fill="rgb(228,1,10)" fg:x="155" fg:w="1"/><text x="70.0698%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.45%)</title><rect x="69.8198%" y="261" width="0.4505%" height="15" fill="rgb(213,116,27)" fg:x="155" fg:w="1"/><text x="70.0698%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.45%)</title><rect x="69.8198%" y="245" width="0.4505%" height="15" fill="rgb(241,95,50)" fg:x="155" fg:w="1"/><text x="70.0698%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.45%)</title><rect x="69.8198%" y="229" width="0.4505%" height="15" fill="rgb(238,48,32)" fg:x="155" fg:w="1"/><text x="70.0698%" y="239.50"></text></g><g><title>databend-query`common_storages_fuse::pruning::fuse_pruner::FusePruner::create_with_pages (1 samples, 0.45%)</title><rect x="70.2703%" y="341" width="0.4505%" height="15" fill="rgb(235,113,49)" fg:x="156" fg:w="1"/><text x="70.5203%" y="351.50"></text></g><g><title>databend-query`common_storages_fuse::pruning::bloom_pruner::BloomPrunerCreator::create (1 samples, 0.45%)</title><rect x="70.2703%" y="325" width="0.4505%" height="15" fill="rgb(205,127,43)" fg:x="156" fg:w="1"/><text x="70.5203%" y="335.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_select::SelectInterpreter::build_physical_plan::_{{closure}} (4 samples, 1.80%)</title><rect x="69.3694%" y="661" width="1.8018%" height="15" fill="rgb(250,162,2)" fg:x="154" fg:w="4"/><text x="69.6194%" y="671.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 1.80%)</title><rect x="69.3694%" y="645" width="1.8018%" height="15" fill="rgb(220,13,41)" fg:x="154" fg:w="4"/><text x="69.6194%" y="655.50">d..</text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (4 samples, 1.80%)</title><rect x="69.3694%" y="629" width="1.8018%" height="15" fill="rgb(249,221,25)" fg:x="154" fg:w="4"/><text x="69.6194%" y="639.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 1.80%)</title><rect x="69.3694%" y="613" width="1.8018%" height="15" fill="rgb(215,208,19)" fg:x="154" fg:w="4"/><text x="69.6194%" y="623.50">d..</text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (4 samples, 1.80%)</title><rect x="69.3694%" y="597" width="1.8018%" height="15" fill="rgb(236,175,2)" fg:x="154" fg:w="4"/><text x="69.6194%" y="607.50">d..</text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (4 samples, 1.80%)</title><rect x="69.3694%" y="581" width="1.8018%" height="15" fill="rgb(241,52,2)" fg:x="154" fg:w="4"/><text x="69.6194%" y="591.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 1.80%)</title><rect x="69.3694%" y="565" width="1.8018%" height="15" fill="rgb(248,140,14)" fg:x="154" fg:w="4"/><text x="69.6194%" y="575.50">d..</text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (4 samples, 1.80%)</title><rect x="69.3694%" y="549" width="1.8018%" height="15" fill="rgb(253,22,42)" fg:x="154" fg:w="4"/><text x="69.6194%" y="559.50">d..</text></g><g><title>databend-query`common_sql::executor::physical_plans::physical_hash_join::_&lt;impl common_sql::executor::physical_plan_builder::PhysicalPlanBuilder&gt;::build_hash_join::_{{closure}} (3 samples, 1.35%)</title><rect x="69.8198%" y="533" width="1.3514%" height="15" fill="rgb(234,61,47)" fg:x="155" fg:w="3"/><text x="70.0698%" y="543.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (3 samples, 1.35%)</title><rect x="69.8198%" y="517" width="1.3514%" height="15" fill="rgb(208,226,15)" fg:x="155" fg:w="3"/><text x="70.0698%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="69.8198%" y="501" width="1.3514%" height="15" fill="rgb(217,221,4)" fg:x="155" fg:w="3"/><text x="70.0698%" y="511.50"></text></g><g><title>databend-query`common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (3 samples, 1.35%)</title><rect x="69.8198%" y="485" width="1.3514%" height="15" fill="rgb(212,174,34)" fg:x="155" fg:w="3"/><text x="70.0698%" y="495.50"></text></g><g><title>databend-query`&lt;dyn common_catalog::table::Table as common_sql::executor::table_read_plan::ToReadDataSourcePlan&gt;::read_plan_with_catalog::_{{closure}} (3 samples, 1.35%)</title><rect x="69.8198%" y="469" width="1.3514%" height="15" fill="rgb(253,83,4)" fg:x="155" fg:w="3"/><text x="70.0698%" y="479.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="69.8198%" y="453" width="1.3514%" height="15" fill="rgb(250,195,49)" fg:x="155" fg:w="3"/><text x="70.0698%" y="463.50"></text></g><g><title>databend-query`&lt;dyn common_catalog::table::Table as common_sql::executor::table_read_plan::ToReadDataSourcePlan&gt;::read_plan_with_catalog::_{{closure}}::_{{closure}} (3 samples, 1.35%)</title><rect x="69.8198%" y="437" width="1.3514%" height="15" fill="rgb(241,192,25)" fg:x="155" fg:w="3"/><text x="70.0698%" y="447.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.35%)</title><rect x="69.8198%" y="421" width="1.3514%" height="15" fill="rgb(208,124,10)" fg:x="155" fg:w="3"/><text x="70.0698%" y="431.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="69.8198%" y="405" width="1.3514%" height="15" fill="rgb(222,33,0)" fg:x="155" fg:w="3"/><text x="70.0698%" y="415.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.35%)</title><rect x="69.8198%" y="389" width="1.3514%" height="15" fill="rgb(234,209,28)" fg:x="155" fg:w="3"/><text x="70.0698%" y="399.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="69.8198%" y="373" width="1.3514%" height="15" fill="rgb(224,11,23)" fg:x="155" fg:w="3"/><text x="70.0698%" y="383.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.35%)</title><rect x="69.8198%" y="357" width="1.3514%" height="15" fill="rgb(232,99,1)" fg:x="155" fg:w="3"/><text x="70.0698%" y="367.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(core::option::Option&lt;storages_common_pruner::block_meta::BlockMetaIndex&gt;,alloc::sync::Arc&lt;storages_common_table_meta::meta::v2::segment::BlockMeta&gt;)&gt;&gt; (1 samples, 0.45%)</title><rect x="70.7207%" y="341" width="0.4505%" height="15" fill="rgb(237,95,45)" fg:x="157" fg:w="1"/><text x="70.9707%" y="351.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.45%)</title><rect x="70.7207%" y="325" width="0.4505%" height="15" fill="rgb(208,109,11)" fg:x="157" fg:w="1"/><text x="70.9707%" y="335.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.45%)</title><rect x="70.7207%" y="309" width="0.4505%" height="15" fill="rgb(216,190,48)" fg:x="157" fg:w="1"/><text x="70.9707%" y="319.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;storages_common_table_meta::meta::v2::segment::BlockMeta&gt; (1 samples, 0.45%)</title><rect x="70.7207%" y="293" width="0.4505%" height="15" fill="rgb(251,171,36)" fg:x="157" fg:w="1"/><text x="70.9707%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.45%)</title><rect x="70.7207%" y="277" width="0.4505%" height="15" fill="rgb(230,62,22)" fg:x="157" fg:w="1"/><text x="70.9707%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.45%)</title><rect x="70.7207%" y="261" width="0.4505%" height="15" fill="rgb(225,114,35)" fg:x="157" fg:w="1"/><text x="70.9707%" y="271.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_sql::executor::physical_plan::PhysicalPlan&gt; (1 samples, 0.45%)</title><rect x="71.1712%" y="629" width="0.4505%" height="15" fill="rgb(215,118,42)" fg:x="158" fg:w="1"/><text x="71.4212%" y="639.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;common_sql::executor::physical_plan::PhysicalPlan&gt;&gt; (1 samples, 0.45%)</title><rect x="71.1712%" y="613" width="0.4505%" height="15" fill="rgb(243,119,21)" fg:x="158" fg:w="1"/><text x="71.4212%" y="623.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_sql::executor::physical_plan::PhysicalPlan&gt; (1 samples, 0.45%)</title><rect x="71.1712%" y="597" width="0.4505%" height="15" fill="rgb(252,177,53)" fg:x="158" fg:w="1"/><text x="71.4212%" y="607.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.45%)</title><rect x="71.1712%" y="581" width="0.4505%" height="15" fill="rgb(237,209,29)" fg:x="158" fg:w="1"/><text x="71.4212%" y="591.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_expression::schema::DataSchema&gt; (1 samples, 0.45%)</title><rect x="71.1712%" y="565" width="0.4505%" height="15" fill="rgb(212,65,23)" fg:x="158" fg:w="1"/><text x="71.4212%" y="575.50"></text></g><g><title>databend-query`databend_query::pipelines::builders::builder_join::_&lt;impl databend_query::pipelines::pipeline_builder::PipelineBuilder&gt;::build_join_probe (1 samples, 0.45%)</title><rect x="71.6216%" y="501" width="0.4505%" height="15" fill="rgb(230,222,46)" fg:x="159" fg:w="1"/><text x="71.8716%" y="511.50"></text></g><g><title>databend-query`common_pipeline_core::pipeline::Pipeline::add_transform (1 samples, 0.45%)</title><rect x="71.6216%" y="485" width="0.4505%" height="15" fill="rgb(215,135,32)" fg:x="159" fg:w="1"/><text x="71.8716%" y="495.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::transform_hash_join_probe::TransformHashJoinProbe::create (1 samples, 0.45%)</title><rect x="71.6216%" y="469" width="0.4505%" height="15" fill="rgb(246,101,22)" fg:x="159" fg:w="1"/><text x="71.8716%" y="479.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::probe_state::ProbeState::create (1 samples, 0.45%)</title><rect x="71.6216%" y="453" width="0.4505%" height="15" fill="rgb(206,107,13)" fg:x="159" fg:w="1"/><text x="71.8716%" y="463.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.45%)</title><rect x="71.6216%" y="437" width="0.4505%" height="15" fill="rgb(250,100,44)" fg:x="159" fg:w="1"/><text x="71.8716%" y="447.50"></text></g><g><title>databend-query`__rust_alloc_zeroed (1 samples, 0.45%)</title><rect x="71.6216%" y="421" width="0.4505%" height="15" fill="rgb(231,147,38)" fg:x="159" fg:w="1"/><text x="71.8716%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.45%)</title><rect x="71.6216%" y="405" width="0.4505%" height="15" fill="rgb(229,8,40)" fg:x="159" fg:w="1"/><text x="71.8716%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.45%)</title><rect x="71.6216%" y="389" width="0.4505%" height="15" fill="rgb(221,135,30)" fg:x="159" fg:w="1"/><text x="71.8716%" y="399.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.45%)</title><rect x="71.6216%" y="373" width="0.4505%" height="15" fill="rgb(249,193,18)" fg:x="159" fg:w="1"/><text x="71.8716%" y="383.50"></text></g><g><title>databend-query`databend_query::pipelines::builders::builder_join::_&lt;impl databend_query::pipelines::pipeline_builder::PipelineBuilder&gt;::expand_build_side_pipeline (1 samples, 0.45%)</title><rect x="72.0721%" y="501" width="0.4505%" height="15" fill="rgb(209,133,39)" fg:x="160" fg:w="1"/><text x="72.3221%" y="511.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (1 samples, 0.45%)</title><rect x="72.0721%" y="485" width="0.4505%" height="15" fill="rgb(232,100,14)" fg:x="160" fg:w="1"/><text x="72.3221%" y="495.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.45%)</title><rect x="72.0721%" y="469" width="0.4505%" height="15" fill="rgb(224,185,1)" fg:x="160" fg:w="1"/><text x="72.3221%" y="479.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::fuse_table::FuseTable as common_catalog::table::Table&gt;::read_data (1 samples, 0.45%)</title><rect x="72.0721%" y="453" width="0.4505%" height="15" fill="rgb(223,139,8)" fg:x="160" fg:w="1"/><text x="72.3221%" y="463.50"></text></g><g><title>databend-query`common_storages_fuse::operations::read_data::_&lt;impl common_storages_fuse::fuse_table::FuseTable&gt;::build_block_reader (1 samples, 0.45%)</title><rect x="72.0721%" y="437" width="0.4505%" height="15" fill="rgb(232,213,38)" fg:x="160" fg:w="1"/><text x="72.3221%" y="447.50"></text></g><g><title>databend-query`common_storages_fuse::operations::read_data::_&lt;impl common_storages_fuse::fuse_table::FuseTable&gt;::create_block_reader (1 samples, 0.45%)</title><rect x="72.0721%" y="421" width="0.4505%" height="15" fill="rgb(207,94,22)" fg:x="160" fg:w="1"/><text x="72.3221%" y="431.50"></text></g><g><title>databend-query`common_storages_fuse::io::read::block::block_reader::BlockReader::create (1 samples, 0.45%)</title><rect x="72.0721%" y="405" width="0.4505%" height="15" fill="rgb(219,183,54)" fg:x="160" fg:w="1"/><text x="72.3221%" y="415.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.45%)</title><rect x="72.0721%" y="389" width="0.4505%" height="15" fill="rgb(216,185,54)" fg:x="160" fg:w="1"/><text x="72.3221%" y="399.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 3.60%)</title><rect x="69.3694%" y="677" width="3.6036%" height="15" fill="rgb(254,217,39)" fg:x="154" fg:w="8"/><text x="69.6194%" y="687.50">data..</text></g><g><title>databend-query`databend_query::interpreters::interpreter_select::SelectInterpreter::build_pipeline::_{{closure}} (4 samples, 1.80%)</title><rect x="71.1712%" y="661" width="1.8018%" height="15" fill="rgb(240,178,23)" fg:x="158" fg:w="4"/><text x="71.4212%" y="671.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 1.80%)</title><rect x="71.1712%" y="645" width="1.8018%" height="15" fill="rgb(218,11,47)" fg:x="158" fg:w="4"/><text x="71.4212%" y="655.50">d..</text></g><g><title>databend-query`databend_query::schedulers::scheduler::build_query_pipeline::_{{closure}} (3 samples, 1.35%)</title><rect x="71.6216%" y="629" width="1.3514%" height="15" fill="rgb(218,51,51)" fg:x="159" fg:w="3"/><text x="71.8716%" y="639.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="71.6216%" y="613" width="1.3514%" height="15" fill="rgb(238,126,27)" fg:x="159" fg:w="3"/><text x="71.8716%" y="623.50"></text></g><g><title>databend-query`databend_query::schedulers::scheduler::build_query_pipeline_without_render_result_set::_{{closure}} (3 samples, 1.35%)</title><rect x="71.6216%" y="597" width="1.3514%" height="15" fill="rgb(249,202,22)" fg:x="159" fg:w="3"/><text x="71.8716%" y="607.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="71.6216%" y="581" width="1.3514%" height="15" fill="rgb(254,195,49)" fg:x="159" fg:w="3"/><text x="71.8716%" y="591.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="71.6216%" y="565" width="1.3514%" height="15" fill="rgb(208,123,14)" fg:x="159" fg:w="3"/><text x="71.8716%" y="575.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (3 samples, 1.35%)</title><rect x="71.6216%" y="549" width="1.3514%" height="15" fill="rgb(224,200,8)" fg:x="159" fg:w="3"/><text x="71.8716%" y="559.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (3 samples, 1.35%)</title><rect x="71.6216%" y="533" width="1.3514%" height="15" fill="rgb(217,61,36)" fg:x="159" fg:w="3"/><text x="71.8716%" y="543.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (3 samples, 1.35%)</title><rect x="71.6216%" y="517" width="1.3514%" height="15" fill="rgb(206,35,45)" fg:x="159" fg:w="3"/><text x="71.8716%" y="527.50"></text></g><g><title>databend-query`databend_query::pipelines::builders::builder_sort::_&lt;impl databend_query::pipelines::pipeline_builder::PipelineBuilder&gt;::build_sort_pipeline (1 samples, 0.45%)</title><rect x="72.5225%" y="501" width="0.4505%" height="15" fill="rgb(217,65,33)" fg:x="161" fg:w="1"/><text x="72.7725%" y="511.50"></text></g><g><title>databend-query`common_pipeline_transforms::processors::transforms::transform_sort::build_full_sort_pipeline (1 samples, 0.45%)</title><rect x="72.5225%" y="485" width="0.4505%" height="15" fill="rgb(222,158,48)" fg:x="161" fg:w="1"/><text x="72.7725%" y="495.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.45%)</title><rect x="72.5225%" y="469" width="0.4505%" height="15" fill="rgb(254,2,54)" fg:x="161" fg:w="1"/><text x="72.7725%" y="479.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 4.50%)</title><rect x="68.9189%" y="725" width="4.5045%" height="15" fill="rgb(250,143,38)" fg:x="153" fg:w="10"/><text x="69.1689%" y="735.50">datab..</text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 4.05%)</title><rect x="69.3694%" y="709" width="4.0541%" height="15" fill="rgb(248,25,0)" fg:x="154" fg:w="9"/><text x="69.6194%" y="719.50">data..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 4.05%)</title><rect x="69.3694%" y="693" width="4.0541%" height="15" fill="rgb(206,152,27)" fg:x="154" fg:w="9"/><text x="69.6194%" y="703.50">data..</text></g><g><title>databend-query`databend_query::interpreters::interpreter::log_query_start (1 samples, 0.45%)</title><rect x="72.9730%" y="677" width="0.4505%" height="15" fill="rgb(240,77,30)" fg:x="162" fg:w="1"/><text x="73.2230%" y="687.50"></text></g><g><title>databend-query`databend_query::interpreters::common::query_log::InterpreterQueryLog::log_start (1 samples, 0.45%)</title><rect x="72.9730%" y="661" width="0.4505%" height="15" fill="rgb(231,5,3)" fg:x="162" fg:w="1"/><text x="73.2230%" y="671.50"></text></g><g><title>databend-query`databend_query::interpreters::common::query_log::InterpreterQueryLog::write_log (1 samples, 0.45%)</title><rect x="72.9730%" y="645" width="0.4505%" height="15" fill="rgb(207,226,32)" fg:x="162" fg:w="1"/><text x="73.2230%" y="655.50"></text></g><g><title>databend-query`common_storages_system::query_log_table::_::_&lt;impl serde::ser::Serialize for common_storages_system::query_log_table::QueryLogElement&gt;::serialize (1 samples, 0.45%)</title><rect x="72.9730%" y="629" width="0.4505%" height="15" fill="rgb(222,207,47)" fg:x="162" fg:w="1"/><text x="73.2230%" y="639.50"></text></g><g><title>databend-query`serde_json::ser::format_escaped_str (1 samples, 0.45%)</title><rect x="72.9730%" y="613" width="0.4505%" height="15" fill="rgb(229,115,45)" fg:x="162" fg:w="1"/><text x="73.2230%" y="623.50"></text></g><g><title>databend-query`&lt;opendal::types::list::Lister as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.45%)</title><rect x="73.4234%" y="725" width="0.4505%" height="15" fill="rgb(224,191,6)" fg:x="163" fg:w="1"/><text x="73.6734%" y="735.50"></text></g><g><title>databend-query`&lt;opendal::types::list::Lister as futures_core::stream::Stream&gt;::poll_next::_{{closure}} (1 samples, 0.45%)</title><rect x="73.4234%" y="709" width="0.4505%" height="15" fill="rgb(230,227,24)" fg:x="163" fg:w="1"/><text x="73.6734%" y="719.50"></text></g><g><title>databend-query`&lt;opendal::layers::minitrace::MinitraceWrapper&lt;R&gt; as opendal::raw::oio::page::api::Page&gt;::next::_{{closure}} (1 samples, 0.45%)</title><rect x="73.4234%" y="693" width="0.4505%" height="15" fill="rgb(228,80,19)" fg:x="163" fg:w="1"/><text x="73.6734%" y="703.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="73.4234%" y="677" width="0.4505%" height="15" fill="rgb(247,229,0)" fg:x="163" fg:w="1"/><text x="73.6734%" y="687.50"></text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingPager&lt;P&gt; as opendal::raw::oio::page::api::Page&gt;::next::_{{closure}} (1 samples, 0.45%)</title><rect x="73.4234%" y="661" width="0.4505%" height="15" fill="rgb(237,194,15)" fg:x="163" fg:w="1"/><text x="73.6734%" y="671.50"></text></g><g><title>databend-query`&lt;opendal::layers::retry::RetryWrapper&lt;P,I&gt; as opendal::raw::oio::page::api::Page&gt;::next::_{{closure}} (1 samples, 0.45%)</title><rect x="73.4234%" y="645" width="0.4505%" height="15" fill="rgb(219,203,20)" fg:x="163" fg:w="1"/><text x="73.6734%" y="655.50"></text></g><g><title>databend-query`&lt;opendal::layers::complete::CompletePager&lt;A,P&gt; as opendal::raw::oio::page::api::Page&gt;::next (1 samples, 0.45%)</title><rect x="73.4234%" y="629" width="0.4505%" height="15" fill="rgb(234,128,8)" fg:x="163" fg:w="1"/><text x="73.6734%" y="639.50"></text></g><g><title>databend-query`&lt;opendal::types::operator::operator_futures::OperatorFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="73.8739%" y="725" width="0.4505%" height="15" fill="rgb(248,202,8)" fg:x="164" fg:w="1"/><text x="74.1239%" y="735.50"></text></g><g><title>databend-query`opendal::types::operator::operator::Operator::lister_with::_{{closure}}::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="709" width="0.4505%" height="15" fill="rgb(206,104,37)" fg:x="164" fg:w="1"/><text x="74.1239%" y="719.50"></text></g><g><title>databend-query`&lt;alloc::sync::Arc&lt;T&gt; as opendal::raw::accessor::Accessor&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="693" width="0.4505%" height="15" fill="rgb(223,8,27)" fg:x="164" fg:w="1"/><text x="74.1239%" y="703.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="677" width="0.4505%" height="15" fill="rgb(216,217,28)" fg:x="164" fg:w="1"/><text x="74.1239%" y="687.50"></text></g><g><title>databend-query`&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="661" width="0.4505%" height="15" fill="rgb(249,199,1)" fg:x="164" fg:w="1"/><text x="74.1239%" y="671.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="645" width="0.4505%" height="15" fill="rgb(240,85,17)" fg:x="164" fg:w="1"/><text x="74.1239%" y="655.50"></text></g><g><title>databend-query`&lt;opendal::layers::prometheus_client::PrometheusAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="629" width="0.4505%" height="15" fill="rgb(206,108,45)" fg:x="164" fg:w="1"/><text x="74.1239%" y="639.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="613" width="0.4505%" height="15" fill="rgb(245,210,41)" fg:x="164" fg:w="1"/><text x="74.1239%" y="623.50"></text></g><g><title>databend-query`&lt;minitrace::future::EnterOnPoll&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="73.8739%" y="597" width="0.4505%" height="15" fill="rgb(206,13,37)" fg:x="164" fg:w="1"/><text x="74.1239%" y="607.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="73.8739%" y="581" width="0.4505%" height="15" fill="rgb(250,61,18)" fg:x="164" fg:w="1"/><text x="74.1239%" y="591.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="565" width="0.4505%" height="15" fill="rgb(235,172,48)" fg:x="164" fg:w="1"/><text x="74.1239%" y="575.50"></text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="549" width="0.4505%" height="15" fill="rgb(249,201,17)" fg:x="164" fg:w="1"/><text x="74.1239%" y="559.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="73.8739%" y="533" width="0.4505%" height="15" fill="rgb(219,208,6)" fg:x="164" fg:w="1"/><text x="74.1239%" y="543.50"></text></g><g><title>databend-query`opendal::raw::layer::_&lt;impl opendal::raw::accessor::Accessor for L&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="517" width="0.4505%" height="15" fill="rgb(248,31,23)" fg:x="164" fg:w="1"/><text x="74.1239%" y="527.50"></text></g><g><title>databend-query`&lt;opendal::layers::retry::RetryAccessor&lt;A,I&gt; as opendal::raw::layer::LayeredAccessor&gt;::list::_{{closure}} (1 samples, 0.45%)</title><rect x="73.8739%" y="501" width="0.4505%" height="15" fill="rgb(245,15,42)" fg:x="164" fg:w="1"/><text x="74.1239%" y="511.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="73.8739%" y="485" width="0.4505%" height="15" fill="rgb(222,217,39)" fg:x="164" fg:w="1"/><text x="74.1239%" y="495.50"></text></g><g><title>databend-query`&lt;backon::retry::Retry&lt;B,T,E,Fut,FutureFn,RF,NF&gt; as core::future::future::Future&gt;::poll (1 samples, 0.45%)</title><rect x="73.8739%" y="469" width="0.4505%" height="15" fill="rgb(210,219,27)" fg:x="164" fg:w="1"/><text x="74.1239%" y="479.50"></text></g><g><title>databend-query`&lt;opendal::layers::timeout::TimeoutAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::list (1 samples, 0.45%)</title><rect x="73.8739%" y="453" width="0.4505%" height="15" fill="rgb(252,166,36)" fg:x="164" fg:w="1"/><text x="74.1239%" y="463.50"></text></g><g><title>databend-query`common_base::runtime::thread::Thread::named_spawn (1 samples, 0.45%)</title><rect x="74.3243%" y="725" width="0.4505%" height="15" fill="rgb(245,132,34)" fg:x="165" fg:w="1"/><text x="74.5743%" y="735.50"></text></g><g><title>databend-query`common_storages_fuse::pruning::block_pruner::BlockPruner::pruning::_{{closure}} (2 samples, 0.90%)</title><rect x="74.7748%" y="725" width="0.9009%" height="15" fill="rgb(236,54,3)" fg:x="166" fg:w="2"/><text x="75.0248%" y="735.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="74.7748%" y="709" width="0.9009%" height="15" fill="rgb(241,173,43)" fg:x="166" fg:w="2"/><text x="75.0248%" y="719.50"></text></g><g><title>databend-query`common_storages_fuse::pruning::block_pruner::BlockPruner::block_pruning_sync (2 samples, 0.90%)</title><rect x="74.7748%" y="693" width="0.9009%" height="15" fill="rgb(215,190,9)" fg:x="166" fg:w="2"/><text x="75.0248%" y="703.50"></text></g><g><title>databend-query`storages_common_table_meta::meta::format::read_and_deserialize (2 samples, 0.90%)</title><rect x="74.7748%" y="677" width="0.9009%" height="15" fill="rgb(242,101,16)" fg:x="166" fg:w="2"/><text x="75.0248%" y="687.50"></text></g><g><title>databend-query`storages_common_table_meta::meta::format::decode (2 samples, 0.90%)</title><rect x="74.7748%" y="661" width="0.9009%" height="15" fill="rgb(223,190,21)" fg:x="166" fg:w="2"/><text x="75.0248%" y="671.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.90%)</title><rect x="74.7748%" y="645" width="0.9009%" height="15" fill="rgb(215,228,25)" fg:x="166" fg:w="2"/><text x="75.0248%" y="655.50"></text></g><g><title>databend-query`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.90%)</title><rect x="74.7748%" y="629" width="0.9009%" height="15" fill="rgb(225,36,22)" fg:x="166" fg:w="2"/><text x="75.0248%" y="639.50"></text></g><g><title>databend-query`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::sync::Arc&lt;T&gt;&gt;::deserialize (2 samples, 0.90%)</title><rect x="74.7748%" y="613" width="0.9009%" height="15" fill="rgb(251,106,46)" fg:x="166" fg:w="2"/><text x="75.0248%" y="623.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::from_box_in (2 samples, 0.90%)</title><rect x="74.7748%" y="597" width="0.9009%" height="15" fill="rgb(208,90,1)" fg:x="166" fg:w="2"/><text x="75.0248%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.90%)</title><rect x="74.7748%" y="581" width="0.9009%" height="15" fill="rgb(243,10,4)" fg:x="166" fg:w="2"/><text x="75.0248%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.45%)</title><rect x="75.2252%" y="565" width="0.4505%" height="15" fill="rgb(212,137,27)" fg:x="167" fg:w="1"/><text x="75.4752%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.45%)</title><rect x="75.2252%" y="549" width="0.4505%" height="15" fill="rgb(231,220,49)" fg:x="167" fg:w="1"/><text x="75.4752%" y="559.50"></text></g><g><title>databend-query`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.45%)</title><rect x="76.1261%" y="709" width="0.4505%" height="15" fill="rgb(237,96,20)" fg:x="169" fg:w="1"/><text x="76.3761%" y="719.50"></text></g><g><title>databend-query`common_users::user_mgr::_&lt;impl common_users::user_api::UserApiProvider&gt;::get_user_with_client_ip::_{{closure}} (1 samples, 0.45%)</title><rect x="76.5766%" y="645" width="0.4505%" height="15" fill="rgb(239,229,30)" fg:x="170" fg:w="1"/><text x="76.8266%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="76.5766%" y="629" width="0.4505%" height="15" fill="rgb(219,65,33)" fg:x="170" fg:w="1"/><text x="76.8266%" y="639.50"></text></g><g><title>databend-query`common_users::user_mgr::_&lt;impl common_users::user_api::UserApiProvider&gt;::get_user::_{{closure}} (1 samples, 0.45%)</title><rect x="76.5766%" y="613" width="0.4505%" height="15" fill="rgb(243,134,7)" fg:x="170" fg:w="1"/><text x="76.8266%" y="623.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;async_backtrace::defer::Defer&lt;async_backtrace::frame::Frame::in_scope::activate::{{closure}},()&gt;&gt; (1 samples, 0.45%)</title><rect x="76.5766%" y="597" width="0.4505%" height="15" fill="rgb(216,177,54)" fg:x="170" fg:w="1"/><text x="76.8266%" y="607.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::authenticate::_{{closure}} (2 samples, 0.90%)</title><rect x="76.5766%" y="709" width="0.9009%" height="15" fill="rgb(211,160,20)" fg:x="170" fg:w="2"/><text x="76.8266%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="76.5766%" y="693" width="0.9009%" height="15" fill="rgb(239,85,39)" fg:x="170" fg:w="2"/><text x="76.8266%" y="703.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase::authenticate::_{{closure}} (2 samples, 0.90%)</title><rect x="76.5766%" y="677" width="0.9009%" height="15" fill="rgb(232,125,22)" fg:x="170" fg:w="2"/><text x="76.8266%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="76.5766%" y="661" width="0.9009%" height="15" fill="rgb(244,57,34)" fg:x="170" fg:w="2"/><text x="76.8266%" y="671.50"></text></g><g><title>databend-query`databend_query::sessions::session::Session::set_authed_user::_{{closure}} (1 samples, 0.45%)</title><rect x="77.0270%" y="645" width="0.4505%" height="15" fill="rgb(214,203,32)" fg:x="171" fg:w="1"/><text x="77.2770%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="77.0270%" y="629" width="0.4505%" height="15" fill="rgb(207,58,43)" fg:x="171" fg:w="1"/><text x="77.2770%" y="639.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::session_privilege_mgr::SessionPrivilegeManagerImpl as databend_query::sessions::session_privilege_mgr::SessionPrivilegeManager&gt;::set_authed_user::_{{closure}} (1 samples, 0.45%)</title><rect x="77.0270%" y="613" width="0.4505%" height="15" fill="rgb(215,193,15)" fg:x="171" fg:w="1"/><text x="77.2770%" y="623.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="77.0270%" y="597" width="0.4505%" height="15" fill="rgb(232,15,44)" fg:x="171" fg:w="1"/><text x="77.2770%" y="607.50"></text></g><g><title>databend-query`databend_query::sessions::session_privilege_mgr::SessionPrivilegeManagerImpl::ensure_current_role::_{{closure}} (1 samples, 0.45%)</title><rect x="77.0270%" y="581" width="0.4505%" height="15" fill="rgb(212,3,48)" fg:x="171" fg:w="1"/><text x="77.2770%" y="591.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="77.0270%" y="565" width="0.4505%" height="15" fill="rgb(218,128,7)" fg:x="171" fg:w="1"/><text x="77.2770%" y="575.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::session_privilege_mgr::SessionPrivilegeManagerImpl as databend_query::sessions::session_privilege_mgr::SessionPrivilegeManager&gt;::validate_available_role::_{{closure}} (1 samples, 0.45%)</title><rect x="77.0270%" y="549" width="0.4505%" height="15" fill="rgb(226,216,39)" fg:x="171" fg:w="1"/><text x="77.2770%" y="559.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="77.0270%" y="533" width="0.4505%" height="15" fill="rgb(243,47,51)" fg:x="171" fg:w="1"/><text x="77.2770%" y="543.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::session_privilege_mgr::SessionPrivilegeManagerImpl as databend_query::sessions::session_privilege_mgr::SessionPrivilegeManager&gt;::get_all_available_roles::_{{closure}} (1 samples, 0.45%)</title><rect x="77.0270%" y="517" width="0.4505%" height="15" fill="rgb(241,183,40)" fg:x="171" fg:w="1"/><text x="77.2770%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="77.0270%" y="501" width="0.4505%" height="15" fill="rgb(231,217,32)" fg:x="171" fg:w="1"/><text x="77.2770%" y="511.50"></text></g><g><title>databend-query`core::slice::sort::insert_tail (1 samples, 0.45%)</title><rect x="77.0270%" y="485" width="0.4505%" height="15" fill="rgb(229,61,38)" fg:x="171" fg:w="1"/><text x="77.2770%" y="495.50"></text></g><g><title>databend-query`common_ast::ast::statements::statement::Statement::to_mask_sql (1 samples, 0.45%)</title><rect x="77.4775%" y="613" width="0.4505%" height="15" fill="rgb(225,210,5)" fg:x="172" fg:w="1"/><text x="77.7275%" y="623.50"></text></g><g><title>databend-query`alloc::fmt::format::format_inner (1 samples, 0.45%)</title><rect x="77.4775%" y="597" width="0.4505%" height="15" fill="rgb(231,79,45)" fg:x="172" fg:w="1"/><text x="77.7275%" y="607.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.45%)</title><rect x="77.4775%" y="581" width="0.4505%" height="15" fill="rgb(224,100,7)" fg:x="172" fg:w="1"/><text x="77.7275%" y="591.50"></text></g><g><title>databend-query`&lt;common_ast::ast::statements::statement::Statement as core::fmt::Display&gt;::fmt (1 samples, 0.45%)</title><rect x="77.4775%" y="565" width="0.4505%" height="15" fill="rgb(241,198,18)" fg:x="172" fg:w="1"/><text x="77.7275%" y="575.50"></text></g><g><title>databend-query`common_ast::parser::parser::parse_sql (1 samples, 0.45%)</title><rect x="77.9279%" y="565" width="0.4505%" height="15" fill="rgb(252,97,53)" fg:x="173" fg:w="1"/><text x="78.1779%" y="575.50"></text></g><g><title>databend-query`common_ast::parser::statement::statement (1 samples, 0.45%)</title><rect x="77.9279%" y="549" width="0.4505%" height="15" fill="rgb(220,88,7)" fg:x="173" fg:w="1"/><text x="78.1779%" y="559.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="77.9279%" y="533" width="0.4505%" height="15" fill="rgb(213,176,14)" fg:x="173" fg:w="1"/><text x="78.1779%" y="543.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.45%)</title><rect x="77.9279%" y="517" width="0.4505%" height="15" fill="rgb(246,73,7)" fg:x="173" fg:w="1"/><text x="78.1779%" y="527.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.45%)</title><rect x="77.9279%" y="501" width="0.4505%" height="15" fill="rgb(245,64,36)" fg:x="173" fg:w="1"/><text x="78.1779%" y="511.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="77.9279%" y="485" width="0.4505%" height="15" fill="rgb(245,80,10)" fg:x="173" fg:w="1"/><text x="78.1779%" y="495.50"></text></g><g><title>databend-query`common_ast::parser::query::query (1 samples, 0.45%)</title><rect x="77.9279%" y="469" width="0.4505%" height="15" fill="rgb(232,107,50)" fg:x="173" fg:w="1"/><text x="78.1779%" y="479.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="77.9279%" y="453" width="0.4505%" height="15" fill="rgb(253,3,0)" fg:x="173" fg:w="1"/><text x="78.1779%" y="463.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation (1 samples, 0.45%)</title><rect x="77.9279%" y="437" width="0.4505%" height="15" fill="rgb(212,99,53)" fg:x="173" fg:w="1"/><text x="78.1779%" y="447.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation_element (1 samples, 0.45%)</title><rect x="77.9279%" y="421" width="0.4505%" height="15" fill="rgb(249,111,54)" fg:x="173" fg:w="1"/><text x="78.1779%" y="431.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.45%)</title><rect x="77.9279%" y="405" width="0.4505%" height="15" fill="rgb(249,55,30)" fg:x="173" fg:w="1"/><text x="78.1779%" y="415.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="77.9279%" y="389" width="0.4505%" height="15" fill="rgb(237,47,42)" fg:x="173" fg:w="1"/><text x="78.1779%" y="399.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC) as nom::sequence::Tuple&lt;Input,(A,B,C),Error&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="77.9279%" y="373" width="0.4505%" height="15" fill="rgb(211,20,18)" fg:x="173" fg:w="1"/><text x="78.1779%" y="383.50"></text></g><g><title>databend-query`common_ast::error::Error::from_error_kind (1 samples, 0.45%)</title><rect x="77.9279%" y="357" width="0.4505%" height="15" fill="rgb(231,203,46)" fg:x="173" fg:w="1"/><text x="78.1779%" y="367.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::on_init::_{{closure}} (3 samples, 1.35%)</title><rect x="77.4775%" y="709" width="1.3514%" height="15" fill="rgb(237,142,3)" fg:x="172" fg:w="3"/><text x="77.7275%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="77.4775%" y="693" width="1.3514%" height="15" fill="rgb(241,107,1)" fg:x="172" fg:w="3"/><text x="77.7275%" y="703.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase::do_init::_{{closure}} (3 samples, 1.35%)</title><rect x="77.4775%" y="677" width="1.3514%" height="15" fill="rgb(229,83,13)" fg:x="172" fg:w="3"/><text x="77.7275%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="77.4775%" y="661" width="1.3514%" height="15" fill="rgb(241,91,40)" fg:x="172" fg:w="3"/><text x="77.7275%" y="671.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.35%)</title><rect x="77.4775%" y="645" width="1.3514%" height="15" fill="rgb(225,3,45)" fg:x="172" fg:w="3"/><text x="77.7275%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.35%)</title><rect x="77.4775%" y="629" width="1.3514%" height="15" fill="rgb(244,223,14)" fg:x="172" fg:w="3"/><text x="77.7275%" y="639.50"></text></g><g><title>databend-query`common_sql::planner::planner::Planner::plan_sql::_{{closure}} (2 samples, 0.90%)</title><rect x="77.9279%" y="613" width="0.9009%" height="15" fill="rgb(224,124,37)" fg:x="173" fg:w="2"/><text x="78.1779%" y="623.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.90%)</title><rect x="77.9279%" y="597" width="0.9009%" height="15" fill="rgb(251,171,30)" fg:x="173" fg:w="2"/><text x="78.1779%" y="607.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="77.9279%" y="581" width="0.9009%" height="15" fill="rgb(236,46,54)" fg:x="173" fg:w="2"/><text x="78.1779%" y="591.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="78.3784%" y="565" width="0.4505%" height="15" fill="rgb(245,213,5)" fg:x="174" fg:w="1"/><text x="78.6284%" y="575.50"></text></g><g><title>databend-query`common_ast::parser::parser::parse_sql (1 samples, 0.45%)</title><rect x="78.8288%" y="421" width="0.4505%" height="15" fill="rgb(230,144,27)" fg:x="175" fg:w="1"/><text x="79.0788%" y="431.50"></text></g><g><title>databend-query`common_ast::parser::statement::statement (1 samples, 0.45%)</title><rect x="78.8288%" y="405" width="0.4505%" height="15" fill="rgb(220,86,6)" fg:x="175" fg:w="1"/><text x="79.0788%" y="415.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="78.8288%" y="389" width="0.4505%" height="15" fill="rgb(240,20,13)" fg:x="175" fg:w="1"/><text x="79.0788%" y="399.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.45%)</title><rect x="78.8288%" y="373" width="0.4505%" height="15" fill="rgb(217,89,34)" fg:x="175" fg:w="1"/><text x="79.0788%" y="383.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.45%)</title><rect x="78.8288%" y="357" width="0.4505%" height="15" fill="rgb(229,13,5)" fg:x="175" fg:w="1"/><text x="79.0788%" y="367.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="78.8288%" y="341" width="0.4505%" height="15" fill="rgb(244,67,35)" fg:x="175" fg:w="1"/><text x="79.0788%" y="351.50"></text></g><g><title>databend-query`common_ast::parser::query::query (1 samples, 0.45%)</title><rect x="78.8288%" y="325" width="0.4505%" height="15" fill="rgb(221,40,2)" fg:x="175" fg:w="1"/><text x="79.0788%" y="335.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="78.8288%" y="309" width="0.4505%" height="15" fill="rgb(237,157,21)" fg:x="175" fg:w="1"/><text x="79.0788%" y="319.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation (1 samples, 0.45%)</title><rect x="78.8288%" y="293" width="0.4505%" height="15" fill="rgb(222,94,11)" fg:x="175" fg:w="1"/><text x="79.0788%" y="303.50"></text></g><g><title>databend-query`common_ast::util::run_pratt_parser (1 samples, 0.45%)</title><rect x="78.8288%" y="277" width="0.4505%" height="15" fill="rgb(249,113,6)" fg:x="175" fg:w="1"/><text x="79.0788%" y="287.50"></text></g><g><title>databend-query`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.45%)</title><rect x="78.8288%" y="261" width="0.4505%" height="15" fill="rgb(238,137,36)" fg:x="175" fg:w="1"/><text x="79.0788%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.45%)</title><rect x="78.8288%" y="245" width="0.4505%" height="15" fill="rgb(210,102,26)" fg:x="175" fg:w="1"/><text x="79.0788%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.45%)</title><rect x="78.8288%" y="229" width="0.4505%" height="15" fill="rgb(218,30,30)" fg:x="175" fg:w="1"/><text x="79.0788%" y="239.50"></text></g><g><title>databend-query`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1 samples, 0.45%)</title><rect x="79.2793%" y="85" width="0.4505%" height="15" fill="rgb(214,67,26)" fg:x="176" fg:w="1"/><text x="79.5293%" y="95.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::_&lt;impl chrono::offset::TimeZone for chrono_tz::timezones::Tz&gt;::offset_from_local_datetime (2 samples, 0.90%)</title><rect x="79.7297%" y="85" width="0.9009%" height="15" fill="rgb(251,9,53)" fg:x="177" fg:w="2"/><text x="79.9797%" y="95.50"></text></g><g><title>databend-query`&lt;chrono_tz::timezones::Tz as chrono_tz::timezone_impl::TimeSpans&gt;::timespans (1 samples, 0.45%)</title><rect x="81.5315%" y="69" width="0.4505%" height="15" fill="rgb(228,204,25)" fg:x="181" fg:w="1"/><text x="81.7815%" y="79.50"></text></g><g><title>databend-query`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1 samples, 0.45%)</title><rect x="81.9820%" y="69" width="0.4505%" height="15" fill="rgb(207,153,8)" fg:x="182" fg:w="1"/><text x="82.2320%" y="79.50"></text></g><g><title>databend-query`chrono::traits::Datelike::num_days_from_ce (1 samples, 0.45%)</title><rect x="82.4324%" y="69" width="0.4505%" height="15" fill="rgb(242,9,16)" fg:x="183" fg:w="1"/><text x="82.6824%" y="79.50"></text></g><g><title>databend-query`chrono_tz::binary_search::binary_search (11 samples, 4.95%)</title><rect x="83.7838%" y="53" width="4.9550%" height="15" fill="rgb(217,211,10)" fg:x="186" fg:w="11"/><text x="84.0338%" y="63.50">databe..</text></g><g><title>databend-query`chrono_tz::timezone_impl::FixedTimespanSet::local_span (6 samples, 2.70%)</title><rect x="86.0360%" y="37" width="2.7027%" height="15" fill="rgb(219,228,52)" fg:x="191" fg:w="6"/><text x="86.2860%" y="47.50">da..</text></g><g><title>databend-query`common_sql::planner::binder::project::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::normalize_select_list::_{{closure}} (23 samples, 10.36%)</title><rect x="79.2793%" y="261" width="10.3604%" height="15" fill="rgb(231,92,29)" fg:x="176" fg:w="23"/><text x="79.5293%" y="271.50">databend-query`..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 10.36%)</title><rect x="79.2793%" y="245" width="10.3604%" height="15" fill="rgb(232,8,23)" fg:x="176" fg:w="23"/><text x="79.5293%" y="255.50">databend-query`..</text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (23 samples, 10.36%)</title><rect x="79.2793%" y="229" width="10.3604%" height="15" fill="rgb(216,211,34)" fg:x="176" fg:w="23"/><text x="79.5293%" y="239.50">databend-query`..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 10.36%)</title><rect x="79.2793%" y="213" width="10.3604%" height="15" fill="rgb(236,151,0)" fg:x="176" fg:w="23"/><text x="79.5293%" y="223.50">databend-query`..</text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::try_create (23 samples, 10.36%)</title><rect x="79.2793%" y="197" width="10.3604%" height="15" fill="rgb(209,168,3)" fg:x="176" fg:w="23"/><text x="79.5293%" y="207.50">databend-query`..</text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as common_catalog::table_context::TableContext&gt;::get_function_context (23 samples, 10.36%)</title><rect x="79.2793%" y="181" width="10.3604%" height="15" fill="rgb(208,129,28)" fg:x="176" fg:w="23"/><text x="79.5293%" y="191.50">databend-query`..</text></g><g><title>databend-query`once_cell::imp::OnceCell&lt;T&gt;::initialize (23 samples, 10.36%)</title><rect x="79.2793%" y="165" width="10.3604%" height="15" fill="rgb(229,78,22)" fg:x="176" fg:w="23"/><text x="79.5293%" y="175.50">databend-query`..</text></g><g><title>databend-query`once_cell::imp::initialize_or_wait (23 samples, 10.36%)</title><rect x="79.2793%" y="149" width="10.3604%" height="15" fill="rgb(228,187,13)" fg:x="176" fg:w="23"/><text x="79.5293%" y="159.50">databend-query`..</text></g><g><title>databend-query`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (23 samples, 10.36%)</title><rect x="79.2793%" y="133" width="10.3604%" height="15" fill="rgb(240,119,24)" fg:x="176" fg:w="23"/><text x="79.5293%" y="143.50">databend-query`..</text></g><g><title>databend-query`core::ops::function::FnOnce::call_once (23 samples, 10.36%)</title><rect x="79.2793%" y="117" width="10.3604%" height="15" fill="rgb(209,194,42)" fg:x="176" fg:w="23"/><text x="79.5293%" y="127.50">databend-query`..</text></g><g><title>databend-query`common_expression::utils::date_helper::TzFactory::get (23 samples, 10.36%)</title><rect x="79.2793%" y="101" width="10.3604%" height="15" fill="rgb(247,200,46)" fg:x="176" fg:w="23"/><text x="79.5293%" y="111.50">databend-query`..</text></g><g><title>databend-query`common_expression::utils::date_helper::TzLUT::new (20 samples, 9.01%)</title><rect x="80.6306%" y="85" width="9.0090%" height="15" fill="rgb(218,76,16)" fg:x="179" fg:w="20"/><text x="80.8806%" y="95.50">databend-quer..</text></g><g><title>databend-query`chrono_tz::timezone_impl::_&lt;impl chrono::offset::TimeZone for chrono_tz::timezones::Tz&gt;::offset_from_local_datetime (15 samples, 6.76%)</title><rect x="82.8829%" y="69" width="6.7568%" height="15" fill="rgb(225,21,48)" fg:x="184" fg:w="15"/><text x="83.1329%" y="79.50">databend-..</text></g><g><title>databend-query`chrono_tz::timezone_impl::FixedTimespanSet::local_span (2 samples, 0.90%)</title><rect x="88.7387%" y="53" width="0.9009%" height="15" fill="rgb(239,223,50)" fg:x="197" fg:w="2"/><text x="88.9887%" y="63.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_table_reference::_{{closure}} (1 samples, 0.45%)</title><rect x="89.6396%" y="261" width="0.4505%" height="15" fill="rgb(244,45,21)" fg:x="199" fg:w="1"/><text x="89.8896%" y="271.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="89.6396%" y="245" width="0.4505%" height="15" fill="rgb(232,33,43)" fg:x="199" fg:w="1"/><text x="89.8896%" y="255.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;common_sql::planner::binder::table::&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_single_table::{{closure}}&gt; (1 samples, 0.45%)</title><rect x="89.6396%" y="229" width="0.4505%" height="15" fill="rgb(209,8,3)" fg:x="199" fg:w="1"/><text x="89.8896%" y="239.50"></text></g><g><title>databend-query`common_sql::planner::binder::ddl::database::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_show_databases::_{{closure}} (26 samples, 11.71%)</title><rect x="78.8288%" y="485" width="11.7117%" height="15" fill="rgb(214,25,53)" fg:x="175" fg:w="26"/><text x="79.0788%" y="495.50">databend-query`co..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 11.71%)</title><rect x="78.8288%" y="469" width="11.7117%" height="15" fill="rgb(254,186,54)" fg:x="175" fg:w="26"/><text x="79.0788%" y="479.50">databend-query`st..</text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_rewrite_to_query::_{{closure}} (26 samples, 11.71%)</title><rect x="78.8288%" y="453" width="11.7117%" height="15" fill="rgb(208,174,49)" fg:x="175" fg:w="26"/><text x="79.0788%" y="463.50">databend-query`co..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 11.71%)</title><rect x="78.8288%" y="437" width="11.7117%" height="15" fill="rgb(233,191,51)" fg:x="175" fg:w="26"/><text x="79.0788%" y="447.50">databend-query`st..</text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (25 samples, 11.26%)</title><rect x="79.2793%" y="421" width="11.2613%" height="15" fill="rgb(222,134,10)" fg:x="176" fg:w="25"/><text x="79.5293%" y="431.50">databend-query`co..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 11.26%)</title><rect x="79.2793%" y="405" width="11.2613%" height="15" fill="rgb(230,226,20)" fg:x="176" fg:w="25"/><text x="79.5293%" y="415.50">databend-query`st..</text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (25 samples, 11.26%)</title><rect x="79.2793%" y="389" width="11.2613%" height="15" fill="rgb(251,111,25)" fg:x="176" fg:w="25"/><text x="79.5293%" y="399.50">databend-query`co..</text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (25 samples, 11.26%)</title><rect x="79.2793%" y="373" width="11.2613%" height="15" fill="rgb(224,40,46)" fg:x="176" fg:w="25"/><text x="79.5293%" y="383.50">databend-query`co..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 11.26%)</title><rect x="79.2793%" y="357" width="11.2613%" height="15" fill="rgb(236,108,47)" fg:x="176" fg:w="25"/><text x="79.5293%" y="367.50">databend-query`st..</text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (25 samples, 11.26%)</title><rect x="79.2793%" y="341" width="11.2613%" height="15" fill="rgb(234,93,0)" fg:x="176" fg:w="25"/><text x="79.5293%" y="351.50">databend-query`co..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 11.26%)</title><rect x="79.2793%" y="325" width="11.2613%" height="15" fill="rgb(224,213,32)" fg:x="176" fg:w="25"/><text x="79.5293%" y="335.50">databend-query`st..</text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (25 samples, 11.26%)</title><rect x="79.2793%" y="309" width="11.2613%" height="15" fill="rgb(251,11,48)" fg:x="176" fg:w="25"/><text x="79.5293%" y="319.50">databend-query`co..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 11.26%)</title><rect x="79.2793%" y="293" width="11.2613%" height="15" fill="rgb(236,173,5)" fg:x="176" fg:w="25"/><text x="79.5293%" y="303.50">databend-query`st..</text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (25 samples, 11.26%)</title><rect x="79.2793%" y="277" width="11.2613%" height="15" fill="rgb(230,95,12)" fg:x="176" fg:w="25"/><text x="79.5293%" y="287.50">databend-query`co..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="90.0901%" y="261" width="0.4505%" height="15" fill="rgb(232,209,1)" fg:x="200" fg:w="1"/><text x="90.3401%" y="271.50"></text></g><g><title>databend-query`common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.45%)</title><rect x="90.0901%" y="245" width="0.4505%" height="15" fill="rgb(232,6,1)" fg:x="200" fg:w="1"/><text x="90.3401%" y="255.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="90.0901%" y="229" width="0.4505%" height="15" fill="rgb(210,224,50)" fg:x="200" fg:w="1"/><text x="90.3401%" y="239.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.45%)</title><rect x="90.0901%" y="213" width="0.4505%" height="15" fill="rgb(228,127,35)" fg:x="200" fg:w="1"/><text x="90.3401%" y="223.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="90.0901%" y="197" width="0.4505%" height="15" fill="rgb(245,102,45)" fg:x="200" fg:w="1"/><text x="90.3401%" y="207.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.45%)</title><rect x="90.0901%" y="181" width="0.4505%" height="15" fill="rgb(214,1,49)" fg:x="200" fg:w="1"/><text x="90.3401%" y="191.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.45%)</title><rect x="90.0901%" y="165" width="0.4505%" height="15" fill="rgb(226,163,40)" fg:x="200" fg:w="1"/><text x="90.3401%" y="175.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="90.0901%" y="149" width="0.4505%" height="15" fill="rgb(239,212,28)" fg:x="200" fg:w="1"/><text x="90.3401%" y="159.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.45%)</title><rect x="90.0901%" y="133" width="0.4505%" height="15" fill="rgb(220,20,13)" fg:x="200" fg:w="1"/><text x="90.3401%" y="143.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="90.0901%" y="117" width="0.4505%" height="15" fill="rgb(210,164,35)" fg:x="200" fg:w="1"/><text x="90.3401%" y="127.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.45%)</title><rect x="90.0901%" y="101" width="0.4505%" height="15" fill="rgb(248,109,41)" fg:x="200" fg:w="1"/><text x="90.3401%" y="111.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="90.0901%" y="85" width="0.4505%" height="15" fill="rgb(238,23,50)" fg:x="200" fg:w="1"/><text x="90.3401%" y="95.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.45%)</title><rect x="90.0901%" y="69" width="0.4505%" height="15" fill="rgb(211,48,49)" fg:x="200" fg:w="1"/><text x="90.3401%" y="79.50"></text></g><g><title>databend-query`common_sql::planner::semantic::type_check::TypeChecker::resolve_literal (1 samples, 0.45%)</title><rect x="90.0901%" y="53" width="0.4505%" height="15" fill="rgb(223,36,21)" fg:x="200" fg:w="1"/><text x="90.3401%" y="63.50"></text></g><g><title>databend-query`common_expression::values::Scalar::as_ref (1 samples, 0.45%)</title><rect x="90.0901%" y="37" width="0.4505%" height="15" fill="rgb(207,123,46)" fg:x="200" fg:w="1"/><text x="90.3401%" y="47.50"></text></g><g><title>databend-query`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.45%)</title><rect x="90.5405%" y="229" width="0.4505%" height="15" fill="rgb(240,218,32)" fg:x="201" fg:w="1"/><text x="90.7905%" y="239.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (28 samples, 12.61%)</title><rect x="78.8288%" y="565" width="12.6126%" height="15" fill="rgb(252,5,43)" fg:x="175" fg:w="28"/><text x="79.0788%" y="575.50">databend-query`&lt;min..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (28 samples, 12.61%)</title><rect x="78.8288%" y="549" width="12.6126%" height="15" fill="rgb(252,84,19)" fg:x="175" fg:w="28"/><text x="79.0788%" y="559.50">databend-query`std:..</text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (28 samples, 12.61%)</title><rect x="78.8288%" y="533" width="12.6126%" height="15" fill="rgb(243,152,39)" fg:x="175" fg:w="28"/><text x="79.0788%" y="543.50">databend-query`comm..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (28 samples, 12.61%)</title><rect x="78.8288%" y="517" width="12.6126%" height="15" fill="rgb(234,160,15)" fg:x="175" fg:w="28"/><text x="79.0788%" y="527.50">databend-query`std:..</text></g><g><title>databend-query`common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (28 samples, 12.61%)</title><rect x="78.8288%" y="501" width="12.6126%" height="15" fill="rgb(237,34,20)" fg:x="175" fg:w="28"/><text x="79.0788%" y="511.50">databend-query`comm..</text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (2 samples, 0.90%)</title><rect x="90.5405%" y="485" width="0.9009%" height="15" fill="rgb(229,97,13)" fg:x="201" fg:w="2"/><text x="90.7905%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="90.5405%" y="469" width="0.9009%" height="15" fill="rgb(234,71,50)" fg:x="201" fg:w="2"/><text x="90.7905%" y="479.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (2 samples, 0.90%)</title><rect x="90.5405%" y="453" width="0.9009%" height="15" fill="rgb(253,155,4)" fg:x="201" fg:w="2"/><text x="90.7905%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="90.5405%" y="437" width="0.9009%" height="15" fill="rgb(222,185,37)" fg:x="201" fg:w="2"/><text x="90.7905%" y="447.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (2 samples, 0.90%)</title><rect x="90.5405%" y="421" width="0.9009%" height="15" fill="rgb(251,177,13)" fg:x="201" fg:w="2"/><text x="90.7905%" y="431.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="90.5405%" y="405" width="0.9009%" height="15" fill="rgb(250,179,40)" fg:x="201" fg:w="2"/><text x="90.7905%" y="415.50"></text></g><g><title>databend-query`common_sql::planner::binder::select::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (2 samples, 0.90%)</title><rect x="90.5405%" y="389" width="0.9009%" height="15" fill="rgb(242,44,2)" fg:x="201" fg:w="2"/><text x="90.7905%" y="399.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_table_reference::_{{closure}} (2 samples, 0.90%)</title><rect x="90.5405%" y="373" width="0.9009%" height="15" fill="rgb(216,177,13)" fg:x="201" fg:w="2"/><text x="90.7905%" y="383.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="90.5405%" y="357" width="0.9009%" height="15" fill="rgb(216,106,43)" fg:x="201" fg:w="2"/><text x="90.7905%" y="367.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_single_table::_{{closure}} (2 samples, 0.90%)</title><rect x="90.5405%" y="341" width="0.9009%" height="15" fill="rgb(216,183,2)" fg:x="201" fg:w="2"/><text x="90.7905%" y="351.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="90.5405%" y="325" width="0.9009%" height="15" fill="rgb(249,75,3)" fg:x="201" fg:w="2"/><text x="90.7905%" y="335.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="90.5405%" y="309" width="0.9009%" height="15" fill="rgb(219,67,39)" fg:x="201" fg:w="2"/><text x="90.7905%" y="319.50"></text></g><g><title>databend-query`common_sql::planner::binder::table::_&lt;impl common_sql::planner::binder::binder::Binder&gt;::bind_base_table::_{{closure}} (2 samples, 0.90%)</title><rect x="90.5405%" y="293" width="0.9009%" height="15" fill="rgb(253,228,2)" fg:x="201" fg:w="2"/><text x="90.7905%" y="303.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="90.5405%" y="277" width="0.9009%" height="15" fill="rgb(235,138,27)" fg:x="201" fg:w="2"/><text x="90.7905%" y="287.50"></text></g><g><title>databend-query`&lt;common_storages_fuse::fuse_table::FuseTable as common_catalog::table::Table&gt;::column_statistics_provider::_{{closure}} (2 samples, 0.90%)</title><rect x="90.5405%" y="261" width="0.9009%" height="15" fill="rgb(236,97,51)" fg:x="201" fg:w="2"/><text x="90.7905%" y="271.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.90%)</title><rect x="90.5405%" y="245" width="0.9009%" height="15" fill="rgb(240,80,30)" fg:x="201" fg:w="2"/><text x="90.7905%" y="255.50"></text></g><g><title>databend-query`common_storages_fuse::fuse_table::FuseTable::read_table_snapshot::_{{closure}} (1 samples, 0.45%)</title><rect x="90.9910%" y="229" width="0.4505%" height="15" fill="rgb(230,178,19)" fg:x="202" fg:w="1"/><text x="91.2410%" y="239.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="90.9910%" y="213" width="0.4505%" height="15" fill="rgb(210,190,27)" fg:x="202" fg:w="1"/><text x="91.2410%" y="223.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="90.9910%" y="197" width="0.4505%" height="15" fill="rgb(222,107,31)" fg:x="202" fg:w="1"/><text x="91.2410%" y="207.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.4414%" y="549" width="0.4505%" height="15" fill="rgb(216,127,34)" fg:x="203" fg:w="1"/><text x="91.6914%" y="559.50"></text></g><g><title>databend-query`common_ast::parser::parser::parse_sql (2 samples, 0.90%)</title><rect x="91.4414%" y="565" width="0.9009%" height="15" fill="rgb(234,116,52)" fg:x="203" fg:w="2"/><text x="91.6914%" y="575.50"></text></g><g><title>databend-query`common_ast::parser::statement::statement (1 samples, 0.45%)</title><rect x="91.8919%" y="549" width="0.4505%" height="15" fill="rgb(222,124,15)" fg:x="204" fg:w="1"/><text x="92.1419%" y="559.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="533" width="0.4505%" height="15" fill="rgb(231,179,28)" fg:x="204" fg:w="1"/><text x="92.1419%" y="543.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.45%)</title><rect x="91.8919%" y="517" width="0.4505%" height="15" fill="rgb(226,93,45)" fg:x="204" fg:w="1"/><text x="92.1419%" y="527.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.45%)</title><rect x="91.8919%" y="501" width="0.4505%" height="15" fill="rgb(215,8,51)" fg:x="204" fg:w="1"/><text x="92.1419%" y="511.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="485" width="0.4505%" height="15" fill="rgb(223,106,5)" fg:x="204" fg:w="1"/><text x="92.1419%" y="495.50"></text></g><g><title>databend-query`common_ast::parser::query::query (1 samples, 0.45%)</title><rect x="91.8919%" y="469" width="0.4505%" height="15" fill="rgb(250,191,5)" fg:x="204" fg:w="1"/><text x="92.1419%" y="479.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="453" width="0.4505%" height="15" fill="rgb(242,132,44)" fg:x="204" fg:w="1"/><text x="92.1419%" y="463.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation (1 samples, 0.45%)</title><rect x="91.8919%" y="437" width="0.4505%" height="15" fill="rgb(251,152,29)" fg:x="204" fg:w="1"/><text x="92.1419%" y="447.50"></text></g><g><title>databend-query`common_ast::parser::query::set_operation_element (1 samples, 0.45%)</title><rect x="91.8919%" y="421" width="0.4505%" height="15" fill="rgb(218,179,5)" fg:x="204" fg:w="1"/><text x="92.1419%" y="431.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.45%)</title><rect x="91.8919%" y="405" width="0.4505%" height="15" fill="rgb(227,67,19)" fg:x="204" fg:w="1"/><text x="92.1419%" y="415.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="389" width="0.4505%" height="15" fill="rgb(233,119,31)" fg:x="204" fg:w="1"/><text x="92.1419%" y="399.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD,FnE,FnF,FnG,FnH,FnI,FnJ) as nom::sequence::Tuple&lt;Input,(A,B,C,D,E,F,G,H,I,J),Error&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="373" width="0.4505%" height="15" fill="rgb(241,120,22)" fg:x="204" fg:w="1"/><text x="92.1419%" y="383.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="357" width="0.4505%" height="15" fill="rgb(224,102,30)" fg:x="204" fg:w="1"/><text x="92.1419%" y="367.50"></text></g><g><title>databend-query`&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="341" width="0.4505%" height="15" fill="rgb(210,164,37)" fg:x="204" fg:w="1"/><text x="92.1419%" y="351.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="325" width="0.4505%" height="15" fill="rgb(226,191,16)" fg:x="204" fg:w="1"/><text x="92.1419%" y="335.50"></text></g><g><title>databend-query`common_ast::parser::query::table_reference (1 samples, 0.45%)</title><rect x="91.8919%" y="309" width="0.4505%" height="15" fill="rgb(214,40,45)" fg:x="204" fg:w="1"/><text x="92.1419%" y="319.50"></text></g><g><title>databend-query`common_ast::parser::query::table_reference_element (1 samples, 0.45%)</title><rect x="91.8919%" y="293" width="0.4505%" height="15" fill="rgb(244,29,26)" fg:x="204" fg:w="1"/><text x="92.1419%" y="303.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.45%)</title><rect x="91.8919%" y="277" width="0.4505%" height="15" fill="rgb(216,16,5)" fg:x="204" fg:w="1"/><text x="92.1419%" y="287.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="261" width="0.4505%" height="15" fill="rgb(249,76,35)" fg:x="204" fg:w="1"/><text x="92.1419%" y="271.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD,FnE) as nom::sequence::Tuple&lt;Input,(A,B,C,D,E),Error&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="245" width="0.4505%" height="15" fill="rgb(207,11,44)" fg:x="204" fg:w="1"/><text x="92.1419%" y="255.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="229" width="0.4505%" height="15" fill="rgb(228,190,49)" fg:x="204" fg:w="1"/><text x="92.1419%" y="239.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD,FnE,FnF,FnG,FnH,FnI,FnJ) as nom::sequence::Tuple&lt;Input,(A,B,C,D,E,F,G,H,I,J),Error&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="91.8919%" y="213" width="0.4505%" height="15" fill="rgb(214,173,12)" fg:x="204" fg:w="1"/><text x="92.1419%" y="223.50"></text></g><g><title>databend-query`&lt;common_sql::planner::optimizer::rule::rewrite::rule_eliminate_filter::RuleEliminateFilter as common_sql::planner::optimizer::rule::rule::Rule&gt;::apply (1 samples, 0.45%)</title><rect x="92.3423%" y="469" width="0.4505%" height="15" fill="rgb(218,26,35)" fg:x="205" fg:w="1"/><text x="92.5923%" y="479.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.45%)</title><rect x="92.3423%" y="453" width="0.4505%" height="15" fill="rgb(220,200,19)" fg:x="205" fg:w="1"/><text x="92.5923%" y="463.50"></text></g><g><title>databend-query`hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.45%)</title><rect x="92.3423%" y="437" width="0.4505%" height="15" fill="rgb(239,95,49)" fg:x="205" fg:w="1"/><text x="92.5923%" y="447.50"></text></g><g><title>databend-query`hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.45%)</title><rect x="92.3423%" y="421" width="0.4505%" height="15" fill="rgb(235,85,53)" fg:x="205" fg:w="1"/><text x="92.5923%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.45%)</title><rect x="92.3423%" y="405" width="0.4505%" height="15" fill="rgb(233,133,31)" fg:x="205" fg:w="1"/><text x="92.5923%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.45%)</title><rect x="92.3423%" y="389" width="0.4505%" height="15" fill="rgb(218,25,20)" fg:x="205" fg:w="1"/><text x="92.5923%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.45%)</title><rect x="92.3423%" y="373" width="0.4505%" height="15" fill="rgb(252,210,38)" fg:x="205" fg:w="1"/><text x="92.5923%" y="383.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase::do_query::_{{closure}} (32 samples, 14.41%)</title><rect x="78.8288%" y="661" width="14.4144%" height="15" fill="rgb(242,134,21)" fg:x="175" fg:w="32"/><text x="79.0788%" y="671.50">databend-query`databen..</text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 14.41%)</title><rect x="78.8288%" y="645" width="14.4144%" height="15" fill="rgb(213,28,48)" fg:x="175" fg:w="32"/><text x="79.0788%" y="655.50">databend-query`&lt;minitr..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 14.41%)</title><rect x="78.8288%" y="629" width="14.4144%" height="15" fill="rgb(250,196,2)" fg:x="175" fg:w="32"/><text x="79.0788%" y="639.50">databend-query`std::th..</text></g><g><title>databend-query`common_sql::planner::planner::Planner::plan_sql::_{{closure}} (32 samples, 14.41%)</title><rect x="78.8288%" y="613" width="14.4144%" height="15" fill="rgb(227,5,17)" fg:x="175" fg:w="32"/><text x="79.0788%" y="623.50">databend-query`common_..</text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 14.41%)</title><rect x="78.8288%" y="597" width="14.4144%" height="15" fill="rgb(221,226,24)" fg:x="175" fg:w="32"/><text x="79.0788%" y="607.50">databend-query`&lt;minitr..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (32 samples, 14.41%)</title><rect x="78.8288%" y="581" width="14.4144%" height="15" fill="rgb(211,5,48)" fg:x="175" fg:w="32"/><text x="79.0788%" y="591.50">databend-query`std::th..</text></g><g><title>databend-query`common_sql::planner::optimizer::optimizer::optimize (2 samples, 0.90%)</title><rect x="92.3423%" y="565" width="0.9009%" height="15" fill="rgb(219,150,6)" fg:x="205" fg:w="2"/><text x="92.5923%" y="575.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::optimizer::optimize_query (2 samples, 0.90%)</title><rect x="92.3423%" y="549" width="0.9009%" height="15" fill="rgb(251,46,16)" fg:x="205" fg:w="2"/><text x="92.5923%" y="559.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.90%)</title><rect x="92.3423%" y="533" width="0.9009%" height="15" fill="rgb(220,204,40)" fg:x="205" fg:w="2"/><text x="92.5923%" y="543.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.90%)</title><rect x="92.3423%" y="517" width="0.9009%" height="15" fill="rgb(211,85,2)" fg:x="205" fg:w="2"/><text x="92.5923%" y="527.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.90%)</title><rect x="92.3423%" y="501" width="0.9009%" height="15" fill="rgb(229,17,7)" fg:x="205" fg:w="2"/><text x="92.5923%" y="511.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::heuristic::heuristic::HeuristicOptimizer::optimize_expression (2 samples, 0.90%)</title><rect x="92.3423%" y="485" width="0.9009%" height="15" fill="rgb(239,72,28)" fg:x="205" fg:w="2"/><text x="92.5923%" y="495.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::rule::factory::RuleFactory::create_rule (1 samples, 0.45%)</title><rect x="92.7928%" y="469" width="0.4505%" height="15" fill="rgb(230,47,54)" fg:x="206" fg:w="1"/><text x="93.0428%" y="479.50"></text></g><g><title>databend-query`common_sql::planner::optimizer::rule::rewrite::rule_normalize_scalar::RuleNormalizeScalarFilter::new (1 samples, 0.45%)</title><rect x="92.7928%" y="453" width="0.4505%" height="15" fill="rgb(214,50,8)" fg:x="206" fg:w="1"/><text x="93.0428%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.45%)</title><rect x="92.7928%" y="437" width="0.4505%" height="15" fill="rgb(216,198,43)" fg:x="206" fg:w="1"/><text x="93.0428%" y="447.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::on_query::_{{closure}} (33 samples, 14.86%)</title><rect x="78.8288%" y="709" width="14.8649%" height="15" fill="rgb(234,20,35)" fg:x="175" fg:w="33"/><text x="79.0788%" y="719.50">databend-query`&lt;databen..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (33 samples, 14.86%)</title><rect x="78.8288%" y="693" width="14.8649%" height="15" fill="rgb(254,45,19)" fg:x="175" fg:w="33"/><text x="79.0788%" y="703.50">databend-query`std::thr..</text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (33 samples, 14.86%)</title><rect x="78.8288%" y="677" width="14.8649%" height="15" fill="rgb(219,14,44)" fg:x="175" fg:w="33"/><text x="79.0788%" y="687.50">databend-query`&lt;minitra..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="93.2432%" y="661" width="0.4505%" height="15" fill="rgb(217,220,26)" fg:x="207" fg:w="1"/><text x="93.4932%" y="671.50"></text></g><g><title>databend-query`databend_query::servers::mysql::writers::query_result_writer::DFQueryResultWriter&lt;W&gt;::ok::_{{closure}} (1 samples, 0.45%)</title><rect x="93.2432%" y="645" width="0.4505%" height="15" fill="rgb(213,158,28)" fg:x="207" fg:w="1"/><text x="93.4932%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.45%)</title><rect x="93.2432%" y="629" width="0.4505%" height="15" fill="rgb(252,51,52)" fg:x="207" fg:w="1"/><text x="93.4932%" y="639.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;alloc::vec::Vec&lt;common_meta_app::principal::role_info::RoleInfo&gt;,common_exception::exception::ErrorCode&gt;+core::marker::Send&gt;&gt;&gt; (1 samples, 0.45%)</title><rect x="93.2432%" y="613" width="0.4505%" height="15" fill="rgb(246,89,16)" fg:x="207" fg:w="1"/><text x="93.4932%" y="623.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;&gt; (1 samples, 0.45%)</title><rect x="93.2432%" y="597" width="0.4505%" height="15" fill="rgb(216,158,49)" fg:x="207" fg:w="1"/><text x="93.4932%" y="607.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::stream::progress_stream::ProgressStream&gt; (1 samples, 0.45%)</title><rect x="93.2432%" y="581" width="0.4505%" height="15" fill="rgb(236,107,19)" fg:x="207" fg:w="1"/><text x="93.4932%" y="591.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;alloc::vec::Vec&lt;common_meta_app::principal::role_info::RoleInfo&gt;,common_exception::exception::ErrorCode&gt;+core::marker::Send&gt;&gt;&gt; (1 samples, 0.45%)</title><rect x="93.2432%" y="565" width="0.4505%" height="15" fill="rgb(228,185,30)" fg:x="207" fg:w="1"/><text x="93.4932%" y="575.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::pipeline_pulling_executor::PipelinePullingExecutor&gt; (1 samples, 0.45%)</title><rect x="93.2432%" y="549" width="0.4505%" height="15" fill="rgb(246,134,8)" fg:x="207" fg:w="1"/><text x="93.4932%" y="559.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.45%)</title><rect x="93.2432%" y="533" width="0.4505%" height="15" fill="rgb(214,143,50)" fg:x="207" fg:w="1"/><text x="93.4932%" y="543.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::executor_graph::RunningGraph&gt; (1 samples, 0.45%)</title><rect x="93.2432%" y="517" width="0.4505%" height="15" fill="rgb(228,75,8)" fg:x="207" fg:w="1"/><text x="93.4932%" y="527.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.45%)</title><rect x="93.2432%" y="501" width="0.4505%" height="15" fill="rgb(207,175,4)" fg:x="207" fg:w="1"/><text x="93.4932%" y="511.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.45%)</title><rect x="93.2432%" y="485" width="0.4505%" height="15" fill="rgb(205,108,24)" fg:x="207" fg:w="1"/><text x="93.4932%" y="495.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.45%)</title><rect x="93.2432%" y="469" width="0.4505%" height="15" fill="rgb(244,120,49)" fg:x="207" fg:w="1"/><text x="93.4932%" y="479.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::hash_join::transform_hash_join_probe::TransformHashJoinProbe&gt; (1 samples, 0.45%)</title><rect x="93.2432%" y="453" width="0.4505%" height="15" fill="rgb(223,47,38)" fg:x="207" fg:w="1"/><text x="93.4932%" y="463.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.45%)</title><rect x="93.2432%" y="437" width="0.4505%" height="15" fill="rgb(229,179,11)" fg:x="207" fg:w="1"/><text x="93.4932%" y="447.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.45%)</title><rect x="93.2432%" y="421" width="0.4505%" height="15" fill="rgb(231,122,1)" fg:x="207" fg:w="1"/><text x="93.4932%" y="431.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::hash_join::hash_join_state::HashJoinState&gt; (1 samples, 0.45%)</title><rect x="93.2432%" y="405" width="0.4505%" height="15" fill="rgb(245,119,9)" fg:x="207" fg:w="1"/><text x="93.4932%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.45%)</title><rect x="93.2432%" y="389" width="0.4505%" height="15" fill="rgb(241,163,25)" fg:x="207" fg:w="1"/><text x="93.4932%" y="399.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Inner::run (78 samples, 35.14%)</title><rect x="59.0090%" y="1077" width="35.1351%" height="15" fill="rgb(217,214,3)" fg:x="131" fg:w="78"/><text x="59.2590%" y="1087.50">databend-query`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>databend-query`tokio::runtime::task::UnownedTask&lt;S&gt;::run (77 samples, 34.68%)</title><rect x="59.4595%" y="1061" width="34.6847%" height="15" fill="rgb(240,86,28)" fg:x="132" fg:w="77"/><text x="59.7095%" y="1071.50">databend-query`tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (77 samples, 34.68%)</title><rect x="59.4595%" y="1045" width="34.6847%" height="15" fill="rgb(215,47,9)" fg:x="132" fg:w="77"/><text x="59.7095%" y="1055.50">databend-query`tokio::runtime::task::harness::Harness&lt;T,..</text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (77 samples, 34.68%)</title><rect x="59.4595%" y="1029" width="34.6847%" height="15" fill="rgb(252,25,45)" fg:x="132" fg:w="77"/><text x="59.7095%" y="1039.50">databend-query`tokio::runtime::task::harness::Harness&lt;T,..</text></g><g><title>databend-query`tokio::runtime::task::harness::poll_future (77 samples, 34.68%)</title><rect x="59.4595%" y="1013" width="34.6847%" height="15" fill="rgb(251,164,9)" fg:x="132" fg:w="77"/><text x="59.7095%" y="1023.50">databend-query`tokio::runtime::task::harness::poll_future</text></g><g><title>databend-query`std::panicking::try (77 samples, 34.68%)</title><rect x="59.4595%" y="997" width="34.6847%" height="15" fill="rgb(233,194,0)" fg:x="132" fg:w="77"/><text x="59.7095%" y="1007.50">databend-query`std::panicking::try</text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77 samples, 34.68%)</title><rect x="59.4595%" y="981" width="34.6847%" height="15" fill="rgb(249,111,24)" fg:x="132" fg:w="77"/><text x="59.7095%" y="991.50">databend-query`&lt;core::panic::unwind_safe::AssertUnwindSa..</text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (77 samples, 34.68%)</title><rect x="59.4595%" y="965" width="34.6847%" height="15" fill="rgb(250,223,3)" fg:x="132" fg:w="77"/><text x="59.7095%" y="975.50">databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::po..</text></g><g><title>databend-query`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (77 samples, 34.68%)</title><rect x="59.4595%" y="949" width="34.6847%" height="15" fill="rgb(236,178,37)" fg:x="132" fg:w="77"/><text x="59.7095%" y="959.50">databend-query`tokio::loom::std::unsafe_cell::UnsafeCell..</text></g><g><title>databend-query`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (77 samples, 34.68%)</title><rect x="59.4595%" y="933" width="34.6847%" height="15" fill="rgb(241,158,50)" fg:x="132" fg:w="77"/><text x="59.7095%" y="943.50">databend-query`&lt;tokio::runtime::blocking::task::Blocking..</text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::run (77 samples, 34.68%)</title><rect x="59.4595%" y="917" width="34.6847%" height="15" fill="rgb(213,121,41)" fg:x="132" fg:w="77"/><text x="59.7095%" y="927.50">databend-query`tokio::runtime::scheduler::multi_thread::..</text></g><g><title>databend-query`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (77 samples, 34.68%)</title><rect x="59.4595%" y="901" width="34.6847%" height="15" fill="rgb(240,92,3)" fg:x="132" fg:w="77"/><text x="59.7095%" y="911.50">databend-query`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::..</text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::run (77 samples, 34.68%)</title><rect x="59.4595%" y="885" width="34.6847%" height="15" fill="rgb(205,123,3)" fg:x="132" fg:w="77"/><text x="59.7095%" y="895.50">databend-query`tokio::runtime::scheduler::multi_thread::..</text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (74 samples, 33.33%)</title><rect x="60.8108%" y="869" width="33.3333%" height="15" fill="rgb(205,97,47)" fg:x="135" fg:w="74"/><text x="61.0608%" y="879.50">databend-query`tokio::runtime::scheduler::multi_thread..</text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (74 samples, 33.33%)</title><rect x="60.8108%" y="853" width="33.3333%" height="15" fill="rgb(247,152,14)" fg:x="135" fg:w="74"/><text x="61.0608%" y="863.50">databend-query`tokio::runtime::task::harness::Harness&lt;..</text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (74 samples, 33.33%)</title><rect x="60.8108%" y="837" width="33.3333%" height="15" fill="rgb(248,195,53)" fg:x="135" fg:w="74"/><text x="61.0608%" y="847.50">databend-query`tokio::runtime::task::harness::Harness&lt;..</text></g><g><title>databend-query`tokio::runtime::task::harness::poll_future (74 samples, 33.33%)</title><rect x="60.8108%" y="821" width="33.3333%" height="15" fill="rgb(226,201,16)" fg:x="135" fg:w="74"/><text x="61.0608%" y="831.50">databend-query`tokio::runtime::task::harness::poll_fut..</text></g><g><title>databend-query`std::panicking::try (73 samples, 32.88%)</title><rect x="61.2613%" y="805" width="32.8829%" height="15" fill="rgb(205,98,0)" fg:x="136" fg:w="73"/><text x="61.5113%" y="815.50">databend-query`std::panicking::try</text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (73 samples, 32.88%)</title><rect x="61.2613%" y="789" width="32.8829%" height="15" fill="rgb(214,191,48)" fg:x="136" fg:w="73"/><text x="61.5113%" y="799.50">databend-query`&lt;core::panic::unwind_safe::AssertUnwin..</text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (73 samples, 32.88%)</title><rect x="61.2613%" y="773" width="32.8829%" height="15" fill="rgb(237,112,39)" fg:x="136" fg:w="73"/><text x="61.5113%" y="783.50">databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;:..</text></g><g><title>databend-query`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (73 samples, 32.88%)</title><rect x="61.2613%" y="757" width="32.8829%" height="15" fill="rgb(247,203,27)" fg:x="136" fg:w="73"/><text x="61.5113%" y="767.50">databend-query`tokio::loom::std::unsafe_cell::UnsafeC..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (64 samples, 28.83%)</title><rect x="65.3153%" y="741" width="28.8288%" height="15" fill="rgb(235,124,28)" fg:x="145" fg:w="64"/><text x="65.5653%" y="751.50">databend-query`std::thread::local::LocalKey&lt;T&gt;..</text></g><g><title>databend-query`opensrv_mysql::tls::plain_run_with_options::_{{closure}} (41 samples, 18.47%)</title><rect x="75.6757%" y="725" width="18.4685%" height="15" fill="rgb(208,207,46)" fg:x="168" fg:w="41"/><text x="75.9257%" y="735.50">databend-query`opensrv_mysql:..</text></g><g><title>databend-query`opensrv_mysql::packet_reader::PacketReader&lt;R&gt;::next_async::_{{closure}} (1 samples, 0.45%)</title><rect x="93.6937%" y="709" width="0.4505%" height="15" fill="rgb(234,176,4)" fg:x="208" fg:w="1"/><text x="93.9437%" y="719.50"></text></g><g><title>databend-query`opensrv_mysql::packet_reader::packet (1 samples, 0.45%)</title><rect x="93.6937%" y="693" width="0.4505%" height="15" fill="rgb(230,133,28)" fg:x="208" fg:w="1"/><text x="93.9437%" y="703.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.45%)</title><rect x="93.6937%" y="677" width="0.4505%" height="15" fill="rgb(211,137,40)" fg:x="208" fg:w="1"/><text x="93.9437%" y="687.50"></text></g><g><title>databend-query`tokio::runtime::handle::Handle::enter (1 samples, 0.45%)</title><rect x="94.1441%" y="1077" width="0.4505%" height="15" fill="rgb(254,35,13)" fg:x="209" fg:w="1"/><text x="94.3941%" y="1087.50"></text></g><g><title>databend-query`tokio::runtime::context::try_set_current (1 samples, 0.45%)</title><rect x="94.1441%" y="1061" width="0.4505%" height="15" fill="rgb(225,49,51)" fg:x="209" fg:w="1"/><text x="94.3941%" y="1071.50"></text></g><g><title>databend-query`std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.45%)</title><rect x="94.1441%" y="1045" width="0.4505%" height="15" fill="rgb(251,10,15)" fg:x="209" fg:w="1"/><text x="94.3941%" y="1055.50"></text></g><g><title>databend-query`tokio::loom::std::rand::seed (1 samples, 0.45%)</title><rect x="94.1441%" y="1029" width="0.4505%" height="15" fill="rgb(228,207,15)" fg:x="209" fg:w="1"/><text x="94.3941%" y="1039.50"></text></g><g><title>databend-query`std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.45%)</title><rect x="94.1441%" y="1013" width="0.4505%" height="15" fill="rgb(241,99,19)" fg:x="209" fg:w="1"/><text x="94.3941%" y="1023.50"></text></g><g><title>databend-query`std::sys::unix::rand::hashmap_random_keys (1 samples, 0.45%)</title><rect x="94.1441%" y="997" width="0.4505%" height="15" fill="rgb(207,104,49)" fg:x="209" fg:w="1"/><text x="94.3941%" y="1007.50"></text></g><g><title>databend-query`crossbeam_channel::channel::Receiver&lt;T&gt;::recv (4 samples, 1.80%)</title><rect x="94.5946%" y="1061" width="1.8018%" height="15" fill="rgb(234,99,18)" fg:x="210" fg:w="4"/><text x="94.8446%" y="1071.50">d..</text></g><g><title>databend-query`crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (4 samples, 1.80%)</title><rect x="94.5946%" y="1045" width="1.8018%" height="15" fill="rgb(213,191,49)" fg:x="210" fg:w="4"/><text x="94.8446%" y="1055.50">d..</text></g><g><title>databend-query`crossbeam_channel::context::Context::with::_{{closure}} (4 samples, 1.80%)</title><rect x="94.5946%" y="1029" width="1.8018%" height="15" fill="rgb(210,226,19)" fg:x="210" fg:w="4"/><text x="94.8446%" y="1039.50">d..</text></g><g><title>databend-query`std::thread::park (1 samples, 0.45%)</title><rect x="95.9459%" y="1013" width="0.4505%" height="15" fill="rgb(229,97,18)" fg:x="213" fg:w="1"/><text x="96.1959%" y="1023.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (1 samples, 0.45%)</title><rect x="95.9459%" y="997" width="0.4505%" height="15" fill="rgb(211,167,15)" fg:x="213" fg:w="1"/><text x="96.1959%" y="1007.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_wait_trap (1 samples, 0.45%)</title><rect x="95.9459%" y="981" width="0.4505%" height="15" fill="rgb(210,169,34)" fg:x="213" fg:w="1"/><text x="96.1959%" y="991.50"></text></g><g><title>databend-query`std::sys::unix::thread::Thread::new::thread_start (99 samples, 44.59%)</title><rect x="54.5045%" y="1141" width="44.5946%" height="15" fill="rgb(241,121,31)" fg:x="121" fg:w="99"/><text x="54.7545%" y="1151.50">databend-query`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>databend-query`core::ops::function::FnOnce::call_once{{vtable.shim}} (99 samples, 44.59%)</title><rect x="54.5045%" y="1125" width="44.5946%" height="15" fill="rgb(232,40,11)" fg:x="121" fg:w="99"/><text x="54.7545%" y="1135.50">databend-query`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>databend-query`std::panicking::try (99 samples, 44.59%)</title><rect x="54.5045%" y="1109" width="44.5946%" height="15" fill="rgb(205,86,26)" fg:x="121" fg:w="99"/><text x="54.7545%" y="1119.50">databend-query`std::panicking::try</text></g><g><title>databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace (99 samples, 44.59%)</title><rect x="54.5045%" y="1093" width="44.5946%" height="15" fill="rgb(231,126,28)" fg:x="121" fg:w="99"/><text x="54.7545%" y="1103.50">databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>databend-query`tracing_appender::worker::Worker&lt;T&gt;::work (10 samples, 4.50%)</title><rect x="94.5946%" y="1077" width="4.5045%" height="15" fill="rgb(219,221,18)" fg:x="210" fg:w="10"/><text x="94.8446%" y="1087.50">datab..</text></g><g><title>databend-query`std::io::Write::write_all (6 samples, 2.70%)</title><rect x="96.3964%" y="1061" width="2.7027%" height="15" fill="rgb(211,40,0)" fg:x="214" fg:w="6"/><text x="96.6464%" y="1071.50">da..</text></g><g><title>libsystem_kernel.dylib`write (6 samples, 2.70%)</title><rect x="96.3964%" y="1045" width="2.7027%" height="15" fill="rgb(239,85,43)" fg:x="214" fg:w="6"/><text x="96.6464%" y="1055.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (1 samples, 0.45%)</title><rect x="99.0991%" y="1125" width="0.4505%" height="15" fill="rgb(231,55,21)" fg:x="220" fg:w="1"/><text x="99.3491%" y="1135.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.45%)</title><rect x="99.0991%" y="1109" width="0.4505%" height="15" fill="rgb(225,184,43)" fg:x="220" fg:w="1"/><text x="99.3491%" y="1119.50"></text></g><g><title>all (222 samples, 100%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(251,158,41)" fg:x="0" fg:w="222"/><text x="0.2500%" y="1199.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (101 samples, 45.50%)</title><rect x="54.5045%" y="1173" width="45.4955%" height="15" fill="rgb(234,159,37)" fg:x="121" fg:w="101"/><text x="54.7545%" y="1183.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (101 samples, 45.50%)</title><rect x="54.5045%" y="1157" width="45.4955%" height="15" fill="rgb(216,204,22)" fg:x="121" fg:w="101"/><text x="54.7545%" y="1167.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (2 samples, 0.90%)</title><rect x="99.0991%" y="1141" width="0.9009%" height="15" fill="rgb(214,17,3)" fg:x="220" fg:w="2"/><text x="99.3491%" y="1151.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (1 samples, 0.45%)</title><rect x="99.5495%" y="1125" width="0.4505%" height="15" fill="rgb(212,111,17)" fg:x="221" fg:w="1"/><text x="99.7995%" y="1135.50"></text></g></svg></svg>