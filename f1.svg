<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1446" onload="init(evt)" viewBox="0 0 1200 1446" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1446" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1429.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1429.00"> </text><svg id="frames" x="10" width="1180" total_samples="5576"><g><title>databend-query`databend_common_base::runtime::runtime::Runtime::with_default_worker_threads (1 samples, 0.02%)</title><rect x="0.0000%" y="1269" width="0.0179%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1279.50"></text></g><g><title>databend-query`databend_common_base::runtime::runtime::Runtime::create (1 samples, 0.02%)</title><rect x="0.0000%" y="1253" width="0.0179%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1263.50"></text></g><g><title>databend-query`tokio::runtime::builder::Builder::build (1 samples, 0.02%)</title><rect x="0.0000%" y="1237" width="0.0179%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1247.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Launch::launch (1 samples, 0.02%)</title><rect x="0.0000%" y="1221" width="0.0179%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1231.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.02%)</title><rect x="0.0000%" y="1205" width="0.0179%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1215.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.02%)</title><rect x="0.0000%" y="1189" width="0.0179%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1199.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (1 samples, 0.02%)</title><rect x="0.0000%" y="1173" width="0.0179%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.02%)</title><rect x="0.0000%" y="1157" width="0.0179%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1167.50"></text></g><g><title>databend-query`std::thread::Builder::spawn_unchecked_ (1 samples, 0.02%)</title><rect x="0.0000%" y="1141" width="0.0179%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1151.50"></text></g><g><title>databend-query`std::sys::unix::thread::Thread::new (1 samples, 0.02%)</title><rect x="0.0000%" y="1125" width="0.0179%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1135.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (1 samples, 0.02%)</title><rect x="0.0000%" y="1109" width="0.0179%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1119.50"></text></g><g><title>databend-query`&lt;databend_common_config::inner::InnerConfig as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0179%" y="1157" width="0.0179%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2679%" y="1167.50"></text></g><g><title>databend-query`clap_builder::derive::Parser::parse (1 samples, 0.02%)</title><rect x="0.0359%" y="1141" width="0.0179%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.2859%" y="1151.50"></text></g><g><title>databend-query`clap_builder::builder::command::Command::get_matches_from (1 samples, 0.02%)</title><rect x="0.0359%" y="1125" width="0.0179%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.2859%" y="1135.50"></text></g><g><title>databend-query`clap_builder::builder::command::Command::try_get_matches_from_mut (1 samples, 0.02%)</title><rect x="0.0359%" y="1109" width="0.0179%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.2859%" y="1119.50"></text></g><g><title>databend-query`clap_builder::builder::command::Command::_do_parse (1 samples, 0.02%)</title><rect x="0.0359%" y="1093" width="0.0179%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.2859%" y="1103.50"></text></g><g><title>databend-query`clap_builder::parser::parser::Parser::get_matches_with (1 samples, 0.02%)</title><rect x="0.0359%" y="1077" width="0.0179%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.2859%" y="1087.50"></text></g><g><title>databend-query`clap_builder::parser::parser::Parser::add_defaults (1 samples, 0.02%)</title><rect x="0.0359%" y="1061" width="0.0179%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.2859%" y="1071.50"></text></g><g><title>databend-query`clap_builder::parser::parser::Parser::react (1 samples, 0.02%)</title><rect x="0.0359%" y="1045" width="0.0179%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.2859%" y="1055.50"></text></g><g><title>databend-query`clap_builder::parser::parser::Parser::push_arg_values (1 samples, 0.02%)</title><rect x="0.0359%" y="1029" width="0.0179%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.2859%" y="1039.50"></text></g><g><title>databend-query`clap_builder::util::any_value::AnyValue::new (1 samples, 0.02%)</title><rect x="0.0359%" y="1013" width="0.0179%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.2859%" y="1023.50"></text></g><g><title>databend-query`databend_common_config::config::Config::load (2 samples, 0.04%)</title><rect x="0.0359%" y="1157" width="0.0359%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="2"/><text x="0.2859%" y="1167.50"></text></g><g><title>databend-query`serfig::builder::Builder&lt;V&gt;::build (1 samples, 0.02%)</title><rect x="0.0538%" y="1141" width="0.0179%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.3038%" y="1151.50"></text></g><g><title>databend-query`serfig::builder::Builder&lt;V&gt;::build_with (1 samples, 0.02%)</title><rect x="0.0538%" y="1125" width="0.0179%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.3038%" y="1135.50"></text></g><g><title>databend-query`&lt;serde_bridge::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect x="0.0538%" y="1109" width="0.0179%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="0.3038%" y="1119.50"></text></g><g><title>databend-query`&lt;serde_bridge::de::SeqAccessor as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.02%)</title><rect x="0.0538%" y="1093" width="0.0179%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="0.3038%" y="1103.50"></text></g><g><title>databend-query`&lt;serde_bridge::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect x="0.0538%" y="1077" width="0.0179%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="0.3038%" y="1087.50"></text></g><g><title>databend-query`&lt;databend_common_config::config::_::&lt;impl serde::de::Deserialize for databend_common_config::config::QueryConfig&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect x="0.0538%" y="1061" width="0.0179%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="0.3038%" y="1071.50"></text></g><g><title>databend-query`&lt;serde_bridge::de::Deserializer as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.02%)</title><rect x="0.0538%" y="1045" width="0.0179%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="0.3038%" y="1055.50"></text></g><g><title>databend-query`&lt;databend_query::api::rpc_service::RpcService as databend_query::servers::server::Server&gt;::start::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0717%" y="1141" width="0.0179%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="1"/><text x="0.3217%" y="1151.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="0.0717%" y="1125" width="0.0179%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="1"/><text x="0.3217%" y="1135.50"></text></g><g><title>databend-query`databend_query::entry::start_services::_{{closure}} (2 samples, 0.04%)</title><rect x="0.0717%" y="1157" width="0.0359%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="2"/><text x="0.3217%" y="1167.50"></text></g><g><title>databend-query`&lt;databend_query::servers::http::http_services::HttpHandler as databend_query::servers::server::Server&gt;::start::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0897%" y="1141" width="0.0179%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1151.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="0.0897%" y="1125" width="0.0179%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1135.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="0.0897%" y="1109" width="0.0179%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1119.50"></text></g><g><title>databend-query`databend_query::servers::http::http_services::HttpHandler::build_router::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0897%" y="1093" width="0.0179%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1103.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="0.0897%" y="1077" width="0.0179%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1087.50"></text></g><g><title>databend-query`poem::route::router::Route::try_at (1 samples, 0.02%)</title><rect x="0.0897%" y="1061" width="0.0179%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1071.50"></text></g><g><title>databend-query`poem::route::router::normalize_path (1 samples, 0.02%)</title><rect x="0.0897%" y="1045" width="0.0179%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1055.50"></text></g><g><title>databend-query`regex::regex::string::Regex::new (1 samples, 0.02%)</title><rect x="0.0897%" y="1029" width="0.0179%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1039.50"></text></g><g><title>databend-query`regex::builders::Builder::build_one_string (1 samples, 0.02%)</title><rect x="0.0897%" y="1013" width="0.0179%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1023.50"></text></g><g><title>databend-query`regex_automata::meta::regex::Builder::build_many (1 samples, 0.02%)</title><rect x="0.0897%" y="997" width="0.0179%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.3397%" y="1007.50"></text></g><g><title>databend-query`regex_automata::meta::regex::Builder::build_many_from_hir (1 samples, 0.02%)</title><rect x="0.0897%" y="981" width="0.0179%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.3397%" y="991.50"></text></g><g><title>databend-query`regex_automata::meta::strategy::new (1 samples, 0.02%)</title><rect x="0.0897%" y="965" width="0.0179%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.3397%" y="975.50"></text></g><g><title>databend-query`regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.02%)</title><rect x="0.0897%" y="949" width="0.0179%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.3397%" y="959.50"></text></g><g><title>databend-query`regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.02%)</title><rect x="0.0897%" y="933" width="0.0179%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.3397%" y="943.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke_2 (1 samples, 0.02%)</title><rect x="0.1076%" y="853" width="0.0179%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="1"/><text x="0.3576%" y="863.50"></text></g><g><title>Security`SecXPCDictionaryCopyChainOptional (1 samples, 0.02%)</title><rect x="0.1076%" y="837" width="0.0179%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="1"/><text x="0.3576%" y="847.50"></text></g><g><title>Security`SecCertificateCreateWithXPCArrayAtIndex (1 samples, 0.02%)</title><rect x="0.1076%" y="821" width="0.0179%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="1"/><text x="0.3576%" y="831.50"></text></g><g><title>Security`SecCertificateCreateWithBytes (1 samples, 0.02%)</title><rect x="0.1076%" y="805" width="0.0179%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="0.3576%" y="815.50"></text></g><g><title>CoreFoundation`CFSetCreateMutable (1 samples, 0.02%)</title><rect x="0.1076%" y="789" width="0.0179%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="0.3576%" y="799.50"></text></g><g><title>Security`securityd_message_with_reply_sync (2 samples, 0.04%)</title><rect x="0.1255%" y="853" width="0.0359%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="2"/><text x="0.3755%" y="863.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (2 samples, 0.04%)</title><rect x="0.1255%" y="837" width="0.0359%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="2"/><text x="0.3755%" y="847.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_send_with_result_and_wait_for_reply (2 samples, 0.04%)</title><rect x="0.1255%" y="821" width="0.0359%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="2"/><text x="0.3755%" y="831.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_and_wait_for_reply (2 samples, 0.04%)</title><rect x="0.1255%" y="805" width="0.0359%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="2"/><text x="0.3755%" y="815.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_msg (2 samples, 0.04%)</title><rect x="0.1255%" y="789" width="0.0359%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="2"/><text x="0.3755%" y="799.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_drain (2 samples, 0.04%)</title><rect x="0.1255%" y="773" width="0.0359%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="2"/><text x="0.3755%" y="783.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_send (2 samples, 0.04%)</title><rect x="0.1255%" y="757" width="0.0359%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="2"/><text x="0.3755%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (2 samples, 0.04%)</title><rect x="0.1255%" y="741" width="0.0359%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="2"/><text x="0.3755%" y="751.50"></text></g><g><title>Security`SecTrustEvaluateInternal (4 samples, 0.07%)</title><rect x="0.1076%" y="1013" width="0.0717%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="4"/><text x="0.3576%" y="1023.50"></text></g><g><title>Security`SecTrustEvaluateIfNecessary (4 samples, 0.07%)</title><rect x="0.1076%" y="997" width="0.0717%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="4"/><text x="0.3576%" y="1007.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (4 samples, 0.07%)</title><rect x="0.1076%" y="981" width="0.0717%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="4"/><text x="0.3576%" y="991.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (4 samples, 0.07%)</title><rect x="0.1076%" y="965" width="0.0717%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="4"/><text x="0.3576%" y="975.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke (4 samples, 0.07%)</title><rect x="0.1076%" y="949" width="0.0717%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="4"/><text x="0.3576%" y="959.50"></text></g><g><title>libsystem_trace.dylib`_os_activity_initiate_impl (4 samples, 0.07%)</title><rect x="0.1076%" y="933" width="0.0717%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="4"/><text x="0.3576%" y="943.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_2 (4 samples, 0.07%)</title><rect x="0.1076%" y="917" width="0.0717%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="4"/><text x="0.3576%" y="927.50"></text></g><g><title>Security`SecOSStatusWith (4 samples, 0.07%)</title><rect x="0.1076%" y="901" width="0.0717%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="4"/><text x="0.3576%" y="911.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_3 (4 samples, 0.07%)</title><rect x="0.1076%" y="885" width="0.0717%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="4"/><text x="0.3576%" y="895.50"></text></g><g><title>Security`securityd_send_sync_and_do (4 samples, 0.07%)</title><rect x="0.1076%" y="869" width="0.0717%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="4"/><text x="0.3576%" y="879.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (1 samples, 0.02%)</title><rect x="0.1614%" y="853" width="0.0179%" height="15" fill="rgb(230,62,27)" fg:x="9" fg:w="1"/><text x="0.4114%" y="863.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_dispose (1 samples, 0.02%)</title><rect x="0.1614%" y="837" width="0.0179%" height="15" fill="rgb(216,154,8)" fg:x="9" fg:w="1"/><text x="0.4114%" y="847.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_payload dealloc] (1 samples, 0.02%)</title><rect x="0.1614%" y="821" width="0.0179%" height="15" fill="rgb(244,35,45)" fg:x="9" fg:w="1"/><text x="0.4114%" y="831.50"></text></g><g><title>libdispatch.dylib`_dispatch_dispose (1 samples, 0.02%)</title><rect x="0.1614%" y="805" width="0.0179%" height="15" fill="rgb(251,115,12)" fg:x="9" fg:w="1"/><text x="0.4114%" y="815.50"></text></g><g><title>libobjc.A.dylib`objc_destructInstance (1 samples, 0.02%)</title><rect x="0.1614%" y="789" width="0.0179%" height="15" fill="rgb(240,54,50)" fg:x="9" fg:w="1"/><text x="0.4114%" y="799.50"></text></g><g><title>libobjc.A.dylib`_object_remove_associations (1 samples, 0.02%)</title><rect x="0.1614%" y="773" width="0.0179%" height="15" fill="rgb(233,84,52)" fg:x="9" fg:w="1"/><text x="0.4114%" y="783.50"></text></g><g><title>Security`Security::MDSAttrParser::parseAttrs (1 samples, 0.02%)</title><rect x="0.1793%" y="853" width="0.0179%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="1"/><text x="0.4293%" y="863.50"></text></g><g><title>CoreFoundation`CFBundleCopyResourceURLsOfType (1 samples, 0.02%)</title><rect x="0.1793%" y="837" width="0.0179%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="1"/><text x="0.4293%" y="847.50"></text></g><g><title>CoreFoundation`_CFBundleCopyFindResources (1 samples, 0.02%)</title><rect x="0.1793%" y="821" width="0.0179%" height="15" fill="rgb(209,38,44)" fg:x="10" fg:w="1"/><text x="0.4293%" y="831.50"></text></g><g><title>CoreFoundation`_copyResourceURLsFromBundle (1 samples, 0.02%)</title><rect x="0.1793%" y="805" width="0.0179%" height="15" fill="rgb(236,212,23)" fg:x="10" fg:w="1"/><text x="0.4293%" y="815.50"></text></g><g><title>CoreFoundation`_copyQueryTable (1 samples, 0.02%)</title><rect x="0.1793%" y="789" width="0.0179%" height="15" fill="rgb(242,79,21)" fg:x="10" fg:w="1"/><text x="0.4293%" y="799.50"></text></g><g><title>CoreFoundation`_CFBundleCopyLanguageSearchListInBundle (1 samples, 0.02%)</title><rect x="0.1793%" y="773" width="0.0179%" height="15" fill="rgb(211,96,35)" fg:x="10" fg:w="1"/><text x="0.4293%" y="783.50"></text></g><g><title>CoreFoundation`_CFBundleCopyUserLanguages (1 samples, 0.02%)</title><rect x="0.1793%" y="757" width="0.0179%" height="15" fill="rgb(253,215,40)" fg:x="10" fg:w="1"/><text x="0.4293%" y="767.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.02%)</title><rect x="0.1793%" y="741" width="0.0179%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="1"/><text x="0.4293%" y="751.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.02%)</title><rect x="0.1793%" y="725" width="0.0179%" height="15" fill="rgb(208,190,38)" fg:x="10" fg:w="1"/><text x="0.4293%" y="735.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.02%)</title><rect x="0.1793%" y="709" width="0.0179%" height="15" fill="rgb(235,213,38)" fg:x="10" fg:w="1"/><text x="0.4293%" y="719.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.02%)</title><rect x="0.1793%" y="693" width="0.0179%" height="15" fill="rgb(237,122,38)" fg:x="10" fg:w="1"/><text x="0.4293%" y="703.50"></text></g><g><title>CoreFoundation`__76-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:]_block_invoke (1 samples, 0.02%)</title><rect x="0.1793%" y="677" width="0.0179%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="1"/><text x="0.4293%" y="687.50"></text></g><g><title>CoreFoundation`-[CFPrefsSource copyValueForKey:] (1 samples, 0.02%)</title><rect x="0.1793%" y="661" width="0.0179%" height="15" fill="rgb(240,68,47)" fg:x="10" fg:w="1"/><text x="0.4293%" y="671.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_copyValueForKey:] (1 samples, 0.02%)</title><rect x="0.1793%" y="645" width="0.0179%" height="15" fill="rgb(210,16,53)" fg:x="10" fg:w="1"/><text x="0.4293%" y="655.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_getDictionary:] (1 samples, 0.02%)</title><rect x="0.1793%" y="629" width="0.0179%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="1"/><text x="0.4293%" y="639.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_generationCountFromListOfSources:count:] (1 samples, 0.02%)</title><rect x="0.1793%" y="613" width="0.0179%" height="15" fill="rgb(224,169,11)" fg:x="10" fg:w="1"/><text x="0.4293%" y="623.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (1 samples, 0.02%)</title><rect x="0.1793%" y="597" width="0.0179%" height="15" fill="rgb(250,166,2)" fg:x="10" fg:w="1"/><text x="0.4293%" y="607.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_dispose (1 samples, 0.02%)</title><rect x="0.1793%" y="581" width="0.0179%" height="15" fill="rgb(242,216,29)" fg:x="10" fg:w="1"/><text x="0.4293%" y="591.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_node_free (1 samples, 0.02%)</title><rect x="0.1793%" y="565" width="0.0179%" height="15" fill="rgb(230,116,27)" fg:x="10" fg:w="1"/><text x="0.4293%" y="575.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (1 samples, 0.02%)</title><rect x="0.1793%" y="549" width="0.0179%" height="15" fill="rgb(228,99,48)" fg:x="10" fg:w="1"/><text x="0.4293%" y="559.50"></text></g><g><title>libxpc.dylib`_xpc_array_dispose (1 samples, 0.02%)</title><rect x="0.1793%" y="533" width="0.0179%" height="15" fill="rgb(253,11,6)" fg:x="10" fg:w="1"/><text x="0.4293%" y="543.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (1 samples, 0.02%)</title><rect x="0.1793%" y="517" width="0.0179%" height="15" fill="rgb(247,143,39)" fg:x="10" fg:w="1"/><text x="0.4293%" y="527.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_dispose (1 samples, 0.02%)</title><rect x="0.1793%" y="501" width="0.0179%" height="15" fill="rgb(236,97,10)" fg:x="10" fg:w="1"/><text x="0.4293%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="0.1793%" y="485" width="0.0179%" height="15" fill="rgb(233,208,19)" fg:x="10" fg:w="1"/><text x="0.4293%" y="495.50"></text></g><g><title>Security`Security::KeychainCore::StorageManager::getSearchList(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (2 samples, 0.04%)</title><rect x="0.1793%" y="1013" width="0.0359%" height="15" fill="rgb(216,164,2)" fg:x="10" fg:w="2"/><text x="0.4293%" y="1023.50"></text></g><g><title>Security`Security::KeychainCore::DynamicDLDBList::searchList (2 samples, 0.04%)</title><rect x="0.1793%" y="997" width="0.0359%" height="15" fill="rgb(220,129,5)" fg:x="10" fg:w="2"/><text x="0.4293%" y="1007.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery (2 samples, 0.04%)</title><rect x="0.1793%" y="981" width="0.0359%" height="15" fill="rgb(242,17,10)" fg:x="10" fg:w="2"/><text x="0.4293%" y="991.50"></text></g><g><title>Security`Security::MDSClient::Directory::dlGetFirst (2 samples, 0.04%)</title><rect x="0.1793%" y="965" width="0.0359%" height="15" fill="rgb(242,107,0)" fg:x="10" fg:w="2"/><text x="0.4293%" y="975.50"></text></g><g><title>Security`Security::MDSClient::Directory::cdsa (2 samples, 0.04%)</title><rect x="0.1793%" y="949" width="0.0359%" height="15" fill="rgb(251,28,31)" fg:x="10" fg:w="2"/><text x="0.4293%" y="959.50"></text></g><g><title>Security`mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (2 samples, 0.04%)</title><rect x="0.1793%" y="933" width="0.0359%" height="15" fill="rgb(233,223,10)" fg:x="10" fg:w="2"/><text x="0.4293%" y="943.50"></text></g><g><title>Security`Security::MDSSession::DbOpen (2 samples, 0.04%)</title><rect x="0.1793%" y="917" width="0.0359%" height="15" fill="rgb(215,21,27)" fg:x="10" fg:w="2"/><text x="0.4293%" y="927.50"></text></g><g><title>Security`Security::MDSSession::updateDataBases (2 samples, 0.04%)</title><rect x="0.1793%" y="901" width="0.0359%" height="15" fill="rgb(232,23,21)" fg:x="10" fg:w="2"/><text x="0.4293%" y="911.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundleDir (2 samples, 0.04%)</title><rect x="0.1793%" y="885" width="0.0359%" height="15" fill="rgb(244,5,23)" fg:x="10" fg:w="2"/><text x="0.4293%" y="895.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundle (2 samples, 0.04%)</title><rect x="0.1793%" y="869" width="0.0359%" height="15" fill="rgb(226,81,46)" fg:x="10" fg:w="2"/><text x="0.4293%" y="879.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::directDbHand (1 samples, 0.02%)</title><rect x="0.1973%" y="853" width="0.0179%" height="15" fill="rgb(247,70,30)" fg:x="11" fg:w="1"/><text x="0.4473%" y="863.50"></text></g><g><title>Security`Security::MDSSession::dbOpen (1 samples, 0.02%)</title><rect x="0.1973%" y="837" width="0.0179%" height="15" fill="rgb(212,68,19)" fg:x="11" fg:w="1"/><text x="0.4473%" y="847.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.02%)</title><rect x="0.1973%" y="821" width="0.0179%" height="15" fill="rgb(240,187,13)" fg:x="11" fg:w="1"/><text x="0.4473%" y="831.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.02%)</title><rect x="0.1973%" y="805" width="0.0179%" height="15" fill="rgb(223,113,26)" fg:x="11" fg:w="1"/><text x="0.4473%" y="815.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.02%)</title><rect x="0.1973%" y="789" width="0.0179%" height="15" fill="rgb(206,192,2)" fg:x="11" fg:w="1"/><text x="0.4473%" y="799.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.02%)</title><rect x="0.1973%" y="773" width="0.0179%" height="15" fill="rgb(241,108,4)" fg:x="11" fg:w="1"/><text x="0.4473%" y="783.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.02%)</title><rect x="0.1973%" y="757" width="0.0179%" height="15" fill="rgb(247,173,49)" fg:x="11" fg:w="1"/><text x="0.4473%" y="767.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.02%)</title><rect x="0.1973%" y="741" width="0.0179%" height="15" fill="rgb(224,114,35)" fg:x="11" fg:w="1"/><text x="0.4473%" y="751.50"></text></g><g><title>Security`Security::MetaRecord::attributeIndex (1 samples, 0.02%)</title><rect x="0.1973%" y="725" width="0.0179%" height="15" fill="rgb(245,159,27)" fg:x="11" fg:w="1"/><text x="0.4473%" y="735.50"></text></g><g><title>Security`DYLD-STUB$$memcmp (1 samples, 0.02%)</title><rect x="0.1973%" y="709" width="0.0179%" height="15" fill="rgb(245,172,44)" fg:x="11" fg:w="1"/><text x="0.4473%" y="719.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::initFromData (1 samples, 0.02%)</title><rect x="0.2152%" y="997" width="0.0179%" height="15" fill="rgb(236,23,11)" fg:x="12" fg:w="1"/><text x="0.4652%" y="1007.50"></text></g><g><title>CoreFoundation`CFPropertyListCreateFromXMLData (1 samples, 0.02%)</title><rect x="0.2152%" y="981" width="0.0179%" height="15" fill="rgb(205,117,38)" fg:x="12" fg:w="1"/><text x="0.4652%" y="991.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateWithData (1 samples, 0.02%)</title><rect x="0.2152%" y="965" width="0.0179%" height="15" fill="rgb(237,72,25)" fg:x="12" fg:w="1"/><text x="0.4652%" y="975.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateFromUTF8Data (1 samples, 0.02%)</title><rect x="0.2152%" y="949" width="0.0179%" height="15" fill="rgb(244,70,9)" fg:x="12" fg:w="1"/><text x="0.4652%" y="959.50"></text></g><g><title>CoreFoundation`parseXMLElement (1 samples, 0.02%)</title><rect x="0.2152%" y="933" width="0.0179%" height="15" fill="rgb(217,125,39)" fg:x="12" fg:w="1"/><text x="0.4652%" y="943.50"></text></g><g><title>CoreFoundation`parseXMLElement (1 samples, 0.02%)</title><rect x="0.2152%" y="917" width="0.0179%" height="15" fill="rgb(235,36,10)" fg:x="12" fg:w="1"/><text x="0.4652%" y="927.50"></text></g><g><title>CoreFoundation`parseXMLElement (1 samples, 0.02%)</title><rect x="0.2152%" y="901" width="0.0179%" height="15" fill="rgb(251,123,47)" fg:x="12" fg:w="1"/><text x="0.4652%" y="911.50"></text></g><g><title>CoreFoundation`parseXMLElement (1 samples, 0.02%)</title><rect x="0.2152%" y="885" width="0.0179%" height="15" fill="rgb(221,13,13)" fg:x="12" fg:w="1"/><text x="0.4652%" y="895.50"></text></g><g><title>CoreFoundation`parseXMLElement (1 samples, 0.02%)</title><rect x="0.2152%" y="869" width="0.0179%" height="15" fill="rgb(238,131,9)" fg:x="12" fg:w="1"/><text x="0.4652%" y="879.50"></text></g><g><title>Foundation`DYLD-STUB$$objc_msgSend (1 samples, 0.02%)</title><rect x="0.2152%" y="853" width="0.0179%" height="15" fill="rgb(211,50,8)" fg:x="12" fg:w="1"/><text x="0.4652%" y="863.50"></text></g><g><title>Security`xpcTrustSettingsRead(Security::Allocator&amp;, SecTrustSettingsDomain, cssm_data&amp;) (1 samples, 0.02%)</title><rect x="0.2331%" y="997" width="0.0179%" height="15" fill="rgb(245,182,24)" fg:x="13" fg:w="1"/><text x="0.4831%" y="1007.50"></text></g><g><title>Security`SecTrustSettingsXPCRead (1 samples, 0.02%)</title><rect x="0.2331%" y="981" width="0.0179%" height="15" fill="rgb(242,14,37)" fg:x="13" fg:w="1"/><text x="0.4831%" y="991.50"></text></g><g><title>Security`SecOSStatusWith (1 samples, 0.02%)</title><rect x="0.2331%" y="965" width="0.0179%" height="15" fill="rgb(246,228,12)" fg:x="13" fg:w="1"/><text x="0.4831%" y="975.50"></text></g><g><title>Security`__SecTrustSettingsXPCRead_block_invoke (1 samples, 0.02%)</title><rect x="0.2331%" y="949" width="0.0179%" height="15" fill="rgb(213,55,15)" fg:x="13" fg:w="1"/><text x="0.4831%" y="959.50"></text></g><g><title>Security`securityd_send_sync_and_do (1 samples, 0.02%)</title><rect x="0.2331%" y="933" width="0.0179%" height="15" fill="rgb(209,9,3)" fg:x="13" fg:w="1"/><text x="0.4831%" y="943.50"></text></g><g><title>Security`securityd_message_with_reply_sync (1 samples, 0.02%)</title><rect x="0.2331%" y="917" width="0.0179%" height="15" fill="rgb(230,59,30)" fg:x="13" fg:w="1"/><text x="0.4831%" y="927.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (1 samples, 0.02%)</title><rect x="0.2331%" y="901" width="0.0179%" height="15" fill="rgb(209,121,21)" fg:x="13" fg:w="1"/><text x="0.4831%" y="911.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_send_with_result_and_wait_for_reply (1 samples, 0.02%)</title><rect x="0.2331%" y="885" width="0.0179%" height="15" fill="rgb(220,109,13)" fg:x="13" fg:w="1"/><text x="0.4831%" y="895.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_and_wait_for_reply (1 samples, 0.02%)</title><rect x="0.2331%" y="869" width="0.0179%" height="15" fill="rgb(232,18,1)" fg:x="13" fg:w="1"/><text x="0.4831%" y="879.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_msg (1 samples, 0.02%)</title><rect x="0.2331%" y="853" width="0.0179%" height="15" fill="rgb(215,41,42)" fg:x="13" fg:w="1"/><text x="0.4831%" y="863.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_drain (1 samples, 0.02%)</title><rect x="0.2331%" y="837" width="0.0179%" height="15" fill="rgb(224,123,36)" fg:x="13" fg:w="1"/><text x="0.4831%" y="847.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_send (1 samples, 0.02%)</title><rect x="0.2331%" y="821" width="0.0179%" height="15" fill="rgb(240,125,3)" fg:x="13" fg:w="1"/><text x="0.4831%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (1 samples, 0.02%)</title><rect x="0.2331%" y="805" width="0.0179%" height="15" fill="rgb(205,98,50)" fg:x="13" fg:w="1"/><text x="0.4831%" y="815.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::CreateTrustSettings (3 samples, 0.05%)</title><rect x="0.2152%" y="1013" width="0.0538%" height="15" fill="rgb(205,185,37)" fg:x="12" fg:w="3"/><text x="0.4652%" y="1023.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="0.2511%" y="997" width="0.0179%" height="15" fill="rgb(238,207,15)" fg:x="14" fg:w="1"/><text x="0.5011%" y="1007.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.2511%" y="981" width="0.0179%" height="15" fill="rgb(213,199,42)" fg:x="14" fg:w="1"/><text x="0.5011%" y="991.50"></text></g><g><title>Security`invocation function for block in tsUseXPCEnabled() (1 samples, 0.02%)</title><rect x="0.2511%" y="965" width="0.0179%" height="15" fill="rgb(235,201,11)" fg:x="14" fg:w="1"/><text x="0.5011%" y="975.50"></text></g><g><title>Security`secLogObjForScope (1 samples, 0.02%)</title><rect x="0.2511%" y="949" width="0.0179%" height="15" fill="rgb(207,46,11)" fg:x="14" fg:w="1"/><text x="0.5011%" y="959.50"></text></g><g><title>Security`secLogObjForCFScope (1 samples, 0.02%)</title><rect x="0.2511%" y="933" width="0.0179%" height="15" fill="rgb(241,35,35)" fg:x="14" fg:w="1"/><text x="0.5011%" y="943.50"></text></g><g><title>Security`__secLogObjForCFScope_block_invoke (1 samples, 0.02%)</title><rect x="0.2511%" y="917" width="0.0179%" height="15" fill="rgb(243,32,47)" fg:x="14" fg:w="1"/><text x="0.5011%" y="927.50"></text></g><g><title>libsystem_trace.dylib`os_log_create (1 samples, 0.02%)</title><rect x="0.2511%" y="901" width="0.0179%" height="15" fill="rgb(247,202,23)" fg:x="14" fg:w="1"/><text x="0.5011%" y="911.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="0.2511%" y="885" width="0.0179%" height="15" fill="rgb(219,102,11)" fg:x="14" fg:w="1"/><text x="0.5011%" y="895.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.2511%" y="869" width="0.0179%" height="15" fill="rgb(243,110,44)" fg:x="14" fg:w="1"/><text x="0.5011%" y="879.50"></text></g><g><title>libsystem_trace.dylib`_os_trace_init_slow (1 samples, 0.02%)</title><rect x="0.2511%" y="853" width="0.0179%" height="15" fill="rgb(222,74,54)" fg:x="14" fg:w="1"/><text x="0.5011%" y="863.50"></text></g><g><title>libxpc.dylib`xpc_bundle_create_main (1 samples, 0.02%)</title><rect x="0.2511%" y="837" width="0.0179%" height="15" fill="rgb(216,99,12)" fg:x="14" fg:w="1"/><text x="0.5011%" y="847.50"></text></g><g><title>libxpc.dylib`xpc_bundle_create_from_origin (1 samples, 0.02%)</title><rect x="0.2511%" y="821" width="0.0179%" height="15" fill="rgb(226,22,26)" fg:x="14" fg:w="1"/><text x="0.5011%" y="831.50"></text></g><g><title>libdispatch.dylib`_os_object_alloc_realized (1 samples, 0.02%)</title><rect x="0.2511%" y="805" width="0.0179%" height="15" fill="rgb(217,163,10)" fg:x="14" fg:w="1"/><text x="0.5011%" y="815.50"></text></g><g><title>libobjc.A.dylib`class_createInstance (1 samples, 0.02%)</title><rect x="0.2511%" y="789" width="0.0179%" height="15" fill="rgb(213,25,53)" fg:x="14" fg:w="1"/><text x="0.5011%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.02%)</title><rect x="0.2511%" y="773" width="0.0179%" height="15" fill="rgb(252,105,26)" fg:x="14" fg:w="1"/><text x="0.5011%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.2511%" y="757" width="0.0179%" height="15" fill="rgb(220,39,43)" fg:x="14" fg:w="1"/><text x="0.5011%" y="767.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="0.2511%" y="741" width="0.0179%" height="15" fill="rgb(229,68,48)" fg:x="14" fg:w="1"/><text x="0.5011%" y="751.50"></text></g><g><title>CoreFoundation`__CFDataInit (1 samples, 0.02%)</title><rect x="0.2690%" y="997" width="0.0179%" height="15" fill="rgb(252,8,32)" fg:x="15" fg:w="1"/><text x="0.5190%" y="1007.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (1 samples, 0.02%)</title><rect x="0.2690%" y="981" width="0.0179%" height="15" fill="rgb(223,20,43)" fg:x="15" fg:w="1"/><text x="0.5190%" y="991.50"></text></g><g><title>libobjc.A.dylib`objc_object::changeIsa (1 samples, 0.02%)</title><rect x="0.2690%" y="965" width="0.0179%" height="15" fill="rgb(229,81,49)" fg:x="15" fg:w="1"/><text x="0.5190%" y="975.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::data (1 samples, 0.02%)</title><rect x="0.2869%" y="997" width="0.0179%" height="15" fill="rgb(236,28,36)" fg:x="16" fg:w="1"/><text x="0.5369%" y="1007.50"></text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::get (1 samples, 0.02%)</title><rect x="0.2869%" y="981" width="0.0179%" height="15" fill="rgb(249,185,26)" fg:x="16" fg:w="1"/><text x="0.5369%" y="991.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::get (1 samples, 0.02%)</title><rect x="0.2869%" y="965" width="0.0179%" height="15" fill="rgb(249,174,33)" fg:x="16" fg:w="1"/><text x="0.5369%" y="975.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.2869%" y="949" width="0.0179%" height="15" fill="rgb(233,201,37)" fg:x="16" fg:w="1"/><text x="0.5369%" y="959.50"></text></g><g><title>Security`cssm_DataGetFromUniqueRecordId(cssm_dl_db_handle, cssm_db_unique_record const*, cssm_db_record_attribute_data*, cssm_data*) (1 samples, 0.02%)</title><rect x="0.2869%" y="933" width="0.0179%" height="15" fill="rgb(221,78,26)" fg:x="16" fg:w="1"/><text x="0.5369%" y="943.50"></text></g><g><title>Security`SSDLSession::DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.2869%" y="917" width="0.0179%" height="15" fill="rgb(250,127,30)" fg:x="16" fg:w="1"/><text x="0.5369%" y="927.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.2869%" y="901" width="0.0179%" height="15" fill="rgb(230,49,44)" fg:x="16" fg:w="1"/><text x="0.5369%" y="911.50"></text></g><g><title>Security`cssm_DataGetFromUniqueRecordId(cssm_dl_db_handle, cssm_db_unique_record const*, cssm_db_record_attribute_data*, cssm_data*) (1 samples, 0.02%)</title><rect x="0.2869%" y="885" width="0.0179%" height="15" fill="rgb(229,67,23)" fg:x="16" fg:w="1"/><text x="0.5369%" y="895.50"></text></g><g><title>Security`Security::DatabaseSession::DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.2869%" y="869" width="0.0179%" height="15" fill="rgb(249,83,47)" fg:x="16" fg:w="1"/><text x="0.5369%" y="879.50"></text></g><g><title>Security`secLogObjForScope (1 samples, 0.02%)</title><rect x="0.2869%" y="853" width="0.0179%" height="15" fill="rgb(215,43,3)" fg:x="16" fg:w="1"/><text x="0.5369%" y="863.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$strlen (1 samples, 0.02%)</title><rect x="0.2869%" y="837" width="0.0179%" height="15" fill="rgb(238,154,13)" fg:x="16" fg:w="1"/><text x="0.5369%" y="847.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::activate (1 samples, 0.02%)</title><rect x="0.3049%" y="981" width="0.0179%" height="15" fill="rgb(219,56,2)" fg:x="17" fg:w="1"/><text x="0.5549%" y="991.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.02%)</title><rect x="0.3049%" y="965" width="0.0179%" height="15" fill="rgb(233,0,4)" fg:x="17" fg:w="1"/><text x="0.5549%" y="975.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::defaultCredentials (1 samples, 0.02%)</title><rect x="0.3049%" y="949" width="0.0179%" height="15" fill="rgb(235,30,7)" fg:x="17" fg:w="1"/><text x="0.5549%" y="959.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::keychainSchema (1 samples, 0.02%)</title><rect x="0.3049%" y="933" width="0.0179%" height="15" fill="rgb(250,79,13)" fg:x="17" fg:w="1"/><text x="0.5549%" y="943.50"></text></g><g><title>Security`Security::CssmClient::DbDbCursorImpl::next (1 samples, 0.02%)</title><rect x="0.3049%" y="917" width="0.0179%" height="15" fill="rgb(211,146,34)" fg:x="17" fg:w="1"/><text x="0.5549%" y="927.50"></text></g><g><title>Security`CSSM_DL_DataGetNext (1 samples, 0.02%)</title><rect x="0.3049%" y="901" width="0.0179%" height="15" fill="rgb(228,22,38)" fg:x="17" fg:w="1"/><text x="0.5549%" y="911.50"></text></g><g><title>Security`cssm_DataGetNext(cssm_dl_db_handle, long, cssm_db_record_attribute_data*, cssm_data*, cssm_db_unique_record**) (1 samples, 0.02%)</title><rect x="0.3049%" y="885" width="0.0179%" height="15" fill="rgb(235,168,5)" fg:x="17" fg:w="1"/><text x="0.5549%" y="895.50"></text></g><g><title>Security`SSDLSession::DataGetNext (1 samples, 0.02%)</title><rect x="0.3049%" y="869" width="0.0179%" height="15" fill="rgb(221,155,16)" fg:x="17" fg:w="1"/><text x="0.5549%" y="879.50"></text></g><g><title>Security`CSSM_DL_DataGetNext (1 samples, 0.02%)</title><rect x="0.3049%" y="853" width="0.0179%" height="15" fill="rgb(215,215,53)" fg:x="17" fg:w="1"/><text x="0.5549%" y="863.50"></text></g><g><title>Security`cssm_DataGetNext(cssm_dl_db_handle, long, cssm_db_record_attribute_data*, cssm_data*, cssm_db_unique_record**) (1 samples, 0.02%)</title><rect x="0.3049%" y="837" width="0.0179%" height="15" fill="rgb(223,4,10)" fg:x="17" fg:w="1"/><text x="0.5549%" y="847.50"></text></g><g><title>Security`Security::DatabaseSession::DataGetNext (1 samples, 0.02%)</title><rect x="0.3049%" y="821" width="0.0179%" height="15" fill="rgb(234,103,6)" fg:x="17" fg:w="1"/><text x="0.5549%" y="831.50"></text></g><g><title>Security`Security::AppleDatabase::dataGetNext (1 samples, 0.02%)</title><rect x="0.3049%" y="805" width="0.0179%" height="15" fill="rgb(227,97,0)" fg:x="17" fg:w="1"/><text x="0.5549%" y="815.50"></text></g><g><title>Security`Security::AppleDatabase::createUniqueRecord (1 samples, 0.02%)</title><rect x="0.3049%" y="789" width="0.0179%" height="15" fill="rgb(234,150,53)" fg:x="17" fg:w="1"/><text x="0.5549%" y="799.50"></text></g><g><title>Security`Security::PluginSession::malloc (1 samples, 0.02%)</title><rect x="0.3049%" y="773" width="0.0179%" height="15" fill="rgb(228,201,54)" fg:x="17" fg:w="1"/><text x="0.5549%" y="783.50"></text></g><g><title>libc++abi.dylib`__dynamic_cast (1 samples, 0.02%)</title><rect x="0.3049%" y="757" width="0.0179%" height="15" fill="rgb(222,22,37)" fg:x="17" fg:w="1"/><text x="0.5549%" y="767.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::item (1 samples, 0.02%)</title><rect x="0.3228%" y="981" width="0.0179%" height="15" fill="rgb(237,53,32)" fg:x="18" fg:w="1"/><text x="0.5728%" y="991.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::makePrimaryKey (1 samples, 0.02%)</title><rect x="0.3228%" y="965" width="0.0179%" height="15" fill="rgb(233,25,53)" fg:x="18" fg:w="1"/><text x="0.5728%" y="975.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::get (1 samples, 0.02%)</title><rect x="0.3228%" y="949" width="0.0179%" height="15" fill="rgb(210,40,34)" fg:x="18" fg:w="1"/><text x="0.5728%" y="959.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.3228%" y="933" width="0.0179%" height="15" fill="rgb(241,220,44)" fg:x="18" fg:w="1"/><text x="0.5728%" y="943.50"></text></g><g><title>Security`cssm_DataGetFromUniqueRecordId(cssm_dl_db_handle, cssm_db_unique_record const*, cssm_db_record_attribute_data*, cssm_data*) (1 samples, 0.02%)</title><rect x="0.3228%" y="917" width="0.0179%" height="15" fill="rgb(235,28,35)" fg:x="18" fg:w="1"/><text x="0.5728%" y="927.50"></text></g><g><title>Security`SSDLSession::DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.3228%" y="901" width="0.0179%" height="15" fill="rgb(210,56,17)" fg:x="18" fg:w="1"/><text x="0.5728%" y="911.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.3228%" y="885" width="0.0179%" height="15" fill="rgb(224,130,29)" fg:x="18" fg:w="1"/><text x="0.5728%" y="895.50"></text></g><g><title>Security`cssm_DataGetFromUniqueRecordId(cssm_dl_db_handle, cssm_db_unique_record const*, cssm_db_record_attribute_data*, cssm_data*) (1 samples, 0.02%)</title><rect x="0.3228%" y="869" width="0.0179%" height="15" fill="rgb(235,212,8)" fg:x="18" fg:w="1"/><text x="0.5728%" y="879.50"></text></g><g><title>Security`Security::DatabaseSession::DataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.3228%" y="853" width="0.0179%" height="15" fill="rgb(223,33,50)" fg:x="18" fg:w="1"/><text x="0.5728%" y="863.50"></text></g><g><title>Security`Security::AppleDatabase::dataGetFromUniqueRecordId (1 samples, 0.02%)</title><rect x="0.3228%" y="837" width="0.0179%" height="15" fill="rgb(219,149,13)" fg:x="18" fg:w="1"/><text x="0.5728%" y="847.50"></text></g><g><title>Security`Security::Table::getRecord (1 samples, 0.02%)</title><rect x="0.3228%" y="821" width="0.0179%" height="15" fill="rgb(250,156,29)" fg:x="18" fg:w="1"/><text x="0.5728%" y="831.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.02%)</title><rect x="0.3228%" y="805" width="0.0179%" height="15" fill="rgb(216,193,19)" fg:x="18" fg:w="1"/><text x="0.5728%" y="815.50"></text></g><g><title>Security`Security::MetaAttribute::unpackAttribute (1 samples, 0.02%)</title><rect x="0.3228%" y="789" width="0.0179%" height="15" fill="rgb(216,135,14)" fg:x="18" fg:w="1"/><text x="0.5728%" y="799.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.02%)</title><rect x="0.3228%" y="773" width="0.0179%" height="15" fill="rgb(241,47,5)" fg:x="18" fg:w="1"/><text x="0.5728%" y="783.50"></text></g><g><title>Security`Security::PluginSession::malloc (1 samples, 0.02%)</title><rect x="0.3228%" y="757" width="0.0179%" height="15" fill="rgb(233,42,35)" fg:x="18" fg:w="1"/><text x="0.5728%" y="767.50"></text></g><g><title>Security`Attachment::upcallMalloc (1 samples, 0.02%)</title><rect x="0.3228%" y="741" width="0.0179%" height="15" fill="rgb(231,13,6)" fg:x="18" fg:w="1"/><text x="0.5728%" y="751.50"></text></g><g><title>Security`Security::CssmMemoryFunctionsAllocator::malloc (1 samples, 0.02%)</title><rect x="0.3228%" y="725" width="0.0179%" height="15" fill="rgb(207,181,40)" fg:x="18" fg:w="1"/><text x="0.5728%" y="735.50"></text></g><g><title>Security`Security::PluginSession::malloc (1 samples, 0.02%)</title><rect x="0.3228%" y="709" width="0.0179%" height="15" fill="rgb(254,173,49)" fg:x="18" fg:w="1"/><text x="0.5728%" y="719.50"></text></g><g><title>libc++abi.dylib`__dynamic_cast (1 samples, 0.02%)</title><rect x="0.3228%" y="693" width="0.0179%" height="15" fill="rgb(221,1,38)" fg:x="18" fg:w="1"/><text x="0.5728%" y="703.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.02%)</title><rect x="0.3407%" y="901" width="0.0179%" height="15" fill="rgb(206,124,46)" fg:x="19" fg:w="1"/><text x="0.5907%" y="911.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.02%)</title><rect x="0.3407%" y="885" width="0.0179%" height="15" fill="rgb(249,21,11)" fg:x="19" fg:w="1"/><text x="0.5907%" y="895.50"></text></g><g><title>Security`SSDLSession::DbOpen (1 samples, 0.02%)</title><rect x="0.3407%" y="869" width="0.0179%" height="15" fill="rgb(222,201,40)" fg:x="19" fg:w="1"/><text x="0.5907%" y="879.50"></text></g><g><title>Security`SSDatabaseImpl::load (1 samples, 0.02%)</title><rect x="0.3407%" y="853" width="0.0179%" height="15" fill="rgb(235,61,29)" fg:x="19" fg:w="1"/><text x="0.5907%" y="863.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.02%)</title><rect x="0.3407%" y="837" width="0.0179%" height="15" fill="rgb(219,207,3)" fg:x="19" fg:w="1"/><text x="0.5907%" y="847.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.02%)</title><rect x="0.3407%" y="821" width="0.0179%" height="15" fill="rgb(222,56,46)" fg:x="19" fg:w="1"/><text x="0.5907%" y="831.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.02%)</title><rect x="0.3407%" y="805" width="0.0179%" height="15" fill="rgb(239,76,54)" fg:x="19" fg:w="1"/><text x="0.5907%" y="815.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.02%)</title><rect x="0.3407%" y="789" width="0.0179%" height="15" fill="rgb(231,124,27)" fg:x="19" fg:w="1"/><text x="0.5907%" y="799.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.02%)</title><rect x="0.3407%" y="773" width="0.0179%" height="15" fill="rgb(249,195,6)" fg:x="19" fg:w="1"/><text x="0.5907%" y="783.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.02%)</title><rect x="0.3407%" y="757" width="0.0179%" height="15" fill="rgb(237,174,47)" fg:x="19" fg:w="1"/><text x="0.5907%" y="767.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.02%)</title><rect x="0.3407%" y="741" width="0.0179%" height="15" fill="rgb(206,201,31)" fg:x="19" fg:w="1"/><text x="0.5907%" y="751.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.02%)</title><rect x="0.3407%" y="725" width="0.0179%" height="15" fill="rgb(231,57,52)" fg:x="19" fg:w="1"/><text x="0.5907%" y="735.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.02%)</title><rect x="0.3407%" y="709" width="0.0179%" height="15" fill="rgb(248,177,22)" fg:x="19" fg:w="1"/><text x="0.5907%" y="719.50"></text></g><g><title>Security`Security::MetaRecord::attributeIndex (1 samples, 0.02%)</title><rect x="0.3407%" y="693" width="0.0179%" height="15" fill="rgb(215,211,37)" fg:x="19" fg:w="1"/><text x="0.5907%" y="703.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="0.3407%" y="677" width="0.0179%" height="15" fill="rgb(241,128,51)" fg:x="19" fg:w="1"/><text x="0.5907%" y="687.50"></text></g><g><title>Security`cssm_DataGetNext(cssm_dl_db_handle, long, cssm_db_record_attribute_data*, cssm_data*, cssm_db_unique_record**) (1 samples, 0.02%)</title><rect x="0.3587%" y="837" width="0.0179%" height="15" fill="rgb(227,165,31)" fg:x="20" fg:w="1"/><text x="0.6087%" y="847.50"></text></g><g><title>libc++abi.dylib`__dynamic_cast (1 samples, 0.02%)</title><rect x="0.3587%" y="821" width="0.0179%" height="15" fill="rgb(228,167,24)" fg:x="20" fg:w="1"/><text x="0.6087%" y="831.50"></text></g><g><title>libc++abi.dylib`__cxxabiv1::__vmi_class_type_info::search_below_dst (1 samples, 0.02%)</title><rect x="0.3587%" y="805" width="0.0179%" height="15" fill="rgb(228,143,12)" fg:x="20" fg:w="1"/><text x="0.6087%" y="815.50"></text></g><g><title>libc++abi.dylib`__cxxabiv1::__vmi_class_type_info::search_above_dst (1 samples, 0.02%)</title><rect x="0.3587%" y="789" width="0.0179%" height="15" fill="rgb(249,149,8)" fg:x="20" fg:w="1"/><text x="0.6087%" y="799.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::performKeychainUpgradeIfNeeded (3 samples, 0.05%)</title><rect x="0.3407%" y="981" width="0.0538%" height="15" fill="rgb(243,35,44)" fg:x="19" fg:w="3"/><text x="0.5907%" y="991.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::dbBlobVersion (3 samples, 0.05%)</title><rect x="0.3407%" y="965" width="0.0538%" height="15" fill="rgb(246,89,9)" fg:x="19" fg:w="3"/><text x="0.5907%" y="975.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::handle (3 samples, 0.05%)</title><rect x="0.3407%" y="949" width="0.0538%" height="15" fill="rgb(233,213,13)" fg:x="19" fg:w="3"/><text x="0.5907%" y="959.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::activate (3 samples, 0.05%)</title><rect x="0.3407%" y="933" width="0.0538%" height="15" fill="rgb(233,141,41)" fg:x="19" fg:w="3"/><text x="0.5907%" y="943.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (3 samples, 0.05%)</title><rect x="0.3407%" y="917" width="0.0538%" height="15" fill="rgb(239,167,4)" fg:x="19" fg:w="3"/><text x="0.5907%" y="927.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::defaultCredentials (2 samples, 0.04%)</title><rect x="0.3587%" y="901" width="0.0359%" height="15" fill="rgb(209,217,16)" fg:x="20" fg:w="2"/><text x="0.6087%" y="911.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::keychainSchema (2 samples, 0.04%)</title><rect x="0.3587%" y="885" width="0.0359%" height="15" fill="rgb(219,88,35)" fg:x="20" fg:w="2"/><text x="0.6087%" y="895.50"></text></g><g><title>Security`Security::CssmClient::DbDbCursorImpl::next (2 samples, 0.04%)</title><rect x="0.3587%" y="869" width="0.0359%" height="15" fill="rgb(220,193,23)" fg:x="20" fg:w="2"/><text x="0.6087%" y="879.50"></text></g><g><title>Security`CSSM_DL_DataGetNext (2 samples, 0.04%)</title><rect x="0.3587%" y="853" width="0.0359%" height="15" fill="rgb(230,90,52)" fg:x="20" fg:w="2"/><text x="0.6087%" y="863.50"></text></g><g><title>libdispatch.dylib`dispatch_once_f (1 samples, 0.02%)</title><rect x="0.3766%" y="837" width="0.0179%" height="15" fill="rgb(252,106,19)" fg:x="21" fg:w="1"/><text x="0.6266%" y="847.50"></text></g><g><title>Security`Security::KeychainCore::KCCursorImpl::next (6 samples, 0.11%)</title><rect x="0.3049%" y="997" width="0.1076%" height="15" fill="rgb(206,74,20)" fg:x="17" fg:w="6"/><text x="0.5549%" y="1007.50"></text></g><g><title>Security`Security::SecPointerBase::operator= (1 samples, 0.02%)</title><rect x="0.3945%" y="981" width="0.0179%" height="15" fill="rgb(230,138,44)" fg:x="22" fg:w="1"/><text x="0.6445%" y="991.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.02%)</title><rect x="0.3945%" y="965" width="0.0179%" height="15" fill="rgb(235,182,43)" fg:x="22" fg:w="1"/><text x="0.6445%" y="975.50"></text></g><g><title>Security`Security::CFClass::refCountForType (1 samples, 0.02%)</title><rect x="0.3945%" y="949" width="0.0179%" height="15" fill="rgb(242,16,51)" fg:x="22" fg:w="1"/><text x="0.6445%" y="959.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::~Certificate (1 samples, 0.02%)</title><rect x="0.3945%" y="933" width="0.0179%" height="15" fill="rgb(248,9,4)" fg:x="22" fg:w="1"/><text x="0.6445%" y="943.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::~Certificate (1 samples, 0.02%)</title><rect x="0.3945%" y="917" width="0.0179%" height="15" fill="rgb(210,31,22)" fg:x="22" fg:w="1"/><text x="0.6445%" y="927.50"></text></g><g><title>Security`Security::KeychainCore::ItemImpl::~ItemImpl (1 samples, 0.02%)</title><rect x="0.3945%" y="901" width="0.0179%" height="15" fill="rgb(239,54,39)" fg:x="22" fg:w="1"/><text x="0.6445%" y="911.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (1 samples, 0.02%)</title><rect x="0.3945%" y="885" width="0.0179%" height="15" fill="rgb(230,99,41)" fg:x="22" fg:w="1"/><text x="0.6445%" y="895.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (1 samples, 0.02%)</title><rect x="0.3945%" y="869" width="0.0179%" height="15" fill="rgb(253,106,12)" fg:x="22" fg:w="1"/><text x="0.6445%" y="879.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (1 samples, 0.02%)</title><rect x="0.3945%" y="853" width="0.0179%" height="15" fill="rgb(213,46,41)" fg:x="22" fg:w="1"/><text x="0.6445%" y="863.50"></text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::~SSDbUniqueRecordImpl (1 samples, 0.02%)</title><rect x="0.3945%" y="837" width="0.0179%" height="15" fill="rgb(215,133,35)" fg:x="22" fg:w="1"/><text x="0.6445%" y="847.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::~DbUniqueRecordImpl (1 samples, 0.02%)</title><rect x="0.3945%" y="821" width="0.0179%" height="15" fill="rgb(213,28,5)" fg:x="22" fg:w="1"/><text x="0.6445%" y="831.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::deactivate (1 samples, 0.02%)</title><rect x="0.3945%" y="805" width="0.0179%" height="15" fill="rgb(215,77,49)" fg:x="22" fg:w="1"/><text x="0.6445%" y="815.50"></text></g><g><title>Security`CSSM_DL_FreeUniqueRecord (1 samples, 0.02%)</title><rect x="0.3945%" y="789" width="0.0179%" height="15" fill="rgb(248,100,22)" fg:x="22" fg:w="1"/><text x="0.6445%" y="799.50"></text></g><g><title>Security`cssm_FreeUniqueRecord(cssm_dl_db_handle, cssm_db_unique_record*) (1 samples, 0.02%)</title><rect x="0.3945%" y="773" width="0.0179%" height="15" fill="rgb(208,67,9)" fg:x="22" fg:w="1"/><text x="0.6445%" y="783.50"></text></g><g><title>Security`non-virtual thunk to SSDLSession::FreeUniqueRecord (1 samples, 0.02%)</title><rect x="0.3945%" y="757" width="0.0179%" height="15" fill="rgb(219,133,21)" fg:x="22" fg:w="1"/><text x="0.6445%" y="767.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (1 samples, 0.02%)</title><rect x="0.3945%" y="741" width="0.0179%" height="15" fill="rgb(246,46,29)" fg:x="22" fg:w="1"/><text x="0.6445%" y="751.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (1 samples, 0.02%)</title><rect x="0.3945%" y="725" width="0.0179%" height="15" fill="rgb(246,185,52)" fg:x="22" fg:w="1"/><text x="0.6445%" y="735.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (1 samples, 0.02%)</title><rect x="0.3945%" y="709" width="0.0179%" height="15" fill="rgb(252,136,11)" fg:x="22" fg:w="1"/><text x="0.6445%" y="719.50"></text></g><g><title>Security`SSUniqueRecordImpl::~SSUniqueRecordImpl (1 samples, 0.02%)</title><rect x="0.3945%" y="693" width="0.0179%" height="15" fill="rgb(219,138,53)" fg:x="22" fg:w="1"/><text x="0.6445%" y="703.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::~DbUniqueRecordImpl (1 samples, 0.02%)</title><rect x="0.3945%" y="677" width="0.0179%" height="15" fill="rgb(211,51,23)" fg:x="22" fg:w="1"/><text x="0.6445%" y="687.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::deactivate (1 samples, 0.02%)</title><rect x="0.3945%" y="661" width="0.0179%" height="15" fill="rgb(247,221,28)" fg:x="22" fg:w="1"/><text x="0.6445%" y="671.50"></text></g><g><title>Security`CSSM_DL_FreeUniqueRecord (1 samples, 0.02%)</title><rect x="0.3945%" y="645" width="0.0179%" height="15" fill="rgb(251,222,45)" fg:x="22" fg:w="1"/><text x="0.6445%" y="655.50"></text></g><g><title>Security`cssm_FreeUniqueRecord(cssm_dl_db_handle, cssm_db_unique_record*) (1 samples, 0.02%)</title><rect x="0.3945%" y="629" width="0.0179%" height="15" fill="rgb(217,162,53)" fg:x="22" fg:w="1"/><text x="0.6445%" y="639.50"></text></g><g><title>Security`Security::DatabaseSession::FreeUniqueRecord (1 samples, 0.02%)</title><rect x="0.3945%" y="613" width="0.0179%" height="15" fill="rgb(229,93,14)" fg:x="22" fg:w="1"/><text x="0.6445%" y="623.50"></text></g><g><title>Security`secLogObjForScope (1 samples, 0.02%)</title><rect x="0.3945%" y="597" width="0.0179%" height="15" fill="rgb(209,67,49)" fg:x="22" fg:w="1"/><text x="0.6445%" y="607.50"></text></g><g><title>Security`secLogObjForCFScope (1 samples, 0.02%)</title><rect x="0.3945%" y="581" width="0.0179%" height="15" fill="rgb(213,87,29)" fg:x="22" fg:w="1"/><text x="0.6445%" y="591.50"></text></g><g><title>CoreFoundation`CFDictionaryGetValue (1 samples, 0.02%)</title><rect x="0.3945%" y="565" width="0.0179%" height="15" fill="rgb(205,151,52)" fg:x="22" fg:w="1"/><text x="0.6445%" y="575.50"></text></g><g><title>CoreFoundation`CFBasicHashFindBucket (1 samples, 0.02%)</title><rect x="0.3945%" y="549" width="0.0179%" height="15" fill="rgb(253,215,39)" fg:x="22" fg:w="1"/><text x="0.6445%" y="559.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::findQualifiedCerts(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (9 samples, 0.16%)</title><rect x="0.2690%" y="1013" width="0.1614%" height="15" fill="rgb(221,220,41)" fg:x="15" fg:w="9"/><text x="0.5190%" y="1023.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::findDictionaryForCert (1 samples, 0.02%)</title><rect x="0.4125%" y="997" width="0.0179%" height="15" fill="rgb(218,133,21)" fg:x="23" fg:w="1"/><text x="0.6625%" y="1007.50"></text></g><g><title>Security`SecTrustSettingsCertHashStrFromCert (1 samples, 0.02%)</title><rect x="0.4125%" y="981" width="0.0179%" height="15" fill="rgb(221,193,43)" fg:x="23" fg:w="1"/><text x="0.6625%" y="991.50"></text></g><g><title>Security`SecCertificateGetData (1 samples, 0.02%)</title><rect x="0.4125%" y="965" width="0.0179%" height="15" fill="rgb(240,128,52)" fg:x="23" fg:w="1"/><text x="0.6625%" y="975.50"></text></g><g><title>Security`SecCertificateCreateItemImplInstance (1 samples, 0.02%)</title><rect x="0.4125%" y="949" width="0.0179%" height="15" fill="rgb(253,114,12)" fg:x="23" fg:w="1"/><text x="0.6625%" y="959.50"></text></g><g><title>Security`Security::SecCFObject::allocate (1 samples, 0.02%)</title><rect x="0.4125%" y="933" width="0.0179%" height="15" fill="rgb(215,223,47)" fg:x="23" fg:w="1"/><text x="0.6625%" y="943.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="0.4125%" y="917" width="0.0179%" height="15" fill="rgb(248,225,23)" fg:x="23" fg:w="1"/><text x="0.6625%" y="927.50"></text></g><g><title>databend-query`security_framework::trust_settings::TrustSettings::iter (19 samples, 0.34%)</title><rect x="0.1076%" y="1045" width="0.3407%" height="15" fill="rgb(250,108,0)" fg:x="6" fg:w="19"/><text x="0.3576%" y="1055.50"></text></g><g><title>Security`SecTrustSettingsCopyCertificates (19 samples, 0.34%)</title><rect x="0.1076%" y="1029" width="0.3407%" height="15" fill="rgb(228,208,7)" fg:x="6" fg:w="19"/><text x="0.3576%" y="1039.50"></text></g><g><title>Security`Security::ModuleNexus&lt;Security::KeychainCore::Globals&gt;::operator() (1 samples, 0.02%)</title><rect x="0.4304%" y="1013" width="0.0179%" height="15" fill="rgb(244,45,10)" fg:x="24" fg:w="1"/><text x="0.6804%" y="1023.50"></text></g><g><title>Security`Security::ModuleNexusCommon::create(void* (*) (1 samples, 0.02%)</title><rect x="0.4304%" y="997" width="0.0179%" height="15" fill="rgb(207,125,25)" fg:x="24" fg:w="1"/><text x="0.6804%" y="1007.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="0.4304%" y="981" width="0.0179%" height="15" fill="rgb(210,195,18)" fg:x="24" fg:w="1"/><text x="0.6804%" y="991.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.4304%" y="965" width="0.0179%" height="15" fill="rgb(249,80,12)" fg:x="24" fg:w="1"/><text x="0.6804%" y="975.50"></text></g><g><title>Security`invocation function for block in Security::ModuleNexusCommon::create(void* (*) (1 samples, 0.02%)</title><rect x="0.4304%" y="949" width="0.0179%" height="15" fill="rgb(221,65,9)" fg:x="24" fg:w="1"/><text x="0.6804%" y="959.50"></text></g><g><title>Security`Security::ModuleNexus&lt;Security::KeychainCore::Globals&gt;::make (1 samples, 0.02%)</title><rect x="0.4304%" y="933" width="0.0179%" height="15" fill="rgb(235,49,36)" fg:x="24" fg:w="1"/><text x="0.6804%" y="943.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyValueWithContainer (1 samples, 0.02%)</title><rect x="0.4304%" y="917" width="0.0179%" height="15" fill="rgb(225,32,20)" fg:x="24" fg:w="1"/><text x="0.6804%" y="927.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyValueForKey:identifier:user:host:container:] (1 samples, 0.02%)</title><rect x="0.4304%" y="901" width="0.0179%" height="15" fill="rgb(215,141,46)" fg:x="24" fg:w="1"/><text x="0.6804%" y="911.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSourceForIdentifier:user:byHost:container:cloud:perform:] (1 samples, 0.02%)</title><rect x="0.4304%" y="885" width="0.0179%" height="15" fill="rgb(250,160,47)" fg:x="24" fg:w="1"/><text x="0.6804%" y="895.50"></text></g><g><title>CoreFoundation`__66-[_CFXPreferences copyValueForKey:identifier:user:host:container:]_block_invoke (1 samples, 0.02%)</title><rect x="0.4304%" y="869" width="0.0179%" height="15" fill="rgb(216,222,40)" fg:x="24" fg:w="1"/><text x="0.6804%" y="879.50"></text></g><g><title>CoreFoundation`-[CFPrefsPlistSource copyValueForKey:] (1 samples, 0.02%)</title><rect x="0.4304%" y="853" width="0.0179%" height="15" fill="rgb(234,217,39)" fg:x="24" fg:w="1"/><text x="0.6804%" y="863.50"></text></g><g><title>CoreFoundation`_copyValueForKey (1 samples, 0.02%)</title><rect x="0.4304%" y="837" width="0.0179%" height="15" fill="rgb(207,178,40)" fg:x="24" fg:w="1"/><text x="0.6804%" y="847.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.02%)</title><rect x="0.4304%" y="821" width="0.0179%" height="15" fill="rgb(221,136,13)" fg:x="24" fg:w="1"/><text x="0.6804%" y="831.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$objc_msgSend (1 samples, 0.02%)</title><rect x="0.4484%" y="981" width="0.0179%" height="15" fill="rgb(249,199,10)" fg:x="25" fg:w="1"/><text x="0.6984%" y="991.50"></text></g><g><title>Security`DYLD-STUB$$CFDataGetTypeID (1 samples, 0.02%)</title><rect x="0.4663%" y="981" width="0.0179%" height="15" fill="rgb(249,222,13)" fg:x="26" fg:w="1"/><text x="0.7163%" y="991.50"></text></g><g><title>Security`DYLD-STUB$$CFDictionaryGetValue (1 samples, 0.02%)</title><rect x="0.4842%" y="981" width="0.0179%" height="15" fill="rgb(244,185,38)" fg:x="27" fg:w="1"/><text x="0.7342%" y="991.50"></text></g><g><title>CoreFoundation`-[__NSCFString retain] (1 samples, 0.02%)</title><rect x="0.5022%" y="869" width="0.0179%" height="15" fill="rgb(236,202,9)" fg:x="28" fg:w="1"/><text x="0.7522%" y="879.50"></text></g><g><title>CoreFoundation`-[__NSCFString isEqual:] (1 samples, 0.02%)</title><rect x="0.5380%" y="853" width="0.0179%" height="15" fill="rgb(250,229,37)" fg:x="30" fg:w="1"/><text x="0.7880%" y="863.50"></text></g><g><title>CoreFoundation`__CFStringEqual (1 samples, 0.02%)</title><rect x="0.5380%" y="837" width="0.0179%" height="15" fill="rgb(206,174,23)" fg:x="30" fg:w="1"/><text x="0.7880%" y="847.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (4 samples, 0.07%)</title><rect x="0.5201%" y="869" width="0.0717%" height="15" fill="rgb(211,33,43)" fg:x="29" fg:w="4"/><text x="0.7701%" y="879.50"></text></g><g><title>CoreFoundation`__CFStringHash (2 samples, 0.04%)</title><rect x="0.5560%" y="853" width="0.0359%" height="15" fill="rgb(245,58,50)" fg:x="31" fg:w="2"/><text x="0.8060%" y="863.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.02%)</title><rect x="0.5918%" y="869" width="0.0179%" height="15" fill="rgb(244,68,36)" fg:x="33" fg:w="1"/><text x="0.8418%" y="879.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (1 samples, 0.02%)</title><rect x="0.6098%" y="853" width="0.0179%" height="15" fill="rgb(232,229,15)" fg:x="34" fg:w="1"/><text x="0.8598%" y="863.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$class_createInstance (1 samples, 0.02%)</title><rect x="0.6277%" y="821" width="0.0179%" height="15" fill="rgb(254,30,23)" fg:x="35" fg:w="1"/><text x="0.8777%" y="831.50"></text></g><g><title>CoreFoundation`CFDictionaryCreateMutable (2 samples, 0.04%)</title><rect x="0.6277%" y="853" width="0.0359%" height="15" fill="rgb(235,160,14)" fg:x="35" fg:w="2"/><text x="0.8777%" y="863.50"></text></g><g><title>CoreFoundation`__NSDictionaryM_new (2 samples, 0.04%)</title><rect x="0.6277%" y="837" width="0.0359%" height="15" fill="rgb(212,155,44)" fg:x="35" fg:w="2"/><text x="0.8777%" y="847.50"></text></g><g><title>CoreFoundation`__CFAllocateObject (1 samples, 0.02%)</title><rect x="0.6456%" y="821" width="0.0179%" height="15" fill="rgb(226,2,50)" fg:x="36" fg:w="1"/><text x="0.8956%" y="831.50"></text></g><g><title>libobjc.A.dylib`class_createInstance (1 samples, 0.02%)</title><rect x="0.6456%" y="805" width="0.0179%" height="15" fill="rgb(234,177,6)" fg:x="36" fg:w="1"/><text x="0.8956%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.02%)</title><rect x="0.6456%" y="789" width="0.0179%" height="15" fill="rgb(217,24,9)" fg:x="36" fg:w="1"/><text x="0.8956%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.02%)</title><rect x="0.6456%" y="773" width="0.0179%" height="15" fill="rgb(220,13,46)" fg:x="36" fg:w="1"/><text x="0.8956%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="0.6456%" y="757" width="0.0179%" height="15" fill="rgb(239,221,27)" fg:x="36" fg:w="1"/><text x="0.8956%" y="767.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$calloc (1 samples, 0.02%)</title><rect x="0.6636%" y="853" width="0.0179%" height="15" fill="rgb(222,198,25)" fg:x="37" fg:w="1"/><text x="0.9136%" y="863.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.02%)</title><rect x="0.6815%" y="853" width="0.0179%" height="15" fill="rgb(211,99,13)" fg:x="38" fg:w="1"/><text x="0.9315%" y="863.50"></text></g><g><title>CoreFoundation`checkForCloseTag (2 samples, 0.04%)</title><rect x="0.6994%" y="853" width="0.0359%" height="15" fill="rgb(232,111,31)" fg:x="39" fg:w="2"/><text x="0.9494%" y="863.50"></text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (1 samples, 0.02%)</title><rect x="0.7532%" y="821" width="0.0179%" height="15" fill="rgb(245,82,37)" fg:x="42" fg:w="1"/><text x="1.0032%" y="831.50"></text></g><g><title>CoreFoundation`__CFStrAllocateMutableContents (1 samples, 0.02%)</title><rect x="0.7532%" y="805" width="0.0179%" height="15" fill="rgb(227,149,46)" fg:x="42" fg:w="1"/><text x="1.0032%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="0.7532%" y="789" width="0.0179%" height="15" fill="rgb(218,36,50)" fg:x="42" fg:w="1"/><text x="1.0032%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="0.7532%" y="773" width="0.0179%" height="15" fill="rgb(226,80,48)" fg:x="42" fg:w="1"/><text x="1.0032%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="0.7532%" y="757" width="0.0179%" height="15" fill="rgb(238,224,15)" fg:x="42" fg:w="1"/><text x="1.0032%" y="767.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (2 samples, 0.04%)</title><rect x="0.7532%" y="837" width="0.0359%" height="15" fill="rgb(241,136,10)" fg:x="42" fg:w="2"/><text x="1.0032%" y="847.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="0.7712%" y="821" width="0.0179%" height="15" fill="rgb(208,32,45)" fg:x="43" fg:w="1"/><text x="1.0212%" y="831.50"></text></g><g><title>CoreFoundation`__CFSearchStringROM (2 samples, 0.04%)</title><rect x="0.7891%" y="805" width="0.0359%" height="15" fill="rgb(207,135,9)" fg:x="44" fg:w="2"/><text x="1.0391%" y="815.50"></text></g><g><title>CoreFoundation`parseStringTag (6 samples, 0.11%)</title><rect x="0.7353%" y="853" width="0.1076%" height="15" fill="rgb(206,86,44)" fg:x="41" fg:w="6"/><text x="0.9853%" y="863.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (3 samples, 0.05%)</title><rect x="0.7891%" y="837" width="0.0538%" height="15" fill="rgb(245,177,15)" fg:x="44" fg:w="3"/><text x="1.0391%" y="847.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (3 samples, 0.05%)</title><rect x="0.7891%" y="821" width="0.0538%" height="15" fill="rgb(206,64,50)" fg:x="44" fg:w="3"/><text x="1.0391%" y="831.50"></text></g><g><title>CoreFoundation`__CFStrHashEightBit2 (1 samples, 0.02%)</title><rect x="0.8250%" y="805" width="0.0179%" height="15" fill="rgb(234,36,40)" fg:x="46" fg:w="1"/><text x="1.0750%" y="815.50"></text></g><g><title>CoreFoundation`CFAllocatorDeallocate (1 samples, 0.02%)</title><rect x="1.0760%" y="837" width="0.0179%" height="15" fill="rgb(213,64,8)" fg:x="60" fg:w="1"/><text x="1.3260%" y="847.50"></text></g><g><title>CoreFoundation`CFDataReplaceBytes (1 samples, 0.02%)</title><rect x="1.0940%" y="837" width="0.0179%" height="15" fill="rgb(210,75,36)" fg:x="61" fg:w="1"/><text x="1.3440%" y="847.50"></text></g><g><title>CoreFoundation`__CFDataGrow (1 samples, 0.02%)</title><rect x="1.0940%" y="821" width="0.0179%" height="15" fill="rgb(229,88,21)" fg:x="61" fg:w="1"/><text x="1.3440%" y="831.50"></text></g><g><title>CoreFoundation`__CFSafelyReallocate (1 samples, 0.02%)</title><rect x="1.0940%" y="805" width="0.0179%" height="15" fill="rgb(252,204,47)" fg:x="61" fg:w="1"/><text x="1.3440%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="1.0940%" y="789" width="0.0179%" height="15" fill="rgb(208,77,27)" fg:x="61" fg:w="1"/><text x="1.3440%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="1.0940%" y="773" width="0.0179%" height="15" fill="rgb(221,76,26)" fg:x="61" fg:w="1"/><text x="1.3440%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="1.0940%" y="757" width="0.0179%" height="15" fill="rgb(225,139,18)" fg:x="61" fg:w="1"/><text x="1.3440%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="1.0940%" y="741" width="0.0179%" height="15" fill="rgb(230,137,11)" fg:x="61" fg:w="1"/><text x="1.3440%" y="751.50"></text></g><g><title>CoreFoundation`CFDateCreate (1 samples, 0.02%)</title><rect x="1.1119%" y="837" width="0.0179%" height="15" fill="rgb(212,28,1)" fg:x="62" fg:w="1"/><text x="1.3619%" y="847.50"></text></g><g><title>CoreFoundation`+[NSDate allocWithZone:] (1 samples, 0.02%)</title><rect x="1.1119%" y="821" width="0.0179%" height="15" fill="rgb(248,164,17)" fg:x="62" fg:w="1"/><text x="1.3619%" y="831.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.02%)</title><rect x="1.1298%" y="837" width="0.0179%" height="15" fill="rgb(222,171,42)" fg:x="63" fg:w="1"/><text x="1.3798%" y="847.50"></text></g><g><title>CoreFoundation`__CFAbsoluteFromYMD (1 samples, 0.02%)</title><rect x="1.1478%" y="837" width="0.0179%" height="15" fill="rgb(243,84,45)" fg:x="64" fg:w="1"/><text x="1.3978%" y="847.50"></text></g><g><title>CoreFoundation`CFDataReplaceBytes (1 samples, 0.02%)</title><rect x="1.1836%" y="821" width="0.0179%" height="15" fill="rgb(252,49,23)" fg:x="66" fg:w="1"/><text x="1.4336%" y="831.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (1 samples, 0.02%)</title><rect x="1.2016%" y="821" width="0.0179%" height="15" fill="rgb(215,19,7)" fg:x="67" fg:w="1"/><text x="1.4516%" y="831.50"></text></g><g><title>CoreFoundation`__CFDataInit (4 samples, 0.07%)</title><rect x="1.1657%" y="837" width="0.0717%" height="15" fill="rgb(238,81,41)" fg:x="65" fg:w="4"/><text x="1.4157%" y="847.50"></text></g><g><title>CoreFoundation`__CFDataAllocate (1 samples, 0.02%)</title><rect x="1.2195%" y="821" width="0.0179%" height="15" fill="rgb(210,199,37)" fg:x="68" fg:w="1"/><text x="1.4695%" y="831.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (2 samples, 0.04%)</title><rect x="1.2374%" y="805" width="0.0359%" height="15" fill="rgb(244,192,49)" fg:x="69" fg:w="2"/><text x="1.4874%" y="815.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (2 samples, 0.04%)</title><rect x="1.2374%" y="789" width="0.0359%" height="15" fill="rgb(226,211,11)" fg:x="69" fg:w="2"/><text x="1.4874%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.04%)</title><rect x="1.2374%" y="773" width="0.0359%" height="15" fill="rgb(236,162,54)" fg:x="69" fg:w="2"/><text x="1.4874%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.04%)</title><rect x="1.2374%" y="757" width="0.0359%" height="15" fill="rgb(220,229,9)" fg:x="69" fg:w="2"/><text x="1.4874%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="1.2374%" y="741" width="0.0359%" height="15" fill="rgb(250,87,22)" fg:x="69" fg:w="2"/><text x="1.4874%" y="751.50"></text></g><g><title>CoreFoundation`CFStringGetBytes (1 samples, 0.02%)</title><rect x="1.2733%" y="805" width="0.0179%" height="15" fill="rgb(239,43,17)" fg:x="71" fg:w="1"/><text x="1.5233%" y="815.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$malloc_good_size (1 samples, 0.02%)</title><rect x="1.2912%" y="805" width="0.0179%" height="15" fill="rgb(231,177,25)" fg:x="72" fg:w="1"/><text x="1.5412%" y="815.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (5 samples, 0.09%)</title><rect x="1.2374%" y="821" width="0.0897%" height="15" fill="rgb(219,179,1)" fg:x="69" fg:w="5"/><text x="1.4874%" y="831.50"></text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (1 samples, 0.02%)</title><rect x="1.3092%" y="805" width="0.0179%" height="15" fill="rgb(238,219,53)" fg:x="73" fg:w="1"/><text x="1.5592%" y="815.50"></text></g><g><title>CoreFoundation`__CFStrAllocateMutableContents (1 samples, 0.02%)</title><rect x="1.3092%" y="789" width="0.0179%" height="15" fill="rgb(232,167,36)" fg:x="73" fg:w="1"/><text x="1.5592%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="1.3092%" y="773" width="0.0179%" height="15" fill="rgb(244,19,51)" fg:x="73" fg:w="1"/><text x="1.5592%" y="783.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$__memmove_chk (1 samples, 0.02%)</title><rect x="1.3271%" y="805" width="0.0179%" height="15" fill="rgb(224,6,22)" fg:x="74" fg:w="1"/><text x="1.5771%" y="815.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (3 samples, 0.05%)</title><rect x="1.3271%" y="821" width="0.0538%" height="15" fill="rgb(224,145,5)" fg:x="74" fg:w="3"/><text x="1.5771%" y="831.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (2 samples, 0.04%)</title><rect x="1.3451%" y="805" width="0.0359%" height="15" fill="rgb(234,130,49)" fg:x="75" fg:w="2"/><text x="1.5951%" y="815.50"></text></g><g><title>CoreFoundation`CFStringConvertEncodingToNSStringEncoding (1 samples, 0.02%)</title><rect x="1.3809%" y="789" width="0.0179%" height="15" fill="rgb(254,6,2)" fg:x="77" fg:w="1"/><text x="1.6309%" y="799.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="1.3989%" y="789" width="0.0179%" height="15" fill="rgb(208,96,46)" fg:x="78" fg:w="1"/><text x="1.6489%" y="799.50"></text></g><g><title>CoreFoundation`parseStringTag (12 samples, 0.22%)</title><rect x="1.2374%" y="837" width="0.2152%" height="15" fill="rgb(239,3,39)" fg:x="69" fg:w="12"/><text x="1.4874%" y="847.50"></text></g><g><title>Foundation`-[NSPlaceholderMutableString initWithString:] (4 samples, 0.07%)</title><rect x="1.3809%" y="821" width="0.0717%" height="15" fill="rgb(233,210,1)" fg:x="77" fg:w="4"/><text x="1.6309%" y="831.50"></text></g><g><title>CoreFoundation`CFStringAppend (4 samples, 0.07%)</title><rect x="1.3809%" y="805" width="0.0717%" height="15" fill="rgb(244,137,37)" fg:x="77" fg:w="4"/><text x="1.6309%" y="815.50"></text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (2 samples, 0.04%)</title><rect x="1.4168%" y="789" width="0.0359%" height="15" fill="rgb(240,136,2)" fg:x="79" fg:w="2"/><text x="1.6668%" y="799.50"></text></g><g><title>CoreFoundation`__CFStrAllocateMutableContents (2 samples, 0.04%)</title><rect x="1.4168%" y="773" width="0.0359%" height="15" fill="rgb(239,18,37)" fg:x="79" fg:w="2"/><text x="1.6668%" y="783.50"></text></g><g><title>CoreFoundation`CFAllocatorAllocate (1 samples, 0.02%)</title><rect x="1.4347%" y="757" width="0.0179%" height="15" fill="rgb(218,185,22)" fg:x="80" fg:w="1"/><text x="1.6847%" y="767.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (1 samples, 0.02%)</title><rect x="1.4527%" y="821" width="0.0179%" height="15" fill="rgb(225,218,4)" fg:x="81" fg:w="1"/><text x="1.7027%" y="831.50"></text></g><g><title>CoreFoundation`CFDictionaryCreateMutable (1 samples, 0.02%)</title><rect x="1.4706%" y="821" width="0.0179%" height="15" fill="rgb(230,182,32)" fg:x="82" fg:w="1"/><text x="1.7206%" y="831.50"></text></g><g><title>CoreFoundation`__NSCFDictionaryCreateMutable (1 samples, 0.02%)</title><rect x="1.4706%" y="805" width="0.0179%" height="15" fill="rgb(242,56,43)" fg:x="82" fg:w="1"/><text x="1.7206%" y="815.50"></text></g><g><title>CoreFoundation`CFAllocatorGetDefault (1 samples, 0.02%)</title><rect x="1.4706%" y="789" width="0.0179%" height="15" fill="rgb(233,99,24)" fg:x="82" fg:w="1"/><text x="1.7206%" y="799.50"></text></g><g><title>CoreFoundation`_CFGetTSDCreateIfNeeded (1 samples, 0.02%)</title><rect x="1.4706%" y="773" width="0.0179%" height="15" fill="rgb(234,209,42)" fg:x="82" fg:w="1"/><text x="1.7206%" y="783.50"></text></g><g><title>CoreFoundation`__CFTSDGetTable (1 samples, 0.02%)</title><rect x="1.4706%" y="757" width="0.0179%" height="15" fill="rgb(227,7,12)" fg:x="82" fg:w="1"/><text x="1.7206%" y="767.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.02%)</title><rect x="1.4885%" y="821" width="0.0179%" height="15" fill="rgb(245,203,43)" fg:x="83" fg:w="1"/><text x="1.7385%" y="831.50"></text></g><g><title>CoreFoundation`parseXMLElement (4 samples, 0.07%)</title><rect x="1.4527%" y="837" width="0.0717%" height="15" fill="rgb(238,205,33)" fg:x="81" fg:w="4"/><text x="1.7027%" y="847.50"></text></g><g><title>CoreFoundation`parseXMLElement (1 samples, 0.02%)</title><rect x="1.5065%" y="821" width="0.0179%" height="15" fill="rgb(231,56,7)" fg:x="84" fg:w="1"/><text x="1.7565%" y="831.50"></text></g><g><title>CoreFoundation`checkForCloseTag (1 samples, 0.02%)</title><rect x="1.5065%" y="805" width="0.0179%" height="15" fill="rgb(244,186,29)" fg:x="84" fg:w="1"/><text x="1.7565%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="1.5244%" y="837" width="0.0179%" height="15" fill="rgb(234,111,31)" fg:x="85" fg:w="1"/><text x="1.7744%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="1.5423%" y="837" width="0.0179%" height="15" fill="rgb(241,149,10)" fg:x="86" fg:w="1"/><text x="1.7923%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_free (1 samples, 0.02%)</title><rect x="1.5603%" y="837" width="0.0179%" height="15" fill="rgb(249,206,44)" fg:x="87" fg:w="1"/><text x="1.8103%" y="847.50"></text></g><g><title>CoreFoundation`parseXMLElement (42 samples, 0.75%)</title><rect x="0.8429%" y="853" width="0.7532%" height="15" fill="rgb(251,153,30)" fg:x="47" fg:w="42"/><text x="1.0929%" y="863.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="1.5782%" y="837" width="0.0179%" height="15" fill="rgb(239,152,38)" fg:x="88" fg:w="1"/><text x="1.8282%" y="847.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.02%)</title><rect x="1.5961%" y="853" width="0.0179%" height="15" fill="rgb(249,139,47)" fg:x="89" fg:w="1"/><text x="1.8461%" y="863.50"></text></g><g><title>CoreFoundation`parseXMLElement (57 samples, 1.02%)</title><rect x="0.6098%" y="869" width="1.0222%" height="15" fill="rgb(244,64,35)" fg:x="34" fg:w="57"/><text x="0.8598%" y="879.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="1.6141%" y="853" width="0.0179%" height="15" fill="rgb(216,46,15)" fg:x="90" fg:w="1"/><text x="1.8641%" y="863.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::initFromData (65 samples, 1.17%)</title><rect x="0.5022%" y="981" width="1.1657%" height="15" fill="rgb(250,74,19)" fg:x="28" fg:w="65"/><text x="0.7522%" y="991.50"></text></g><g><title>CoreFoundation`CFPropertyListCreateFromXMLData (65 samples, 1.17%)</title><rect x="0.5022%" y="965" width="1.1657%" height="15" fill="rgb(249,42,33)" fg:x="28" fg:w="65"/><text x="0.7522%" y="975.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateWithData (65 samples, 1.17%)</title><rect x="0.5022%" y="949" width="1.1657%" height="15" fill="rgb(242,149,17)" fg:x="28" fg:w="65"/><text x="0.7522%" y="959.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateFromUTF8Data (65 samples, 1.17%)</title><rect x="0.5022%" y="933" width="1.1657%" height="15" fill="rgb(244,29,21)" fg:x="28" fg:w="65"/><text x="0.7522%" y="943.50"></text></g><g><title>CoreFoundation`parseXMLElement (65 samples, 1.17%)</title><rect x="0.5022%" y="917" width="1.1657%" height="15" fill="rgb(220,130,37)" fg:x="28" fg:w="65"/><text x="0.7522%" y="927.50"></text></g><g><title>CoreFoundation`parseXMLElement (65 samples, 1.17%)</title><rect x="0.5022%" y="901" width="1.1657%" height="15" fill="rgb(211,67,2)" fg:x="28" fg:w="65"/><text x="0.7522%" y="911.50"></text></g><g><title>CoreFoundation`parseXMLElement (65 samples, 1.17%)</title><rect x="0.5022%" y="885" width="1.1657%" height="15" fill="rgb(235,68,52)" fg:x="28" fg:w="65"/><text x="0.7522%" y="895.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (2 samples, 0.04%)</title><rect x="1.6320%" y="869" width="0.0359%" height="15" fill="rgb(246,142,3)" fg:x="91" fg:w="2"/><text x="1.8820%" y="879.50"></text></g><g><title>CoreFoundation`-[__NSCFString isEqual:] (1 samples, 0.02%)</title><rect x="1.6679%" y="965" width="0.0179%" height="15" fill="rgb(241,25,7)" fg:x="93" fg:w="1"/><text x="1.9179%" y="975.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM objectForKey:] (1 samples, 0.02%)</title><rect x="1.6858%" y="965" width="0.0179%" height="15" fill="rgb(242,119,39)" fg:x="94" fg:w="1"/><text x="1.9358%" y="975.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::CreateTrustSettings (71 samples, 1.27%)</title><rect x="0.4484%" y="997" width="1.2733%" height="15" fill="rgb(241,98,45)" fg:x="25" fg:w="71"/><text x="0.6984%" y="1007.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::validatePropList (3 samples, 0.05%)</title><rect x="1.6679%" y="981" width="0.0538%" height="15" fill="rgb(254,28,30)" fg:x="93" fg:w="3"/><text x="1.9179%" y="991.50"></text></g><g><title>CoreFoundation`CFDictionaryGetValue (1 samples, 0.02%)</title><rect x="1.7037%" y="965" width="0.0179%" height="15" fill="rgb(241,142,54)" fg:x="95" fg:w="1"/><text x="1.9537%" y="975.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.02%)</title><rect x="1.7396%" y="933" width="0.0179%" height="15" fill="rgb(222,85,15)" fg:x="97" fg:w="1"/><text x="1.9896%" y="943.50"></text></g><g><title>CoreFoundation`CFAllocatorDeallocate (1 samples, 0.02%)</title><rect x="1.7755%" y="821" width="0.0179%" height="15" fill="rgb(210,85,47)" fg:x="99" fg:w="1"/><text x="2.0255%" y="831.50"></text></g><g><title>CoreFoundation`cow_cleanup (3 samples, 0.05%)</title><rect x="1.7575%" y="869" width="0.0538%" height="15" fill="rgb(224,206,25)" fg:x="98" fg:w="3"/><text x="2.0075%" y="879.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.04%)</title><rect x="1.7755%" y="853" width="0.0359%" height="15" fill="rgb(243,201,19)" fg:x="99" fg:w="2"/><text x="2.0255%" y="863.50"></text></g><g><title>CoreFoundation`__CFStringDeallocate (2 samples, 0.04%)</title><rect x="1.7755%" y="837" width="0.0359%" height="15" fill="rgb(236,59,4)" fg:x="99" fg:w="2"/><text x="2.0255%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_free (1 samples, 0.02%)</title><rect x="1.7934%" y="821" width="0.0179%" height="15" fill="rgb(254,179,45)" fg:x="100" fg:w="1"/><text x="2.0434%" y="831.50"></text></g><g><title>CoreFoundation`__RELEASE_OBJECTS_IN_THE_ARRAY__ (4 samples, 0.07%)</title><rect x="1.7575%" y="901" width="0.0717%" height="15" fill="rgb(226,14,10)" fg:x="98" fg:w="4"/><text x="2.0075%" y="911.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (4 samples, 0.07%)</title><rect x="1.7575%" y="885" width="0.0717%" height="15" fill="rgb(244,27,41)" fg:x="98" fg:w="4"/><text x="2.0075%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="1.8113%" y="869" width="0.0179%" height="15" fill="rgb(235,35,32)" fg:x="101" fg:w="1"/><text x="2.0613%" y="879.50"></text></g><g><title>CoreFoundation`-[__NSArrayM dealloc] (5 samples, 0.09%)</title><rect x="1.7575%" y="917" width="0.0897%" height="15" fill="rgb(218,68,31)" fg:x="98" fg:w="5"/><text x="2.0075%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="1.8293%" y="901" width="0.0179%" height="15" fill="rgb(207,120,37)" fg:x="102" fg:w="1"/><text x="2.0793%" y="911.50"></text></g><g><title>CoreFoundation`CFAllocatorDeallocate (1 samples, 0.02%)</title><rect x="1.8472%" y="901" width="0.0179%" height="15" fill="rgb(227,98,0)" fg:x="103" fg:w="1"/><text x="2.0972%" y="911.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (8 samples, 0.14%)</title><rect x="1.7396%" y="949" width="0.1435%" height="15" fill="rgb(207,7,3)" fg:x="97" fg:w="8"/><text x="1.9896%" y="959.50"></text></g><g><title>CoreFoundation`cow_cleanup (7 samples, 0.13%)</title><rect x="1.7575%" y="933" width="0.1255%" height="15" fill="rgb(206,98,19)" fg:x="98" fg:w="7"/><text x="2.0075%" y="943.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.04%)</title><rect x="1.8472%" y="917" width="0.0359%" height="15" fill="rgb(217,5,26)" fg:x="103" fg:w="2"/><text x="2.0972%" y="927.50"></text></g><g><title>CoreFoundation`__CFStringDeallocate (1 samples, 0.02%)</title><rect x="1.8651%" y="901" width="0.0179%" height="15" fill="rgb(235,190,38)" fg:x="104" fg:w="1"/><text x="2.1151%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="1.8651%" y="885" width="0.0179%" height="15" fill="rgb(247,86,24)" fg:x="104" fg:w="1"/><text x="2.1151%" y="895.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$object_getClass (1 samples, 0.02%)</title><rect x="1.8831%" y="949" width="0.0179%" height="15" fill="rgb(205,101,16)" fg:x="105" fg:w="1"/><text x="2.1331%" y="959.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.02%)</title><rect x="1.9010%" y="949" width="0.0179%" height="15" fill="rgb(246,168,33)" fg:x="106" fg:w="1"/><text x="2.1510%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="1.9010%" y="933" width="0.0179%" height="15" fill="rgb(231,114,1)" fg:x="106" fg:w="1"/><text x="2.1510%" y="943.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::~TrustSettings (12 samples, 0.22%)</title><rect x="1.7217%" y="997" width="0.2152%" height="15" fill="rgb(207,184,53)" fg:x="96" fg:w="12"/><text x="1.9717%" y="1007.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (12 samples, 0.22%)</title><rect x="1.7217%" y="981" width="0.2152%" height="15" fill="rgb(224,95,51)" fg:x="96" fg:w="12"/><text x="1.9717%" y="991.50"></text></g><g><title>CoreFoundation`cow_cleanup (12 samples, 0.22%)</title><rect x="1.7217%" y="965" width="0.2152%" height="15" fill="rgb(212,188,45)" fg:x="96" fg:w="12"/><text x="1.9717%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="1.9189%" y="949" width="0.0179%" height="15" fill="rgb(223,154,38)" fg:x="107" fg:w="1"/><text x="2.1689%" y="959.50"></text></g><g><title>databend-query`databend_common_sharing::share_endpoint::ShareEndpointManager::init (103 samples, 1.85%)</title><rect x="0.1076%" y="1109" width="1.8472%" height="15" fill="rgb(251,22,52)" fg:x="6" fg:w="103"/><text x="0.3576%" y="1119.50">d..</text></g><g><title>databend-query`opendal::raw::http_util::client::HttpClient::build (103 samples, 1.85%)</title><rect x="0.1076%" y="1093" width="1.8472%" height="15" fill="rgb(229,209,22)" fg:x="6" fg:w="103"/><text x="0.3576%" y="1103.50">d..</text></g><g><title>databend-query`reqwest::async_impl::client::ClientBuilder::build (103 samples, 1.85%)</title><rect x="0.1076%" y="1077" width="1.8472%" height="15" fill="rgb(234,138,34)" fg:x="6" fg:w="103"/><text x="0.3576%" y="1087.50">d..</text></g><g><title>databend-query`rustls_native_certs::load_native_certs (103 samples, 1.85%)</title><rect x="0.1076%" y="1061" width="1.8472%" height="15" fill="rgb(212,95,11)" fg:x="6" fg:w="103"/><text x="0.3576%" y="1071.50">d..</text></g><g><title>databend-query`security_framework::trust_settings::TrustSettings::tls_trust_settings_for_certificate (84 samples, 1.51%)</title><rect x="0.4484%" y="1045" width="1.5065%" height="15" fill="rgb(240,179,47)" fg:x="25" fg:w="84"/><text x="0.6984%" y="1055.50"></text></g><g><title>Security`SecTrustSettingsCopyTrustSettings (84 samples, 1.51%)</title><rect x="0.4484%" y="1029" width="1.5065%" height="15" fill="rgb(240,163,11)" fg:x="25" fg:w="84"/><text x="0.6984%" y="1039.50"></text></g><g><title>Security`tsCopyTrustSettings(__SecCertificate*, SecTrustSettingsDomain, __CFArray const**, __CFDate const**) (84 samples, 1.51%)</title><rect x="0.4484%" y="1013" width="1.5065%" height="15" fill="rgb(236,37,12)" fg:x="25" fg:w="84"/><text x="0.6984%" y="1023.50"></text></g><g><title>libsystem_kernel.dylib`fstat (1 samples, 0.02%)</title><rect x="1.9369%" y="997" width="0.0179%" height="15" fill="rgb(232,164,16)" fg:x="108" fg:w="1"/><text x="2.1869%" y="1007.50"></text></g><g><title>databend-query`databend_common_tracing::init::init_logging (1 samples, 0.02%)</title><rect x="1.9548%" y="1109" width="0.0179%" height="15" fill="rgb(244,205,15)" fg:x="109" fg:w="1"/><text x="2.2048%" y="1119.50"></text></g><g><title>databend-query`databend_common_tracing::loggers::new_file_log_writer (1 samples, 0.02%)</title><rect x="1.9548%" y="1093" width="0.0179%" height="15" fill="rgb(223,117,47)" fg:x="109" fg:w="1"/><text x="2.2048%" y="1103.50"></text></g><g><title>databend-query`tracing_appender::non_blocking::NonBlocking::new (1 samples, 0.02%)</title><rect x="1.9548%" y="1077" width="0.0179%" height="15" fill="rgb(244,107,35)" fg:x="109" fg:w="1"/><text x="2.2048%" y="1087.50"></text></g><g><title>databend-query`tracing_appender::non_blocking::NonBlocking::create (1 samples, 0.02%)</title><rect x="1.9548%" y="1061" width="0.0179%" height="15" fill="rgb(205,140,8)" fg:x="109" fg:w="1"/><text x="2.2048%" y="1071.50"></text></g><g><title>databend-query`crossbeam_channel::channel::bounded (1 samples, 0.02%)</title><rect x="1.9548%" y="1045" width="0.0179%" height="15" fill="rgb(228,84,46)" fg:x="109" fg:w="1"/><text x="2.2048%" y="1055.50"></text></g><g><title>databend-query`crossbeam_channel::flavors::array::Channel&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="1.9548%" y="1029" width="0.0179%" height="15" fill="rgb(254,188,9)" fg:x="109" fg:w="1"/><text x="2.2048%" y="1039.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="1.9548%" y="1013" width="0.0179%" height="15" fill="rgb(206,112,54)" fg:x="109" fg:w="1"/><text x="2.2048%" y="1023.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="1.9548%" y="997" width="0.0179%" height="15" fill="rgb(216,84,49)" fg:x="109" fg:w="1"/><text x="2.2048%" y="1007.50"></text></g><g><title>databend-query`databend_common_storage::operator::DataOperator::try_create::_{{closure}} (1 samples, 0.02%)</title><rect x="1.9727%" y="1093" width="0.0179%" height="15" fill="rgb(214,194,35)" fg:x="110" fg:w="1"/><text x="2.2227%" y="1103.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="1.9727%" y="1077" width="0.0179%" height="15" fill="rgb(249,28,3)" fg:x="110" fg:w="1"/><text x="2.2227%" y="1087.50"></text></g><g><title>databend-query`databend_common_storage::operator::init_operator (1 samples, 0.02%)</title><rect x="1.9727%" y="1061" width="0.0179%" height="15" fill="rgb(222,56,52)" fg:x="110" fg:w="1"/><text x="2.2227%" y="1071.50"></text></g><g><title>databend-query`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="1.9727%" y="1045" width="0.0179%" height="15" fill="rgb(245,217,50)" fg:x="110" fg:w="1"/><text x="2.2227%" y="1055.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_config::inner::InnerConfig&gt; (1 samples, 0.02%)</title><rect x="1.9907%" y="1077" width="0.0179%" height="15" fill="rgb(213,201,24)" fg:x="111" fg:w="1"/><text x="2.2407%" y="1087.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="2.0086%" y="1061" width="0.0179%" height="15" fill="rgb(248,116,28)" fg:x="112" fg:w="1"/><text x="2.2586%" y="1071.50"></text></g><g><title>dyld`start (114 samples, 2.04%)</title><rect x="0.0000%" y="1381" width="2.0445%" height="15" fill="rgb(219,72,43)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1391.50">d..</text></g><g><title>databend-query`main (114 samples, 2.04%)</title><rect x="0.0000%" y="1365" width="2.0445%" height="15" fill="rgb(209,138,14)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1375.50">d..</text></g><g><title>databend-query`std::rt::lang_start (114 samples, 2.04%)</title><rect x="0.0000%" y="1349" width="2.0445%" height="15" fill="rgb(222,18,33)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1359.50">d..</text></g><g><title>databend-query`std::rt::lang_start_internal (114 samples, 2.04%)</title><rect x="0.0000%" y="1333" width="2.0445%" height="15" fill="rgb(213,199,7)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1343.50">d..</text></g><g><title>databend-query`std::rt::lang_start::_{{closure}} (114 samples, 2.04%)</title><rect x="0.0000%" y="1317" width="2.0445%" height="15" fill="rgb(250,110,10)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1327.50">d..</text></g><g><title>databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace (114 samples, 2.04%)</title><rect x="0.0000%" y="1301" width="2.0445%" height="15" fill="rgb(248,123,6)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1311.50">d..</text></g><g><title>databend-query`databend_query::main (114 samples, 2.04%)</title><rect x="0.0000%" y="1285" width="2.0445%" height="15" fill="rgb(206,91,31)" fg:x="0" fg:w="114"/><text x="0.2500%" y="1295.50">d..</text></g><g><title>databend-query`tokio::runtime::context::runtime::enter_runtime (113 samples, 2.03%)</title><rect x="0.0179%" y="1269" width="2.0265%" height="15" fill="rgb(211,154,13)" fg:x="1" fg:w="113"/><text x="0.2679%" y="1279.50">d..</text></g><g><title>databend-query`tokio::runtime::context::blocking::BlockingRegionGuard::block_on (113 samples, 2.03%)</title><rect x="0.0179%" y="1253" width="2.0265%" height="15" fill="rgb(225,148,7)" fg:x="1" fg:w="113"/><text x="0.2679%" y="1263.50">d..</text></g><g><title>databend-query`&lt;databend_common_base::runtime::catch_unwind::CatchUnwindFuture&lt;F&gt; as core::future::future::Future&gt;::poll (113 samples, 2.03%)</title><rect x="0.0179%" y="1237" width="2.0265%" height="15" fill="rgb(220,160,43)" fg:x="1" fg:w="113"/><text x="0.2679%" y="1247.50">d..</text></g><g><title>databend-query`std::panicking::try (113 samples, 2.03%)</title><rect x="0.0179%" y="1221" width="2.0265%" height="15" fill="rgb(213,52,39)" fg:x="1" fg:w="113"/><text x="0.2679%" y="1231.50">d..</text></g><g><title>databend-query`&lt;async_backtrace::framed::Framed&lt;F&gt; as core::future::future::Future&gt;::poll{{reify.shim}} (113 samples, 2.03%)</title><rect x="0.0179%" y="1205" width="2.0265%" height="15" fill="rgb(243,137,7)" fg:x="1" fg:w="113"/><text x="0.2679%" y="1215.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (113 samples, 2.03%)</title><rect x="0.0179%" y="1189" width="2.0265%" height="15" fill="rgb(230,79,13)" fg:x="1" fg:w="113"/><text x="0.2679%" y="1199.50">d..</text></g><g><title>databend-query`databend_query::main_entrypoint::_{{closure}} (113 samples, 2.03%)</title><rect x="0.0179%" y="1173" width="2.0265%" height="15" fill="rgb(247,105,23)" fg:x="1" fg:w="113"/><text x="0.2679%" y="1183.50">d..</text></g><g><title>databend-query`databend_query::global_services::GlobalServices::init::_{{closure}} (108 samples, 1.94%)</title><rect x="0.1076%" y="1157" width="1.9369%" height="15" fill="rgb(223,179,41)" fg:x="6" fg:w="108"/><text x="0.3576%" y="1167.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (108 samples, 1.94%)</title><rect x="0.1076%" y="1141" width="1.9369%" height="15" fill="rgb(218,9,34)" fg:x="6" fg:w="108"/><text x="0.3576%" y="1151.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (108 samples, 1.94%)</title><rect x="0.1076%" y="1125" width="1.9369%" height="15" fill="rgb(222,106,8)" fg:x="6" fg:w="108"/><text x="0.3576%" y="1135.50">d..</text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.07%)</title><rect x="1.9727%" y="1109" width="0.0717%" height="15" fill="rgb(211,220,0)" fg:x="110" fg:w="4"/><text x="2.2227%" y="1119.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="1.9907%" y="1093" width="0.0538%" height="15" fill="rgb(229,52,16)" fg:x="111" fg:w="3"/><text x="2.2407%" y="1103.50"></text></g><g><title>databend-query`databend_query::databases::system::system_database::SystemDatabase::create (2 samples, 0.04%)</title><rect x="2.0086%" y="1077" width="0.0359%" height="15" fill="rgb(212,155,18)" fg:x="112" fg:w="2"/><text x="2.2586%" y="1087.50"></text></g><g><title>databend-query`databend_common_storages_system::log_queue::SystemLogTable&lt;Event&gt;::create (1 samples, 0.02%)</title><rect x="2.0265%" y="1061" width="0.0179%" height="15" fill="rgb(242,21,14)" fg:x="113" fg:w="1"/><text x="2.2765%" y="1071.50"></text></g><g><title>databend-query`databend_common_storages_system::log_queue::SystemLogQueue&lt;Event&gt;::init (1 samples, 0.02%)</title><rect x="2.0265%" y="1045" width="0.0179%" height="15" fill="rgb(222,19,48)" fg:x="113" fg:w="1"/><text x="2.2765%" y="1055.50"></text></g><g><title>databend-query`databend_common_storages_system::log_queue::SystemLogQueue&lt;Event&gt;::create (1 samples, 0.02%)</title><rect x="2.0265%" y="1029" width="0.0179%" height="15" fill="rgb(232,45,27)" fg:x="113" fg:w="1"/><text x="2.2765%" y="1039.50"></text></g><g><title>databend-query`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="2.0265%" y="1013" width="0.0179%" height="15" fill="rgb(249,103,42)" fg:x="113" fg:w="1"/><text x="2.2765%" y="1023.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="2.0265%" y="997" width="0.0179%" height="15" fill="rgb(246,81,33)" fg:x="113" fg:w="1"/><text x="2.2765%" y="1007.50"></text></g><g><title>Security`Attachment::detach (1 samples, 0.02%)</title><rect x="2.0445%" y="1013" width="0.0179%" height="15" fill="rgb(252,33,42)" fg:x="114" fg:w="1"/><text x="2.2945%" y="1023.50"></text></g><g><title>Security`CSSM_SPI_ModuleDetach__apple_cspdl (1 samples, 0.02%)</title><rect x="2.0445%" y="997" width="0.0179%" height="15" fill="rgb(209,212,41)" fg:x="114" fg:w="1"/><text x="2.2945%" y="1007.50"></text></g><g><title>Security`Security::CssmPlugin::moduleDetach (1 samples, 0.02%)</title><rect x="2.0445%" y="981" width="0.0179%" height="15" fill="rgb(207,154,6)" fg:x="114" fg:w="1"/><text x="2.2945%" y="991.50"></text></g><g><title>Security`SSDLSession::~SSDLSession (1 samples, 0.02%)</title><rect x="2.0445%" y="965" width="0.0179%" height="15" fill="rgb(223,64,47)" fg:x="114" fg:w="1"/><text x="2.2945%" y="975.50"></text></g><g><title>Security`SSDLSession::~SSDLSession (1 samples, 0.02%)</title><rect x="2.0445%" y="949" width="0.0179%" height="15" fill="rgb(211,161,38)" fg:x="114" fg:w="1"/><text x="2.2945%" y="959.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::close (1 samples, 0.02%)</title><rect x="2.0445%" y="933" width="0.0179%" height="15" fill="rgb(219,138,40)" fg:x="114" fg:w="1"/><text x="2.2945%" y="943.50"></text></g><g><title>Security`CSSM_DL_DbClose (1 samples, 0.02%)</title><rect x="2.0445%" y="917" width="0.0179%" height="15" fill="rgb(241,228,46)" fg:x="114" fg:w="1"/><text x="2.2945%" y="927.50"></text></g><g><title>Security`cssm_DbClose(cssm_dl_db_handle) (1 samples, 0.02%)</title><rect x="2.0445%" y="901" width="0.0179%" height="15" fill="rgb(223,209,38)" fg:x="114" fg:w="1"/><text x="2.2945%" y="911.50"></text></g><g><title>Security`Security::DatabaseSession::DbClose (1 samples, 0.02%)</title><rect x="2.0445%" y="885" width="0.0179%" height="15" fill="rgb(236,164,45)" fg:x="114" fg:w="1"/><text x="2.2945%" y="895.50"></text></g><g><title>Security`Security::DatabaseManager::dbClose (1 samples, 0.02%)</title><rect x="2.0445%" y="869" width="0.0179%" height="15" fill="rgb(231,15,5)" fg:x="114" fg:w="1"/><text x="2.2945%" y="879.50"></text></g><g><title>Security`Security::Database::_dbClose (1 samples, 0.02%)</title><rect x="2.0445%" y="853" width="0.0179%" height="15" fill="rgb(252,35,15)" fg:x="114" fg:w="1"/><text x="2.2945%" y="863.50"></text></g><g><title>Security`Security::AppleDatabase::dbClose (1 samples, 0.02%)</title><rect x="2.0445%" y="837" width="0.0179%" height="15" fill="rgb(248,181,18)" fg:x="114" fg:w="1"/><text x="2.2945%" y="847.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::DbVersion const&gt;::setPointer (1 samples, 0.02%)</title><rect x="2.0445%" y="821" width="0.0179%" height="15" fill="rgb(233,39,42)" fg:x="114" fg:w="1"/><text x="2.2945%" y="831.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::DbVersion const&gt;::release_internal (1 samples, 0.02%)</title><rect x="2.0445%" y="805" width="0.0179%" height="15" fill="rgb(238,110,33)" fg:x="114" fg:w="1"/><text x="2.2945%" y="815.50"></text></g><g><title>Security`Security::Table::~Table (1 samples, 0.02%)</title><rect x="2.0445%" y="789" width="0.0179%" height="15" fill="rgb(233,195,10)" fg:x="114" fg:w="1"/><text x="2.2945%" y="799.50"></text></g><g><title>libdispatch.dylib`_dispatch_worker_thread2 (2 samples, 0.04%)</title><rect x="2.0445%" y="1349" width="0.0359%" height="15" fill="rgb(254,105,3)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1359.50"></text></g><g><title>libdispatch.dylib`_dispatch_root_queue_drain (2 samples, 0.04%)</title><rect x="2.0445%" y="1333" width="0.0359%" height="15" fill="rgb(221,225,9)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1343.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.04%)</title><rect x="2.0445%" y="1317" width="0.0359%" height="15" fill="rgb(224,227,45)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1327.50"></text></g><g><title>libdispatch.dylib`_dispatch_call_block_and_release (2 samples, 0.04%)</title><rect x="2.0445%" y="1301" width="0.0359%" height="15" fill="rgb(229,198,43)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1311.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.04%)</title><rect x="2.0445%" y="1285" width="0.0359%" height="15" fill="rgb(206,209,35)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1295.50"></text></g><g><title>Security`Security::CFClass::refCountForType (2 samples, 0.04%)</title><rect x="2.0445%" y="1269" width="0.0359%" height="15" fill="rgb(245,195,53)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1279.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::~KeychainImpl (2 samples, 0.04%)</title><rect x="2.0445%" y="1253" width="0.0359%" height="15" fill="rgb(240,92,26)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1263.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::~KeychainImpl (2 samples, 0.04%)</title><rect x="2.0445%" y="1237" width="0.0359%" height="15" fill="rgb(207,40,23)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1247.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (2 samples, 0.04%)</title><rect x="2.0445%" y="1221" width="0.0359%" height="15" fill="rgb(223,111,35)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1231.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (2 samples, 0.04%)</title><rect x="2.0445%" y="1205" width="0.0359%" height="15" fill="rgb(229,147,28)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1215.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (2 samples, 0.04%)</title><rect x="2.0445%" y="1189" width="0.0359%" height="15" fill="rgb(211,29,28)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1199.50"></text></g><g><title>Security`Security::CssmClient::SSDbImpl::~SSDbImpl (2 samples, 0.04%)</title><rect x="2.0445%" y="1173" width="0.0359%" height="15" fill="rgb(228,72,33)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1183.50"></text></g><g><title>Security`Security::CssmClient::ObjectImpl::~ObjectImpl (2 samples, 0.04%)</title><rect x="2.0445%" y="1157" width="0.0359%" height="15" fill="rgb(205,214,31)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1167.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (2 samples, 0.04%)</title><rect x="2.0445%" y="1141" width="0.0359%" height="15" fill="rgb(224,111,15)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1151.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (2 samples, 0.04%)</title><rect x="2.0445%" y="1125" width="0.0359%" height="15" fill="rgb(253,21,26)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1135.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (2 samples, 0.04%)</title><rect x="2.0445%" y="1109" width="0.0359%" height="15" fill="rgb(245,139,43)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1119.50"></text></g><g><title>Security`non-virtual thunk to Security::CssmClient::SSCSPDLImpl::~SSCSPDLImpl (2 samples, 0.04%)</title><rect x="2.0445%" y="1093" width="0.0359%" height="15" fill="rgb(252,170,7)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1103.50"></text></g><g><title>Security`Security::CssmClient::CSPDLImpl::~CSPDLImpl (2 samples, 0.04%)</title><rect x="2.0445%" y="1077" width="0.0359%" height="15" fill="rgb(231,118,14)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1087.50"></text></g><g><title>Security`Security::CssmClient::AttachmentImpl::~AttachmentImpl (2 samples, 0.04%)</title><rect x="2.0445%" y="1061" width="0.0359%" height="15" fill="rgb(238,83,0)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1071.50"></text></g><g><title>Security`Security::CssmClient::AttachmentImpl::deactivate (2 samples, 0.04%)</title><rect x="2.0445%" y="1045" width="0.0359%" height="15" fill="rgb(221,39,39)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1055.50"></text></g><g><title>Security`CSSM_ModuleDetach (2 samples, 0.04%)</title><rect x="2.0445%" y="1029" width="0.0359%" height="15" fill="rgb(222,119,46)" fg:x="114" fg:w="2"/><text x="2.2945%" y="1039.50"></text></g><g><title>Security`countLegacyAPI (1 samples, 0.02%)</title><rect x="2.0624%" y="1013" width="0.0179%" height="15" fill="rgb(222,165,49)" fg:x="115" fg:w="1"/><text x="2.3124%" y="1023.50"></text></g><g><title>Foundation`_NSThreadGet0 (1 samples, 0.02%)</title><rect x="2.0624%" y="997" width="0.0179%" height="15" fill="rgb(219,113,52)" fg:x="115" fg:w="1"/><text x="2.3124%" y="1007.50"></text></g><g><title>Foundation`-[NSThread init] (1 samples, 0.02%)</title><rect x="2.0624%" y="981" width="0.0179%" height="15" fill="rgb(214,7,15)" fg:x="115" fg:w="1"/><text x="2.3124%" y="991.50"></text></g><g><title>libobjc.A.dylib`objc_opt_new (1 samples, 0.02%)</title><rect x="2.0624%" y="965" width="0.0179%" height="15" fill="rgb(235,32,4)" fg:x="115" fg:w="1"/><text x="2.3124%" y="975.50"></text></g><g><title>libobjc.A.dylib`_objc_rootAllocWithZone (1 samples, 0.02%)</title><rect x="2.0624%" y="949" width="0.0179%" height="15" fill="rgb(238,90,54)" fg:x="115" fg:w="1"/><text x="2.3124%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.02%)</title><rect x="2.0624%" y="933" width="0.0179%" height="15" fill="rgb(213,208,19)" fg:x="115" fg:w="1"/><text x="2.3124%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.02%)</title><rect x="2.0624%" y="917" width="0.0179%" height="15" fill="rgb(233,156,4)" fg:x="115" fg:w="1"/><text x="2.3124%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="2.0624%" y="901" width="0.0179%" height="15" fill="rgb(207,194,5)" fg:x="115" fg:w="1"/><text x="2.3124%" y="911.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (3 samples, 0.05%)</title><rect x="2.0445%" y="1381" width="0.0538%" height="15" fill="rgb(206,111,30)" fg:x="114" fg:w="3"/><text x="2.2945%" y="1391.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (3 samples, 0.05%)</title><rect x="2.0445%" y="1365" width="0.0538%" height="15" fill="rgb(243,70,54)" fg:x="114" fg:w="3"/><text x="2.2945%" y="1375.50"></text></g><g><title>libdispatch.dylib`_dispatch_workloop_worker_thread (1 samples, 0.02%)</title><rect x="2.0803%" y="1349" width="0.0179%" height="15" fill="rgb(242,28,8)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1359.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (1 samples, 0.02%)</title><rect x="2.0803%" y="1333" width="0.0179%" height="15" fill="rgb(219,106,18)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1343.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (1 samples, 0.02%)</title><rect x="2.0803%" y="1317" width="0.0179%" height="15" fill="rgb(244,222,10)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1327.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="2.0803%" y="1301" width="0.0179%" height="15" fill="rgb(236,179,52)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1311.50"></text></g><g><title>libdispatch.dylib`_dispatch_block_async_invoke2 (1 samples, 0.02%)</title><rect x="2.0803%" y="1285" width="0.0179%" height="15" fill="rgb(213,23,39)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1295.50"></text></g><g><title>CoreAnalytics`invocation function for block in CoreAnalytics::Client::sendXpcMessage_sync (1 samples, 0.02%)</title><rect x="2.0803%" y="1269" width="0.0179%" height="15" fill="rgb(238,48,10)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1279.50"></text></g><g><title>CoreAnalytics`CoreAnalytics::Client::retryXpcMessage_sync (1 samples, 0.02%)</title><rect x="2.0803%" y="1253" width="0.0179%" height="15" fill="rgb(251,196,23)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1263.50"></text></g><g><title>CoreAnalytics`CoreAnalytics::Client::retryXpcMessageHelper_sync (1 samples, 0.02%)</title><rect x="2.0803%" y="1237" width="0.0179%" height="15" fill="rgb(250,152,24)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1247.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply (1 samples, 0.02%)</title><rect x="2.0803%" y="1221" width="0.0179%" height="15" fill="rgb(209,150,17)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1231.50"></text></g><g><title>libxpc.dylib`_xpc_connection_pack_message (1 samples, 0.02%)</title><rect x="2.0803%" y="1205" width="0.0179%" height="15" fill="rgb(234,202,34)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1215.50"></text></g><g><title>libxpc.dylib`_xpc_serializer_pack (1 samples, 0.02%)</title><rect x="2.0803%" y="1189" width="0.0179%" height="15" fill="rgb(253,148,53)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1199.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_msg_create (1 samples, 0.02%)</title><rect x="2.0803%" y="1173" width="0.0179%" height="15" fill="rgb(218,129,16)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1183.50"></text></g><g><title>libdispatch.dylib`_os_object_alloc_realized (1 samples, 0.02%)</title><rect x="2.0803%" y="1157" width="0.0179%" height="15" fill="rgb(216,85,19)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1167.50"></text></g><g><title>libobjc.A.dylib`class_createInstance (1 samples, 0.02%)</title><rect x="2.0803%" y="1141" width="0.0179%" height="15" fill="rgb(235,228,7)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.02%)</title><rect x="2.0803%" y="1125" width="0.0179%" height="15" fill="rgb(245,175,0)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="2.0803%" y="1109" width="0.0179%" height="15" fill="rgb(208,168,36)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="2.0803%" y="1093" width="0.0179%" height="15" fill="rgb(246,171,24)" fg:x="116" fg:w="1"/><text x="2.3303%" y="1103.50"></text></g><g><title>databend-query`databend_common_pipeline_core::processors::processor::Processor::event_with_cause (1 samples, 0.02%)</title><rect x="2.0983%" y="1189" width="0.0179%" height="15" fill="rgb(215,142,24)" fg:x="117" fg:w="1"/><text x="2.3483%" y="1199.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransformer&lt;T&gt; as databend_common_pipeline_core::processors::processor::Processor&gt;::event (1 samples, 0.02%)</title><rect x="2.1162%" y="1173" width="0.0179%" height="15" fill="rgb(250,187,7)" fg:x="118" fg:w="1"/><text x="2.3662%" y="1183.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="2.1341%" y="1157" width="0.0179%" height="15" fill="rgb(228,66,33)" fg:x="119" fg:w="1"/><text x="2.3841%" y="1167.50"></text></g><g><title>databend-query`&lt;databend_common_storages_fuse::operations::read::parquet_data_source_deserializer::DeserializeDataTransform as databend_common_pipeline_core::processors::processor::Processor&gt;::event (2 samples, 0.04%)</title><rect x="2.1341%" y="1173" width="0.0359%" height="15" fill="rgb(234,215,21)" fg:x="119" fg:w="2"/><text x="2.3841%" y="1183.50"></text></g><g><title>databend-query`databend_common_storages_fuse::io::read::block::decompressor::UncompressedBuffer::clear (1 samples, 0.02%)</title><rect x="2.1521%" y="1157" width="0.0179%" height="15" fill="rgb(222,191,20)" fg:x="120" fg:w="1"/><text x="2.4021%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="2.1521%" y="1141" width="0.0179%" height="15" fill="rgb(245,79,54)" fg:x="120" fg:w="1"/><text x="2.4021%" y="1151.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="2.1521%" y="1125" width="0.0179%" height="15" fill="rgb(240,10,37)" fg:x="120" fg:w="1"/><text x="2.4021%" y="1135.50"></text></g><g><title>databend-query`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="2.1700%" y="1109" width="0.0179%" height="15" fill="rgb(214,192,32)" fg:x="121" fg:w="1"/><text x="2.4200%" y="1119.50"></text></g><g><title>databend-query`core::hash::BuildHasher::hash_one (10 samples, 0.18%)</title><rect x="2.1879%" y="1109" width="0.1793%" height="15" fill="rgb(209,36,54)" fg:x="122" fg:w="10"/><text x="2.4379%" y="1119.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.14%)</title><rect x="2.3673%" y="1109" width="0.1435%" height="15" fill="rgb(220,10,11)" fg:x="132" fg:w="8"/><text x="2.6173%" y="1119.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::hash_join::transform_hash_join_build::TransformHashJoinBuild as databend_common_pipeline_core::processors::processor::Processor&gt;::event (21 samples, 0.38%)</title><rect x="2.1700%" y="1173" width="0.3766%" height="15" fill="rgb(221,106,17)" fg:x="121" fg:w="21"/><text x="2.4200%" y="1183.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_build_state::HashJoinBuildState::row_space_build_done (21 samples, 0.38%)</title><rect x="2.1700%" y="1157" width="0.3766%" height="15" fill="rgb(251,142,44)" fg:x="121" fg:w="21"/><text x="2.4200%" y="1167.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_build_state::HashJoinBuildState::add_build_block (21 samples, 0.38%)</title><rect x="2.1700%" y="1141" width="0.3766%" height="15" fill="rgb(238,13,15)" fg:x="121" fg:w="21"/><text x="2.4200%" y="1151.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.38%)</title><rect x="2.1700%" y="1125" width="0.3766%" height="15" fill="rgb(208,107,27)" fg:x="121" fg:w="21"/><text x="2.4200%" y="1135.50"></text></g><g><title>databend-query`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.04%)</title><rect x="2.5108%" y="1109" width="0.0359%" height="15" fill="rgb(205,136,37)" fg:x="140" fg:w="2"/><text x="2.7608%" y="1119.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::RunningGraph::schedule_queue (26 samples, 0.47%)</title><rect x="2.0983%" y="1205" width="0.4663%" height="15" fill="rgb(250,205,27)" fg:x="117" fg:w="26"/><text x="2.3483%" y="1215.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ExecutingGraph::schedule_queue (25 samples, 0.45%)</title><rect x="2.1162%" y="1189" width="0.4484%" height="15" fill="rgb(210,80,43)" fg:x="118" fg:w="25"/><text x="2.3662%" y="1199.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.02%)</title><rect x="2.5466%" y="1173" width="0.0179%" height="15" fill="rgb(247,160,36)" fg:x="142" fg:w="1"/><text x="2.7966%" y="1183.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.02%)</title><rect x="2.5466%" y="1157" width="0.0179%" height="15" fill="rgb(234,13,49)" fg:x="142" fg:w="1"/><text x="2.7966%" y="1167.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="2.5466%" y="1141" width="0.0179%" height="15" fill="rgb(234,122,0)" fg:x="142" fg:w="1"/><text x="2.7966%" y="1151.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="2.5466%" y="1125" width="0.0179%" height="15" fill="rgb(207,146,38)" fg:x="142" fg:w="1"/><text x="2.7966%" y="1135.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="2.5466%" y="1109" width="0.0179%" height="15" fill="rgb(207,177,25)" fg:x="142" fg:w="1"/><text x="2.7966%" y="1119.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="2.5646%" y="1173" width="0.0179%" height="15" fill="rgb(211,178,42)" fg:x="143" fg:w="1"/><text x="2.8146%" y="1183.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="2.5646%" y="1157" width="0.0179%" height="15" fill="rgb(230,69,54)" fg:x="143" fg:w="1"/><text x="2.8146%" y="1167.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="2.5646%" y="1141" width="0.0179%" height="15" fill="rgb(214,135,41)" fg:x="143" fg:w="1"/><text x="2.8146%" y="1151.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="2.5646%" y="1125" width="0.0179%" height="15" fill="rgb(237,67,25)" fg:x="143" fg:w="1"/><text x="2.8146%" y="1135.50"></text></g><g><title>databend-query`__rust_realloc (1 samples, 0.02%)</title><rect x="2.5646%" y="1109" width="0.0179%" height="15" fill="rgb(222,189,50)" fg:x="143" fg:w="1"/><text x="2.8146%" y="1119.50"></text></g><g><title>databend-query`databend_common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for databend_common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (1 samples, 0.02%)</title><rect x="2.5646%" y="1093" width="0.0179%" height="15" fill="rgb(245,148,34)" fg:x="143" fg:w="1"/><text x="2.8146%" y="1103.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (1 samples, 0.02%)</title><rect x="2.5646%" y="1077" width="0.0179%" height="15" fill="rgb(222,29,6)" fg:x="143" fg:w="1"/><text x="2.8146%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="2.5646%" y="1061" width="0.0179%" height="15" fill="rgb(221,189,43)" fg:x="143" fg:w="1"/><text x="2.8146%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="2.5646%" y="1045" width="0.0179%" height="15" fill="rgb(207,36,27)" fg:x="143" fg:w="1"/><text x="2.8146%" y="1055.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="2.5825%" y="1173" width="0.0179%" height="15" fill="rgb(217,90,24)" fg:x="144" fg:w="1"/><text x="2.8325%" y="1183.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as databend_common_catalog::table_context::TableContext&gt;::get_runtime_filter_with_id (27 samples, 0.48%)</title><rect x="2.6004%" y="1141" width="0.4842%" height="15" fill="rgb(224,66,35)" fg:x="145" fg:w="27"/><text x="2.8504%" y="1151.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.48%)</title><rect x="2.6004%" y="1125" width="0.4842%" height="15" fill="rgb(221,13,50)" fg:x="145" fg:w="27"/><text x="2.8504%" y="1135.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.48%)</title><rect x="2.6004%" y="1109" width="0.4842%" height="15" fill="rgb(236,68,49)" fg:x="145" fg:w="27"/><text x="2.8504%" y="1119.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_catalog::runtime_filter_info::RuntimeFilterInfo&gt; (1 samples, 0.02%)</title><rect x="3.0846%" y="1141" width="0.0179%" height="15" fill="rgb(229,146,28)" fg:x="172" fg:w="1"/><text x="3.3346%" y="1151.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="3.0846%" y="1125" width="0.0179%" height="15" fill="rgb(225,31,38)" fg:x="172" fg:w="1"/><text x="3.3346%" y="1135.50"></text></g><g><title>databend-query`&lt;opendal::layers::type_eraser::TypeEraseAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (1 samples, 0.02%)</title><rect x="3.1026%" y="1093" width="0.0179%" height="15" fill="rgb(250,208,3)" fg:x="173" fg:w="1"/><text x="3.3526%" y="1103.50"></text></g><g><title>databend-query`&lt;databend_common_storage::metrics::StorageMetricsAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (1 samples, 0.02%)</title><rect x="3.1026%" y="1077" width="0.0179%" height="15" fill="rgb(246,54,23)" fg:x="173" fg:w="1"/><text x="3.3526%" y="1087.50"></text></g><g><title>databend-query`&lt;opendal::layers::prometheus_client::PrometheusAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (1 samples, 0.02%)</title><rect x="3.1026%" y="1061" width="0.0179%" height="15" fill="rgb(243,76,11)" fg:x="173" fg:w="1"/><text x="3.3526%" y="1071.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn opendal::raw::oio::read::api::BlockingRead&gt;&gt; (1 samples, 0.02%)</title><rect x="3.1205%" y="1093" width="0.0179%" height="15" fill="rgb(245,21,50)" fg:x="174" fg:w="1"/><text x="3.3705%" y="1103.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_storage::metrics::StorageMetricsWrapper&lt;alloc::boxed::Box&lt;dyn opendal::raw::oio::read::api::BlockingRead&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="3.1205%" y="1077" width="0.0179%" height="15" fill="rgb(228,9,43)" fg:x="174" fg:w="1"/><text x="3.3705%" y="1087.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;opendal::layers::prometheus_client::PrometheusMetricWrapper&lt;opendal::layers::minitrace::MinitraceWrapper&lt;opendal::layers::logging::LoggingReader&lt;opendal::layers::retry::RetryWrapper&lt;opendal::layers::complete::CompleteReader&lt;opendal::layers::error_context::ErrorContextAccessor&lt;opendal::services::fs::backend::FsBackend&gt;,opendal::layers::error_context::ErrorContextWrapper&lt;opendal::raw::oio::read::std_read::StdReader&lt;std::fs::File&gt;&gt;&gt;,opendal::layers::retry::DefaultRetryInterceptor&gt;&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="3.1205%" y="1061" width="0.0179%" height="15" fill="rgb(208,100,47)" fg:x="174" fg:w="1"/><text x="3.3705%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.02%)</title><rect x="3.1205%" y="1045" width="0.0179%" height="15" fill="rgb(232,26,8)" fg:x="174" fg:w="1"/><text x="3.3705%" y="1055.50"></text></g><g><title>databend-query`&lt;opendal::services::fs::backend::FsBackend as opendal::raw::accessor::Accessor&gt;::blocking_read (8 samples, 0.14%)</title><rect x="3.1385%" y="965" width="0.1435%" height="15" fill="rgb(216,166,38)" fg:x="175" fg:w="8"/><text x="3.3885%" y="975.50"></text></g><g><title>databend-query`std::fs::OpenOptions::open (8 samples, 0.14%)</title><rect x="3.1385%" y="949" width="0.1435%" height="15" fill="rgb(251,202,51)" fg:x="175" fg:w="8"/><text x="3.3885%" y="959.50"></text></g><g><title>databend-query`std::fs::OpenOptions::_open (8 samples, 0.14%)</title><rect x="3.1385%" y="933" width="0.1435%" height="15" fill="rgb(254,216,34)" fg:x="175" fg:w="8"/><text x="3.3885%" y="943.50"></text></g><g><title>databend-query`std::sys::unix::fs::File::open_c (8 samples, 0.14%)</title><rect x="3.1385%" y="917" width="0.1435%" height="15" fill="rgb(251,32,27)" fg:x="175" fg:w="8"/><text x="3.3885%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`__open (8 samples, 0.14%)</title><rect x="3.1385%" y="901" width="0.1435%" height="15" fill="rgb(208,127,28)" fg:x="175" fg:w="8"/><text x="3.3885%" y="911.50"></text></g><g><title>databend-query`&lt;opendal::layers::error_context::ErrorContextAccessor&lt;A&gt; as opendal::raw::layer::LayeredAccessor&gt;::blocking_read (9 samples, 0.16%)</title><rect x="3.1385%" y="981" width="0.1614%" height="15" fill="rgb(224,137,22)" fg:x="175" fg:w="9"/><text x="3.3885%" y="991.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="3.2819%" y="965" width="0.0179%" height="15" fill="rgb(254,70,32)" fg:x="183" fg:w="1"/><text x="3.5319%" y="975.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="3.2819%" y="949" width="0.0179%" height="15" fill="rgb(229,75,37)" fg:x="183" fg:w="1"/><text x="3.5319%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="3.2819%" y="933" width="0.0179%" height="15" fill="rgb(252,64,23)" fg:x="183" fg:w="1"/><text x="3.5319%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="3.2819%" y="917" width="0.0179%" height="15" fill="rgb(232,162,48)" fg:x="183" fg:w="1"/><text x="3.5319%" y="927.50"></text></g><g><title>databend-query`&lt;opendal::layers::error_context::ErrorContextWrapper&lt;T&gt; as opendal::raw::oio::read::api::BlockingRead&gt;::read (104 samples, 1.87%)</title><rect x="3.2999%" y="981" width="1.8651%" height="15" fill="rgb(246,160,12)" fg:x="184" fg:w="104"/><text x="3.5499%" y="991.50">d..</text></g><g><title>databend-query`&lt;opendal::raw::oio::read::std_read::StdReader&lt;R&gt; as opendal::raw::oio::read::api::BlockingRead&gt;::read (104 samples, 1.87%)</title><rect x="3.2999%" y="965" width="1.8651%" height="15" fill="rgb(247,166,0)" fg:x="184" fg:w="104"/><text x="3.5499%" y="975.50">d..</text></g><g><title>libsystem_kernel.dylib`read (104 samples, 1.87%)</title><rect x="3.2999%" y="949" width="1.8651%" height="15" fill="rgb(249,219,21)" fg:x="184" fg:w="104"/><text x="3.5499%" y="959.50">l..</text></g><g><title>databend-query`&lt;opendal::layers::prometheus_client::PrometheusMetricWrapper&lt;R&gt; as opendal::raw::oio::read::api::BlockingRead&gt;::read (114 samples, 2.04%)</title><rect x="3.1385%" y="1077" width="2.0445%" height="15" fill="rgb(205,209,3)" fg:x="175" fg:w="114"/><text x="3.3885%" y="1087.50">d..</text></g><g><title>databend-query`&lt;opendal::layers::minitrace::MinitraceWrapper&lt;R&gt; as opendal::raw::oio::read::api::BlockingRead&gt;::read (114 samples, 2.04%)</title><rect x="3.1385%" y="1061" width="2.0445%" height="15" fill="rgb(243,44,1)" fg:x="175" fg:w="114"/><text x="3.3885%" y="1071.50">d..</text></g><g><title>databend-query`&lt;opendal::layers::logging::LoggingReader&lt;R&gt; as opendal::raw::oio::read::api::BlockingRead&gt;::read (114 samples, 2.04%)</title><rect x="3.1385%" y="1045" width="2.0445%" height="15" fill="rgb(206,159,16)" fg:x="175" fg:w="114"/><text x="3.3885%" y="1055.50">d..</text></g><g><title>databend-query`&lt;opendal::layers::retry::RetryWrapper&lt;R,I&gt; as opendal::raw::oio::read::api::BlockingRead&gt;::read (114 samples, 2.04%)</title><rect x="3.1385%" y="1029" width="2.0445%" height="15" fill="rgb(244,77,30)" fg:x="175" fg:w="114"/><text x="3.3885%" y="1039.50">d..</text></g><g><title>databend-query`backon::blocking_retry::BlockingRetry&lt;B,T,E,F,RF,NF&gt;::call (114 samples, 2.04%)</title><rect x="3.1385%" y="1013" width="2.0445%" height="15" fill="rgb(218,69,12)" fg:x="175" fg:w="114"/><text x="3.3885%" y="1023.50">d..</text></g><g><title>databend-query`&lt;opendal::raw::oio::read::file_read::FileReader&lt;A,R&gt; as opendal::raw::oio::read::api::BlockingRead&gt;::read (114 samples, 2.04%)</title><rect x="3.1385%" y="997" width="2.0445%" height="15" fill="rgb(212,87,7)" fg:x="175" fg:w="114"/><text x="3.3885%" y="1007.50">d..</text></g><g><title>databend-query`core::ptr::drop_in_place&lt;opendal::raw::ops::OpRead&gt; (1 samples, 0.02%)</title><rect x="5.1650%" y="981" width="0.0179%" height="15" fill="rgb(245,114,25)" fg:x="288" fg:w="1"/><text x="5.4150%" y="991.50"></text></g><g><title>databend-query`core::ops::function::FnOnce::call_once (117 samples, 2.10%)</title><rect x="3.1026%" y="1109" width="2.0983%" height="15" fill="rgb(210,61,42)" fg:x="173" fg:w="117"/><text x="3.3526%" y="1119.50">d..</text></g><g><title>databend-query`opendal::raw::oio::read::api::BlockingRead::read_to_end (115 samples, 2.06%)</title><rect x="3.1385%" y="1093" width="2.0624%" height="15" fill="rgb(211,52,33)" fg:x="175" fg:w="115"/><text x="3.3885%" y="1103.50">d..</text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="5.1829%" y="1077" width="0.0179%" height="15" fill="rgb(234,58,33)" fg:x="289" fg:w="1"/><text x="5.4329%" y="1087.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="5.1829%" y="1061" width="0.0179%" height="15" fill="rgb(220,115,36)" fg:x="289" fg:w="1"/><text x="5.4329%" y="1071.50"></text></g><g><title>databend-query`databend_common_storages_fuse::io::read::block::block_reader_merge_io_sync::_&lt;impl databend_common_storages_fuse::io::read::block::block_reader::BlockReader&gt;::sync_merge_io_read (118 samples, 2.12%)</title><rect x="3.1026%" y="1125" width="2.1162%" height="15" fill="rgb(243,153,54)" fg:x="173" fg:w="118"/><text x="3.3526%" y="1135.50">d..</text></g><g><title>databend-query`opendal::raw::path::normalize_path (1 samples, 0.02%)</title><rect x="5.2009%" y="1109" width="0.0179%" height="15" fill="rgb(251,47,18)" fg:x="290" fg:w="1"/><text x="5.4509%" y="1119.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="5.2009%" y="1093" width="0.0179%" height="15" fill="rgb(242,102,42)" fg:x="290" fg:w="1"/><text x="5.4509%" y="1103.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="5.2009%" y="1077" width="0.0179%" height="15" fill="rgb(234,31,38)" fg:x="290" fg:w="1"/><text x="5.4509%" y="1087.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_sources::sync_source::SyncSourcer&lt;T&gt; as databend_common_pipeline_core::processors::processor::Processor&gt;::process (147 samples, 2.64%)</title><rect x="2.6004%" y="1173" width="2.6363%" height="15" fill="rgb(221,117,51)" fg:x="145" fg:w="147"/><text x="2.8504%" y="1183.50">da..</text></g><g><title>databend-query`&lt;databend_common_storages_fuse::operations::read::parquet_data_source_reader::ReadParquetDataSource&lt;_&gt; as databend_common_pipeline_sources::sync_source::SyncSource&gt;::generate (147 samples, 2.64%)</title><rect x="2.6004%" y="1157" width="2.6363%" height="15" fill="rgb(212,20,18)" fg:x="145" fg:w="147"/><text x="2.8504%" y="1167.50">da..</text></g><g><title>databend-query`databend_common_storages_fuse::io::read::block::block_reader_merge_io_sync::_&lt;impl databend_common_storages_fuse::io::read::block::block_reader::BlockReader&gt;::sync_read_columns_data_by_merge_io (119 samples, 2.13%)</title><rect x="3.1026%" y="1141" width="2.1341%" height="15" fill="rgb(245,133,36)" fg:x="173" fg:w="119"/><text x="3.3526%" y="1151.50">d..</text></g><g><title>databend-query`databend_storages_common_cache::providers::table_data_cache::TableDataCacheKey::new (1 samples, 0.02%)</title><rect x="5.2188%" y="1125" width="0.0179%" height="15" fill="rgb(212,6,19)" fg:x="291" fg:w="1"/><text x="5.4688%" y="1135.50"></text></g><g><title>databend-query`alloc::fmt::format::format_inner (1 samples, 0.02%)</title><rect x="5.2188%" y="1109" width="0.0179%" height="15" fill="rgb(218,1,36)" fg:x="291" fg:w="1"/><text x="5.4688%" y="1119.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.02%)</title><rect x="5.2188%" y="1093" width="0.0179%" height="15" fill="rgb(246,84,54)" fg:x="291" fg:w="1"/><text x="5.4688%" y="1103.50"></text></g><g><title>databend-query`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="5.2188%" y="1077" width="0.0179%" height="15" fill="rgb(242,110,6)" fg:x="291" fg:w="1"/><text x="5.4688%" y="1087.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="5.2188%" y="1061" width="0.0179%" height="15" fill="rgb(214,47,5)" fg:x="291" fg:w="1"/><text x="5.4688%" y="1071.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="5.2188%" y="1045" width="0.0179%" height="15" fill="rgb(218,159,25)" fg:x="291" fg:w="1"/><text x="5.4688%" y="1055.50"></text></g><g><title>databend-query`__rust_realloc (1 samples, 0.02%)</title><rect x="5.2188%" y="1029" width="0.0179%" height="15" fill="rgb(215,211,28)" fg:x="291" fg:w="1"/><text x="5.4688%" y="1039.50"></text></g><g><title>databend-query`databend_common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for databend_common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (1 samples, 0.02%)</title><rect x="5.2188%" y="1013" width="0.0179%" height="15" fill="rgb(238,59,32)" fg:x="291" fg:w="1"/><text x="5.4688%" y="1023.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (1 samples, 0.02%)</title><rect x="5.2188%" y="997" width="0.0179%" height="15" fill="rgb(226,82,3)" fg:x="291" fg:w="1"/><text x="5.4688%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="5.2188%" y="981" width="0.0179%" height="15" fill="rgb(240,164,32)" fg:x="291" fg:w="1"/><text x="5.4688%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="5.2188%" y="965" width="0.0179%" height="15" fill="rgb(232,46,7)" fg:x="291" fg:w="1"/><text x="5.4688%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="5.2188%" y="949" width="0.0179%" height="15" fill="rgb(229,129,53)" fg:x="291" fg:w="1"/><text x="5.4688%" y="959.50"></text></g><g><title>databend-query`&lt;databend_common_hashtable::table0::Table0Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="5.2367%" y="1157" width="0.0538%" height="15" fill="rgb(234,188,29)" fg:x="292" fg:w="3"/><text x="5.4867%" y="1167.50"></text></g><g><title>databend-query`&lt;databend_common_functions::aggregates::adaptors::aggregate_ornull_adaptor::AggregateFunctionOrNullAdaptor as databend_common_expression::aggregate::aggregate_function::AggregateFunction&gt;::merge_states (1 samples, 0.02%)</title><rect x="5.3085%" y="1141" width="0.0179%" height="15" fill="rgb(246,141,4)" fg:x="296" fg:w="1"/><text x="5.5585%" y="1151.50"></text></g><g><title>databend-query`&lt;databend_common_hashtable::hashtable::Hashtable&lt;K,V,A&gt; as databend_common_hashtable::traits::HashtableLike&gt;::insert (4 samples, 0.07%)</title><rect x="5.3264%" y="1141" width="0.0717%" height="15" fill="rgb(229,23,39)" fg:x="297" fg:w="4"/><text x="5.5764%" y="1151.50"></text></g><g><title>databend-query`databend_common_hashtable::table0::Table0&lt;K,V,C,A&gt;::grow (4 samples, 0.07%)</title><rect x="5.3264%" y="1125" width="0.0717%" height="15" fill="rgb(206,12,3)" fg:x="297" fg:w="4"/><text x="5.5764%" y="1135.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::group_by::aggregator_groups_builder::FixedKeysGroupColumnsBuilder&lt;T&gt; as databend_query::pipelines::processors::transforms::group_by::aggregator_groups_builder::GroupColumnsBuilder&gt;::finish (2 samples, 0.04%)</title><rect x="5.3981%" y="1141" width="0.0359%" height="15" fill="rgb(252,226,20)" fg:x="301" fg:w="2"/><text x="5.6481%" y="1151.50"></text></g><g><title>databend-query`databend_common_expression::kernels::group_by_hash::method_fixed_keys::HashMethodFixedKeys&lt;T&gt;::deserialize_group_columns (2 samples, 0.04%)</title><rect x="5.3981%" y="1125" width="0.0359%" height="15" fill="rgb(216,123,35)" fg:x="301" fg:w="2"/><text x="5.6481%" y="1135.50"></text></g><g><title>databend-query`databend_common_expression::values::ColumnBuilder::push_fix_len_binaries (1 samples, 0.02%)</title><rect x="5.4161%" y="1109" width="0.0179%" height="15" fill="rgb(212,68,40)" fg:x="302" fg:w="1"/><text x="5.6661%" y="1119.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;databend_query::pipelines::processors::transforms::group_by::aggregator_state::ArenaHolder&gt;&gt; (1 samples, 0.02%)</title><rect x="5.4340%" y="1125" width="0.0179%" height="15" fill="rgb(254,125,32)" fg:x="303" fg:w="1"/><text x="5.6840%" y="1135.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="5.4340%" y="1109" width="0.0179%" height="15" fill="rgb(253,97,22)" fg:x="303" fg:w="1"/><text x="5.6840%" y="1119.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="5.4340%" y="1093" width="0.0179%" height="15" fill="rgb(241,101,14)" fg:x="303" fg:w="1"/><text x="5.6840%" y="1103.50"></text></g><g><title>databend-query`&lt;bumpalo::Bump as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="5.4340%" y="1077" width="0.0179%" height="15" fill="rgb(238,103,29)" fg:x="303" fg:w="1"/><text x="5.6840%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="5.4340%" y="1061" width="0.0179%" height="15" fill="rgb(233,195,47)" fg:x="303" fg:w="1"/><text x="5.6840%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="5.4340%" y="1045" width="0.0179%" height="15" fill="rgb(246,218,30)" fg:x="303" fg:w="1"/><text x="5.6840%" y="1055.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::aggregator::aggregate_cell::HashTableCell&lt;databend_common_expression::kernels::group_by_hash::method_fixed_keys::HashMethodFixedKeys&lt;u128&gt;,usize&gt;&gt; (2 samples, 0.04%)</title><rect x="5.4340%" y="1141" width="0.0359%" height="15" fill="rgb(219,145,47)" fg:x="303" fg:w="2"/><text x="5.6840%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="5.4519%" y="1125" width="0.0179%" height="15" fill="rgb(243,12,26)" fg:x="304" fg:w="1"/><text x="5.7019%" y="1135.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="5.4519%" y="1109" width="0.0179%" height="15" fill="rgb(214,87,16)" fg:x="304" fg:w="1"/><text x="5.7019%" y="1119.50"></text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.02%)</title><rect x="5.4878%" y="1077" width="0.0179%" height="15" fill="rgb(208,99,42)" fg:x="306" fg:w="1"/><text x="5.7378%" y="1087.50"></text></g><g><title>databend-query`databend_common_expression::aggregate::aggregate_function::AggregateFunction::batch_merge_result (4 samples, 0.07%)</title><rect x="5.4699%" y="1141" width="0.0717%" height="15" fill="rgb(253,99,2)" fg:x="305" fg:w="4"/><text x="5.7199%" y="1151.50"></text></g><g><title>databend-query`&lt;databend_common_functions::aggregates::adaptors::aggregate_ornull_adaptor::AggregateFunctionOrNullAdaptor as databend_common_expression::aggregate::aggregate_function::AggregateFunction&gt;::merge_result (4 samples, 0.07%)</title><rect x="5.4699%" y="1125" width="0.0717%" height="15" fill="rgb(220,168,23)" fg:x="305" fg:w="4"/><text x="5.7199%" y="1135.50"></text></g><g><title>databend-query`databend_common_base::base::take_mut::take_mut (3 samples, 0.05%)</title><rect x="5.4878%" y="1109" width="0.0538%" height="15" fill="rgb(242,38,24)" fg:x="306" fg:w="3"/><text x="5.7378%" y="1119.50"></text></g><g><title>databend-query`databend_common_base::runtime::catch_unwind::catch_unwind (3 samples, 0.05%)</title><rect x="5.4878%" y="1093" width="0.0538%" height="15" fill="rgb(225,182,9)" fg:x="306" fg:w="3"/><text x="5.7378%" y="1103.50"></text></g><g><title>databend-query`std::panicking::try (2 samples, 0.04%)</title><rect x="5.5057%" y="1077" width="0.0359%" height="15" fill="rgb(243,178,37)" fg:x="307" fg:w="2"/><text x="5.7557%" y="1087.50"></text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.04%)</title><rect x="5.5057%" y="1061" width="0.0359%" height="15" fill="rgb(232,139,19)" fg:x="307" fg:w="2"/><text x="5.7557%" y="1071.50"></text></g><g><title>databend-query`&lt;databend_common_expression::types::number::NumberType&lt;Num&gt; as databend_common_expression::types::ValueType&gt;::try_downcast_owned_builder (1 samples, 0.02%)</title><rect x="5.5237%" y="1045" width="0.0179%" height="15" fill="rgb(225,201,24)" fg:x="308" fg:w="1"/><text x="5.7737%" y="1055.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_transforms::processors::transforms::transform::BlockMetaTransformer&lt;B,T&gt; as databend_common_pipeline_core::processors::processor::Processor&gt;::process (19 samples, 0.34%)</title><rect x="5.2367%" y="1173" width="0.3407%" height="15" fill="rgb(221,47,46)" fg:x="292" fg:w="19"/><text x="5.4867%" y="1183.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::transform_aggregate_final::TransformFinalAggregate&lt;Method&gt; as databend_common_pipeline_transforms::processors::transforms::transform::BlockMetaTransform&lt;databend_query::pipelines::processors::transforms::aggregator::aggregate_meta::AggregateMeta&lt;Method,usize&gt;&gt;&gt;::transform (16 samples, 0.29%)</title><rect x="5.2905%" y="1157" width="0.2869%" height="15" fill="rgb(249,23,13)" fg:x="295" fg:w="16"/><text x="5.5405%" y="1167.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::aggregator::aggregator_params::AggregatorParams::alloc_layout (2 samples, 0.04%)</title><rect x="5.5416%" y="1141" width="0.0359%" height="15" fill="rgb(219,9,5)" fg:x="309" fg:w="2"/><text x="5.7916%" y="1151.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::group_by::aggregator_state::Area::alloc_layout (1 samples, 0.02%)</title><rect x="5.5595%" y="1125" width="0.0179%" height="15" fill="rgb(254,171,16)" fg:x="310" fg:w="1"/><text x="5.8095%" y="1135.50"></text></g><g><title>databend-query`bumpalo::Bump::alloc_layout_slow (1 samples, 0.02%)</title><rect x="5.5595%" y="1109" width="0.0179%" height="15" fill="rgb(230,171,20)" fg:x="310" fg:w="1"/><text x="5.8095%" y="1119.50"></text></g><g><title>databend-query`bumpalo::Bump::new_chunk_memory_details (1 samples, 0.02%)</title><rect x="5.5595%" y="1093" width="0.0179%" height="15" fill="rgb(210,71,41)" fg:x="310" fg:w="1"/><text x="5.8095%" y="1103.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;(usize,usize)&gt;+Output = core::cmp::Ordering+core::marker::Send+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="5.5775%" y="1109" width="0.0179%" height="15" fill="rgb(206,173,20)" fg:x="311" fg:w="1"/><text x="5.8275%" y="1119.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="5.5775%" y="1093" width="0.0179%" height="15" fill="rgb(233,88,34)" fg:x="311" fg:w="1"/><text x="5.8275%" y="1103.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::compute::sort::lex_sort::build_compare_impl::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="5.5775%" y="1077" width="0.0179%" height="15" fill="rgb(223,209,46)" fg:x="311" fg:w="1"/><text x="5.8275%" y="1087.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt; as databend_common_pipeline_core::processors::processor::Processor&gt;::process (3 samples, 0.05%)</title><rect x="5.5775%" y="1173" width="0.0538%" height="15" fill="rgb(250,43,18)" fg:x="311" fg:w="3"/><text x="5.8275%" y="1183.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_transforms::processors::transforms::transform_sort_partial::TransformSortPartial as databend_common_pipeline_transforms::processors::transforms::transform::Transform&gt;::transform (3 samples, 0.05%)</title><rect x="5.5775%" y="1157" width="0.0538%" height="15" fill="rgb(208,13,10)" fg:x="311" fg:w="3"/><text x="5.8275%" y="1167.50"></text></g><g><title>databend-query`databend_common_expression::kernels::sort::_&lt;impl databend_common_expression::block::DataBlock&gt;::sort (3 samples, 0.05%)</title><rect x="5.5775%" y="1141" width="0.0538%" height="15" fill="rgb(212,200,36)" fg:x="311" fg:w="3"/><text x="5.8275%" y="1151.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::compute::sort::lex_sort::lexsort_to_indices_impl (3 samples, 0.05%)</title><rect x="5.5775%" y="1125" width="0.0538%" height="15" fill="rgb(225,90,30)" fg:x="311" fg:w="3"/><text x="5.8275%" y="1135.50"></text></g><g><title>databend-query`core::slice::select::partition_at_index (2 samples, 0.04%)</title><rect x="5.5954%" y="1109" width="0.0359%" height="15" fill="rgb(236,182,39)" fg:x="312" fg:w="2"/><text x="5.8454%" y="1119.50"></text></g><g><title>databend-query`core::slice::select::partition_at_index_loop (2 samples, 0.04%)</title><rect x="5.5954%" y="1093" width="0.0359%" height="15" fill="rgb(212,144,35)" fg:x="312" fg:w="2"/><text x="5.8454%" y="1103.50"></text></g><g><title>databend-query`core::slice::sort::partition (2 samples, 0.04%)</title><rect x="5.5954%" y="1077" width="0.0359%" height="15" fill="rgb(228,63,44)" fg:x="312" fg:w="2"/><text x="5.8454%" y="1087.50"></text></g><g><title>databend-query`core::slice::sort::partition_in_blocks (2 samples, 0.04%)</title><rect x="5.5954%" y="1061" width="0.0359%" height="15" fill="rgb(228,109,6)" fg:x="312" fg:w="2"/><text x="5.8454%" y="1071.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::compute::sort::lex_sort::build_compare_impl::_{{closure}} (1 samples, 0.02%)</title><rect x="5.6133%" y="1045" width="0.0179%" height="15" fill="rgb(238,117,24)" fg:x="313" fg:w="1"/><text x="5.8633%" y="1055.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_transforms::processors::transforms::transform_sort_merge_limit::TransformSortMergeLimit&lt;R&gt; as databend_common_pipeline_transforms::processors::transforms::transform_sort_merge_base::MergeSort&lt;R&gt;&gt;::on_finish (1 samples, 0.02%)</title><rect x="5.6313%" y="1157" width="0.0179%" height="15" fill="rgb(242,26,26)" fg:x="314" fg:w="1"/><text x="5.8813%" y="1167.50"></text></g><g><title>databend-query`databend_common_expression::kernels::take_chunks::_&lt;impl databend_common_expression::block::DataBlock&gt;::take_by_slices_limit_from_blocks (1 samples, 0.02%)</title><rect x="5.6313%" y="1141" width="0.0179%" height="15" fill="rgb(221,92,48)" fg:x="314" fg:w="1"/><text x="5.8813%" y="1151.50"></text></g><g><title>databend-query`databend_common_expression::kernels::take_chunks::_&lt;impl databend_common_expression::block::DataBlock&gt;::take_column_by_slices_limit (1 samples, 0.02%)</title><rect x="5.6313%" y="1125" width="0.0179%" height="15" fill="rgb(209,209,32)" fg:x="314" fg:w="1"/><text x="5.8813%" y="1135.50"></text></g><g><title>databend-query`databend_common_expression::values::Column::slice (1 samples, 0.02%)</title><rect x="5.6313%" y="1109" width="0.0179%" height="15" fill="rgb(221,70,22)" fg:x="314" fg:w="1"/><text x="5.8813%" y="1119.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::bitmap::immutable::Bitmap::sliced (1 samples, 0.02%)</title><rect x="5.6313%" y="1093" width="0.0179%" height="15" fill="rgb(248,145,5)" fg:x="314" fg:w="1"/><text x="5.8813%" y="1103.50"></text></g><g><title>databend-query`&lt;databend_common_hashtable::table0::Table0Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="5.6492%" y="1141" width="0.0179%" height="15" fill="rgb(226,116,26)" fg:x="315" fg:w="1"/><text x="5.8992%" y="1151.50"></text></g><g><title>databend-query`&lt;databend_common_expression::kernels::group_by_hash::method_fixed_keys::HashMethodFixedKeys&lt;u128&gt; as databend_common_expression::kernels::group_by_hash::method::HashMethod&gt;::build_keys_state (1 samples, 0.02%)</title><rect x="6.0976%" y="1125" width="0.0179%" height="15" fill="rgb(244,5,17)" fg:x="340" fg:w="1"/><text x="6.3476%" y="1135.50"></text></g><g><title>databend-query`databend_common_expression::kernels::group_by_hash::method_fixed_keys::build (1 samples, 0.02%)</title><rect x="6.0976%" y="1109" width="0.0179%" height="15" fill="rgb(252,159,33)" fg:x="340" fg:w="1"/><text x="6.3476%" y="1119.50"></text></g><g><title>databend-query`databend_common_expression::kernels::group_by_hash::method_fixed_keys::fixed_hash (1 samples, 0.02%)</title><rect x="6.0976%" y="1093" width="0.0179%" height="15" fill="rgb(206,71,0)" fg:x="340" fg:w="1"/><text x="6.3476%" y="1103.50"></text></g><g><title>databend-query`&lt;databend_common_functions::aggregates::adaptors::aggregate_ornull_adaptor::AggregateFunctionOrNullAdaptor as databend_common_expression::aggregate::aggregate_function::AggregateFunction&gt;::accumulate_keys (2 samples, 0.04%)</title><rect x="6.1155%" y="1125" width="0.0359%" height="15" fill="rgb(233,118,54)" fg:x="341" fg:w="2"/><text x="6.3655%" y="1135.50"></text></g><g><title>databend-query`&lt;databend_common_functions::aggregates::aggregate_unary::AggregateUnaryFunction&lt;S,T,R&gt; as databend_common_expression::aggregate::aggregate_function::AggregateFunction&gt;::accumulate_keys (2 samples, 0.04%)</title><rect x="6.1155%" y="1109" width="0.0359%" height="15" fill="rgb(234,83,48)" fg:x="341" fg:w="2"/><text x="6.3655%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="6.1872%" y="1029" width="0.0179%" height="15" fill="rgb(228,3,54)" fg:x="345" fg:w="1"/><text x="6.4372%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="6.1872%" y="1013" width="0.0179%" height="15" fill="rgb(226,155,13)" fg:x="345" fg:w="1"/><text x="6.4372%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="6.1872%" y="997" width="0.0179%" height="15" fill="rgb(241,28,37)" fg:x="345" fg:w="1"/><text x="6.4372%" y="1007.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="6.1872%" y="981" width="0.0179%" height="15" fill="rgb(233,93,10)" fg:x="345" fg:w="1"/><text x="6.4372%" y="991.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransformer&lt;T&gt; as databend_common_pipeline_core::processors::processor::Processor&gt;::process (33 samples, 0.59%)</title><rect x="5.6313%" y="1173" width="0.5918%" height="15" fill="rgb(225,113,19)" fg:x="314" fg:w="33"/><text x="5.8813%" y="1183.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::aggregator::transform_aggregate_partial::TransformPartialAggregate&lt;Method&gt; as databend_common_pipeline_transforms::processors::transforms::transform_accumulating::AccumulatingTransform&gt;::transform (32 samples, 0.57%)</title><rect x="5.6492%" y="1157" width="0.5739%" height="15" fill="rgb(241,2,18)" fg:x="315" fg:w="32"/><text x="5.8992%" y="1167.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::aggregator::transform_aggregate_partial::TransformPartialAggregate&lt;Method&gt;::execute_one_block (31 samples, 0.56%)</title><rect x="5.6671%" y="1141" width="0.5560%" height="15" fill="rgb(228,207,21)" fg:x="316" fg:w="31"/><text x="5.9171%" y="1151.50"></text></g><g><title>databend-query`databend_common_hashtable::table0::Table0&lt;K,V,C,A&gt;::grow (4 samples, 0.07%)</title><rect x="6.1514%" y="1125" width="0.0717%" height="15" fill="rgb(213,211,35)" fg:x="343" fg:w="4"/><text x="6.4014%" y="1135.50"></text></g><g><title>databend-query`&lt;databend_common_hashtable::container::HeapContainer&lt;T,A&gt; as databend_common_hashtable::container::Container&gt;::grow_zeroed (2 samples, 0.04%)</title><rect x="6.1872%" y="1109" width="0.0359%" height="15" fill="rgb(209,83,10)" fg:x="345" fg:w="2"/><text x="6.4372%" y="1119.50"></text></g><g><title>databend-query`databend_common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for databend_common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow_zeroed (2 samples, 0.04%)</title><rect x="6.1872%" y="1093" width="0.0359%" height="15" fill="rgb(209,164,1)" fg:x="345" fg:w="2"/><text x="6.4372%" y="1103.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (2 samples, 0.04%)</title><rect x="6.1872%" y="1077" width="0.0359%" height="15" fill="rgb(213,184,43)" fg:x="345" fg:w="2"/><text x="6.4372%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.04%)</title><rect x="6.1872%" y="1061" width="0.0359%" height="15" fill="rgb(231,61,34)" fg:x="345" fg:w="2"/><text x="6.4372%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.04%)</title><rect x="6.1872%" y="1045" width="0.0359%" height="15" fill="rgb(235,75,3)" fg:x="345" fg:w="2"/><text x="6.4372%" y="1055.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="6.2052%" y="1029" width="0.0179%" height="15" fill="rgb(220,106,47)" fg:x="346" fg:w="1"/><text x="6.4552%" y="1039.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f32&gt;&gt; (1 samples, 0.02%)</title><rect x="6.2231%" y="1077" width="0.0179%" height="15" fill="rgb(210,196,33)" fg:x="347" fg:w="1"/><text x="6.4731%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="6.2231%" y="1061" width="0.0179%" height="15" fill="rgb(229,154,42)" fg:x="347" fg:w="1"/><text x="6.4731%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="6.2231%" y="1045" width="0.0179%" height="15" fill="rgb(228,114,26)" fg:x="347" fg:w="1"/><text x="6.4731%" y="1055.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_expression::block::DataBlock&gt; (6 samples, 0.11%)</title><rect x="6.2231%" y="1141" width="0.1076%" height="15" fill="rgb(208,144,1)" fg:x="347" fg:w="6"/><text x="6.4731%" y="1151.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;databend_common_expression::block::BlockEntry&gt;&gt; (6 samples, 0.11%)</title><rect x="6.2231%" y="1125" width="0.1076%" height="15" fill="rgb(239,112,37)" fg:x="347" fg:w="6"/><text x="6.4731%" y="1135.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.11%)</title><rect x="6.2231%" y="1109" width="0.1076%" height="15" fill="rgb(210,96,50)" fg:x="347" fg:w="6"/><text x="6.4731%" y="1119.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.11%)</title><rect x="6.2231%" y="1093" width="0.1076%" height="15" fill="rgb(222,178,2)" fg:x="347" fg:w="6"/><text x="6.4731%" y="1103.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f64&gt;&gt; (5 samples, 0.09%)</title><rect x="6.2410%" y="1077" width="0.0897%" height="15" fill="rgb(226,74,18)" fg:x="348" fg:w="5"/><text x="6.4910%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.09%)</title><rect x="6.2410%" y="1061" width="0.0897%" height="15" fill="rgb(225,67,54)" fg:x="348" fg:w="5"/><text x="6.4910%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.09%)</title><rect x="6.2410%" y="1045" width="0.0897%" height="15" fill="rgb(251,92,32)" fg:x="348" fg:w="5"/><text x="6.4910%" y="1055.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_expression::values::ValueRef&lt;databend_common_expression::types::any::AnyType&gt;&gt; (1 samples, 0.02%)</title><rect x="6.3307%" y="1141" width="0.0179%" height="15" fill="rgb(228,149,22)" fg:x="353" fg:w="1"/><text x="6.5807%" y="1151.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f32&gt;&gt; (17 samples, 0.30%)</title><rect x="6.3486%" y="1109" width="0.3049%" height="15" fill="rgb(243,54,13)" fg:x="354" fg:w="17"/><text x="6.5986%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (17 samples, 0.30%)</title><rect x="6.3486%" y="1093" width="0.3049%" height="15" fill="rgb(243,180,28)" fg:x="354" fg:w="17"/><text x="6.5986%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.30%)</title><rect x="6.3486%" y="1077" width="0.3049%" height="15" fill="rgb(208,167,24)" fg:x="354" fg:w="17"/><text x="6.5986%" y="1087.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (18 samples, 0.32%)</title><rect x="6.3486%" y="1125" width="0.3228%" height="15" fill="rgb(245,73,45)" fg:x="354" fg:w="18"/><text x="6.5986%" y="1135.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f64&gt;&gt; (1 samples, 0.02%)</title><rect x="6.6535%" y="1109" width="0.0179%" height="15" fill="rgb(237,203,48)" fg:x="371" fg:w="1"/><text x="6.9035%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="6.6535%" y="1093" width="0.0179%" height="15" fill="rgb(211,197,16)" fg:x="371" fg:w="1"/><text x="6.9035%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="6.6535%" y="1077" width="0.0179%" height="15" fill="rgb(243,99,51)" fg:x="371" fg:w="1"/><text x="6.9035%" y="1087.50"></text></g><g><title>databend-query`databend_common_expression::block::DataBlock::project (19 samples, 0.34%)</title><rect x="6.3486%" y="1141" width="0.3407%" height="15" fill="rgb(215,123,29)" fg:x="354" fg:w="19"/><text x="6.5986%" y="1151.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.02%)</title><rect x="6.6714%" y="1125" width="0.0179%" height="15" fill="rgb(239,186,37)" fg:x="372" fg:w="1"/><text x="6.9214%" y="1135.50"></text></g><g><title>databend-query`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="6.6714%" y="1109" width="0.0179%" height="15" fill="rgb(252,136,39)" fg:x="372" fg:w="1"/><text x="6.9214%" y="1119.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="6.8508%" y="1077" width="0.0179%" height="15" fill="rgb(223,213,32)" fg:x="382" fg:w="1"/><text x="7.1008%" y="1087.50"></text></g><g><title>databend-query`&lt;databend_common_expression::types::boolean::BooleanType as databend_common_expression::types::ArgType&gt;::column_from_iter (14 samples, 0.25%)</title><rect x="6.6894%" y="1093" width="0.2511%" height="15" fill="rgb(233,115,5)" fg:x="373" fg:w="14"/><text x="6.9394%" y="1103.50"></text></g><g><title>databend-query`&lt;databend_common_expression::types::string::StringIterator as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="6.8687%" y="1077" width="0.0717%" height="15" fill="rgb(207,226,44)" fg:x="383" fg:w="4"/><text x="7.1187%" y="1087.50"></text></g><g><title>databend-query`DYLD-STUB$$memcmp (1 samples, 0.02%)</title><rect x="6.9405%" y="1093" width="0.0179%" height="15" fill="rgb(208,126,0)" fg:x="387" fg:w="1"/><text x="7.1905%" y="1103.50"></text></g><g><title>databend-query`databend_common_expression::evaluator::Evaluator::partial_run (18 samples, 0.32%)</title><rect x="6.6894%" y="1141" width="0.3228%" height="15" fill="rgb(244,66,21)" fg:x="373" fg:w="18"/><text x="6.9394%" y="1151.50"></text></g><g><title>databend-query`databend_common_expression::register::erase_function_generic_2_arg::_{{closure}} (18 samples, 0.32%)</title><rect x="6.6894%" y="1125" width="0.3228%" height="15" fill="rgb(222,97,12)" fg:x="373" fg:w="18"/><text x="6.9394%" y="1135.50"></text></g><g><title>databend-query`databend_common_expression::register::vectorize_2_arg::_{{closure}} (18 samples, 0.32%)</title><rect x="6.6894%" y="1109" width="0.3228%" height="15" fill="rgb(219,213,19)" fg:x="373" fg:w="18"/><text x="6.9394%" y="1119.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.05%)</title><rect x="6.9584%" y="1093" width="0.0538%" height="15" fill="rgb(252,169,30)" fg:x="388" fg:w="3"/><text x="7.2084%" y="1103.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_transforms::processors::transforms::transform_blocking::BlockingTransformer&lt;T&gt; as databend_common_pipeline_core::processors::processor::Processor&gt;::process (56 samples, 1.00%)</title><rect x="6.2231%" y="1173" width="1.0043%" height="15" fill="rgb(206,32,51)" fg:x="347" fg:w="56"/><text x="6.4731%" y="1183.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::transform_filter::TransformFilter as databend_common_pipeline_transforms::processors::transforms::transform_blocking::BlockingTransform&gt;::consume (56 samples, 1.00%)</title><rect x="6.2231%" y="1157" width="1.0043%" height="15" fill="rgb(250,172,42)" fg:x="347" fg:w="56"/><text x="6.4731%" y="1167.50"></text></g><g><title>databend-query`databend_common_expression::kernels::filter::_&lt;impl databend_common_expression::block::DataBlock&gt;::filter_with_bitmap (12 samples, 0.22%)</title><rect x="7.0122%" y="1141" width="0.2152%" height="15" fill="rgb(209,34,43)" fg:x="391" fg:w="12"/><text x="7.2622%" y="1151.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (12 samples, 0.22%)</title><rect x="7.0122%" y="1125" width="0.2152%" height="15" fill="rgb(223,11,35)" fg:x="391" fg:w="12"/><text x="7.2622%" y="1135.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (12 samples, 0.22%)</title><rect x="7.0122%" y="1109" width="0.2152%" height="15" fill="rgb(251,219,26)" fg:x="391" fg:w="12"/><text x="7.2622%" y="1119.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.22%)</title><rect x="7.0122%" y="1093" width="0.2152%" height="15" fill="rgb(231,119,3)" fg:x="391" fg:w="12"/><text x="7.2622%" y="1103.50"></text></g><g><title>databend-query`databend_common_expression::kernels::filter::_&lt;impl databend_common_expression::values::Column&gt;::filter (12 samples, 0.22%)</title><rect x="7.0122%" y="1077" width="0.2152%" height="15" fill="rgb(216,97,11)" fg:x="391" fg:w="12"/><text x="7.2622%" y="1087.50"></text></g><g><title>databend-query`databend_common_expression::kernels::filter::_&lt;impl databend_common_expression::values::Column&gt;::filter_primitive_types (12 samples, 0.22%)</title><rect x="7.0122%" y="1061" width="0.2152%" height="15" fill="rgb(223,59,9)" fg:x="391" fg:w="12"/><text x="7.2622%" y="1071.50"></text></g><g><title>databend-query`&lt;databend_common_sql::evaluator::block_operator::CompoundBlockOperator as databend_common_pipeline_transforms::processors::transforms::transform::Transform&gt;::name (1 samples, 0.02%)</title><rect x="7.2274%" y="1173" width="0.0179%" height="15" fill="rgb(233,93,31)" fg:x="403" fg:w="1"/><text x="7.4774%" y="1183.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="7.2274%" y="1157" width="0.0179%" height="15" fill="rgb(239,81,33)" fg:x="403" fg:w="1"/><text x="7.4774%" y="1167.50"></text></g><g><title>databend-query`&lt;xorf::bfuse8::BinaryFuse8 as xorf::Filter&lt;u64&gt;&gt;::contains (7 samples, 0.13%)</title><rect x="7.2453%" y="1157" width="0.1255%" height="15" fill="rgb(213,120,34)" fg:x="404" fg:w="7"/><text x="7.4953%" y="1167.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="7.3709%" y="1157" width="0.0179%" height="15" fill="rgb(243,49,53)" fg:x="411" fg:w="1"/><text x="7.6209%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_storages_fuse::io::read::block::block_reader_merge_io::MergeIOReadResult&gt; (47 samples, 0.84%)</title><rect x="7.3888%" y="1157" width="0.8429%" height="15" fill="rgb(247,216,33)" fg:x="412" fg:w="47"/><text x="7.6388%" y="1167.50"></text></g><g><title>databend-query`hashbrown::raw::RawTableInner::drop_inner_table (47 samples, 0.84%)</title><rect x="7.3888%" y="1141" width="0.8429%" height="15" fill="rgb(226,26,14)" fg:x="412" fg:w="47"/><text x="7.6388%" y="1151.50"></text></g><g><title>databend-query`hashbrown::raw::RawTableInner::drop_elements (47 samples, 0.84%)</title><rect x="7.3888%" y="1125" width="0.8429%" height="15" fill="rgb(215,49,53)" fg:x="412" fg:w="47"/><text x="7.6388%" y="1135.50"></text></g><g><title>databend-query`bytes::bytes::shared_drop (47 samples, 0.84%)</title><rect x="7.3888%" y="1109" width="0.8429%" height="15" fill="rgb(245,162,40)" fg:x="412" fg:w="47"/><text x="7.6388%" y="1119.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes::Shared&gt;&gt; (47 samples, 0.84%)</title><rect x="7.3888%" y="1093" width="0.8429%" height="15" fill="rgb(229,68,17)" fg:x="412" fg:w="47"/><text x="7.6388%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (47 samples, 0.84%)</title><rect x="7.3888%" y="1077" width="0.8429%" height="15" fill="rgb(213,182,10)" fg:x="412" fg:w="47"/><text x="7.6388%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (47 samples, 0.84%)</title><rect x="7.3888%" y="1061" width="0.8429%" height="15" fill="rgb(245,125,30)" fg:x="412" fg:w="47"/><text x="7.6388%" y="1071.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (25 samples, 0.45%)</title><rect x="8.2317%" y="965" width="0.4484%" height="15" fill="rgb(232,202,2)" fg:x="459" fg:w="25"/><text x="8.4817%" y="975.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (25 samples, 0.45%)</title><rect x="8.2317%" y="949" width="0.4484%" height="15" fill="rgb(237,140,51)" fg:x="459" fg:w="25"/><text x="8.4817%" y="959.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (25 samples, 0.45%)</title><rect x="8.2317%" y="933" width="0.4484%" height="15" fill="rgb(236,157,25)" fg:x="459" fg:w="25"/><text x="8.4817%" y="943.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="8.6801%" y="949" width="0.0179%" height="15" fill="rgb(219,209,0)" fg:x="484" fg:w="1"/><text x="8.9301%" y="959.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (1 samples, 0.02%)</title><rect x="8.6801%" y="933" width="0.0179%" height="15" fill="rgb(240,116,54)" fg:x="484" fg:w="1"/><text x="8.9301%" y="943.50"></text></g><g><title>databend-query`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="8.6801%" y="917" width="0.0179%" height="15" fill="rgb(216,10,36)" fg:x="484" fg:w="1"/><text x="8.9301%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="8.6801%" y="901" width="0.0179%" height="15" fill="rgb(222,72,44)" fg:x="484" fg:w="1"/><text x="8.9301%" y="911.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (4 samples, 0.07%)</title><rect x="8.6980%" y="901" width="0.0717%" height="15" fill="rgb(232,159,9)" fg:x="485" fg:w="4"/><text x="8.9480%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.07%)</title><rect x="8.6980%" y="885" width="0.0717%" height="15" fill="rgb(210,39,32)" fg:x="485" fg:w="4"/><text x="8.9480%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.05%)</title><rect x="8.7159%" y="869" width="0.0538%" height="15" fill="rgb(216,194,45)" fg:x="486" fg:w="3"/><text x="8.9659%" y="879.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (2 samples, 0.04%)</title><rect x="11.6930%" y="773" width="0.0359%" height="15" fill="rgb(218,18,35)" fg:x="652" fg:w="2"/><text x="11.9430%" y="783.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (3 samples, 0.05%)</title><rect x="11.6930%" y="789" width="0.0538%" height="15" fill="rgb(207,83,51)" fg:x="652" fg:w="3"/><text x="11.9430%" y="799.50"></text></g><g><title>databend-query`HUF_decompress4X_hufOnly_wksp (1 samples, 0.02%)</title><rect x="11.7288%" y="773" width="0.0179%" height="15" fill="rgb(225,63,43)" fg:x="654" fg:w="1"/><text x="11.9788%" y="783.50"></text></g><g><title>databend-query`HUF_readDTableX1_wksp (1 samples, 0.02%)</title><rect x="11.7288%" y="757" width="0.0179%" height="15" fill="rgb(207,57,36)" fg:x="654" fg:w="1"/><text x="11.9788%" y="767.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="11.7468%" y="757" width="0.0179%" height="15" fill="rgb(216,99,33)" fg:x="655" fg:w="1"/><text x="11.9968%" y="767.50"></text></g><g><title>databend-query`ZSTD_decompressStream (172 samples, 3.08%)</title><rect x="8.7697%" y="853" width="3.0846%" height="15" fill="rgb(225,42,16)" fg:x="489" fg:w="172"/><text x="9.0197%" y="863.50">dat..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (172 samples, 3.08%)</title><rect x="8.7697%" y="837" width="3.0846%" height="15" fill="rgb(220,201,45)" fg:x="489" fg:w="172"/><text x="9.0197%" y="847.50">dat..</text></g><g><title>databend-query`ZSTD_decompressContinue (172 samples, 3.08%)</title><rect x="8.7697%" y="821" width="3.0846%" height="15" fill="rgb(225,33,4)" fg:x="489" fg:w="172"/><text x="9.0197%" y="831.50">dat..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (172 samples, 3.08%)</title><rect x="8.7697%" y="805" width="3.0846%" height="15" fill="rgb(224,33,50)" fg:x="489" fg:w="172"/><text x="9.0197%" y="815.50">dat..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (6 samples, 0.11%)</title><rect x="11.7468%" y="789" width="0.1076%" height="15" fill="rgb(246,198,51)" fg:x="655" fg:w="6"/><text x="11.9968%" y="799.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (6 samples, 0.11%)</title><rect x="11.7468%" y="773" width="0.1076%" height="15" fill="rgb(205,22,4)" fg:x="655" fg:w="6"/><text x="11.9968%" y="783.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (5 samples, 0.09%)</title><rect x="11.7647%" y="757" width="0.0897%" height="15" fill="rgb(206,3,8)" fg:x="656" fg:w="5"/><text x="12.0147%" y="767.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (174 samples, 3.12%)</title><rect x="8.7697%" y="869" width="3.1205%" height="15" fill="rgb(251,23,15)" fg:x="489" fg:w="174"/><text x="9.0197%" y="879.50">dat..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="11.8544%" y="853" width="0.0359%" height="15" fill="rgb(252,88,28)" fg:x="661" fg:w="2"/><text x="12.1044%" y="863.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (205 samples, 3.68%)</title><rect x="8.2317%" y="997" width="3.6765%" height="15" fill="rgb(212,127,14)" fg:x="459" fg:w="205"/><text x="8.4817%" y="1007.50">data..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (205 samples, 3.68%)</title><rect x="8.2317%" y="981" width="3.6765%" height="15" fill="rgb(247,145,37)" fg:x="459" fg:w="205"/><text x="8.4817%" y="991.50">data..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (180 samples, 3.23%)</title><rect x="8.6801%" y="965" width="3.2281%" height="15" fill="rgb(209,117,53)" fg:x="484" fg:w="180"/><text x="8.9301%" y="975.50">dat..</text></g><g><title>databend-query`parquet2::read::compression::decompress (179 samples, 3.21%)</title><rect x="8.6980%" y="949" width="3.2102%" height="15" fill="rgb(212,90,42)" fg:x="485" fg:w="179"/><text x="8.9480%" y="959.50">dat..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (179 samples, 3.21%)</title><rect x="8.6980%" y="933" width="3.2102%" height="15" fill="rgb(218,164,37)" fg:x="485" fg:w="179"/><text x="8.9480%" y="943.50">dat..</text></g><g><title>databend-query`parquet2::compression::decompress (179 samples, 3.21%)</title><rect x="8.6980%" y="917" width="3.2102%" height="15" fill="rgb(246,65,34)" fg:x="485" fg:w="179"/><text x="8.9480%" y="927.50">dat..</text></g><g><title>databend-query`std::io::default_read_exact (175 samples, 3.14%)</title><rect x="8.7697%" y="901" width="3.1385%" height="15" fill="rgb(231,100,33)" fg:x="489" fg:w="175"/><text x="9.0197%" y="911.50">dat..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (175 samples, 3.14%)</title><rect x="8.7697%" y="885" width="3.1385%" height="15" fill="rgb(228,126,14)" fg:x="489" fg:w="175"/><text x="9.0197%" y="895.50">dat..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="11.8902%" y="869" width="0.0179%" height="15" fill="rgb(215,173,21)" fg:x="663" fg:w="1"/><text x="12.1402%" y="879.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (40 samples, 0.72%)</title><rect x="11.9082%" y="981" width="0.7174%" height="15" fill="rgb(210,6,40)" fg:x="664" fg:w="40"/><text x="12.1582%" y="991.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (40 samples, 0.72%)</title><rect x="11.9082%" y="965" width="0.7174%" height="15" fill="rgb(212,48,18)" fg:x="664" fg:w="40"/><text x="12.1582%" y="975.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (40 samples, 0.72%)</title><rect x="11.9082%" y="949" width="0.7174%" height="15" fill="rgb(230,214,11)" fg:x="664" fg:w="40"/><text x="12.1582%" y="959.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="12.6255%" y="965" width="0.0179%" height="15" fill="rgb(254,105,39)" fg:x="704" fg:w="1"/><text x="12.8755%" y="975.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (1 samples, 0.02%)</title><rect x="12.6255%" y="949" width="0.0179%" height="15" fill="rgb(245,158,5)" fg:x="704" fg:w="1"/><text x="12.8755%" y="959.50"></text></g><g><title>databend-query`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="12.6255%" y="933" width="0.0179%" height="15" fill="rgb(249,208,11)" fg:x="704" fg:w="1"/><text x="12.8755%" y="943.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="12.6255%" y="917" width="0.0179%" height="15" fill="rgb(210,39,28)" fg:x="704" fg:w="1"/><text x="12.8755%" y="927.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (7 samples, 0.13%)</title><rect x="12.6435%" y="917" width="0.1255%" height="15" fill="rgb(211,56,53)" fg:x="705" fg:w="7"/><text x="12.8935%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.13%)</title><rect x="12.6435%" y="901" width="0.1255%" height="15" fill="rgb(226,201,30)" fg:x="705" fg:w="7"/><text x="12.8935%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.13%)</title><rect x="12.6435%" y="885" width="0.1255%" height="15" fill="rgb(239,101,34)" fg:x="705" fg:w="7"/><text x="12.8935%" y="895.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (6 samples, 0.11%)</title><rect x="17.3422%" y="789" width="0.1076%" height="15" fill="rgb(226,209,5)" fg:x="967" fg:w="6"/><text x="17.5922%" y="799.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (7 samples, 0.13%)</title><rect x="17.3422%" y="805" width="0.1255%" height="15" fill="rgb(250,105,47)" fg:x="967" fg:w="7"/><text x="17.5922%" y="815.50"></text></g><g><title>databend-query`HUF_decompress4X_hufOnly_wksp (1 samples, 0.02%)</title><rect x="17.4498%" y="789" width="0.0179%" height="15" fill="rgb(230,72,3)" fg:x="973" fg:w="1"/><text x="17.6998%" y="799.50"></text></g><g><title>databend-query`HUF_readDTableX1_wksp (1 samples, 0.02%)</title><rect x="17.4498%" y="773" width="0.0179%" height="15" fill="rgb(232,218,39)" fg:x="973" fg:w="1"/><text x="17.6998%" y="783.50"></text></g><g><title>databend-query`HUF_readStats_wksp (1 samples, 0.02%)</title><rect x="17.4498%" y="757" width="0.0179%" height="15" fill="rgb(248,166,6)" fg:x="973" fg:w="1"/><text x="17.6998%" y="767.50"></text></g><g><title>databend-query`FSE_decompress_wksp_bmi2 (1 samples, 0.02%)</title><rect x="17.4498%" y="741" width="0.0179%" height="15" fill="rgb(247,89,20)" fg:x="973" fg:w="1"/><text x="17.6998%" y="751.50"></text></g><g><title>databend-query`ZSTD_decompressStream (267 samples, 4.79%)</title><rect x="12.7690%" y="869" width="4.7884%" height="15" fill="rgb(248,130,54)" fg:x="712" fg:w="267"/><text x="13.0190%" y="879.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (267 samples, 4.79%)</title><rect x="12.7690%" y="853" width="4.7884%" height="15" fill="rgb(234,196,4)" fg:x="712" fg:w="267"/><text x="13.0190%" y="863.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinue (267 samples, 4.79%)</title><rect x="12.7690%" y="837" width="4.7884%" height="15" fill="rgb(250,143,31)" fg:x="712" fg:w="267"/><text x="13.0190%" y="847.50">databe..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (267 samples, 4.79%)</title><rect x="12.7690%" y="821" width="4.7884%" height="15" fill="rgb(211,110,34)" fg:x="712" fg:w="267"/><text x="13.0190%" y="831.50">databe..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (5 samples, 0.09%)</title><rect x="17.4677%" y="805" width="0.0897%" height="15" fill="rgb(215,124,48)" fg:x="974" fg:w="5"/><text x="17.7177%" y="815.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (5 samples, 0.09%)</title><rect x="17.4677%" y="789" width="0.0897%" height="15" fill="rgb(216,46,13)" fg:x="974" fg:w="5"/><text x="17.7177%" y="799.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (5 samples, 0.09%)</title><rect x="17.4677%" y="773" width="0.0897%" height="15" fill="rgb(205,184,25)" fg:x="974" fg:w="5"/><text x="17.7177%" y="783.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (276 samples, 4.95%)</title><rect x="12.7690%" y="885" width="4.9498%" height="15" fill="rgb(228,1,10)" fg:x="712" fg:w="276"/><text x="13.0190%" y="895.50">databe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.16%)</title><rect x="17.5574%" y="869" width="0.1614%" height="15" fill="rgb(213,116,27)" fg:x="979" fg:w="9"/><text x="17.8074%" y="879.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (532 samples, 9.54%)</title><rect x="8.2317%" y="1013" width="9.5409%" height="15" fill="rgb(241,95,50)" fg:x="459" fg:w="532"/><text x="8.4817%" y="1023.50">databend-query..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (327 samples, 5.86%)</title><rect x="11.9082%" y="997" width="5.8644%" height="15" fill="rgb(238,48,32)" fg:x="664" fg:w="327"/><text x="12.1582%" y="1007.50">databen..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (287 samples, 5.15%)</title><rect x="12.6255%" y="981" width="5.1471%" height="15" fill="rgb(235,113,49)" fg:x="704" fg:w="287"/><text x="12.8755%" y="991.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress (286 samples, 5.13%)</title><rect x="12.6435%" y="965" width="5.1291%" height="15" fill="rgb(205,127,43)" fg:x="705" fg:w="286"/><text x="12.8935%" y="975.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (286 samples, 5.13%)</title><rect x="12.6435%" y="949" width="5.1291%" height="15" fill="rgb(250,162,2)" fg:x="705" fg:w="286"/><text x="12.8935%" y="959.50">databe..</text></g><g><title>databend-query`parquet2::compression::decompress (286 samples, 5.13%)</title><rect x="12.6435%" y="933" width="5.1291%" height="15" fill="rgb(220,13,41)" fg:x="705" fg:w="286"/><text x="12.8935%" y="943.50">databe..</text></g><g><title>databend-query`std::io::default_read_exact (279 samples, 5.00%)</title><rect x="12.7690%" y="917" width="5.0036%" height="15" fill="rgb(249,221,25)" fg:x="712" fg:w="279"/><text x="13.0190%" y="927.50">databe..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (279 samples, 5.00%)</title><rect x="12.7690%" y="901" width="5.0036%" height="15" fill="rgb(215,208,19)" fg:x="712" fg:w="279"/><text x="13.0190%" y="911.50">databe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="17.7188%" y="885" width="0.0538%" height="15" fill="rgb(236,175,2)" fg:x="988" fg:w="3"/><text x="17.9688%" y="895.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (31 samples, 0.56%)</title><rect x="17.7726%" y="997" width="0.5560%" height="15" fill="rgb(241,52,2)" fg:x="991" fg:w="31"/><text x="18.0226%" y="1007.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (31 samples, 0.56%)</title><rect x="17.7726%" y="981" width="0.5560%" height="15" fill="rgb(248,140,14)" fg:x="991" fg:w="31"/><text x="18.0226%" y="991.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (31 samples, 0.56%)</title><rect x="17.7726%" y="965" width="0.5560%" height="15" fill="rgb(253,22,42)" fg:x="991" fg:w="31"/><text x="18.0226%" y="975.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="18.3286%" y="981" width="0.0359%" height="15" fill="rgb(234,61,47)" fg:x="1022" fg:w="2"/><text x="18.5786%" y="991.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (2 samples, 0.04%)</title><rect x="18.3286%" y="965" width="0.0359%" height="15" fill="rgb(208,226,15)" fg:x="1022" fg:w="2"/><text x="18.5786%" y="975.50"></text></g><g><title>databend-query`std::io::default_read_to_end (2 samples, 0.04%)</title><rect x="18.3286%" y="949" width="0.0359%" height="15" fill="rgb(217,221,4)" fg:x="1022" fg:w="2"/><text x="18.5786%" y="959.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="18.3286%" y="933" width="0.0359%" height="15" fill="rgb(212,174,34)" fg:x="1022" fg:w="2"/><text x="18.5786%" y="943.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (4 samples, 0.07%)</title><rect x="18.3644%" y="933" width="0.0717%" height="15" fill="rgb(253,83,4)" fg:x="1024" fg:w="4"/><text x="18.6144%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.07%)</title><rect x="18.3644%" y="917" width="0.0717%" height="15" fill="rgb(250,195,49)" fg:x="1024" fg:w="4"/><text x="18.6144%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.07%)</title><rect x="18.3644%" y="901" width="0.0717%" height="15" fill="rgb(241,192,25)" fg:x="1024" fg:w="4"/><text x="18.6144%" y="911.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (6 samples, 0.11%)</title><rect x="23.0990%" y="805" width="0.1076%" height="15" fill="rgb(208,124,10)" fg:x="1288" fg:w="6"/><text x="23.3490%" y="815.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (7 samples, 0.13%)</title><rect x="23.0990%" y="821" width="0.1255%" height="15" fill="rgb(222,33,0)" fg:x="1288" fg:w="7"/><text x="23.3490%" y="831.50"></text></g><g><title>databend-query`HUF_decompress4X_hufOnly_wksp (1 samples, 0.02%)</title><rect x="23.2066%" y="805" width="0.0179%" height="15" fill="rgb(234,209,28)" fg:x="1294" fg:w="1"/><text x="23.4566%" y="815.50"></text></g><g><title>databend-query`HUF_readDTableX1_wksp (1 samples, 0.02%)</title><rect x="23.2066%" y="789" width="0.0179%" height="15" fill="rgb(224,11,23)" fg:x="1294" fg:w="1"/><text x="23.4566%" y="799.50"></text></g><g><title>databend-query`HUF_readStats_wksp (1 samples, 0.02%)</title><rect x="23.2066%" y="773" width="0.0179%" height="15" fill="rgb(232,99,1)" fg:x="1294" fg:w="1"/><text x="23.4566%" y="783.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="23.2245%" y="789" width="0.0179%" height="15" fill="rgb(237,95,45)" fg:x="1295" fg:w="1"/><text x="23.4745%" y="799.50"></text></g><g><title>databend-query`ZSTD_decompressStream (276 samples, 4.95%)</title><rect x="18.4362%" y="885" width="4.9498%" height="15" fill="rgb(208,109,11)" fg:x="1028" fg:w="276"/><text x="18.6862%" y="895.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (276 samples, 4.95%)</title><rect x="18.4362%" y="869" width="4.9498%" height="15" fill="rgb(216,190,48)" fg:x="1028" fg:w="276"/><text x="18.6862%" y="879.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinue (275 samples, 4.93%)</title><rect x="18.4541%" y="853" width="4.9319%" height="15" fill="rgb(251,171,36)" fg:x="1029" fg:w="275"/><text x="18.7041%" y="863.50">databe..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (275 samples, 4.93%)</title><rect x="18.4541%" y="837" width="4.9319%" height="15" fill="rgb(230,62,22)" fg:x="1029" fg:w="275"/><text x="18.7041%" y="847.50">databe..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (9 samples, 0.16%)</title><rect x="23.2245%" y="821" width="0.1614%" height="15" fill="rgb(225,114,35)" fg:x="1295" fg:w="9"/><text x="23.4745%" y="831.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (9 samples, 0.16%)</title><rect x="23.2245%" y="805" width="0.1614%" height="15" fill="rgb(215,118,42)" fg:x="1295" fg:w="9"/><text x="23.4745%" y="815.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (8 samples, 0.14%)</title><rect x="23.2425%" y="789" width="0.1435%" height="15" fill="rgb(243,119,21)" fg:x="1296" fg:w="8"/><text x="23.4925%" y="799.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (848 samples, 15.21%)</title><rect x="8.2317%" y="1029" width="15.2080%" height="15" fill="rgb(252,177,53)" fg:x="459" fg:w="848"/><text x="8.4817%" y="1039.50">databend-query`&lt;databen..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (316 samples, 5.67%)</title><rect x="17.7726%" y="1013" width="5.6671%" height="15" fill="rgb(237,209,29)" fg:x="991" fg:w="316"/><text x="18.0226%" y="1023.50">databen..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (285 samples, 5.11%)</title><rect x="18.3286%" y="997" width="5.1112%" height="15" fill="rgb(212,65,23)" fg:x="1022" fg:w="285"/><text x="18.5786%" y="1007.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress (283 samples, 5.08%)</title><rect x="18.3644%" y="981" width="5.0753%" height="15" fill="rgb(230,222,46)" fg:x="1024" fg:w="283"/><text x="18.6144%" y="991.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (283 samples, 5.08%)</title><rect x="18.3644%" y="965" width="5.0753%" height="15" fill="rgb(215,135,32)" fg:x="1024" fg:w="283"/><text x="18.6144%" y="975.50">databe..</text></g><g><title>databend-query`parquet2::compression::decompress (283 samples, 5.08%)</title><rect x="18.3644%" y="949" width="5.0753%" height="15" fill="rgb(246,101,22)" fg:x="1024" fg:w="283"/><text x="18.6144%" y="959.50">databe..</text></g><g><title>databend-query`std::io::default_read_exact (279 samples, 5.00%)</title><rect x="18.4362%" y="933" width="5.0036%" height="15" fill="rgb(206,107,13)" fg:x="1028" fg:w="279"/><text x="18.6862%" y="943.50">databe..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (279 samples, 5.00%)</title><rect x="18.4362%" y="917" width="5.0036%" height="15" fill="rgb(250,100,44)" fg:x="1028" fg:w="279"/><text x="18.6862%" y="927.50">databe..</text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (279 samples, 5.00%)</title><rect x="18.4362%" y="901" width="5.0036%" height="15" fill="rgb(231,147,38)" fg:x="1028" fg:w="279"/><text x="18.6862%" y="911.50">databe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="23.3859%" y="885" width="0.0538%" height="15" fill="rgb(229,8,40)" fg:x="1304" fg:w="3"/><text x="23.6359%" y="895.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (41 samples, 0.74%)</title><rect x="23.4397%" y="1013" width="0.7353%" height="15" fill="rgb(221,135,30)" fg:x="1307" fg:w="41"/><text x="23.6897%" y="1023.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (41 samples, 0.74%)</title><rect x="23.4397%" y="997" width="0.7353%" height="15" fill="rgb(249,193,18)" fg:x="1307" fg:w="41"/><text x="23.6897%" y="1007.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (41 samples, 0.74%)</title><rect x="23.4397%" y="981" width="0.7353%" height="15" fill="rgb(209,133,39)" fg:x="1307" fg:w="41"/><text x="23.6897%" y="991.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="24.1750%" y="997" width="0.0538%" height="15" fill="rgb(232,100,14)" fg:x="1348" fg:w="3"/><text x="24.4250%" y="1007.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (3 samples, 0.05%)</title><rect x="24.1750%" y="981" width="0.0538%" height="15" fill="rgb(224,185,1)" fg:x="1348" fg:w="3"/><text x="24.4250%" y="991.50"></text></g><g><title>databend-query`std::io::default_read_to_end (3 samples, 0.05%)</title><rect x="24.1750%" y="965" width="0.0538%" height="15" fill="rgb(223,139,8)" fg:x="1348" fg:w="3"/><text x="24.4250%" y="975.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="24.1750%" y="949" width="0.0538%" height="15" fill="rgb(232,213,38)" fg:x="1348" fg:w="3"/><text x="24.4250%" y="959.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (1 samples, 0.02%)</title><rect x="24.2288%" y="949" width="0.0179%" height="15" fill="rgb(207,94,22)" fg:x="1351" fg:w="1"/><text x="24.4788%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="24.2288%" y="933" width="0.0179%" height="15" fill="rgb(219,183,54)" fg:x="1351" fg:w="1"/><text x="24.4788%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="24.2288%" y="917" width="0.0179%" height="15" fill="rgb(216,185,54)" fg:x="1351" fg:w="1"/><text x="24.4788%" y="927.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (2 samples, 0.04%)</title><rect x="28.9275%" y="837" width="0.0359%" height="15" fill="rgb(254,217,39)" fg:x="1613" fg:w="2"/><text x="29.1775%" y="847.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (2 samples, 0.04%)</title><rect x="28.9275%" y="821" width="0.0359%" height="15" fill="rgb(240,178,23)" fg:x="1613" fg:w="2"/><text x="29.1775%" y="831.50"></text></g><g><title>databend-query`ZSTD_decompressStream (267 samples, 4.79%)</title><rect x="24.2468%" y="901" width="4.7884%" height="15" fill="rgb(218,11,47)" fg:x="1352" fg:w="267"/><text x="24.4968%" y="911.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (267 samples, 4.79%)</title><rect x="24.2468%" y="885" width="4.7884%" height="15" fill="rgb(218,51,51)" fg:x="1352" fg:w="267"/><text x="24.4968%" y="895.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinue (267 samples, 4.79%)</title><rect x="24.2468%" y="869" width="4.7884%" height="15" fill="rgb(238,126,27)" fg:x="1352" fg:w="267"/><text x="24.4968%" y="879.50">databe..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (267 samples, 4.79%)</title><rect x="24.2468%" y="853" width="4.7884%" height="15" fill="rgb(249,202,22)" fg:x="1352" fg:w="267"/><text x="24.4968%" y="863.50">databe..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (4 samples, 0.07%)</title><rect x="28.9634%" y="837" width="0.0717%" height="15" fill="rgb(254,195,49)" fg:x="1615" fg:w="4"/><text x="29.2134%" y="847.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (4 samples, 0.07%)</title><rect x="28.9634%" y="821" width="0.0717%" height="15" fill="rgb(208,123,14)" fg:x="1615" fg:w="4"/><text x="29.2134%" y="831.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (4 samples, 0.07%)</title><rect x="28.9634%" y="805" width="0.0717%" height="15" fill="rgb(224,200,8)" fg:x="1615" fg:w="4"/><text x="29.2134%" y="815.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (274 samples, 4.91%)</title><rect x="24.2468%" y="917" width="4.9139%" height="15" fill="rgb(217,61,36)" fg:x="1352" fg:w="274"/><text x="24.4968%" y="927.50">databe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.13%)</title><rect x="29.0352%" y="901" width="0.1255%" height="15" fill="rgb(206,35,45)" fg:x="1619" fg:w="7"/><text x="29.2852%" y="911.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,170 samples, 20.98%)</title><rect x="8.2317%" y="1045" width="20.9828%" height="15" fill="rgb(217,65,33)" fg:x="459" fg:w="1170"/><text x="8.4817%" y="1055.50">databend-query`&lt;databend_common_a..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (322 samples, 5.77%)</title><rect x="23.4397%" y="1029" width="5.7747%" height="15" fill="rgb(222,158,48)" fg:x="1307" fg:w="322"/><text x="23.6897%" y="1039.50">databen..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (281 samples, 5.04%)</title><rect x="24.1750%" y="1013" width="5.0395%" height="15" fill="rgb(254,2,54)" fg:x="1348" fg:w="281"/><text x="24.4250%" y="1023.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress (278 samples, 4.99%)</title><rect x="24.2288%" y="997" width="4.9857%" height="15" fill="rgb(250,143,38)" fg:x="1351" fg:w="278"/><text x="24.4788%" y="1007.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (278 samples, 4.99%)</title><rect x="24.2288%" y="981" width="4.9857%" height="15" fill="rgb(248,25,0)" fg:x="1351" fg:w="278"/><text x="24.4788%" y="991.50">databe..</text></g><g><title>databend-query`parquet2::compression::decompress (278 samples, 4.99%)</title><rect x="24.2288%" y="965" width="4.9857%" height="15" fill="rgb(206,152,27)" fg:x="1351" fg:w="278"/><text x="24.4788%" y="975.50">databe..</text></g><g><title>databend-query`std::io::default_read_exact (277 samples, 4.97%)</title><rect x="24.2468%" y="949" width="4.9677%" height="15" fill="rgb(240,77,30)" fg:x="1352" fg:w="277"/><text x="24.4968%" y="959.50">databe..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (277 samples, 4.97%)</title><rect x="24.2468%" y="933" width="4.9677%" height="15" fill="rgb(231,5,3)" fg:x="1352" fg:w="277"/><text x="24.4968%" y="943.50">databe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="29.1607%" y="917" width="0.0538%" height="15" fill="rgb(207,226,32)" fg:x="1626" fg:w="3"/><text x="29.4107%" y="927.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::basic::Values::try_new (1 samples, 0.02%)</title><rect x="29.2145%" y="1029" width="0.0179%" height="15" fill="rgb(222,207,47)" fg:x="1629" fg:w="1"/><text x="29.4645%" y="1039.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (38 samples, 0.68%)</title><rect x="29.2324%" y="1029" width="0.6815%" height="15" fill="rgb(229,115,45)" fg:x="1630" fg:w="38"/><text x="29.4824%" y="1039.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (38 samples, 0.68%)</title><rect x="29.2324%" y="1013" width="0.6815%" height="15" fill="rgb(224,191,6)" fg:x="1630" fg:w="38"/><text x="29.4824%" y="1023.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (38 samples, 0.68%)</title><rect x="29.2324%" y="997" width="0.6815%" height="15" fill="rgb(230,227,24)" fg:x="1630" fg:w="38"/><text x="29.4824%" y="1007.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="29.9139%" y="1013" width="0.0538%" height="15" fill="rgb(228,80,19)" fg:x="1668" fg:w="3"/><text x="30.1639%" y="1023.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (3 samples, 0.05%)</title><rect x="29.9139%" y="997" width="0.0538%" height="15" fill="rgb(247,229,0)" fg:x="1668" fg:w="3"/><text x="30.1639%" y="1007.50"></text></g><g><title>databend-query`std::io::default_read_to_end (3 samples, 0.05%)</title><rect x="29.9139%" y="981" width="0.0538%" height="15" fill="rgb(237,194,15)" fg:x="1668" fg:w="3"/><text x="30.1639%" y="991.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="29.9139%" y="965" width="0.0538%" height="15" fill="rgb(219,203,20)" fg:x="1668" fg:w="3"/><text x="30.1639%" y="975.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (3 samples, 0.05%)</title><rect x="29.9677%" y="965" width="0.0538%" height="15" fill="rgb(234,128,8)" fg:x="1671" fg:w="3"/><text x="30.2177%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.05%)</title><rect x="29.9677%" y="949" width="0.0538%" height="15" fill="rgb(248,202,8)" fg:x="1671" fg:w="3"/><text x="30.2177%" y="959.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.05%)</title><rect x="29.9677%" y="933" width="0.0538%" height="15" fill="rgb(206,104,37)" fg:x="1671" fg:w="3"/><text x="30.2177%" y="943.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (4 samples, 0.07%)</title><rect x="34.8099%" y="853" width="0.0717%" height="15" fill="rgb(223,8,27)" fg:x="1941" fg:w="4"/><text x="35.0599%" y="863.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (4 samples, 0.07%)</title><rect x="34.8099%" y="837" width="0.0717%" height="15" fill="rgb(216,217,28)" fg:x="1941" fg:w="4"/><text x="35.0599%" y="847.50"></text></g><g><title>databend-query`ZSTD_decompressStream (277 samples, 4.97%)</title><rect x="30.0215%" y="917" width="4.9677%" height="15" fill="rgb(249,199,1)" fg:x="1674" fg:w="277"/><text x="30.2715%" y="927.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (277 samples, 4.97%)</title><rect x="30.0215%" y="901" width="4.9677%" height="15" fill="rgb(240,85,17)" fg:x="1674" fg:w="277"/><text x="30.2715%" y="911.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinue (277 samples, 4.97%)</title><rect x="30.0215%" y="885" width="4.9677%" height="15" fill="rgb(206,108,45)" fg:x="1674" fg:w="277"/><text x="30.2715%" y="895.50">databe..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (277 samples, 4.97%)</title><rect x="30.0215%" y="869" width="4.9677%" height="15" fill="rgb(245,210,41)" fg:x="1674" fg:w="277"/><text x="30.2715%" y="879.50">databe..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (6 samples, 0.11%)</title><rect x="34.8816%" y="853" width="0.1076%" height="15" fill="rgb(206,13,37)" fg:x="1945" fg:w="6"/><text x="35.1316%" y="863.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (6 samples, 0.11%)</title><rect x="34.8816%" y="837" width="0.1076%" height="15" fill="rgb(250,61,18)" fg:x="1945" fg:w="6"/><text x="35.1316%" y="847.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (5 samples, 0.09%)</title><rect x="34.8996%" y="821" width="0.0897%" height="15" fill="rgb(235,172,48)" fg:x="1946" fg:w="5"/><text x="35.1496%" y="831.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (281 samples, 5.04%)</title><rect x="30.0215%" y="933" width="5.0395%" height="15" fill="rgb(249,201,17)" fg:x="1674" fg:w="281"/><text x="30.2715%" y="943.50">databe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.07%)</title><rect x="34.9892%" y="917" width="0.0717%" height="15" fill="rgb(219,208,6)" fg:x="1951" fg:w="4"/><text x="35.2392%" y="927.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,497 samples, 26.85%)</title><rect x="8.2317%" y="1061" width="26.8472%" height="15" fill="rgb(248,31,23)" fg:x="459" fg:w="1497"/><text x="8.4817%" y="1071.50">databend-query`&lt;databend_common_arrow::arro..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (327 samples, 5.86%)</title><rect x="29.2145%" y="1045" width="5.8644%" height="15" fill="rgb(245,15,42)" fg:x="1629" fg:w="327"/><text x="29.4645%" y="1055.50">databen..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (288 samples, 5.16%)</title><rect x="29.9139%" y="1029" width="5.1650%" height="15" fill="rgb(222,217,39)" fg:x="1668" fg:w="288"/><text x="30.1639%" y="1039.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress (285 samples, 5.11%)</title><rect x="29.9677%" y="1013" width="5.1112%" height="15" fill="rgb(210,219,27)" fg:x="1671" fg:w="285"/><text x="30.2177%" y="1023.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (285 samples, 5.11%)</title><rect x="29.9677%" y="997" width="5.1112%" height="15" fill="rgb(252,166,36)" fg:x="1671" fg:w="285"/><text x="30.2177%" y="1007.50">databe..</text></g><g><title>databend-query`parquet2::compression::decompress (285 samples, 5.11%)</title><rect x="29.9677%" y="981" width="5.1112%" height="15" fill="rgb(245,132,34)" fg:x="1671" fg:w="285"/><text x="30.2177%" y="991.50">databe..</text></g><g><title>databend-query`std::io::default_read_exact (282 samples, 5.06%)</title><rect x="30.0215%" y="965" width="5.0574%" height="15" fill="rgb(236,54,3)" fg:x="1674" fg:w="282"/><text x="30.2715%" y="975.50">databe..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (282 samples, 5.06%)</title><rect x="30.0215%" y="949" width="5.0574%" height="15" fill="rgb(241,173,43)" fg:x="1674" fg:w="282"/><text x="30.2715%" y="959.50">databe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="35.0610%" y="933" width="0.0179%" height="15" fill="rgb(215,190,9)" fg:x="1955" fg:w="1"/><text x="35.3110%" y="943.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (40 samples, 0.72%)</title><rect x="35.0789%" y="1045" width="0.7174%" height="15" fill="rgb(242,101,16)" fg:x="1956" fg:w="40"/><text x="35.3289%" y="1055.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (40 samples, 0.72%)</title><rect x="35.0789%" y="1029" width="0.7174%" height="15" fill="rgb(223,190,21)" fg:x="1956" fg:w="40"/><text x="35.3289%" y="1039.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (40 samples, 0.72%)</title><rect x="35.0789%" y="1013" width="0.7174%" height="15" fill="rgb(215,228,25)" fg:x="1956" fg:w="40"/><text x="35.3289%" y="1023.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="35.7963%" y="1029" width="0.0538%" height="15" fill="rgb(225,36,22)" fg:x="1996" fg:w="3"/><text x="36.0463%" y="1039.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (3 samples, 0.05%)</title><rect x="35.7963%" y="1013" width="0.0538%" height="15" fill="rgb(251,106,46)" fg:x="1996" fg:w="3"/><text x="36.0463%" y="1023.50"></text></g><g><title>databend-query`std::io::default_read_to_end (3 samples, 0.05%)</title><rect x="35.7963%" y="997" width="0.0538%" height="15" fill="rgb(208,90,1)" fg:x="1996" fg:w="3"/><text x="36.0463%" y="1007.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="35.7963%" y="981" width="0.0538%" height="15" fill="rgb(243,10,4)" fg:x="1996" fg:w="3"/><text x="36.0463%" y="991.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.11%)</title><rect x="35.8501%" y="949" width="0.1076%" height="15" fill="rgb(212,137,27)" fg:x="1999" fg:w="6"/><text x="36.1001%" y="959.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (7 samples, 0.13%)</title><rect x="35.8501%" y="981" width="0.1255%" height="15" fill="rgb(231,220,49)" fg:x="1999" fg:w="7"/><text x="36.1001%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.13%)</title><rect x="35.8501%" y="965" width="0.1255%" height="15" fill="rgb(237,96,20)" fg:x="1999" fg:w="7"/><text x="36.1001%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$madvise (1 samples, 0.02%)</title><rect x="35.9577%" y="949" width="0.0179%" height="15" fill="rgb(239,229,30)" fg:x="2005" fg:w="1"/><text x="36.2077%" y="959.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;zstd::stream::read::Decoder&lt;std::io::buffered::bufreader::BufReader&lt;&amp;[u8]&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="35.9756%" y="981" width="0.0179%" height="15" fill="rgb(219,65,33)" fg:x="2006" fg:w="1"/><text x="36.2256%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="35.9756%" y="965" width="0.0179%" height="15" fill="rgb(243,134,7)" fg:x="2006" fg:w="1"/><text x="36.2256%" y="975.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="35.9756%" y="949" width="0.0179%" height="15" fill="rgb(216,177,54)" fg:x="2006" fg:w="1"/><text x="36.2256%" y="959.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (3 samples, 0.05%)</title><rect x="40.6564%" y="869" width="0.0538%" height="15" fill="rgb(211,160,20)" fg:x="2267" fg:w="3"/><text x="40.9064%" y="879.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (3 samples, 0.05%)</title><rect x="40.6564%" y="853" width="0.0538%" height="15" fill="rgb(239,85,39)" fg:x="2267" fg:w="3"/><text x="40.9064%" y="863.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="40.7102%" y="837" width="0.0179%" height="15" fill="rgb(232,125,22)" fg:x="2270" fg:w="1"/><text x="40.9602%" y="847.50"></text></g><g><title>databend-query`ZSTD_decompressStream (270 samples, 4.84%)</title><rect x="35.9935%" y="933" width="4.8422%" height="15" fill="rgb(244,57,34)" fg:x="2007" fg:w="270"/><text x="36.2435%" y="943.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (269 samples, 4.82%)</title><rect x="36.0115%" y="917" width="4.8242%" height="15" fill="rgb(214,203,32)" fg:x="2008" fg:w="269"/><text x="36.2615%" y="927.50">databe..</text></g><g><title>databend-query`ZSTD_decompressContinue (269 samples, 4.82%)</title><rect x="36.0115%" y="901" width="4.8242%" height="15" fill="rgb(207,58,43)" fg:x="2008" fg:w="269"/><text x="36.2615%" y="911.50">databe..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (269 samples, 4.82%)</title><rect x="36.0115%" y="885" width="4.8242%" height="15" fill="rgb(215,193,15)" fg:x="2008" fg:w="269"/><text x="36.2615%" y="895.50">databe..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (7 samples, 0.13%)</title><rect x="40.7102%" y="869" width="0.1255%" height="15" fill="rgb(232,15,44)" fg:x="2270" fg:w="7"/><text x="40.9602%" y="879.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (7 samples, 0.13%)</title><rect x="40.7102%" y="853" width="0.1255%" height="15" fill="rgb(212,3,48)" fg:x="2270" fg:w="7"/><text x="40.9602%" y="863.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (6 samples, 0.11%)</title><rect x="40.7281%" y="837" width="0.1076%" height="15" fill="rgb(218,128,7)" fg:x="2271" fg:w="6"/><text x="40.9781%" y="847.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (277 samples, 4.97%)</title><rect x="35.9935%" y="949" width="4.9677%" height="15" fill="rgb(226,216,39)" fg:x="2007" fg:w="277"/><text x="36.2435%" y="959.50">databe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.13%)</title><rect x="40.8357%" y="933" width="0.1255%" height="15" fill="rgb(243,47,51)" fg:x="2277" fg:w="7"/><text x="41.0857%" y="943.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::basic::Iter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,826 samples, 32.75%)</title><rect x="8.2317%" y="1077" width="32.7475%" height="15" fill="rgb(241,183,40)" fg:x="459" fg:w="1826"/><text x="8.4817%" y="1087.50">databend-query`&lt;databend_common_arrow::arrow::io::par..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (329 samples, 5.90%)</title><rect x="35.0789%" y="1061" width="5.9003%" height="15" fill="rgb(231,217,32)" fg:x="1956" fg:w="329"/><text x="35.3289%" y="1071.50">databend..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (289 samples, 5.18%)</title><rect x="35.7963%" y="1045" width="5.1829%" height="15" fill="rgb(229,61,38)" fg:x="1996" fg:w="289"/><text x="36.0463%" y="1055.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress (286 samples, 5.13%)</title><rect x="35.8501%" y="1029" width="5.1291%" height="15" fill="rgb(225,210,5)" fg:x="1999" fg:w="286"/><text x="36.1001%" y="1039.50">databe..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (286 samples, 5.13%)</title><rect x="35.8501%" y="1013" width="5.1291%" height="15" fill="rgb(231,79,45)" fg:x="1999" fg:w="286"/><text x="36.1001%" y="1023.50">databe..</text></g><g><title>databend-query`parquet2::compression::decompress (286 samples, 5.13%)</title><rect x="35.8501%" y="997" width="5.1291%" height="15" fill="rgb(224,100,7)" fg:x="1999" fg:w="286"/><text x="36.1001%" y="1007.50">databe..</text></g><g><title>databend-query`std::io::default_read_exact (278 samples, 4.99%)</title><rect x="35.9935%" y="981" width="4.9857%" height="15" fill="rgb(241,198,18)" fg:x="2007" fg:w="278"/><text x="36.2435%" y="991.50">databe..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (278 samples, 4.99%)</title><rect x="35.9935%" y="965" width="4.9857%" height="15" fill="rgb(252,97,53)" fg:x="2007" fg:w="278"/><text x="36.2435%" y="975.50">databe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="40.9613%" y="949" width="0.0179%" height="15" fill="rgb(220,88,7)" fg:x="2284" fg:w="1"/><text x="41.2113%" y="959.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (4 samples, 0.07%)</title><rect x="40.9792%" y="949" width="0.0717%" height="15" fill="rgb(213,176,14)" fg:x="2285" fg:w="4"/><text x="41.2292%" y="959.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 0.07%)</title><rect x="40.9792%" y="933" width="0.0717%" height="15" fill="rgb(246,73,7)" fg:x="2285" fg:w="4"/><text x="41.2292%" y="943.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (4 samples, 0.07%)</title><rect x="40.9792%" y="917" width="0.0717%" height="15" fill="rgb(245,64,36)" fg:x="2285" fg:w="4"/><text x="41.2292%" y="927.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (2 samples, 0.04%)</title><rect x="41.6966%" y="757" width="0.0359%" height="15" fill="rgb(245,80,10)" fg:x="2325" fg:w="2"/><text x="41.9466%" y="767.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (7 samples, 0.13%)</title><rect x="41.6966%" y="773" width="0.1255%" height="15" fill="rgb(232,107,50)" fg:x="2325" fg:w="7"/><text x="41.9466%" y="783.50"></text></g><g><title>databend-query`HUF_decompress4X2_usingDTable_internal (5 samples, 0.09%)</title><rect x="41.7324%" y="757" width="0.0897%" height="15" fill="rgb(253,3,0)" fg:x="2327" fg:w="5"/><text x="41.9824%" y="767.50"></text></g><g><title>databend-query`ZSTD_decompressStream (44 samples, 0.79%)</title><rect x="41.0509%" y="837" width="0.7891%" height="15" fill="rgb(212,99,53)" fg:x="2289" fg:w="44"/><text x="41.3009%" y="847.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (44 samples, 0.79%)</title><rect x="41.0509%" y="821" width="0.7891%" height="15" fill="rgb(249,111,54)" fg:x="2289" fg:w="44"/><text x="41.3009%" y="831.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (44 samples, 0.79%)</title><rect x="41.0509%" y="805" width="0.7891%" height="15" fill="rgb(249,55,30)" fg:x="2289" fg:w="44"/><text x="41.3009%" y="815.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (44 samples, 0.79%)</title><rect x="41.0509%" y="789" width="0.7891%" height="15" fill="rgb(237,47,42)" fg:x="2289" fg:w="44"/><text x="41.3009%" y="799.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (1 samples, 0.02%)</title><rect x="41.8221%" y="773" width="0.0179%" height="15" fill="rgb(211,20,18)" fg:x="2332" fg:w="1"/><text x="42.0721%" y="783.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (1 samples, 0.02%)</title><rect x="41.8221%" y="757" width="0.0179%" height="15" fill="rgb(231,203,46)" fg:x="2332" fg:w="1"/><text x="42.0721%" y="767.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (1 samples, 0.02%)</title><rect x="41.8221%" y="741" width="0.0179%" height="15" fill="rgb(237,142,3)" fg:x="2332" fg:w="1"/><text x="42.0721%" y="751.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (46 samples, 0.82%)</title><rect x="41.0509%" y="853" width="0.8250%" height="15" fill="rgb(241,107,1)" fg:x="2289" fg:w="46"/><text x="41.3009%" y="863.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="41.8400%" y="837" width="0.0359%" height="15" fill="rgb(229,83,13)" fg:x="2333" fg:w="2"/><text x="42.0900%" y="847.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.91%)</title><rect x="40.9792%" y="981" width="0.9146%" height="15" fill="rgb(241,91,40)" fg:x="2285" fg:w="51"/><text x="41.2292%" y="991.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (51 samples, 0.91%)</title><rect x="40.9792%" y="965" width="0.9146%" height="15" fill="rgb(225,3,45)" fg:x="2285" fg:w="51"/><text x="41.2292%" y="975.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (47 samples, 0.84%)</title><rect x="41.0509%" y="949" width="0.8429%" height="15" fill="rgb(244,223,14)" fg:x="2289" fg:w="47"/><text x="41.3009%" y="959.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (47 samples, 0.84%)</title><rect x="41.0509%" y="933" width="0.8429%" height="15" fill="rgb(224,124,37)" fg:x="2289" fg:w="47"/><text x="41.3009%" y="943.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (47 samples, 0.84%)</title><rect x="41.0509%" y="917" width="0.8429%" height="15" fill="rgb(251,171,30)" fg:x="2289" fg:w="47"/><text x="41.3009%" y="927.50"></text></g><g><title>databend-query`parquet2::compression::decompress (47 samples, 0.84%)</title><rect x="41.0509%" y="901" width="0.8429%" height="15" fill="rgb(236,46,54)" fg:x="2289" fg:w="47"/><text x="41.3009%" y="911.50"></text></g><g><title>databend-query`std::io::default_read_exact (47 samples, 0.84%)</title><rect x="41.0509%" y="885" width="0.8429%" height="15" fill="rgb(245,213,5)" fg:x="2289" fg:w="47"/><text x="41.3009%" y="895.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (47 samples, 0.84%)</title><rect x="41.0509%" y="869" width="0.8429%" height="15" fill="rgb(230,144,27)" fg:x="2289" fg:w="47"/><text x="41.3009%" y="879.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="41.8759%" y="853" width="0.0179%" height="15" fill="rgb(220,86,6)" fg:x="2335" fg:w="1"/><text x="42.1259%" y="863.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (12 samples, 0.22%)</title><rect x="41.8938%" y="965" width="0.2152%" height="15" fill="rgb(240,20,13)" fg:x="2336" fg:w="12"/><text x="42.1438%" y="975.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (12 samples, 0.22%)</title><rect x="41.8938%" y="949" width="0.2152%" height="15" fill="rgb(217,89,34)" fg:x="2336" fg:w="12"/><text x="42.1438%" y="959.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (12 samples, 0.22%)</title><rect x="41.8938%" y="933" width="0.2152%" height="15" fill="rgb(229,13,5)" fg:x="2336" fg:w="12"/><text x="42.1438%" y="943.50"></text></g><g><title>databend-query`parquet2::read::compression::create_page (1 samples, 0.02%)</title><rect x="42.1090%" y="933" width="0.0179%" height="15" fill="rgb(244,67,35)" fg:x="2348" fg:w="1"/><text x="42.3590%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="42.1090%" y="917" width="0.0179%" height="15" fill="rgb(221,40,2)" fg:x="2348" fg:w="1"/><text x="42.3590%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`medium_size (1 samples, 0.02%)</title><rect x="42.1090%" y="901" width="0.0179%" height="15" fill="rgb(237,157,21)" fg:x="2348" fg:w="1"/><text x="42.3590%" y="911.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (2 samples, 0.04%)</title><rect x="42.1270%" y="901" width="0.0359%" height="15" fill="rgb(222,94,11)" fg:x="2349" fg:w="2"/><text x="42.3770%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.04%)</title><rect x="42.1270%" y="885" width="0.0359%" height="15" fill="rgb(249,113,6)" fg:x="2349" fg:w="2"/><text x="42.3770%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="42.1270%" y="869" width="0.0359%" height="15" fill="rgb(238,137,36)" fg:x="2349" fg:w="2"/><text x="42.3770%" y="879.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (8 samples, 0.14%)</title><rect x="43.9383%" y="773" width="0.1435%" height="15" fill="rgb(210,102,26)" fg:x="2450" fg:w="8"/><text x="44.1883%" y="783.50"></text></g><g><title>databend-query`HUF_decompress4X2_usingDTable_internal (3 samples, 0.05%)</title><rect x="44.0818%" y="773" width="0.0538%" height="15" fill="rgb(218,30,30)" fg:x="2458" fg:w="3"/><text x="44.3318%" y="783.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (13 samples, 0.23%)</title><rect x="43.9383%" y="789" width="0.2331%" height="15" fill="rgb(214,67,26)" fg:x="2450" fg:w="13"/><text x="44.1883%" y="799.50"></text></g><g><title>databend-query`HUF_decompress4X_hufOnly_wksp (2 samples, 0.04%)</title><rect x="44.1356%" y="773" width="0.0359%" height="15" fill="rgb(251,9,53)" fg:x="2461" fg:w="2"/><text x="44.3856%" y="783.50"></text></g><g><title>databend-query`HUF_readDTableX1_wksp (2 samples, 0.04%)</title><rect x="44.1356%" y="757" width="0.0359%" height="15" fill="rgb(228,204,25)" fg:x="2461" fg:w="2"/><text x="44.3856%" y="767.50"></text></g><g><title>databend-query`HUF_readStats_wksp (1 samples, 0.02%)</title><rect x="44.1535%" y="741" width="0.0179%" height="15" fill="rgb(207,153,8)" fg:x="2462" fg:w="1"/><text x="44.4035%" y="751.50"></text></g><g><title>databend-query`ZSTD_decompressStream (116 samples, 2.08%)</title><rect x="42.1628%" y="853" width="2.0803%" height="15" fill="rgb(242,9,16)" fg:x="2351" fg:w="116"/><text x="42.4128%" y="863.50">d..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (116 samples, 2.08%)</title><rect x="42.1628%" y="837" width="2.0803%" height="15" fill="rgb(217,211,10)" fg:x="2351" fg:w="116"/><text x="42.4128%" y="847.50">d..</text></g><g><title>databend-query`ZSTD_decompressContinue (116 samples, 2.08%)</title><rect x="42.1628%" y="821" width="2.0803%" height="15" fill="rgb(219,228,52)" fg:x="2351" fg:w="116"/><text x="42.4128%" y="831.50">d..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (116 samples, 2.08%)</title><rect x="42.1628%" y="805" width="2.0803%" height="15" fill="rgb(231,92,29)" fg:x="2351" fg:w="116"/><text x="42.4128%" y="815.50">d..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (4 samples, 0.07%)</title><rect x="44.1714%" y="789" width="0.0717%" height="15" fill="rgb(232,8,23)" fg:x="2463" fg:w="4"/><text x="44.4214%" y="799.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (4 samples, 0.07%)</title><rect x="44.1714%" y="773" width="0.0717%" height="15" fill="rgb(216,211,34)" fg:x="2463" fg:w="4"/><text x="44.4214%" y="783.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (4 samples, 0.07%)</title><rect x="44.1714%" y="757" width="0.0717%" height="15" fill="rgb(236,151,0)" fg:x="2463" fg:w="4"/><text x="44.4214%" y="767.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (186 samples, 3.34%)</title><rect x="40.9792%" y="997" width="3.3357%" height="15" fill="rgb(209,168,3)" fg:x="2285" fg:w="186"/><text x="41.2292%" y="1007.50">dat..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (135 samples, 2.42%)</title><rect x="41.8938%" y="981" width="2.4211%" height="15" fill="rgb(208,129,28)" fg:x="2336" fg:w="135"/><text x="42.1438%" y="991.50">da..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (123 samples, 2.21%)</title><rect x="42.1090%" y="965" width="2.2059%" height="15" fill="rgb(229,78,22)" fg:x="2348" fg:w="123"/><text x="42.3590%" y="975.50">d..</text></g><g><title>databend-query`parquet2::read::compression::decompress (123 samples, 2.21%)</title><rect x="42.1090%" y="949" width="2.2059%" height="15" fill="rgb(228,187,13)" fg:x="2348" fg:w="123"/><text x="42.3590%" y="959.50">d..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (122 samples, 2.19%)</title><rect x="42.1270%" y="933" width="2.1879%" height="15" fill="rgb(240,119,24)" fg:x="2349" fg:w="122"/><text x="42.3770%" y="943.50">d..</text></g><g><title>databend-query`parquet2::compression::decompress (122 samples, 2.19%)</title><rect x="42.1270%" y="917" width="2.1879%" height="15" fill="rgb(209,194,42)" fg:x="2349" fg:w="122"/><text x="42.3770%" y="927.50">d..</text></g><g><title>databend-query`std::io::default_read_exact (120 samples, 2.15%)</title><rect x="42.1628%" y="901" width="2.1521%" height="15" fill="rgb(247,200,46)" fg:x="2351" fg:w="120"/><text x="42.4128%" y="911.50">d..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (120 samples, 2.15%)</title><rect x="42.1628%" y="885" width="2.1521%" height="15" fill="rgb(218,76,16)" fg:x="2351" fg:w="120"/><text x="42.4128%" y="895.50">d..</text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (120 samples, 2.15%)</title><rect x="42.1628%" y="869" width="2.1521%" height="15" fill="rgb(225,21,48)" fg:x="2351" fg:w="120"/><text x="42.4128%" y="879.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.07%)</title><rect x="44.2432%" y="853" width="0.0717%" height="15" fill="rgb(239,223,50)" fg:x="2467" fg:w="4"/><text x="44.4932%" y="863.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (30 samples, 0.54%)</title><rect x="44.3149%" y="981" width="0.5380%" height="15" fill="rgb(244,45,21)" fg:x="2471" fg:w="30"/><text x="44.5649%" y="991.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (30 samples, 0.54%)</title><rect x="44.3149%" y="965" width="0.5380%" height="15" fill="rgb(232,33,43)" fg:x="2471" fg:w="30"/><text x="44.5649%" y="975.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (30 samples, 0.54%)</title><rect x="44.3149%" y="949" width="0.5380%" height="15" fill="rgb(209,8,3)" fg:x="2471" fg:w="30"/><text x="44.5649%" y="959.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="44.8529%" y="965" width="0.0359%" height="15" fill="rgb(214,25,53)" fg:x="2501" fg:w="2"/><text x="45.1029%" y="975.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (2 samples, 0.04%)</title><rect x="44.8529%" y="949" width="0.0359%" height="15" fill="rgb(254,186,54)" fg:x="2501" fg:w="2"/><text x="45.1029%" y="959.50"></text></g><g><title>databend-query`std::io::default_read_to_end (2 samples, 0.04%)</title><rect x="44.8529%" y="933" width="0.0359%" height="15" fill="rgb(208,174,49)" fg:x="2501" fg:w="2"/><text x="45.1029%" y="943.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="44.8709%" y="917" width="0.0179%" height="15" fill="rgb(233,191,51)" fg:x="2502" fg:w="1"/><text x="45.1209%" y="927.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (3 samples, 0.05%)</title><rect x="44.8888%" y="917" width="0.0538%" height="15" fill="rgb(222,134,10)" fg:x="2503" fg:w="3"/><text x="45.1388%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.05%)</title><rect x="44.8888%" y="901" width="0.0538%" height="15" fill="rgb(230,226,20)" fg:x="2503" fg:w="3"/><text x="45.1388%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.05%)</title><rect x="44.8888%" y="885" width="0.0538%" height="15" fill="rgb(251,111,25)" fg:x="2503" fg:w="3"/><text x="45.1388%" y="895.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (9 samples, 0.16%)</title><rect x="47.1664%" y="789" width="0.1614%" height="15" fill="rgb(224,40,46)" fg:x="2630" fg:w="9"/><text x="47.4164%" y="799.50"></text></g><g><title>databend-query`HUF_decompress4X2_usingDTable_internal (4 samples, 0.07%)</title><rect x="47.3278%" y="789" width="0.0717%" height="15" fill="rgb(236,108,47)" fg:x="2639" fg:w="4"/><text x="47.5778%" y="799.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (15 samples, 0.27%)</title><rect x="47.1664%" y="805" width="0.2690%" height="15" fill="rgb(234,93,0)" fg:x="2630" fg:w="15"/><text x="47.4164%" y="815.50"></text></g><g><title>databend-query`HUF_decompress4X_hufOnly_wksp (2 samples, 0.04%)</title><rect x="47.3996%" y="789" width="0.0359%" height="15" fill="rgb(224,213,32)" fg:x="2643" fg:w="2"/><text x="47.6496%" y="799.50"></text></g><g><title>databend-query`HUF_readDTableX1_wksp (2 samples, 0.04%)</title><rect x="47.3996%" y="773" width="0.0359%" height="15" fill="rgb(251,11,48)" fg:x="2643" fg:w="2"/><text x="47.6496%" y="783.50"></text></g><g><title>databend-query`HUF_readStats_wksp (1 samples, 0.02%)</title><rect x="47.4175%" y="757" width="0.0179%" height="15" fill="rgb(236,173,5)" fg:x="2644" fg:w="1"/><text x="47.6675%" y="767.50"></text></g><g><title>databend-query`FSE_decompress_wksp_bmi2 (1 samples, 0.02%)</title><rect x="47.4175%" y="741" width="0.0179%" height="15" fill="rgb(230,95,12)" fg:x="2644" fg:w="1"/><text x="47.6675%" y="751.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="47.4354%" y="773" width="0.0179%" height="15" fill="rgb(232,209,1)" fg:x="2645" fg:w="1"/><text x="47.6854%" y="783.50"></text></g><g><title>databend-query`ZSTD_decompressStream (146 samples, 2.62%)</title><rect x="44.9426%" y="869" width="2.6184%" height="15" fill="rgb(232,6,1)" fg:x="2506" fg:w="146"/><text x="45.1926%" y="879.50">da..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (146 samples, 2.62%)</title><rect x="44.9426%" y="853" width="2.6184%" height="15" fill="rgb(210,224,50)" fg:x="2506" fg:w="146"/><text x="45.1926%" y="863.50">da..</text></g><g><title>databend-query`ZSTD_decompressContinue (146 samples, 2.62%)</title><rect x="44.9426%" y="837" width="2.6184%" height="15" fill="rgb(228,127,35)" fg:x="2506" fg:w="146"/><text x="45.1926%" y="847.50">da..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (146 samples, 2.62%)</title><rect x="44.9426%" y="821" width="2.6184%" height="15" fill="rgb(245,102,45)" fg:x="2506" fg:w="146"/><text x="45.1926%" y="831.50">da..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (7 samples, 0.13%)</title><rect x="47.4354%" y="805" width="0.1255%" height="15" fill="rgb(214,1,49)" fg:x="2645" fg:w="7"/><text x="47.6854%" y="815.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (7 samples, 0.13%)</title><rect x="47.4354%" y="789" width="0.1255%" height="15" fill="rgb(226,163,40)" fg:x="2645" fg:w="7"/><text x="47.6854%" y="799.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (6 samples, 0.11%)</title><rect x="47.4534%" y="773" width="0.1076%" height="15" fill="rgb(239,212,28)" fg:x="2646" fg:w="6"/><text x="47.7034%" y="783.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (150 samples, 2.69%)</title><rect x="44.9426%" y="885" width="2.6901%" height="15" fill="rgb(220,20,13)" fg:x="2506" fg:w="150"/><text x="45.1926%" y="895.50">da..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.07%)</title><rect x="47.5610%" y="869" width="0.0717%" height="15" fill="rgb(210,164,35)" fg:x="2652" fg:w="4"/><text x="47.8110%" y="879.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (372 samples, 6.67%)</title><rect x="40.9792%" y="1013" width="6.6714%" height="15" fill="rgb(248,109,41)" fg:x="2285" fg:w="372"/><text x="41.2292%" y="1023.50">databend-..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (186 samples, 3.34%)</title><rect x="44.3149%" y="997" width="3.3357%" height="15" fill="rgb(238,23,50)" fg:x="2471" fg:w="186"/><text x="44.5649%" y="1007.50">dat..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (156 samples, 2.80%)</title><rect x="44.8529%" y="981" width="2.7977%" height="15" fill="rgb(211,48,49)" fg:x="2501" fg:w="156"/><text x="45.1029%" y="991.50">da..</text></g><g><title>databend-query`parquet2::read::compression::decompress (154 samples, 2.76%)</title><rect x="44.8888%" y="965" width="2.7618%" height="15" fill="rgb(223,36,21)" fg:x="2503" fg:w="154"/><text x="45.1388%" y="975.50">da..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (154 samples, 2.76%)</title><rect x="44.8888%" y="949" width="2.7618%" height="15" fill="rgb(207,123,46)" fg:x="2503" fg:w="154"/><text x="45.1388%" y="959.50">da..</text></g><g><title>databend-query`parquet2::compression::decompress (154 samples, 2.76%)</title><rect x="44.8888%" y="933" width="2.7618%" height="15" fill="rgb(240,218,32)" fg:x="2503" fg:w="154"/><text x="45.1388%" y="943.50">da..</text></g><g><title>databend-query`std::io::default_read_exact (151 samples, 2.71%)</title><rect x="44.9426%" y="917" width="2.7080%" height="15" fill="rgb(252,5,43)" fg:x="2506" fg:w="151"/><text x="45.1926%" y="927.50">da..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (151 samples, 2.71%)</title><rect x="44.9426%" y="901" width="2.7080%" height="15" fill="rgb(252,84,19)" fg:x="2506" fg:w="151"/><text x="45.1926%" y="911.50">da..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="47.6327%" y="885" width="0.0179%" height="15" fill="rgb(243,152,39)" fg:x="2656" fg:w="1"/><text x="47.8827%" y="895.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (36 samples, 0.65%)</title><rect x="47.6506%" y="997" width="0.6456%" height="15" fill="rgb(234,160,15)" fg:x="2657" fg:w="36"/><text x="47.9006%" y="1007.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (36 samples, 0.65%)</title><rect x="47.6506%" y="981" width="0.6456%" height="15" fill="rgb(237,34,20)" fg:x="2657" fg:w="36"/><text x="47.9006%" y="991.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (36 samples, 0.65%)</title><rect x="47.6506%" y="965" width="0.6456%" height="15" fill="rgb(229,97,13)" fg:x="2657" fg:w="36"/><text x="47.9006%" y="975.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="48.2963%" y="981" width="0.0179%" height="15" fill="rgb(234,71,50)" fg:x="2693" fg:w="1"/><text x="48.5463%" y="991.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (1 samples, 0.02%)</title><rect x="48.2963%" y="965" width="0.0179%" height="15" fill="rgb(253,155,4)" fg:x="2693" fg:w="1"/><text x="48.5463%" y="975.50"></text></g><g><title>databend-query`parquet2::read::page::reader::read_page_header (1 samples, 0.02%)</title><rect x="48.2963%" y="949" width="0.0179%" height="15" fill="rgb(222,185,37)" fg:x="2693" fg:w="1"/><text x="48.5463%" y="959.50"></text></g><g><title>databend-query`&lt;parquet_format_safe::parquet_format::PageHeader as parquet_format_safe::thrift::protocol::ReadThrift&gt;::read_from_in_protocol (1 samples, 0.02%)</title><rect x="48.2963%" y="933" width="0.0179%" height="15" fill="rgb(251,177,13)" fg:x="2693" fg:w="1"/><text x="48.5463%" y="943.50"></text></g><g><title>databend-query`&lt;parquet_format_safe::thrift::protocol::compact::TCompactInputProtocol&lt;R&gt; as parquet_format_safe::thrift::protocol::TInputProtocol&gt;::read_i32 (1 samples, 0.02%)</title><rect x="48.2963%" y="917" width="0.0179%" height="15" fill="rgb(250,179,40)" fg:x="2693" fg:w="1"/><text x="48.5463%" y="927.50"></text></g><g><title>databend-query`&lt;R as parquet_format_safe::thrift::varint::decode::VarIntReader&gt;::read_varint (1 samples, 0.02%)</title><rect x="48.2963%" y="901" width="0.0179%" height="15" fill="rgb(242,44,2)" fg:x="2693" fg:w="1"/><text x="48.5463%" y="911.50"></text></g><g><title>databend-query`parquet_format_safe::thrift::varint::decode::VarIntProcessor::decode (1 samples, 0.02%)</title><rect x="48.2963%" y="885" width="0.0179%" height="15" fill="rgb(216,177,13)" fg:x="2693" fg:w="1"/><text x="48.5463%" y="895.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (5 samples, 0.09%)</title><rect x="48.3142%" y="933" width="0.0897%" height="15" fill="rgb(216,106,43)" fg:x="2694" fg:w="5"/><text x="48.5642%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.09%)</title><rect x="48.3142%" y="917" width="0.0897%" height="15" fill="rgb(216,183,2)" fg:x="2694" fg:w="5"/><text x="48.5642%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.09%)</title><rect x="48.3142%" y="901" width="0.0897%" height="15" fill="rgb(249,75,3)" fg:x="2694" fg:w="5"/><text x="48.5642%" y="911.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;zstd::stream::read::Decoder&lt;std::io::buffered::bufreader::BufReader&lt;&amp;[u8]&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="48.4039%" y="933" width="0.0179%" height="15" fill="rgb(219,67,39)" fg:x="2699" fg:w="1"/><text x="48.6539%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="48.4039%" y="917" width="0.0179%" height="15" fill="rgb(253,228,2)" fg:x="2699" fg:w="1"/><text x="48.6539%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="48.4039%" y="901" width="0.0179%" height="15" fill="rgb(235,138,27)" fg:x="2699" fg:w="1"/><text x="48.6539%" y="911.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (25 samples, 0.45%)</title><rect x="51.2195%" y="805" width="0.4484%" height="15" fill="rgb(236,97,51)" fg:x="2856" fg:w="25"/><text x="51.4695%" y="815.50"></text></g><g><title>databend-query`HUF_decompress4X2_usingDTable_internal (3 samples, 0.05%)</title><rect x="51.6679%" y="805" width="0.0538%" height="15" fill="rgb(240,80,30)" fg:x="2881" fg:w="3"/><text x="51.9179%" y="815.50"></text></g><g><title>databend-query`HUF_readDTableX1_wksp (5 samples, 0.09%)</title><rect x="51.7217%" y="789" width="0.0897%" height="15" fill="rgb(230,178,19)" fg:x="2884" fg:w="5"/><text x="51.9717%" y="799.50"></text></g><g><title>databend-query`HUF_readStats_wksp (4 samples, 0.07%)</title><rect x="51.7396%" y="773" width="0.0717%" height="15" fill="rgb(210,190,27)" fg:x="2885" fg:w="4"/><text x="51.9896%" y="783.50"></text></g><g><title>databend-query`FSE_decompress_wksp_bmi2 (3 samples, 0.05%)</title><rect x="51.7575%" y="757" width="0.0538%" height="15" fill="rgb(222,107,31)" fg:x="2886" fg:w="3"/><text x="52.0075%" y="767.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (35 samples, 0.63%)</title><rect x="51.2195%" y="821" width="0.6277%" height="15" fill="rgb(216,127,34)" fg:x="2856" fg:w="35"/><text x="51.4695%" y="831.50"></text></g><g><title>databend-query`HUF_decompress4X_hufOnly_wksp (7 samples, 0.13%)</title><rect x="51.7217%" y="805" width="0.1255%" height="15" fill="rgb(234,116,52)" fg:x="2884" fg:w="7"/><text x="51.9717%" y="815.50"></text></g><g><title>databend-query`HUF_readDTableX2_wksp (2 samples, 0.04%)</title><rect x="51.8113%" y="789" width="0.0359%" height="15" fill="rgb(222,124,15)" fg:x="2889" fg:w="2"/><text x="52.0613%" y="799.50"></text></g><g><title>databend-query`HUF_readStats_wksp (1 samples, 0.02%)</title><rect x="51.8293%" y="773" width="0.0179%" height="15" fill="rgb(231,179,28)" fg:x="2890" fg:w="1"/><text x="52.0793%" y="783.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (2 samples, 0.04%)</title><rect x="51.8472%" y="789" width="0.0359%" height="15" fill="rgb(226,93,45)" fg:x="2891" fg:w="2"/><text x="52.0972%" y="799.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (199 samples, 3.57%)</title><rect x="48.4218%" y="853" width="3.5689%" height="15" fill="rgb(215,8,51)" fg:x="2700" fg:w="199"/><text x="48.6718%" y="863.50">data..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (199 samples, 3.57%)</title><rect x="48.4218%" y="837" width="3.5689%" height="15" fill="rgb(223,106,5)" fg:x="2700" fg:w="199"/><text x="48.6718%" y="847.50">data..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (8 samples, 0.14%)</title><rect x="51.8472%" y="821" width="0.1435%" height="15" fill="rgb(250,191,5)" fg:x="2891" fg:w="8"/><text x="52.0972%" y="831.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (8 samples, 0.14%)</title><rect x="51.8472%" y="805" width="0.1435%" height="15" fill="rgb(242,132,44)" fg:x="2891" fg:w="8"/><text x="52.0972%" y="815.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (6 samples, 0.11%)</title><rect x="51.8831%" y="789" width="0.1076%" height="15" fill="rgb(251,152,29)" fg:x="2893" fg:w="6"/><text x="52.1331%" y="799.50"></text></g><g><title>databend-query`ZSTD_decompressStream (201 samples, 3.60%)</title><rect x="48.4218%" y="885" width="3.6047%" height="15" fill="rgb(218,179,5)" fg:x="2700" fg:w="201"/><text x="48.6718%" y="895.50">data..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (201 samples, 3.60%)</title><rect x="48.4218%" y="869" width="3.6047%" height="15" fill="rgb(227,67,19)" fg:x="2700" fg:w="201"/><text x="48.6718%" y="879.50">data..</text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="51.9907%" y="853" width="0.0359%" height="15" fill="rgb(233,119,31)" fg:x="2899" fg:w="2"/><text x="52.2407%" y="863.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (620 samples, 11.12%)</title><rect x="40.9792%" y="1029" width="11.1191%" height="15" fill="rgb(241,120,22)" fg:x="2285" fg:w="620"/><text x="41.2292%" y="1039.50">databend-query`&lt;..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (248 samples, 4.45%)</title><rect x="47.6506%" y="1013" width="4.4476%" height="15" fill="rgb(224,102,30)" fg:x="2657" fg:w="248"/><text x="47.9006%" y="1023.50">datab..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (212 samples, 3.80%)</title><rect x="48.2963%" y="997" width="3.8020%" height="15" fill="rgb(210,164,37)" fg:x="2693" fg:w="212"/><text x="48.5463%" y="1007.50">data..</text></g><g><title>databend-query`parquet2::read::compression::decompress (211 samples, 3.78%)</title><rect x="48.3142%" y="981" width="3.7841%" height="15" fill="rgb(226,191,16)" fg:x="2694" fg:w="211"/><text x="48.5642%" y="991.50">data..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (211 samples, 3.78%)</title><rect x="48.3142%" y="965" width="3.7841%" height="15" fill="rgb(214,40,45)" fg:x="2694" fg:w="211"/><text x="48.5642%" y="975.50">data..</text></g><g><title>databend-query`parquet2::compression::decompress (211 samples, 3.78%)</title><rect x="48.3142%" y="949" width="3.7841%" height="15" fill="rgb(244,29,26)" fg:x="2694" fg:w="211"/><text x="48.5642%" y="959.50">data..</text></g><g><title>databend-query`std::io::default_read_exact (205 samples, 3.68%)</title><rect x="48.4218%" y="933" width="3.6765%" height="15" fill="rgb(216,16,5)" fg:x="2700" fg:w="205"/><text x="48.6718%" y="943.50">data..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (205 samples, 3.68%)</title><rect x="48.4218%" y="917" width="3.6765%" height="15" fill="rgb(249,76,35)" fg:x="2700" fg:w="205"/><text x="48.6718%" y="927.50">data..</text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (205 samples, 3.68%)</title><rect x="48.4218%" y="901" width="3.6765%" height="15" fill="rgb(207,11,44)" fg:x="2700" fg:w="205"/><text x="48.6718%" y="911.50">data..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.07%)</title><rect x="52.0265%" y="885" width="0.0717%" height="15" fill="rgb(228,190,49)" fg:x="2901" fg:w="4"/><text x="52.2765%" y="895.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (61 samples, 1.09%)</title><rect x="52.0983%" y="1013" width="1.0940%" height="15" fill="rgb(214,173,12)" fg:x="2905" fg:w="61"/><text x="52.3483%" y="1023.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (61 samples, 1.09%)</title><rect x="52.0983%" y="997" width="1.0940%" height="15" fill="rgb(218,26,35)" fg:x="2905" fg:w="61"/><text x="52.3483%" y="1007.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (61 samples, 1.09%)</title><rect x="52.0983%" y="981" width="1.0940%" height="15" fill="rgb(220,200,19)" fg:x="2905" fg:w="61"/><text x="52.3483%" y="991.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="53.1923%" y="997" width="0.0717%" height="15" fill="rgb(239,95,49)" fg:x="2966" fg:w="4"/><text x="53.4423%" y="1007.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (4 samples, 0.07%)</title><rect x="53.1923%" y="981" width="0.0717%" height="15" fill="rgb(235,85,53)" fg:x="2966" fg:w="4"/><text x="53.4423%" y="991.50"></text></g><g><title>databend-query`std::io::default_read_to_end (4 samples, 0.07%)</title><rect x="53.1923%" y="965" width="0.0717%" height="15" fill="rgb(233,133,31)" fg:x="2966" fg:w="4"/><text x="53.4423%" y="975.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.07%)</title><rect x="53.1923%" y="949" width="0.0717%" height="15" fill="rgb(218,25,20)" fg:x="2966" fg:w="4"/><text x="53.4423%" y="959.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (8 samples, 0.14%)</title><rect x="53.2640%" y="949" width="0.1435%" height="15" fill="rgb(252,210,38)" fg:x="2970" fg:w="8"/><text x="53.5140%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.14%)</title><rect x="53.2640%" y="933" width="0.1435%" height="15" fill="rgb(242,134,21)" fg:x="2970" fg:w="8"/><text x="53.5140%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.14%)</title><rect x="53.2640%" y="917" width="0.1435%" height="15" fill="rgb(213,28,48)" fg:x="2970" fg:w="8"/><text x="53.5140%" y="927.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;zstd::stream::read::Decoder&lt;std::io::buffered::bufreader::BufReader&lt;&amp;[u8]&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="53.4075%" y="949" width="0.0179%" height="15" fill="rgb(250,196,2)" fg:x="2978" fg:w="1"/><text x="53.6575%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="53.4075%" y="933" width="0.0179%" height="15" fill="rgb(227,5,17)" fg:x="2978" fg:w="1"/><text x="53.6575%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="53.4075%" y="917" width="0.0179%" height="15" fill="rgb(221,226,24)" fg:x="2978" fg:w="1"/><text x="53.6575%" y="927.50"></text></g><g><title>databend-query`ZSTD_checkContinuity (1 samples, 0.02%)</title><rect x="53.4254%" y="869" width="0.0179%" height="15" fill="rgb(211,5,48)" fg:x="2979" fg:w="1"/><text x="53.6754%" y="879.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (56 samples, 1.00%)</title><rect x="58.1958%" y="821" width="1.0043%" height="15" fill="rgb(219,150,6)" fg:x="3245" fg:w="56"/><text x="58.4458%" y="831.50"></text></g><g><title>databend-query`HUF_DecompressFastArgs_init (1 samples, 0.02%)</title><rect x="59.1822%" y="805" width="0.0179%" height="15" fill="rgb(251,46,16)" fg:x="3300" fg:w="1"/><text x="59.4322%" y="815.50"></text></g><g><title>databend-query`HUF_decompress4X2_usingDTable_internal (6 samples, 0.11%)</title><rect x="59.2001%" y="821" width="0.1076%" height="15" fill="rgb(220,204,40)" fg:x="3301" fg:w="6"/><text x="59.4501%" y="831.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (66 samples, 1.18%)</title><rect x="58.1958%" y="837" width="1.1836%" height="15" fill="rgb(211,85,2)" fg:x="3245" fg:w="66"/><text x="58.4458%" y="847.50"></text></g><g><title>databend-query`HUF_decompress4X_hufOnly_wksp (4 samples, 0.07%)</title><rect x="59.3077%" y="821" width="0.0717%" height="15" fill="rgb(229,17,7)" fg:x="3307" fg:w="4"/><text x="59.5577%" y="831.50"></text></g><g><title>databend-query`HUF_readDTableX1_wksp (4 samples, 0.07%)</title><rect x="59.3077%" y="805" width="0.0717%" height="15" fill="rgb(239,72,28)" fg:x="3307" fg:w="4"/><text x="59.5577%" y="815.50"></text></g><g><title>databend-query`HUF_readStats_wksp (3 samples, 0.05%)</title><rect x="59.3257%" y="789" width="0.0538%" height="15" fill="rgb(230,47,54)" fg:x="3308" fg:w="3"/><text x="59.5757%" y="799.50"></text></g><g><title>databend-query`FSE_decompress_wksp_bmi2 (2 samples, 0.04%)</title><rect x="59.3436%" y="773" width="0.0359%" height="15" fill="rgb(214,50,8)" fg:x="3309" fg:w="2"/><text x="59.5936%" y="783.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="59.3795%" y="805" width="0.0179%" height="15" fill="rgb(216,198,43)" fg:x="3311" fg:w="1"/><text x="59.6295%" y="815.50"></text></g><g><title>databend-query`ZSTD_decompressStream (347 samples, 6.22%)</title><rect x="53.4254%" y="901" width="6.2231%" height="15" fill="rgb(234,20,35)" fg:x="2979" fg:w="347"/><text x="53.6754%" y="911.50">databend..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (347 samples, 6.22%)</title><rect x="53.4254%" y="885" width="6.2231%" height="15" fill="rgb(254,45,19)" fg:x="2979" fg:w="347"/><text x="53.6754%" y="895.50">databend..</text></g><g><title>databend-query`ZSTD_decompressContinue (346 samples, 6.21%)</title><rect x="53.4433%" y="869" width="6.2052%" height="15" fill="rgb(219,14,44)" fg:x="2980" fg:w="346"/><text x="53.6933%" y="879.50">databend..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (346 samples, 6.21%)</title><rect x="53.4433%" y="853" width="6.2052%" height="15" fill="rgb(217,220,26)" fg:x="2980" fg:w="346"/><text x="53.6933%" y="863.50">databend..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (15 samples, 0.27%)</title><rect x="59.3795%" y="837" width="0.2690%" height="15" fill="rgb(213,158,28)" fg:x="3311" fg:w="15"/><text x="59.6295%" y="847.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (15 samples, 0.27%)</title><rect x="59.3795%" y="821" width="0.2690%" height="15" fill="rgb(252,51,52)" fg:x="3311" fg:w="15"/><text x="59.6295%" y="831.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (14 samples, 0.25%)</title><rect x="59.3974%" y="805" width="0.2511%" height="15" fill="rgb(246,89,16)" fg:x="3312" fg:w="14"/><text x="59.6474%" y="815.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,047 samples, 18.78%)</title><rect x="40.9792%" y="1045" width="18.7769%" height="15" fill="rgb(216,158,49)" fg:x="2285" fg:w="1047"/><text x="41.2292%" y="1055.50">databend-query`&lt;databend_comm..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (427 samples, 7.66%)</title><rect x="52.0983%" y="1029" width="7.6578%" height="15" fill="rgb(236,107,19)" fg:x="2905" fg:w="427"/><text x="52.3483%" y="1039.50">databend-q..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (366 samples, 6.56%)</title><rect x="53.1923%" y="1013" width="6.5638%" height="15" fill="rgb(228,185,30)" fg:x="2966" fg:w="366"/><text x="53.4423%" y="1023.50">databend-..</text></g><g><title>databend-query`parquet2::read::compression::decompress (362 samples, 6.49%)</title><rect x="53.2640%" y="997" width="6.4921%" height="15" fill="rgb(246,134,8)" fg:x="2970" fg:w="362"/><text x="53.5140%" y="1007.50">databend-..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (362 samples, 6.49%)</title><rect x="53.2640%" y="981" width="6.4921%" height="15" fill="rgb(214,143,50)" fg:x="2970" fg:w="362"/><text x="53.5140%" y="991.50">databend-..</text></g><g><title>databend-query`parquet2::compression::decompress (362 samples, 6.49%)</title><rect x="53.2640%" y="965" width="6.4921%" height="15" fill="rgb(228,75,8)" fg:x="2970" fg:w="362"/><text x="53.5140%" y="975.50">databend-..</text></g><g><title>databend-query`std::io::default_read_exact (353 samples, 6.33%)</title><rect x="53.4254%" y="949" width="6.3307%" height="15" fill="rgb(207,175,4)" fg:x="2979" fg:w="353"/><text x="53.6754%" y="959.50">databend..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (353 samples, 6.33%)</title><rect x="53.4254%" y="933" width="6.3307%" height="15" fill="rgb(205,108,24)" fg:x="2979" fg:w="353"/><text x="53.6754%" y="943.50">databend..</text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (353 samples, 6.33%)</title><rect x="53.4254%" y="917" width="6.3307%" height="15" fill="rgb(244,120,49)" fg:x="2979" fg:w="353"/><text x="53.6754%" y="927.50">databend..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.11%)</title><rect x="59.6485%" y="901" width="0.1076%" height="15" fill="rgb(223,47,38)" fg:x="3326" fg:w="6"/><text x="59.8985%" y="911.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (60 samples, 1.08%)</title><rect x="59.7561%" y="1029" width="1.0760%" height="15" fill="rgb(229,179,11)" fg:x="3332" fg:w="60"/><text x="60.0061%" y="1039.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (60 samples, 1.08%)</title><rect x="59.7561%" y="1013" width="1.0760%" height="15" fill="rgb(231,122,1)" fg:x="3332" fg:w="60"/><text x="60.0061%" y="1023.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (60 samples, 1.08%)</title><rect x="59.7561%" y="997" width="1.0760%" height="15" fill="rgb(245,119,9)" fg:x="3332" fg:w="60"/><text x="60.0061%" y="1007.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="60.8321%" y="1013" width="0.0179%" height="15" fill="rgb(241,163,25)" fg:x="3392" fg:w="1"/><text x="61.0821%" y="1023.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (1 samples, 0.02%)</title><rect x="60.8321%" y="997" width="0.0179%" height="15" fill="rgb(217,214,3)" fg:x="3392" fg:w="1"/><text x="61.0821%" y="1007.50"></text></g><g><title>databend-query`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="60.8321%" y="981" width="0.0179%" height="15" fill="rgb(240,86,28)" fg:x="3392" fg:w="1"/><text x="61.0821%" y="991.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="60.8321%" y="965" width="0.0179%" height="15" fill="rgb(215,47,9)" fg:x="3392" fg:w="1"/><text x="61.0821%" y="975.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (15 samples, 0.27%)</title><rect x="60.8501%" y="965" width="0.2690%" height="15" fill="rgb(252,25,45)" fg:x="3393" fg:w="15"/><text x="61.1001%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (15 samples, 0.27%)</title><rect x="60.8501%" y="949" width="0.2690%" height="15" fill="rgb(251,164,9)" fg:x="3393" fg:w="15"/><text x="61.1001%" y="959.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.27%)</title><rect x="60.8501%" y="933" width="0.2690%" height="15" fill="rgb(233,194,0)" fg:x="3393" fg:w="15"/><text x="61.1001%" y="943.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (60 samples, 1.08%)</title><rect x="66.2841%" y="837" width="1.0760%" height="15" fill="rgb(249,111,24)" fg:x="3696" fg:w="60"/><text x="66.5341%" y="847.50"></text></g><g><title>databend-query`HUF_decompress4X2_usingDTable_internal (4 samples, 0.07%)</title><rect x="67.3601%" y="837" width="0.0717%" height="15" fill="rgb(250,223,3)" fg:x="3756" fg:w="4"/><text x="67.6101%" y="847.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (67 samples, 1.20%)</title><rect x="66.2841%" y="853" width="1.2016%" height="15" fill="rgb(236,178,37)" fg:x="3696" fg:w="67"/><text x="66.5341%" y="863.50"></text></g><g><title>databend-query`HUF_decompress4X_hufOnly_wksp (3 samples, 0.05%)</title><rect x="67.4319%" y="837" width="0.0538%" height="15" fill="rgb(241,158,50)" fg:x="3760" fg:w="3"/><text x="67.6819%" y="847.50"></text></g><g><title>databend-query`HUF_readDTableX1_wksp (3 samples, 0.05%)</title><rect x="67.4319%" y="821" width="0.0538%" height="15" fill="rgb(213,121,41)" fg:x="3760" fg:w="3"/><text x="67.6819%" y="831.50"></text></g><g><title>databend-query`HUF_readStats_wksp (2 samples, 0.04%)</title><rect x="67.4498%" y="805" width="0.0359%" height="15" fill="rgb(240,92,3)" fg:x="3761" fg:w="2"/><text x="67.6998%" y="815.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="67.4857%" y="821" width="0.0179%" height="15" fill="rgb(205,123,3)" fg:x="3763" fg:w="1"/><text x="67.7357%" y="831.50"></text></g><g><title>databend-query`ZSTD_decompressStream (365 samples, 6.55%)</title><rect x="61.1191%" y="917" width="6.5459%" height="15" fill="rgb(205,97,47)" fg:x="3408" fg:w="365"/><text x="61.3691%" y="927.50">databend-..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (365 samples, 6.55%)</title><rect x="61.1191%" y="901" width="6.5459%" height="15" fill="rgb(247,152,14)" fg:x="3408" fg:w="365"/><text x="61.3691%" y="911.50">databend-..</text></g><g><title>databend-query`ZSTD_decompressContinue (365 samples, 6.55%)</title><rect x="61.1191%" y="885" width="6.5459%" height="15" fill="rgb(248,195,53)" fg:x="3408" fg:w="365"/><text x="61.3691%" y="895.50">databend-..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (365 samples, 6.55%)</title><rect x="61.1191%" y="869" width="6.5459%" height="15" fill="rgb(226,201,16)" fg:x="3408" fg:w="365"/><text x="61.3691%" y="879.50">databend-..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (10 samples, 0.18%)</title><rect x="67.4857%" y="853" width="0.1793%" height="15" fill="rgb(205,98,0)" fg:x="3763" fg:w="10"/><text x="67.7357%" y="863.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (10 samples, 0.18%)</title><rect x="67.4857%" y="837" width="0.1793%" height="15" fill="rgb(214,191,48)" fg:x="3763" fg:w="10"/><text x="67.7357%" y="847.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (9 samples, 0.16%)</title><rect x="67.5036%" y="821" width="0.1614%" height="15" fill="rgb(237,112,39)" fg:x="3764" fg:w="9"/><text x="67.7536%" y="831.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (373 samples, 6.69%)</title><rect x="61.1191%" y="933" width="6.6894%" height="15" fill="rgb(247,203,27)" fg:x="3408" fg:w="373"/><text x="61.3691%" y="943.50">databend-..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.14%)</title><rect x="67.6650%" y="917" width="0.1435%" height="15" fill="rgb(235,124,28)" fg:x="3773" fg:w="8"/><text x="67.9150%" y="927.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,498 samples, 26.87%)</title><rect x="40.9792%" y="1061" width="26.8651%" height="15" fill="rgb(208,207,46)" fg:x="2285" fg:w="1498"/><text x="41.2292%" y="1071.50">databend-query`&lt;databend_common_arrow::arro..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (451 samples, 8.09%)</title><rect x="59.7561%" y="1045" width="8.0882%" height="15" fill="rgb(234,176,4)" fg:x="3332" fg:w="451"/><text x="60.0061%" y="1055.50">databend-qu..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (391 samples, 7.01%)</title><rect x="60.8321%" y="1029" width="7.0122%" height="15" fill="rgb(230,133,28)" fg:x="3392" fg:w="391"/><text x="61.0821%" y="1039.50">databend-..</text></g><g><title>databend-query`parquet2::read::compression::decompress (390 samples, 6.99%)</title><rect x="60.8501%" y="1013" width="6.9943%" height="15" fill="rgb(211,137,40)" fg:x="3393" fg:w="390"/><text x="61.1001%" y="1023.50">databend-..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (390 samples, 6.99%)</title><rect x="60.8501%" y="997" width="6.9943%" height="15" fill="rgb(254,35,13)" fg:x="3393" fg:w="390"/><text x="61.1001%" y="1007.50">databend-..</text></g><g><title>databend-query`parquet2::compression::decompress (390 samples, 6.99%)</title><rect x="60.8501%" y="981" width="6.9943%" height="15" fill="rgb(225,49,51)" fg:x="3393" fg:w="390"/><text x="61.1001%" y="991.50">databend-..</text></g><g><title>databend-query`std::io::default_read_exact (375 samples, 6.73%)</title><rect x="61.1191%" y="965" width="6.7253%" height="15" fill="rgb(251,10,15)" fg:x="3408" fg:w="375"/><text x="61.3691%" y="975.50">databend-..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (375 samples, 6.73%)</title><rect x="61.1191%" y="949" width="6.7253%" height="15" fill="rgb(228,207,15)" fg:x="3408" fg:w="375"/><text x="61.3691%" y="959.50">databend-..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="67.8085%" y="933" width="0.0359%" height="15" fill="rgb(241,99,19)" fg:x="3781" fg:w="2"/><text x="68.0585%" y="943.50"></text></g><g><title>databend-query`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.02%)</title><rect x="67.8443%" y="1029" width="0.0179%" height="15" fill="rgb(207,104,49)" fg:x="3783" fg:w="1"/><text x="68.0943%" y="1039.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="67.8443%" y="1013" width="0.0179%" height="15" fill="rgb(234,99,18)" fg:x="3783" fg:w="1"/><text x="68.0943%" y="1023.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (55 samples, 0.99%)</title><rect x="67.8443%" y="1045" width="0.9864%" height="15" fill="rgb(213,191,49)" fg:x="3783" fg:w="55"/><text x="68.0943%" y="1055.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (54 samples, 0.97%)</title><rect x="67.8623%" y="1029" width="0.9684%" height="15" fill="rgb(210,226,19)" fg:x="3784" fg:w="54"/><text x="68.1123%" y="1039.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (54 samples, 0.97%)</title><rect x="67.8623%" y="1013" width="0.9684%" height="15" fill="rgb(229,97,18)" fg:x="3784" fg:w="54"/><text x="68.1123%" y="1023.50"></text></g><g><title>databend-query`parquet2::read::page::reader::build_page (4 samples, 0.07%)</title><rect x="68.8307%" y="1013" width="0.0717%" height="15" fill="rgb(211,167,15)" fg:x="3838" fg:w="4"/><text x="69.0807%" y="1023.50"></text></g><g><title>databend-query`std::io::default_read_to_end (4 samples, 0.07%)</title><rect x="68.8307%" y="997" width="0.0717%" height="15" fill="rgb(210,169,34)" fg:x="3838" fg:w="4"/><text x="69.0807%" y="1007.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.07%)</title><rect x="68.8307%" y="981" width="0.0717%" height="15" fill="rgb(241,121,31)" fg:x="3838" fg:w="4"/><text x="69.0807%" y="991.50"></text></g><g><title>databend-query`&lt;parquet2::read::page::reader::PageReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.09%)</title><rect x="68.8307%" y="1029" width="0.0897%" height="15" fill="rgb(232,40,11)" fg:x="3838" fg:w="5"/><text x="69.0807%" y="1039.50"></text></g><g><title>databend-query`parquet2::read::page::reader::read_page_header (1 samples, 0.02%)</title><rect x="68.9024%" y="1013" width="0.0179%" height="15" fill="rgb(205,86,26)" fg:x="3842" fg:w="1"/><text x="69.1524%" y="1023.50"></text></g><g><title>databend-query`ZSTD_DStreamInSize (1 samples, 0.02%)</title><rect x="68.9204%" y="981" width="0.0179%" height="15" fill="rgb(231,126,28)" fg:x="3843" fg:w="1"/><text x="69.1704%" y="991.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (12 samples, 0.22%)</title><rect x="68.9383%" y="981" width="0.2152%" height="15" fill="rgb(219,221,18)" fg:x="3844" fg:w="12"/><text x="69.1883%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.22%)</title><rect x="68.9383%" y="965" width="0.2152%" height="15" fill="rgb(211,40,0)" fg:x="3844" fg:w="12"/><text x="69.1883%" y="975.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.22%)</title><rect x="68.9383%" y="949" width="0.2152%" height="15" fill="rgb(239,85,43)" fg:x="3844" fg:w="12"/><text x="69.1883%" y="959.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (58 samples, 1.04%)</title><rect x="74.1392%" y="853" width="1.0402%" height="15" fill="rgb(231,55,21)" fg:x="4134" fg:w="58"/><text x="74.3892%" y="863.50"></text></g><g><title>databend-query`HUF_decompress4X2_usingDTable_internal (5 samples, 0.09%)</title><rect x="75.1793%" y="853" width="0.0897%" height="15" fill="rgb(225,184,43)" fg:x="4192" fg:w="5"/><text x="75.4293%" y="863.50"></text></g><g><title>databend-query`FSE_buildDTable_internal (1 samples, 0.02%)</title><rect x="75.2869%" y="805" width="0.0179%" height="15" fill="rgb(251,158,41)" fg:x="4198" fg:w="1"/><text x="75.5369%" y="815.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (66 samples, 1.18%)</title><rect x="74.1392%" y="869" width="1.1836%" height="15" fill="rgb(234,159,37)" fg:x="4134" fg:w="66"/><text x="74.3892%" y="879.50"></text></g><g><title>databend-query`HUF_decompress4X_hufOnly_wksp (3 samples, 0.05%)</title><rect x="75.2690%" y="853" width="0.0538%" height="15" fill="rgb(216,204,22)" fg:x="4197" fg:w="3"/><text x="75.5190%" y="863.50"></text></g><g><title>databend-query`HUF_readDTableX1_wksp (3 samples, 0.05%)</title><rect x="75.2690%" y="837" width="0.0538%" height="15" fill="rgb(214,17,3)" fg:x="4197" fg:w="3"/><text x="75.5190%" y="847.50"></text></g><g><title>databend-query`HUF_readStats_wksp (2 samples, 0.04%)</title><rect x="75.2869%" y="821" width="0.0359%" height="15" fill="rgb(212,111,17)" fg:x="4198" fg:w="2"/><text x="75.5369%" y="831.50"></text></g><g><title>databend-query`FSE_decompress_wksp_bmi2 (1 samples, 0.02%)</title><rect x="75.3049%" y="805" width="0.0179%" height="15" fill="rgb(221,157,24)" fg:x="4199" fg:w="1"/><text x="75.5549%" y="815.50"></text></g><g><title>databend-query`ZSTD_decompressStream (357 samples, 6.40%)</title><rect x="69.1535%" y="933" width="6.4024%" height="15" fill="rgb(252,16,13)" fg:x="3856" fg:w="357"/><text x="69.4035%" y="943.50">databend..</text></g><g><title>databend-query`ZSTD_decompressContinueStream (357 samples, 6.40%)</title><rect x="69.1535%" y="917" width="6.4024%" height="15" fill="rgb(221,62,2)" fg:x="3856" fg:w="357"/><text x="69.4035%" y="927.50">databend..</text></g><g><title>databend-query`ZSTD_decompressContinue (356 samples, 6.38%)</title><rect x="69.1714%" y="901" width="6.3845%" height="15" fill="rgb(247,87,22)" fg:x="3857" fg:w="356"/><text x="69.4214%" y="911.50">databend..</text></g><g><title>databend-query`ZSTD_decompressBlock_internal (356 samples, 6.38%)</title><rect x="69.1714%" y="885" width="6.3845%" height="15" fill="rgb(215,73,9)" fg:x="3857" fg:w="356"/><text x="69.4214%" y="895.50">databend..</text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (13 samples, 0.23%)</title><rect x="75.3228%" y="869" width="0.2331%" height="15" fill="rgb(207,175,33)" fg:x="4200" fg:w="13"/><text x="75.5728%" y="879.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (13 samples, 0.23%)</title><rect x="75.3228%" y="853" width="0.2331%" height="15" fill="rgb(243,129,54)" fg:x="4200" fg:w="13"/><text x="75.5728%" y="863.50"></text></g><g><title>databend-query`ZSTD_buildFSETable (13 samples, 0.23%)</title><rect x="75.3228%" y="837" width="0.2331%" height="15" fill="rgb(227,119,45)" fg:x="4200" fg:w="13"/><text x="75.5728%" y="847.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (366 samples, 6.56%)</title><rect x="69.1535%" y="949" width="6.5638%" height="15" fill="rgb(205,109,36)" fg:x="3856" fg:w="366"/><text x="69.4035%" y="959.50">databend-..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.16%)</title><rect x="75.5560%" y="933" width="0.1614%" height="15" fill="rgb(205,6,39)" fg:x="4213" fg:w="9"/><text x="75.8060%" y="943.50"></text></g><g><title>databend-query`std::io::default_read_exact (367 samples, 6.58%)</title><rect x="69.1535%" y="981" width="6.5818%" height="15" fill="rgb(221,32,16)" fg:x="3856" fg:w="367"/><text x="69.4035%" y="991.50">databend-..</text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (367 samples, 6.58%)</title><rect x="69.1535%" y="965" width="6.5818%" height="15" fill="rgb(228,144,50)" fg:x="3856" fg:w="367"/><text x="69.4035%" y="975.50">databend-..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="75.7174%" y="949" width="0.0179%" height="15" fill="rgb(229,201,53)" fg:x="4222" fg:w="1"/><text x="75.9674%" y="959.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,765 samples, 67.52%)</title><rect x="8.2317%" y="1093" width="67.5215%" height="15" fill="rgb(249,153,27)" fg:x="459" fg:w="3765"/><text x="8.4817%" y="1103.50">databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::primitive::integer::IntegerIter&lt;T,I,P,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,939 samples, 34.77%)</title><rect x="40.9792%" y="1077" width="34.7740%" height="15" fill="rgb(227,106,25)" fg:x="2285" fg:w="1939"/><text x="41.2292%" y="1087.50">databend-query`&lt;databend_common_arrow::arrow::io::parque..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (441 samples, 7.91%)</title><rect x="67.8443%" y="1061" width="7.9089%" height="15" fill="rgb(230,65,29)" fg:x="3783" fg:w="441"/><text x="68.0943%" y="1071.50">databend-qu..</text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (386 samples, 6.92%)</title><rect x="68.8307%" y="1045" width="6.9225%" height="15" fill="rgb(221,57,46)" fg:x="3838" fg:w="386"/><text x="69.0807%" y="1055.50">databend-..</text></g><g><title>databend-query`parquet2::read::compression::decompress (381 samples, 6.83%)</title><rect x="68.9204%" y="1029" width="6.8329%" height="15" fill="rgb(229,161,17)" fg:x="3843" fg:w="381"/><text x="69.1704%" y="1039.50">databend-..</text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (381 samples, 6.83%)</title><rect x="68.9204%" y="1013" width="6.8329%" height="15" fill="rgb(222,213,11)" fg:x="3843" fg:w="381"/><text x="69.1704%" y="1023.50">databend-..</text></g><g><title>databend-query`parquet2::compression::decompress (381 samples, 6.83%)</title><rect x="68.9204%" y="997" width="6.8329%" height="15" fill="rgb(235,35,13)" fg:x="3843" fg:w="381"/><text x="69.1704%" y="1007.50">databend-..</text></g><g><title>databend-query`zstd::stream::read::Decoder&lt;std::io::buffered::bufreader::BufReader&lt;R&gt;&gt;::new (1 samples, 0.02%)</title><rect x="75.7353%" y="981" width="0.0179%" height="15" fill="rgb(233,158,34)" fg:x="4223" fg:w="1"/><text x="75.9853%" y="991.50"></text></g><g><title>databend-query`zstd::stream::read::Decoder&lt;R&gt;::with_dictionary (1 samples, 0.02%)</title><rect x="75.7353%" y="965" width="0.0179%" height="15" fill="rgb(215,151,48)" fg:x="4223" fg:w="1"/><text x="75.9853%" y="975.50"></text></g><g><title>databend-query`zstd::stream::raw::Decoder::with_dictionary (1 samples, 0.02%)</title><rect x="75.7353%" y="949" width="0.0179%" height="15" fill="rgb(229,84,14)" fg:x="4223" fg:w="1"/><text x="75.9853%" y="959.50"></text></g><g><title>databend-query`zstd_safe::DCtx::create (1 samples, 0.02%)</title><rect x="75.7353%" y="933" width="0.0179%" height="15" fill="rgb(229,68,14)" fg:x="4223" fg:w="1"/><text x="75.9853%" y="943.50"></text></g><g><title>databend-query`ZSTD_createDCtx (1 samples, 0.02%)</title><rect x="75.7353%" y="917" width="0.0179%" height="15" fill="rgb(243,106,26)" fg:x="4223" fg:w="1"/><text x="75.9853%" y="927.50"></text></g><g><title>databend-query`ZSTD_createDCtx_internal (1 samples, 0.02%)</title><rect x="75.7353%" y="901" width="0.0179%" height="15" fill="rgb(206,45,38)" fg:x="4223" fg:w="1"/><text x="75.9853%" y="911.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (2 samples, 0.04%)</title><rect x="75.7532%" y="933" width="0.0359%" height="15" fill="rgb(226,6,15)" fg:x="4224" fg:w="2"/><text x="76.0032%" y="943.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::BinaryDecoder&lt;O&gt; as databend_common_arrow::arrow::io::parquet::read::deserialize::utils::Decoder&gt;::extend_from_state (2 samples, 0.04%)</title><rect x="75.7532%" y="917" width="0.0359%" height="15" fill="rgb(232,22,54)" fg:x="4224" fg:w="2"/><text x="76.0032%" y="927.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::binary::utils::Binary&lt;O&gt;::push (1 samples, 0.02%)</title><rect x="75.7712%" y="901" width="0.0179%" height="15" fill="rgb(229,222,32)" fg:x="4225" fg:w="1"/><text x="76.0212%" y="911.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="75.7712%" y="885" width="0.0179%" height="15" fill="rgb(228,62,29)" fg:x="4225" fg:w="1"/><text x="76.0212%" y="895.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::Iter&lt;O,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="75.7532%" y="965" width="0.0717%" height="15" fill="rgb(251,103,34)" fg:x="4224" fg:w="4"/><text x="76.0032%" y="975.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (4 samples, 0.07%)</title><rect x="75.7532%" y="949" width="0.0717%" height="15" fill="rgb(233,12,30)" fg:x="4224" fg:w="4"/><text x="76.0032%" y="959.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (2 samples, 0.04%)</title><rect x="75.7891%" y="933" width="0.0359%" height="15" fill="rgb(238,52,0)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="943.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (2 samples, 0.04%)</title><rect x="75.7891%" y="917" width="0.0359%" height="15" fill="rgb(223,98,5)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="927.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (2 samples, 0.04%)</title><rect x="75.7891%" y="901" width="0.0359%" height="15" fill="rgb(228,75,37)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="911.50"></text></g><g><title>databend-query`parquet2::compression::decompress (2 samples, 0.04%)</title><rect x="75.7891%" y="885" width="0.0359%" height="15" fill="rgb(205,115,49)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="895.50"></text></g><g><title>databend-query`std::io::default_read_exact (2 samples, 0.04%)</title><rect x="75.7891%" y="869" width="0.0359%" height="15" fill="rgb(250,154,43)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="879.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="75.7891%" y="853" width="0.0359%" height="15" fill="rgb(226,43,29)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="863.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (2 samples, 0.04%)</title><rect x="75.7891%" y="837" width="0.0359%" height="15" fill="rgb(249,228,39)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="847.50"></text></g><g><title>databend-query`ZSTD_decompressStream (2 samples, 0.04%)</title><rect x="75.7891%" y="821" width="0.0359%" height="15" fill="rgb(216,79,43)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="831.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (2 samples, 0.04%)</title><rect x="75.7891%" y="805" width="0.0359%" height="15" fill="rgb(228,95,12)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="815.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (2 samples, 0.04%)</title><rect x="75.7891%" y="789" width="0.0359%" height="15" fill="rgb(249,221,15)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="799.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (2 samples, 0.04%)</title><rect x="75.7891%" y="773" width="0.0359%" height="15" fill="rgb(233,34,13)" fg:x="4226" fg:w="2"/><text x="76.0391%" y="783.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::error::Error&gt; (1 samples, 0.02%)</title><rect x="75.8429%" y="917" width="0.0179%" height="15" fill="rgb(214,103,39)" fg:x="4229" fg:w="1"/><text x="76.0929%" y="927.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (3 samples, 0.05%)</title><rect x="75.8250%" y="949" width="0.0538%" height="15" fill="rgb(251,126,39)" fg:x="4228" fg:w="3"/><text x="76.0750%" y="959.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::BinaryDecoder&lt;O&gt; as databend_common_arrow::arrow::io::parquet::read::deserialize::utils::Decoder&gt;::extend_from_state (3 samples, 0.05%)</title><rect x="75.8250%" y="933" width="0.0538%" height="15" fill="rgb(214,216,36)" fg:x="4228" fg:w="3"/><text x="76.0750%" y="943.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::binary::utils::Binary&lt;O&gt;::push (1 samples, 0.02%)</title><rect x="75.8608%" y="917" width="0.0179%" height="15" fill="rgb(220,221,8)" fg:x="4230" fg:w="1"/><text x="76.1108%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="75.8608%" y="901" width="0.0179%" height="15" fill="rgb(240,216,3)" fg:x="4230" fg:w="1"/><text x="76.1108%" y="911.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::Iter&lt;O,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.14%)</title><rect x="75.7532%" y="981" width="0.1435%" height="15" fill="rgb(232,218,17)" fg:x="4224" fg:w="8"/><text x="76.0032%" y="991.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (4 samples, 0.07%)</title><rect x="75.8250%" y="965" width="0.0717%" height="15" fill="rgb(229,163,45)" fg:x="4228" fg:w="4"/><text x="76.0750%" y="975.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (1 samples, 0.02%)</title><rect x="75.8788%" y="949" width="0.0179%" height="15" fill="rgb(231,110,42)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="959.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (1 samples, 0.02%)</title><rect x="75.8788%" y="933" width="0.0179%" height="15" fill="rgb(208,170,48)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="943.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (1 samples, 0.02%)</title><rect x="75.8788%" y="917" width="0.0179%" height="15" fill="rgb(239,116,25)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="927.50"></text></g><g><title>databend-query`parquet2::compression::decompress (1 samples, 0.02%)</title><rect x="75.8788%" y="901" width="0.0179%" height="15" fill="rgb(219,200,50)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="911.50"></text></g><g><title>databend-query`std::io::default_read_exact (1 samples, 0.02%)</title><rect x="75.8788%" y="885" width="0.0179%" height="15" fill="rgb(245,200,0)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="895.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="75.8788%" y="869" width="0.0179%" height="15" fill="rgb(245,119,33)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="879.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (1 samples, 0.02%)</title><rect x="75.8788%" y="853" width="0.0179%" height="15" fill="rgb(231,125,12)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="863.50"></text></g><g><title>databend-query`ZSTD_decompressStream (1 samples, 0.02%)</title><rect x="75.8788%" y="837" width="0.0179%" height="15" fill="rgb(216,96,41)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="847.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (1 samples, 0.02%)</title><rect x="75.8788%" y="821" width="0.0179%" height="15" fill="rgb(248,43,45)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="831.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (1 samples, 0.02%)</title><rect x="75.8788%" y="805" width="0.0179%" height="15" fill="rgb(217,222,7)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="815.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (1 samples, 0.02%)</title><rect x="75.8788%" y="789" width="0.0179%" height="15" fill="rgb(233,28,6)" fg:x="4231" fg:w="1"/><text x="76.1288%" y="799.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (3 samples, 0.05%)</title><rect x="75.8967%" y="965" width="0.0538%" height="15" fill="rgb(231,218,15)" fg:x="4232" fg:w="3"/><text x="76.1467%" y="975.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::BinaryDecoder&lt;O&gt; as databend_common_arrow::arrow::io::parquet::read::deserialize::utils::Decoder&gt;::extend_from_state (3 samples, 0.05%)</title><rect x="75.8967%" y="949" width="0.0538%" height="15" fill="rgb(226,171,48)" fg:x="4232" fg:w="3"/><text x="76.1467%" y="959.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::binary::utils::Binary&lt;O&gt;::push (3 samples, 0.05%)</title><rect x="75.8967%" y="933" width="0.0538%" height="15" fill="rgb(235,201,9)" fg:x="4232" fg:w="3"/><text x="76.1467%" y="943.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="75.9326%" y="917" width="0.0179%" height="15" fill="rgb(217,80,15)" fg:x="4234" fg:w="1"/><text x="76.1826%" y="927.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::Iter&lt;O,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.25%)</title><rect x="75.7532%" y="997" width="0.2511%" height="15" fill="rgb(219,152,8)" fg:x="4224" fg:w="14"/><text x="76.0032%" y="1007.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (6 samples, 0.11%)</title><rect x="75.8967%" y="981" width="0.1076%" height="15" fill="rgb(243,107,38)" fg:x="4232" fg:w="6"/><text x="76.1467%" y="991.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (3 samples, 0.05%)</title><rect x="75.9505%" y="965" width="0.0538%" height="15" fill="rgb(231,17,5)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="975.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (3 samples, 0.05%)</title><rect x="75.9505%" y="949" width="0.0538%" height="15" fill="rgb(209,25,54)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="959.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (3 samples, 0.05%)</title><rect x="75.9505%" y="933" width="0.0538%" height="15" fill="rgb(219,0,2)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="943.50"></text></g><g><title>databend-query`parquet2::compression::decompress (3 samples, 0.05%)</title><rect x="75.9505%" y="917" width="0.0538%" height="15" fill="rgb(246,9,5)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="927.50"></text></g><g><title>databend-query`std::io::default_read_exact (3 samples, 0.05%)</title><rect x="75.9505%" y="901" width="0.0538%" height="15" fill="rgb(226,159,4)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="911.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (3 samples, 0.05%)</title><rect x="75.9505%" y="885" width="0.0538%" height="15" fill="rgb(219,175,34)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="895.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (3 samples, 0.05%)</title><rect x="75.9505%" y="869" width="0.0538%" height="15" fill="rgb(236,10,46)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="879.50"></text></g><g><title>databend-query`ZSTD_decompressStream (3 samples, 0.05%)</title><rect x="75.9505%" y="853" width="0.0538%" height="15" fill="rgb(240,211,16)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="863.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (3 samples, 0.05%)</title><rect x="75.9505%" y="837" width="0.0538%" height="15" fill="rgb(205,3,43)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="847.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (3 samples, 0.05%)</title><rect x="75.9505%" y="821" width="0.0538%" height="15" fill="rgb(245,7,22)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="831.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (3 samples, 0.05%)</title><rect x="75.9505%" y="805" width="0.0538%" height="15" fill="rgb(239,132,32)" fg:x="4235" fg:w="3"/><text x="76.2005%" y="815.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::error::Error&gt; (1 samples, 0.02%)</title><rect x="76.0043%" y="933" width="0.0179%" height="15" fill="rgb(228,202,34)" fg:x="4238" fg:w="1"/><text x="76.2543%" y="943.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (2 samples, 0.04%)</title><rect x="76.0043%" y="981" width="0.0359%" height="15" fill="rgb(254,200,22)" fg:x="4238" fg:w="2"/><text x="76.2543%" y="991.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::BinaryDecoder&lt;O&gt; as databend_common_arrow::arrow::io::parquet::read::deserialize::utils::Decoder&gt;::extend_from_state (2 samples, 0.04%)</title><rect x="76.0043%" y="965" width="0.0359%" height="15" fill="rgb(219,10,39)" fg:x="4238" fg:w="2"/><text x="76.2543%" y="975.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::binary::utils::Binary&lt;O&gt;::push (2 samples, 0.04%)</title><rect x="76.0043%" y="949" width="0.0359%" height="15" fill="rgb(226,210,39)" fg:x="4238" fg:w="2"/><text x="76.2543%" y="959.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="76.0222%" y="933" width="0.0179%" height="15" fill="rgb(208,219,16)" fg:x="4239" fg:w="1"/><text x="76.2722%" y="943.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::Iter&lt;O,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.34%)</title><rect x="75.7532%" y="1013" width="0.3407%" height="15" fill="rgb(216,158,51)" fg:x="4224" fg:w="19"/><text x="76.0032%" y="1023.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (5 samples, 0.09%)</title><rect x="76.0043%" y="997" width="0.0897%" height="15" fill="rgb(233,14,44)" fg:x="4238" fg:w="5"/><text x="76.2543%" y="1007.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (3 samples, 0.05%)</title><rect x="76.0402%" y="981" width="0.0538%" height="15" fill="rgb(237,97,39)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="991.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (3 samples, 0.05%)</title><rect x="76.0402%" y="965" width="0.0538%" height="15" fill="rgb(218,198,43)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="975.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (3 samples, 0.05%)</title><rect x="76.0402%" y="949" width="0.0538%" height="15" fill="rgb(231,104,20)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="959.50"></text></g><g><title>databend-query`parquet2::compression::decompress (3 samples, 0.05%)</title><rect x="76.0402%" y="933" width="0.0538%" height="15" fill="rgb(254,36,13)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="943.50"></text></g><g><title>databend-query`std::io::default_read_exact (3 samples, 0.05%)</title><rect x="76.0402%" y="917" width="0.0538%" height="15" fill="rgb(248,14,50)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="927.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (3 samples, 0.05%)</title><rect x="76.0402%" y="901" width="0.0538%" height="15" fill="rgb(217,107,29)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="911.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (3 samples, 0.05%)</title><rect x="76.0402%" y="885" width="0.0538%" height="15" fill="rgb(251,169,33)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="895.50"></text></g><g><title>databend-query`ZSTD_decompressStream (3 samples, 0.05%)</title><rect x="76.0402%" y="869" width="0.0538%" height="15" fill="rgb(217,108,32)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="879.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (3 samples, 0.05%)</title><rect x="76.0402%" y="853" width="0.0538%" height="15" fill="rgb(219,66,42)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="863.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (3 samples, 0.05%)</title><rect x="76.0402%" y="837" width="0.0538%" height="15" fill="rgb(206,180,7)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="847.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (3 samples, 0.05%)</title><rect x="76.0402%" y="821" width="0.0538%" height="15" fill="rgb(208,226,31)" fg:x="4240" fg:w="3"/><text x="76.2902%" y="831.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (2 samples, 0.04%)</title><rect x="76.0940%" y="997" width="0.0359%" height="15" fill="rgb(218,26,49)" fg:x="4243" fg:w="2"/><text x="76.3440%" y="1007.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::BinaryDecoder&lt;O&gt; as databend_common_arrow::arrow::io::parquet::read::deserialize::utils::Decoder&gt;::extend_from_state (2 samples, 0.04%)</title><rect x="76.0940%" y="981" width="0.0359%" height="15" fill="rgb(233,197,48)" fg:x="4243" fg:w="2"/><text x="76.3440%" y="991.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::binary::utils::Binary&lt;O&gt;::push (2 samples, 0.04%)</title><rect x="76.0940%" y="965" width="0.0359%" height="15" fill="rgb(252,181,51)" fg:x="4243" fg:w="2"/><text x="76.3440%" y="975.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::error::Error&gt; (2 samples, 0.04%)</title><rect x="76.0940%" y="949" width="0.0359%" height="15" fill="rgb(253,90,19)" fg:x="4243" fg:w="2"/><text x="76.3440%" y="959.50"></text></g><g><title>databend-query`ZSTD_decompressStream (1 samples, 0.02%)</title><rect x="76.1298%" y="885" width="0.0179%" height="15" fill="rgb(215,171,30)" fg:x="4245" fg:w="1"/><text x="76.3798%" y="895.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (1 samples, 0.02%)</title><rect x="76.1298%" y="869" width="0.0179%" height="15" fill="rgb(214,222,9)" fg:x="4245" fg:w="1"/><text x="76.3798%" y="879.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (1 samples, 0.02%)</title><rect x="76.1298%" y="853" width="0.0179%" height="15" fill="rgb(223,3,22)" fg:x="4245" fg:w="1"/><text x="76.3798%" y="863.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (1 samples, 0.02%)</title><rect x="76.1298%" y="837" width="0.0179%" height="15" fill="rgb(225,196,46)" fg:x="4245" fg:w="1"/><text x="76.3798%" y="847.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::Iter&lt;O,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.41%)</title><rect x="75.7532%" y="1029" width="0.4125%" height="15" fill="rgb(209,110,37)" fg:x="4224" fg:w="23"/><text x="76.0032%" y="1039.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (4 samples, 0.07%)</title><rect x="76.0940%" y="1013" width="0.0717%" height="15" fill="rgb(249,89,12)" fg:x="4243" fg:w="4"/><text x="76.3440%" y="1023.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (2 samples, 0.04%)</title><rect x="76.1298%" y="997" width="0.0359%" height="15" fill="rgb(226,27,33)" fg:x="4245" fg:w="2"/><text x="76.3798%" y="1007.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (2 samples, 0.04%)</title><rect x="76.1298%" y="981" width="0.0359%" height="15" fill="rgb(213,82,22)" fg:x="4245" fg:w="2"/><text x="76.3798%" y="991.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (2 samples, 0.04%)</title><rect x="76.1298%" y="965" width="0.0359%" height="15" fill="rgb(248,140,0)" fg:x="4245" fg:w="2"/><text x="76.3798%" y="975.50"></text></g><g><title>databend-query`parquet2::compression::decompress (2 samples, 0.04%)</title><rect x="76.1298%" y="949" width="0.0359%" height="15" fill="rgb(228,106,3)" fg:x="4245" fg:w="2"/><text x="76.3798%" y="959.50"></text></g><g><title>databend-query`std::io::default_read_exact (2 samples, 0.04%)</title><rect x="76.1298%" y="933" width="0.0359%" height="15" fill="rgb(209,23,37)" fg:x="4245" fg:w="2"/><text x="76.3798%" y="943.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="76.1298%" y="917" width="0.0359%" height="15" fill="rgb(241,93,50)" fg:x="4245" fg:w="2"/><text x="76.3798%" y="927.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (2 samples, 0.04%)</title><rect x="76.1298%" y="901" width="0.0359%" height="15" fill="rgb(253,46,43)" fg:x="4245" fg:w="2"/><text x="76.3798%" y="911.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="76.1478%" y="885" width="0.0179%" height="15" fill="rgb(226,206,43)" fg:x="4246" fg:w="1"/><text x="76.3978%" y="895.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::error::Error&gt; (1 samples, 0.02%)</title><rect x="76.1657%" y="965" width="0.0179%" height="15" fill="rgb(217,54,7)" fg:x="4247" fg:w="1"/><text x="76.4157%" y="975.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (2 samples, 0.04%)</title><rect x="76.1657%" y="1013" width="0.0359%" height="15" fill="rgb(223,5,52)" fg:x="4247" fg:w="2"/><text x="76.4157%" y="1023.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::BinaryDecoder&lt;O&gt; as databend_common_arrow::arrow::io::parquet::read::deserialize::utils::Decoder&gt;::extend_from_state (2 samples, 0.04%)</title><rect x="76.1657%" y="997" width="0.0359%" height="15" fill="rgb(206,52,46)" fg:x="4247" fg:w="2"/><text x="76.4157%" y="1007.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::binary::utils::Binary&lt;O&gt;::push (2 samples, 0.04%)</title><rect x="76.1657%" y="981" width="0.0359%" height="15" fill="rgb(253,136,11)" fg:x="4247" fg:w="2"/><text x="76.4157%" y="991.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="76.1836%" y="965" width="0.0179%" height="15" fill="rgb(208,106,33)" fg:x="4248" fg:w="1"/><text x="76.4336%" y="975.50"></text></g><g><title>databend-query`ZSTD_freeDCtx (1 samples, 0.02%)</title><rect x="76.2016%" y="949" width="0.0179%" height="15" fill="rgb(206,54,4)" fg:x="4249" fg:w="1"/><text x="76.4516%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="76.2016%" y="933" width="0.0179%" height="15" fill="rgb(213,3,15)" fg:x="4249" fg:w="1"/><text x="76.4516%" y="943.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="76.2016%" y="917" width="0.0179%" height="15" fill="rgb(252,211,39)" fg:x="4249" fg:w="1"/><text x="76.4516%" y="927.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::Iter&lt;O,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.50%)</title><rect x="75.7532%" y="1045" width="0.5022%" height="15" fill="rgb(223,6,36)" fg:x="4224" fg:w="28"/><text x="76.0032%" y="1055.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (5 samples, 0.09%)</title><rect x="76.1657%" y="1029" width="0.0897%" height="15" fill="rgb(252,169,45)" fg:x="4247" fg:w="5"/><text x="76.4157%" y="1039.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (3 samples, 0.05%)</title><rect x="76.2016%" y="1013" width="0.0538%" height="15" fill="rgb(212,48,26)" fg:x="4249" fg:w="3"/><text x="76.4516%" y="1023.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (3 samples, 0.05%)</title><rect x="76.2016%" y="997" width="0.0538%" height="15" fill="rgb(251,102,48)" fg:x="4249" fg:w="3"/><text x="76.4516%" y="1007.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (3 samples, 0.05%)</title><rect x="76.2016%" y="981" width="0.0538%" height="15" fill="rgb(243,208,16)" fg:x="4249" fg:w="3"/><text x="76.4516%" y="991.50"></text></g><g><title>databend-query`parquet2::compression::decompress (3 samples, 0.05%)</title><rect x="76.2016%" y="965" width="0.0538%" height="15" fill="rgb(219,96,24)" fg:x="4249" fg:w="3"/><text x="76.4516%" y="975.50"></text></g><g><title>databend-query`std::io::default_read_exact (2 samples, 0.04%)</title><rect x="76.2195%" y="949" width="0.0359%" height="15" fill="rgb(219,33,29)" fg:x="4250" fg:w="2"/><text x="76.4695%" y="959.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="76.2195%" y="933" width="0.0359%" height="15" fill="rgb(223,176,5)" fg:x="4250" fg:w="2"/><text x="76.4695%" y="943.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (2 samples, 0.04%)</title><rect x="76.2195%" y="917" width="0.0359%" height="15" fill="rgb(228,140,14)" fg:x="4250" fg:w="2"/><text x="76.4695%" y="927.50"></text></g><g><title>databend-query`ZSTD_decompressStream (2 samples, 0.04%)</title><rect x="76.2195%" y="901" width="0.0359%" height="15" fill="rgb(217,179,31)" fg:x="4250" fg:w="2"/><text x="76.4695%" y="911.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (2 samples, 0.04%)</title><rect x="76.2195%" y="885" width="0.0359%" height="15" fill="rgb(230,9,30)" fg:x="4250" fg:w="2"/><text x="76.4695%" y="895.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (2 samples, 0.04%)</title><rect x="76.2195%" y="869" width="0.0359%" height="15" fill="rgb(230,136,20)" fg:x="4250" fg:w="2"/><text x="76.4695%" y="879.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (2 samples, 0.04%)</title><rect x="76.2195%" y="853" width="0.0359%" height="15" fill="rgb(215,210,22)" fg:x="4250" fg:w="2"/><text x="76.4695%" y="863.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (3 samples, 0.05%)</title><rect x="76.2554%" y="1029" width="0.0538%" height="15" fill="rgb(218,43,5)" fg:x="4252" fg:w="3"/><text x="76.5054%" y="1039.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::BinaryDecoder&lt;O&gt; as databend_common_arrow::arrow::io::parquet::read::deserialize::utils::Decoder&gt;::extend_from_state (3 samples, 0.05%)</title><rect x="76.2554%" y="1013" width="0.0538%" height="15" fill="rgb(216,11,5)" fg:x="4252" fg:w="3"/><text x="76.5054%" y="1023.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::binary::utils::Binary&lt;O&gt;::push (3 samples, 0.05%)</title><rect x="76.2554%" y="997" width="0.0538%" height="15" fill="rgb(209,82,29)" fg:x="4252" fg:w="3"/><text x="76.5054%" y="1007.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="76.2554%" y="981" width="0.0538%" height="15" fill="rgb(244,115,12)" fg:x="4252" fg:w="3"/><text x="76.5054%" y="991.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::Iter&lt;O,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.61%)</title><rect x="75.7532%" y="1061" width="0.6098%" height="15" fill="rgb(222,82,18)" fg:x="4224" fg:w="34"/><text x="76.0032%" y="1071.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (6 samples, 0.11%)</title><rect x="76.2554%" y="1045" width="0.1076%" height="15" fill="rgb(249,227,8)" fg:x="4252" fg:w="6"/><text x="76.5054%" y="1055.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (3 samples, 0.05%)</title><rect x="76.3092%" y="1029" width="0.0538%" height="15" fill="rgb(253,141,45)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="1039.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (3 samples, 0.05%)</title><rect x="76.3092%" y="1013" width="0.0538%" height="15" fill="rgb(234,184,4)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="1023.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (3 samples, 0.05%)</title><rect x="76.3092%" y="997" width="0.0538%" height="15" fill="rgb(218,194,23)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="1007.50"></text></g><g><title>databend-query`parquet2::compression::decompress (3 samples, 0.05%)</title><rect x="76.3092%" y="981" width="0.0538%" height="15" fill="rgb(235,66,41)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="991.50"></text></g><g><title>databend-query`std::io::default_read_exact (3 samples, 0.05%)</title><rect x="76.3092%" y="965" width="0.0538%" height="15" fill="rgb(245,217,1)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="975.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (3 samples, 0.05%)</title><rect x="76.3092%" y="949" width="0.0538%" height="15" fill="rgb(229,91,1)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="959.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (3 samples, 0.05%)</title><rect x="76.3092%" y="933" width="0.0538%" height="15" fill="rgb(207,101,30)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="943.50"></text></g><g><title>databend-query`ZSTD_decompressStream (3 samples, 0.05%)</title><rect x="76.3092%" y="917" width="0.0538%" height="15" fill="rgb(223,82,49)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="927.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (3 samples, 0.05%)</title><rect x="76.3092%" y="901" width="0.0538%" height="15" fill="rgb(218,167,17)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="911.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (3 samples, 0.05%)</title><rect x="76.3092%" y="885" width="0.0538%" height="15" fill="rgb(208,103,14)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="895.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (3 samples, 0.05%)</title><rect x="76.3092%" y="869" width="0.0538%" height="15" fill="rgb(238,20,8)" fg:x="4255" fg:w="3"/><text x="76.5592%" y="879.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (1 samples, 0.02%)</title><rect x="76.3451%" y="853" width="0.0179%" height="15" fill="rgb(218,80,54)" fg:x="4257" fg:w="1"/><text x="76.5951%" y="863.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (1 samples, 0.02%)</title><rect x="76.3451%" y="837" width="0.0179%" height="15" fill="rgb(240,144,17)" fg:x="4257" fg:w="1"/><text x="76.5951%" y="847.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="76.3451%" y="821" width="0.0179%" height="15" fill="rgb(245,27,50)" fg:x="4257" fg:w="1"/><text x="76.5951%" y="831.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="76.3630%" y="997" width="0.0179%" height="15" fill="rgb(251,51,7)" fg:x="4258" fg:w="1"/><text x="76.6130%" y="1007.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (3 samples, 0.05%)</title><rect x="76.3630%" y="1045" width="0.0538%" height="15" fill="rgb(245,217,29)" fg:x="4258" fg:w="3"/><text x="76.6130%" y="1055.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::BinaryDecoder&lt;O&gt; as databend_common_arrow::arrow::io::parquet::read::deserialize::utils::Decoder&gt;::extend_from_state (3 samples, 0.05%)</title><rect x="76.3630%" y="1029" width="0.0538%" height="15" fill="rgb(221,176,29)" fg:x="4258" fg:w="3"/><text x="76.6130%" y="1039.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::binary::utils::Binary&lt;O&gt;::push (3 samples, 0.05%)</title><rect x="76.3630%" y="1013" width="0.0538%" height="15" fill="rgb(212,180,24)" fg:x="4258" fg:w="3"/><text x="76.6130%" y="1023.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="76.3809%" y="997" width="0.0359%" height="15" fill="rgb(254,24,2)" fg:x="4259" fg:w="2"/><text x="76.6309%" y="1007.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::Iter&lt;O,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.70%)</title><rect x="75.7532%" y="1077" width="0.6994%" height="15" fill="rgb(230,100,2)" fg:x="4224" fg:w="39"/><text x="76.0032%" y="1087.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (5 samples, 0.09%)</title><rect x="76.3630%" y="1061" width="0.0897%" height="15" fill="rgb(219,142,25)" fg:x="4258" fg:w="5"/><text x="76.6130%" y="1071.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (2 samples, 0.04%)</title><rect x="76.4168%" y="1045" width="0.0359%" height="15" fill="rgb(240,73,43)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="1055.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (2 samples, 0.04%)</title><rect x="76.4168%" y="1029" width="0.0359%" height="15" fill="rgb(214,114,15)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="1039.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (2 samples, 0.04%)</title><rect x="76.4168%" y="1013" width="0.0359%" height="15" fill="rgb(207,130,4)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="1023.50"></text></g><g><title>databend-query`parquet2::compression::decompress (2 samples, 0.04%)</title><rect x="76.4168%" y="997" width="0.0359%" height="15" fill="rgb(221,25,40)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="1007.50"></text></g><g><title>databend-query`std::io::default_read_exact (2 samples, 0.04%)</title><rect x="76.4168%" y="981" width="0.0359%" height="15" fill="rgb(241,184,7)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="991.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (2 samples, 0.04%)</title><rect x="76.4168%" y="965" width="0.0359%" height="15" fill="rgb(235,159,4)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="975.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (2 samples, 0.04%)</title><rect x="76.4168%" y="949" width="0.0359%" height="15" fill="rgb(214,87,48)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="959.50"></text></g><g><title>databend-query`ZSTD_decompressStream (2 samples, 0.04%)</title><rect x="76.4168%" y="933" width="0.0359%" height="15" fill="rgb(246,198,24)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="943.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (2 samples, 0.04%)</title><rect x="76.4168%" y="917" width="0.0359%" height="15" fill="rgb(209,66,40)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="927.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (2 samples, 0.04%)</title><rect x="76.4168%" y="901" width="0.0359%" height="15" fill="rgb(233,147,39)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="911.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (2 samples, 0.04%)</title><rect x="76.4168%" y="885" width="0.0359%" height="15" fill="rgb(231,145,52)" fg:x="4261" fg:w="2"/><text x="76.6668%" y="895.50"></text></g><g><title>databend-query`ZSTD_decodeSeqHeaders (1 samples, 0.02%)</title><rect x="76.4347%" y="869" width="0.0179%" height="15" fill="rgb(206,20,26)" fg:x="4262" fg:w="1"/><text x="76.6847%" y="879.50"></text></g><g><title>databend-query`ZSTD_buildSeqTable (1 samples, 0.02%)</title><rect x="76.4347%" y="853" width="0.0179%" height="15" fill="rgb(238,220,4)" fg:x="4262" fg:w="1"/><text x="76.6847%" y="863.50"></text></g><g><title>databend-query`FSE_readNCount_bmi2 (1 samples, 0.02%)</title><rect x="76.4347%" y="837" width="0.0179%" height="15" fill="rgb(252,195,42)" fg:x="4262" fg:w="1"/><text x="76.6847%" y="847.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::extend_from_new_page (4 samples, 0.07%)</title><rect x="76.4527%" y="1061" width="0.0717%" height="15" fill="rgb(209,10,6)" fg:x="4263" fg:w="4"/><text x="76.7027%" y="1071.50"></text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::BinaryDecoder&lt;O&gt; as databend_common_arrow::arrow::io::parquet::read::deserialize::utils::Decoder&gt;::extend_from_state (4 samples, 0.07%)</title><rect x="76.4527%" y="1045" width="0.0717%" height="15" fill="rgb(229,3,52)" fg:x="4263" fg:w="4"/><text x="76.7027%" y="1055.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::binary::utils::Binary&lt;O&gt;::push (3 samples, 0.05%)</title><rect x="76.4706%" y="1029" width="0.0538%" height="15" fill="rgb(253,49,37)" fg:x="4264" fg:w="3"/><text x="76.7206%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="76.4706%" y="1013" width="0.0538%" height="15" fill="rgb(240,103,49)" fg:x="4264" fg:w="3"/><text x="76.7206%" y="1023.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,811 samples, 68.35%)</title><rect x="8.2317%" y="1125" width="68.3465%" height="15" fill="rgb(250,182,30)" fg:x="459" fg:w="3811"/><text x="8.4817%" y="1135.50">databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,811 samples, 68.35%)</title><rect x="8.2317%" y="1109" width="68.3465%" height="15" fill="rgb(248,8,30)" fg:x="459" fg:w="3811"/><text x="8.4817%" y="1119.50">databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>databend-query`&lt;databend_common_arrow::arrow::io::parquet::read::deserialize::binary::basic::Iter&lt;O,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.82%)</title><rect x="75.7532%" y="1093" width="0.8250%" height="15" fill="rgb(237,120,30)" fg:x="4224" fg:w="46"/><text x="76.0032%" y="1103.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::utils::next (7 samples, 0.13%)</title><rect x="76.4527%" y="1077" width="0.1255%" height="15" fill="rgb(221,146,34)" fg:x="4263" fg:w="7"/><text x="76.7027%" y="1087.50"></text></g><g><title>databend-query`fallible_streaming_iterator::FallibleStreamingIterator::next (3 samples, 0.05%)</title><rect x="76.5244%" y="1061" width="0.0538%" height="15" fill="rgb(242,55,13)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="1071.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress (3 samples, 0.05%)</title><rect x="76.5244%" y="1045" width="0.0538%" height="15" fill="rgb(242,112,31)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="1055.50"></text></g><g><title>databend-query`parquet2::read::compression::decompress_buffer (3 samples, 0.05%)</title><rect x="76.5244%" y="1029" width="0.0538%" height="15" fill="rgb(249,192,27)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="1039.50"></text></g><g><title>databend-query`parquet2::compression::decompress (3 samples, 0.05%)</title><rect x="76.5244%" y="1013" width="0.0538%" height="15" fill="rgb(208,204,44)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="1023.50"></text></g><g><title>databend-query`std::io::default_read_exact (3 samples, 0.05%)</title><rect x="76.5244%" y="997" width="0.0538%" height="15" fill="rgb(208,93,54)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="1007.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (3 samples, 0.05%)</title><rect x="76.5244%" y="981" width="0.0538%" height="15" fill="rgb(242,1,31)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="991.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (3 samples, 0.05%)</title><rect x="76.5244%" y="965" width="0.0538%" height="15" fill="rgb(241,83,25)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="975.50"></text></g><g><title>databend-query`ZSTD_decompressStream (3 samples, 0.05%)</title><rect x="76.5244%" y="949" width="0.0538%" height="15" fill="rgb(205,169,50)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="959.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (3 samples, 0.05%)</title><rect x="76.5244%" y="933" width="0.0538%" height="15" fill="rgb(239,186,37)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="943.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (3 samples, 0.05%)</title><rect x="76.5244%" y="917" width="0.0538%" height="15" fill="rgb(205,221,10)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="927.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (3 samples, 0.05%)</title><rect x="76.5244%" y="901" width="0.0538%" height="15" fill="rgb(218,196,15)" fg:x="4267" fg:w="3"/><text x="76.7744%" y="911.50"></text></g><g><title>databend-query`databend_common_storages_fuse::io::read::block::block_reader_parquet_deserialize::_&lt;impl databend_common_storages_fuse::io::read::block::block_reader::BlockReader&gt;::deserialize_parquet_chunks_with_buffer (3,812 samples, 68.36%)</title><rect x="8.2317%" y="1157" width="68.3644%" height="15" fill="rgb(218,196,35)" fg:x="459" fg:w="3812"/><text x="8.4817%" y="1167.50">databend-query`databend_common_storages_fuse::io::read::block::block_reader_parquet_deserialize::_&lt;impl databend_..</text></g><g><title>databend-query`databend_common_storages_fuse::io::read::block::block_reader_parquet_deserialize::_&lt;impl databend_common_storages_fuse::io::read::block::block_reader::BlockReader&gt;::deserialize_field (3,812 samples, 68.36%)</title><rect x="8.2317%" y="1141" width="68.3644%" height="15" fill="rgb(233,63,24)" fg:x="459" fg:w="3812"/><text x="8.4817%" y="1151.50">databend-query`databend_common_storages_fuse::io::read::block::block_reader_parquet_deserialize::_&lt;impl databend_..</text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::column_iter_to_arrays (1 samples, 0.02%)</title><rect x="76.5782%" y="1125" width="0.0179%" height="15" fill="rgb(225,8,4)" fg:x="4270" fg:w="1"/><text x="76.8282%" y="1135.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::io::parquet::read::deserialize::simple::page_iter_to_arrays (1 samples, 0.02%)</title><rect x="76.5782%" y="1109" width="0.0179%" height="15" fill="rgb(234,105,35)" fg:x="4270" fg:w="1"/><text x="76.8282%" y="1119.50"></text></g><g><title>databend-query`&lt;xorf::bfuse8::BinaryFuse8 as xorf::Filter&lt;u64&gt;&gt;::contains (361 samples, 6.47%)</title><rect x="82.5861%" y="1141" width="6.4742%" height="15" fill="rgb(236,21,32)" fg:x="4605" fg:w="361"/><text x="82.8361%" y="1151.50">databend..</text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (12 samples, 0.22%)</title><rect x="89.0603%" y="1141" width="0.2152%" height="15" fill="rgb(228,109,6)" fg:x="4966" fg:w="12"/><text x="89.3103%" y="1151.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;i8&gt;&gt; (12 samples, 0.22%)</title><rect x="89.0603%" y="1125" width="0.2152%" height="15" fill="rgb(229,215,31)" fg:x="4966" fg:w="12"/><text x="89.3103%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.22%)</title><rect x="89.0603%" y="1109" width="0.2152%" height="15" fill="rgb(221,52,54)" fg:x="4966" fg:w="12"/><text x="89.3103%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.22%)</title><rect x="89.0603%" y="1093" width="0.2152%" height="15" fill="rgb(252,129,43)" fg:x="4966" fg:w="12"/><text x="89.3103%" y="1103.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f32&gt;&gt; (7 samples, 0.13%)</title><rect x="89.2934%" y="1077" width="0.1255%" height="15" fill="rgb(248,183,27)" fg:x="4979" fg:w="7"/><text x="89.5434%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.13%)</title><rect x="89.2934%" y="1061" width="0.1255%" height="15" fill="rgb(250,0,22)" fg:x="4979" fg:w="7"/><text x="89.5434%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.13%)</title><rect x="89.2934%" y="1045" width="0.1255%" height="15" fill="rgb(213,166,10)" fg:x="4979" fg:w="7"/><text x="89.5434%" y="1055.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f64&gt;&gt; (22 samples, 0.39%)</title><rect x="89.4189%" y="1077" width="0.3945%" height="15" fill="rgb(207,163,36)" fg:x="4986" fg:w="22"/><text x="89.6689%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (22 samples, 0.39%)</title><rect x="89.4189%" y="1061" width="0.3945%" height="15" fill="rgb(208,122,22)" fg:x="4986" fg:w="22"/><text x="89.6689%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 0.39%)</title><rect x="89.4189%" y="1045" width="0.3945%" height="15" fill="rgb(207,104,49)" fg:x="4986" fg:w="22"/><text x="89.6689%" y="1055.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_expression::block::DataBlock&gt; (55 samples, 0.99%)</title><rect x="89.2755%" y="1141" width="0.9864%" height="15" fill="rgb(248,211,50)" fg:x="4978" fg:w="55"/><text x="89.5255%" y="1151.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;databend_common_expression::block::BlockEntry&gt;&gt; (55 samples, 0.99%)</title><rect x="89.2755%" y="1125" width="0.9864%" height="15" fill="rgb(217,13,45)" fg:x="4978" fg:w="55"/><text x="89.5255%" y="1135.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.99%)</title><rect x="89.2755%" y="1109" width="0.9864%" height="15" fill="rgb(211,216,49)" fg:x="4978" fg:w="55"/><text x="89.5255%" y="1119.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (54 samples, 0.97%)</title><rect x="89.2934%" y="1093" width="0.9684%" height="15" fill="rgb(221,58,53)" fg:x="4979" fg:w="54"/><text x="89.5434%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (25 samples, 0.45%)</title><rect x="89.8135%" y="1077" width="0.4484%" height="15" fill="rgb(220,112,41)" fg:x="5008" fg:w="25"/><text x="90.0635%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.45%)</title><rect x="89.8135%" y="1061" width="0.4484%" height="15" fill="rgb(236,38,28)" fg:x="5008" fg:w="25"/><text x="90.0635%" y="1071.50"></text></g><g><title>databend-query`databend_common_arrow::arrow::bitmap::utils::count_zeros (3 samples, 0.05%)</title><rect x="90.2618%" y="1141" width="0.0538%" height="15" fill="rgb(227,195,22)" fg:x="5033" fg:w="3"/><text x="90.5118%" y="1151.50"></text></g><g><title>databend-query`&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.05%)</title><rect x="90.2618%" y="1125" width="0.0538%" height="15" fill="rgb(214,55,33)" fg:x="5033" fg:w="3"/><text x="90.5118%" y="1135.50"></text></g><g><title>databend-query`databend_common_storages_fuse::operations::read::parquet_data_source_deserializer::DeserializeDataTransform::runtime_filter (853 samples, 15.30%)</title><rect x="76.5961%" y="1157" width="15.2977%" height="15" fill="rgb(248,80,13)" fg:x="4271" fg:w="853"/><text x="76.8461%" y="1167.50">databend-query`databend..</text></g><g><title>databend-query`databend_common_expression::kernels::filter::_&lt;impl databend_common_expression::block::DataBlock&gt;::filter_with_bitmap (88 samples, 1.58%)</title><rect x="90.3156%" y="1141" width="1.5782%" height="15" fill="rgb(238,52,6)" fg:x="5036" fg:w="88"/><text x="90.5656%" y="1151.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (88 samples, 1.58%)</title><rect x="90.3156%" y="1125" width="1.5782%" height="15" fill="rgb(224,198,47)" fg:x="5036" fg:w="88"/><text x="90.5656%" y="1135.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (88 samples, 1.58%)</title><rect x="90.3156%" y="1109" width="1.5782%" height="15" fill="rgb(233,171,20)" fg:x="5036" fg:w="88"/><text x="90.5656%" y="1119.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (88 samples, 1.58%)</title><rect x="90.3156%" y="1093" width="1.5782%" height="15" fill="rgb(241,30,25)" fg:x="5036" fg:w="88"/><text x="90.5656%" y="1103.50"></text></g><g><title>databend-query`databend_common_expression::kernels::filter::_&lt;impl databend_common_expression::values::Column&gt;::filter (88 samples, 1.58%)</title><rect x="90.3156%" y="1077" width="1.5782%" height="15" fill="rgb(207,171,38)" fg:x="5036" fg:w="88"/><text x="90.5656%" y="1087.50"></text></g><g><title>databend-query`databend_common_expression::kernels::filter::_&lt;impl databend_common_expression::values::Column&gt;::filter_primitive_types (88 samples, 1.58%)</title><rect x="90.3156%" y="1061" width="1.5782%" height="15" fill="rgb(234,70,1)" fg:x="5036" fg:w="88"/><text x="90.5656%" y="1071.50"></text></g><g><title>databend-query`&lt;databend_common_storages_fuse::operations::read::parquet_data_source_deserializer::DeserializeDataTransform as databend_common_pipeline_core::processors::processor::Processor&gt;::process (4,721 samples, 84.67%)</title><rect x="7.2453%" y="1173" width="84.6664%" height="15" fill="rgb(232,178,18)" fg:x="404" fg:w="4721"/><text x="7.4953%" y="1183.50">databend-query`&lt;databend_common_storages_fuse::operations::read::parquet_data_source_deserializer::DeserializeDataTransform as databend_commo..</text></g><g><title>databend-query`hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="91.8938%" y="1157" width="0.0179%" height="15" fill="rgb(241,78,40)" fg:x="5124" fg:w="1"/><text x="92.1438%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[databend_common_expression::block::DataBlock]&gt; (1 samples, 0.02%)</title><rect x="91.9118%" y="1141" width="0.0179%" height="15" fill="rgb(222,35,25)" fg:x="5125" fg:w="1"/><text x="92.1618%" y="1151.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_expression::block::DataBlock&gt; (1 samples, 0.02%)</title><rect x="91.9118%" y="1125" width="0.0179%" height="15" fill="rgb(207,92,16)" fg:x="5125" fg:w="1"/><text x="92.1618%" y="1135.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;databend_common_expression::block::BlockEntry&gt;&gt; (1 samples, 0.02%)</title><rect x="91.9118%" y="1109" width="0.0179%" height="15" fill="rgb(216,59,51)" fg:x="5125" fg:w="1"/><text x="92.1618%" y="1119.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="91.9118%" y="1093" width="0.0179%" height="15" fill="rgb(213,80,28)" fg:x="5125" fg:w="1"/><text x="92.1618%" y="1103.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="91.9118%" y="1077" width="0.0179%" height="15" fill="rgb(220,93,7)" fg:x="5125" fg:w="1"/><text x="92.1618%" y="1087.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f32&gt;&gt; (1 samples, 0.02%)</title><rect x="91.9118%" y="1061" width="0.0179%" height="15" fill="rgb(225,24,44)" fg:x="5125" fg:w="1"/><text x="92.1618%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="91.9118%" y="1045" width="0.0179%" height="15" fill="rgb(243,74,40)" fg:x="5125" fg:w="1"/><text x="92.1618%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="91.9118%" y="1029" width="0.0179%" height="15" fill="rgb(228,39,7)" fg:x="5125" fg:w="1"/><text x="92.1618%" y="1039.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="91.9297%" y="1093" width="0.0359%" height="15" fill="rgb(227,79,8)" fg:x="5126" fg:w="2"/><text x="92.1797%" y="1103.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.04%)</title><rect x="91.9297%" y="1077" width="0.0359%" height="15" fill="rgb(236,58,11)" fg:x="5126" fg:w="2"/><text x="92.1797%" y="1087.50"></text></g><g><title>databend-query`databend_common_expression::kernels::concat::_&lt;impl databend_common_expression::values::Column&gt;::concat_columns (2 samples, 0.04%)</title><rect x="91.9297%" y="1061" width="0.0359%" height="15" fill="rgb(249,63,35)" fg:x="5126" fg:w="2"/><text x="92.1797%" y="1071.50"></text></g><g><title>databend-query`databend_common_expression::kernels::concat::_&lt;impl databend_common_expression::values::Column&gt;::concat_columns_impl (2 samples, 0.04%)</title><rect x="91.9297%" y="1045" width="0.0359%" height="15" fill="rgb(252,114,16)" fg:x="5126" fg:w="2"/><text x="92.1797%" y="1055.50"></text></g><g><title>databend-query`databend_common_expression::kernels::concat::_&lt;impl databend_common_expression::values::Column&gt;::concat_primitive_types (2 samples, 0.04%)</title><rect x="91.9297%" y="1029" width="0.0359%" height="15" fill="rgb(254,151,24)" fg:x="5126" fg:w="2"/><text x="92.1797%" y="1039.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="91.9297%" y="1013" width="0.0359%" height="15" fill="rgb(253,54,39)" fg:x="5126" fg:w="2"/><text x="92.1797%" y="1023.50"></text></g><g><title>databend-query`databend_common_expression::kernels::concat::_&lt;impl databend_common_expression::block::DataBlock&gt;::concat (4 samples, 0.07%)</title><rect x="91.9297%" y="1141" width="0.0717%" height="15" fill="rgb(243,25,45)" fg:x="5126" fg:w="4"/><text x="92.1797%" y="1151.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (4 samples, 0.07%)</title><rect x="91.9297%" y="1125" width="0.0717%" height="15" fill="rgb(234,134,9)" fg:x="5126" fg:w="4"/><text x="92.1797%" y="1135.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.07%)</title><rect x="91.9297%" y="1109" width="0.0717%" height="15" fill="rgb(227,166,31)" fg:x="5126" fg:w="4"/><text x="92.1797%" y="1119.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.04%)</title><rect x="91.9656%" y="1093" width="0.0359%" height="15" fill="rgb(245,143,41)" fg:x="5128" fg:w="2"/><text x="92.2156%" y="1103.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="91.9656%" y="1077" width="0.0359%" height="15" fill="rgb(238,181,32)" fg:x="5128" fg:w="2"/><text x="92.2156%" y="1087.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.04%)</title><rect x="91.9656%" y="1061" width="0.0359%" height="15" fill="rgb(224,113,18)" fg:x="5128" fg:w="2"/><text x="92.2156%" y="1071.50"></text></g><g><title>databend-query`databend_common_expression::kernels::concat::_&lt;impl databend_common_expression::values::Column&gt;::concat_columns (2 samples, 0.04%)</title><rect x="91.9656%" y="1045" width="0.0359%" height="15" fill="rgb(240,229,28)" fg:x="5128" fg:w="2"/><text x="92.2156%" y="1055.50"></text></g><g><title>databend-query`databend_common_expression::kernels::concat::_&lt;impl databend_common_expression::values::Column&gt;::concat_columns_impl (2 samples, 0.04%)</title><rect x="91.9656%" y="1029" width="0.0359%" height="15" fill="rgb(250,185,3)" fg:x="5128" fg:w="2"/><text x="92.2156%" y="1039.50"></text></g><g><title>databend-query`databend_common_expression::kernels::concat::_&lt;impl databend_common_expression::values::Column&gt;::concat_primitive_types (2 samples, 0.04%)</title><rect x="91.9656%" y="1013" width="0.0359%" height="15" fill="rgb(212,59,25)" fg:x="5128" fg:w="2"/><text x="92.2156%" y="1023.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="91.9656%" y="997" width="0.0359%" height="15" fill="rgb(221,87,20)" fg:x="5128" fg:w="2"/><text x="92.2156%" y="1007.50"></text></g><g><title>databend-query`core::hash::BuildHasher::hash_one (39 samples, 0.70%)</title><rect x="92.0194%" y="1109" width="0.6994%" height="15" fill="rgb(213,74,28)" fg:x="5131" fg:w="39"/><text x="92.2694%" y="1119.50"></text></g><g><title>databend-query`core::hash::BuildHasher::hash_one (9 samples, 0.16%)</title><rect x="93.2389%" y="1093" width="0.1614%" height="15" fill="rgb(224,132,34)" fg:x="5199" fg:w="9"/><text x="93.4889%" y="1103.50"></text></g><g><title>databend-query`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.16%)</title><rect x="93.4003%" y="1093" width="0.1614%" height="15" fill="rgb(222,101,24)" fg:x="5208" fg:w="9"/><text x="93.6503%" y="1103.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (48 samples, 0.86%)</title><rect x="92.7188%" y="1109" width="0.8608%" height="15" fill="rgb(254,142,4)" fg:x="5170" fg:w="48"/><text x="92.9688%" y="1119.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="93.5617%" y="1093" width="0.0179%" height="15" fill="rgb(230,229,49)" fg:x="5217" fg:w="1"/><text x="93.8117%" y="1103.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (95 samples, 1.70%)</title><rect x="92.0014%" y="1125" width="1.7037%" height="15" fill="rgb(238,70,47)" fg:x="5130" fg:w="95"/><text x="92.2514%" y="1135.50"></text></g><g><title>databend-query`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (7 samples, 0.13%)</title><rect x="93.5796%" y="1109" width="0.1255%" height="15" fill="rgb(231,160,17)" fg:x="5218" fg:w="7"/><text x="93.8296%" y="1119.50"></text></g><g><title>databend-query`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="93.7052%" y="1125" width="0.0179%" height="15" fill="rgb(218,68,53)" fg:x="5225" fg:w="1"/><text x="93.9552%" y="1135.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::hash_join::transform_hash_join_build::TransformHashJoinBuild as databend_common_pipeline_core::processors::processor::Processor&gt;::process (103 samples, 1.85%)</title><rect x="91.9118%" y="1173" width="1.8472%" height="15" fill="rgb(236,111,10)" fg:x="5125" fg:w="103"/><text x="92.1618%" y="1183.50">d..</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_build_state::HashJoinBuildState::build (103 samples, 1.85%)</title><rect x="91.9118%" y="1157" width="1.8472%" height="15" fill="rgb(224,34,41)" fg:x="5125" fg:w="103"/><text x="92.1618%" y="1167.50">d..</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_build_state::HashJoinBuildState::add_build_block (98 samples, 1.76%)</title><rect x="92.0014%" y="1141" width="1.7575%" height="15" fill="rgb(241,118,19)" fg:x="5130" fg:w="98"/><text x="92.2514%" y="1151.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.04%)</title><rect x="93.7231%" y="1125" width="0.0359%" height="15" fill="rgb(238,129,25)" fg:x="5226" fg:w="2"/><text x="93.9731%" y="1135.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_expression::block::DataBlock&gt; (7 samples, 0.13%)</title><rect x="93.7590%" y="1157" width="0.1255%" height="15" fill="rgb(238,22,31)" fg:x="5228" fg:w="7"/><text x="94.0090%" y="1167.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;databend_common_expression::block::BlockEntry&gt;&gt; (7 samples, 0.13%)</title><rect x="93.7590%" y="1141" width="0.1255%" height="15" fill="rgb(222,174,48)" fg:x="5228" fg:w="7"/><text x="94.0090%" y="1151.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.13%)</title><rect x="93.7590%" y="1125" width="0.1255%" height="15" fill="rgb(206,152,40)" fg:x="5228" fg:w="7"/><text x="94.0090%" y="1135.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.13%)</title><rect x="93.7590%" y="1109" width="0.1255%" height="15" fill="rgb(218,99,54)" fg:x="5228" fg:w="7"/><text x="94.0090%" y="1119.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f64&gt;&gt; (7 samples, 0.13%)</title><rect x="93.7590%" y="1093" width="0.1255%" height="15" fill="rgb(220,174,26)" fg:x="5228" fg:w="7"/><text x="94.0090%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.13%)</title><rect x="93.7590%" y="1077" width="0.1255%" height="15" fill="rgb(245,116,9)" fg:x="5228" fg:w="7"/><text x="94.0090%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.13%)</title><rect x="93.7590%" y="1061" width="0.1255%" height="15" fill="rgb(209,72,35)" fg:x="5228" fg:w="7"/><text x="94.0090%" y="1071.50"></text></g><g><title>databend-query`&lt;databend_common_expression::kernels::group_by_hash::method_fixed_keys::HashMethodFixedKeys&lt;u64&gt; as databend_common_expression::kernels::group_by_hash::method::HashMethod&gt;::build_keys_accessor_and_hashes (3 samples, 0.05%)</title><rect x="93.8845%" y="1125" width="0.0538%" height="15" fill="rgb(226,126,21)" fg:x="5235" fg:w="3"/><text x="94.1345%" y="1135.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.05%)</title><rect x="93.8845%" y="1109" width="0.0538%" height="15" fill="rgb(227,192,1)" fg:x="5235" fg:w="3"/><text x="94.1345%" y="1119.50"></text></g><g><title>databend-query`&lt;databend_common_expression::kernels::group_by_hash::method_fixed_keys::PrimitiveKeyAccessor&lt;T&gt; as databend_common_expression::kernels::group_by_hash::method::KeyAccessor&gt;::key_unchecked (2 samples, 0.04%)</title><rect x="93.9383%" y="1125" width="0.0359%" height="15" fill="rgb(237,180,29)" fg:x="5238" fg:w="2"/><text x="94.1883%" y="1135.50"></text></g><g><title>databend-query`&lt;databend_common_hashtable::hashjoin_hashtable::HashJoinHashTable&lt;K,A&gt; as databend_common_hashtable::traits::HashJoinHashtableLike&gt;::early_filtering_probe_with_selection (3 samples, 0.05%)</title><rect x="93.9742%" y="1125" width="0.0538%" height="15" fill="rgb(230,197,35)" fg:x="5240" fg:w="3"/><text x="94.2242%" y="1135.50"></text></g><g><title>databend-query`&lt;databend_common_hashtable::hashjoin_hashtable::HashJoinHashTable&lt;K,A&gt; as databend_common_hashtable::traits::HashJoinHashtableLike&gt;::probe (8 samples, 0.14%)</title><rect x="94.0280%" y="1125" width="0.1435%" height="15" fill="rgb(246,193,31)" fg:x="5243" fg:w="8"/><text x="94.2780%" y="1135.50"></text></g><g><title>databend-query`databend_common_expression::kernels::take::_&lt;impl databend_common_expression::block::DataBlock&gt;::take (3 samples, 0.05%)</title><rect x="95.1758%" y="1093" width="0.0538%" height="15" fill="rgb(241,36,4)" fg:x="5307" fg:w="3"/><text x="95.4258%" y="1103.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.05%)</title><rect x="95.1758%" y="1077" width="0.0538%" height="15" fill="rgb(241,130,17)" fg:x="5307" fg:w="3"/><text x="95.4258%" y="1087.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.05%)</title><rect x="95.1758%" y="1061" width="0.0538%" height="15" fill="rgb(206,137,32)" fg:x="5307" fg:w="3"/><text x="95.4258%" y="1071.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.05%)</title><rect x="95.1758%" y="1045" width="0.0538%" height="15" fill="rgb(237,228,51)" fg:x="5307" fg:w="3"/><text x="95.4258%" y="1055.50"></text></g><g><title>databend-query`databend_common_expression::kernels::take::_&lt;impl databend_common_expression::values::Column&gt;::take (3 samples, 0.05%)</title><rect x="95.1758%" y="1029" width="0.0538%" height="15" fill="rgb(243,6,42)" fg:x="5307" fg:w="3"/><text x="95.4258%" y="1039.50"></text></g><g><title>databend-query`databend_common_expression::kernels::take::_&lt;impl databend_common_expression::values::Column&gt;::take_primitive_types (3 samples, 0.05%)</title><rect x="95.1758%" y="1013" width="0.0538%" height="15" fill="rgb(251,74,28)" fg:x="5307" fg:w="3"/><text x="95.4258%" y="1023.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.05%)</title><rect x="95.1758%" y="997" width="0.0538%" height="15" fill="rgb(218,20,49)" fg:x="5307" fg:w="3"/><text x="95.4258%" y="1007.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="95.2296%" y="997" width="0.0179%" height="15" fill="rgb(238,28,14)" fg:x="5310" fg:w="1"/><text x="95.4796%" y="1007.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="95.2296%" y="981" width="0.0179%" height="15" fill="rgb(229,40,46)" fg:x="5310" fg:w="1"/><text x="95.4796%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="95.2296%" y="965" width="0.0179%" height="15" fill="rgb(244,195,20)" fg:x="5310" fg:w="1"/><text x="95.4796%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="95.2296%" y="949" width="0.0179%" height="15" fill="rgb(253,56,35)" fg:x="5310" fg:w="1"/><text x="95.4796%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="95.2296%" y="933" width="0.0179%" height="15" fill="rgb(210,149,44)" fg:x="5310" fg:w="1"/><text x="95.4796%" y="943.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="95.2296%" y="917" width="0.0179%" height="15" fill="rgb(240,135,12)" fg:x="5310" fg:w="1"/><text x="95.4796%" y="927.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="95.2296%" y="901" width="0.0179%" height="15" fill="rgb(251,24,50)" fg:x="5310" fg:w="1"/><text x="95.4796%" y="911.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.04%)</title><rect x="95.2296%" y="1077" width="0.0359%" height="15" fill="rgb(243,200,47)" fg:x="5310" fg:w="2"/><text x="95.4796%" y="1087.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.04%)</title><rect x="95.2296%" y="1061" width="0.0359%" height="15" fill="rgb(224,166,26)" fg:x="5310" fg:w="2"/><text x="95.4796%" y="1071.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.04%)</title><rect x="95.2296%" y="1045" width="0.0359%" height="15" fill="rgb(233,0,47)" fg:x="5310" fg:w="2"/><text x="95.4796%" y="1055.50"></text></g><g><title>databend-query`databend_common_expression::kernels::take_chunks::_&lt;impl databend_common_expression::values::Column&gt;::take_column_vec_indices (2 samples, 0.04%)</title><rect x="95.2296%" y="1029" width="0.0359%" height="15" fill="rgb(253,80,5)" fg:x="5310" fg:w="2"/><text x="95.4796%" y="1039.50"></text></g><g><title>databend-query`databend_common_expression::kernels::take_chunks::_&lt;impl databend_common_expression::values::Column&gt;::take_block_vec_primitive_types (2 samples, 0.04%)</title><rect x="95.2296%" y="1013" width="0.0359%" height="15" fill="rgb(214,133,25)" fg:x="5310" fg:w="2"/><text x="95.4796%" y="1023.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="95.2475%" y="997" width="0.0179%" height="15" fill="rgb(209,27,14)" fg:x="5311" fg:w="1"/><text x="95.4975%" y="1007.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="95.2475%" y="981" width="0.0179%" height="15" fill="rgb(219,102,51)" fg:x="5311" fg:w="1"/><text x="95.4975%" y="991.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::processors::transforms::hash_join::transform_hash_join_probe::TransformHashJoinProbe as databend_common_pipeline_core::processors::processor::Processor&gt;::process (85 samples, 1.52%)</title><rect x="93.7590%" y="1173" width="1.5244%" height="15" fill="rgb(237,18,16)" fg:x="5228" fg:w="85"/><text x="94.0090%" y="1183.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_probe_state::HashJoinProbeState::probe (78 samples, 1.40%)</title><rect x="93.8845%" y="1157" width="1.3989%" height="15" fill="rgb(241,85,17)" fg:x="5235" fg:w="78"/><text x="94.1345%" y="1167.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_probe_state::HashJoinProbeState::probe_join (78 samples, 1.40%)</title><rect x="93.8845%" y="1141" width="1.3989%" height="15" fill="rgb(236,90,42)" fg:x="5235" fg:w="78"/><text x="94.1345%" y="1151.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::result_blocks::_&lt;impl databend_query::pipelines::processors::transforms::hash_join::hash_join_probe_state::HashJoinProbeState&gt;::result_blocks (62 samples, 1.11%)</title><rect x="94.1714%" y="1125" width="1.1119%" height="15" fill="rgb(249,57,21)" fg:x="5251" fg:w="62"/><text x="94.4214%" y="1135.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::probe_join::inner_join::_&lt;impl databend_query::pipelines::processors::transforms::hash_join::hash_join_probe_state::HashJoinProbeState&gt;::process_inner_join_block (6 samples, 0.11%)</title><rect x="95.1758%" y="1109" width="0.1076%" height="15" fill="rgb(243,12,36)" fg:x="5307" fg:w="6"/><text x="95.4258%" y="1119.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::row::RowSpace::gather (3 samples, 0.05%)</title><rect x="95.2296%" y="1093" width="0.0538%" height="15" fill="rgb(253,128,47)" fg:x="5310" fg:w="3"/><text x="95.4796%" y="1103.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="95.2654%" y="1077" width="0.0179%" height="15" fill="rgb(207,33,20)" fg:x="5312" fg:w="1"/><text x="95.5154%" y="1087.50"></text></g><g><title>databend-query`databend_common_hashtable::hashjoin_hashtable::HashJoinHashTable&lt;K,A&gt;::insert (35 samples, 0.63%)</title><rect x="95.2834%" y="1173" width="0.6277%" height="15" fill="rgb(233,215,35)" fg:x="5313" fg:w="35"/><text x="95.5334%" y="1183.50"></text></g><g><title>databend-query`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="95.9110%" y="1141" width="0.0538%" height="15" fill="rgb(249,188,52)" fg:x="5348" fg:w="3"/><text x="96.1610%" y="1151.50"></text></g><g><title>databend-query`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="96.0007%" y="1125" width="0.0179%" height="15" fill="rgb(225,12,32)" fg:x="5353" fg:w="1"/><text x="96.2507%" y="1135.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (10 samples, 0.18%)</title><rect x="95.9648%" y="1141" width="0.1793%" height="15" fill="rgb(247,98,14)" fg:x="5351" fg:w="10"/><text x="96.2148%" y="1151.50"></text></g><g><title>databend-query`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (7 samples, 0.13%)</title><rect x="96.0187%" y="1125" width="0.1255%" height="15" fill="rgb(247,219,48)" fg:x="5354" fg:w="7"/><text x="96.2687%" y="1135.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (14 samples, 0.25%)</title><rect x="95.9110%" y="1157" width="0.2511%" height="15" fill="rgb(253,60,48)" fg:x="5348" fg:w="14"/><text x="96.1610%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="96.1442%" y="1141" width="0.0179%" height="15" fill="rgb(245,15,52)" fg:x="5361" fg:w="1"/><text x="96.3942%" y="1151.50"></text></g><g><title>databend-query`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (14 samples, 0.25%)</title><rect x="96.1621%" y="1157" width="0.2511%" height="15" fill="rgb(220,133,28)" fg:x="5362" fg:w="14"/><text x="96.4121%" y="1167.50"></text></g><g><title>databend-query`tokio::sync::watch::Sender&lt;T&gt;::send_if_modified (1 samples, 0.02%)</title><rect x="96.4132%" y="1157" width="0.0179%" height="15" fill="rgb(217,180,4)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1167.50"></text></g><g><title>databend-query`tokio::sync::notify::Notify::notify_waiters (1 samples, 0.02%)</title><rect x="96.4132%" y="1141" width="0.0179%" height="15" fill="rgb(251,24,1)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1151.50"></text></g><g><title>databend-query`tokio::util::wake_list::WakeList::wake_all (1 samples, 0.02%)</title><rect x="96.4132%" y="1125" width="0.0179%" height="15" fill="rgb(212,185,49)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1135.50"></text></g><g><title>databend-query`tokio::runtime::task::waker::wake_by_val (1 samples, 0.02%)</title><rect x="96.4132%" y="1109" width="0.0179%" height="15" fill="rgb(215,175,22)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1119.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::_&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (1 samples, 0.02%)</title><rect x="96.4132%" y="1093" width="0.0179%" height="15" fill="rgb(250,205,14)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1103.50"></text></g><g><title>databend-query`tokio::runtime::task::raw::schedule (1 samples, 0.02%)</title><rect x="96.4132%" y="1077" width="0.0179%" height="15" fill="rgb(225,211,22)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1087.50"></text></g><g><title>databend-query`tokio::runtime::context::with_scheduler (1 samples, 0.02%)</title><rect x="96.4132%" y="1061" width="0.0179%" height="15" fill="rgb(251,179,42)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1071.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.02%)</title><rect x="96.4132%" y="1045" width="0.0179%" height="15" fill="rgb(208,216,51)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1055.50"></text></g><g><title>databend-query`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.02%)</title><rect x="96.4132%" y="1029" width="0.0179%" height="15" fill="rgb(235,36,11)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1039.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.02%)</title><rect x="96.4132%" y="1013" width="0.0179%" height="15" fill="rgb(213,189,28)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1023.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (1 samples, 0.02%)</title><rect x="96.4132%" y="997" width="0.0179%" height="15" fill="rgb(227,203,42)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="1007.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (1 samples, 0.02%)</title><rect x="96.4132%" y="981" width="0.0179%" height="15" fill="rgb(244,72,36)" fg:x="5376" fg:w="1"/><text x="96.6632%" y="991.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_build_state::HashJoinBuildState::build_done (116 samples, 2.08%)</title><rect x="95.9110%" y="1173" width="2.0803%" height="15" fill="rgb(213,53,17)" fg:x="5348" fg:w="116"/><text x="96.1610%" y="1183.50">d..</text></g><g><title>databend-query`xorf::bfuse8::BinaryFuse8::try_from_iterator (87 samples, 1.56%)</title><rect x="96.4311%" y="1157" width="1.5603%" height="15" fill="rgb(207,167,3)" fg:x="5377" fg:w="87"/><text x="96.6811%" y="1167.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.04%)</title><rect x="97.9555%" y="1141" width="0.0359%" height="15" fill="rgb(216,98,30)" fg:x="5462" fg:w="2"/><text x="98.2055%" y="1151.50"></text></g><g><title>databend-query`__rust_alloc_zeroed (2 samples, 0.04%)</title><rect x="97.9555%" y="1125" width="0.0359%" height="15" fill="rgb(236,123,15)" fg:x="5462" fg:w="2"/><text x="98.2055%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.04%)</title><rect x="97.9555%" y="1109" width="0.0359%" height="15" fill="rgb(248,81,50)" fg:x="5462" fg:w="2"/><text x="98.2055%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="97.9555%" y="1093" width="0.0359%" height="15" fill="rgb(214,120,4)" fg:x="5462" fg:w="2"/><text x="98.2055%" y="1103.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="97.9555%" y="1077" width="0.0359%" height="15" fill="rgb(208,179,34)" fg:x="5462" fg:w="2"/><text x="98.2055%" y="1087.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_threads::_{{closure}} (5,354 samples, 96.02%)</title><rect x="2.0983%" y="1285" width="96.0187%" height="15" fill="rgb(227,140,7)" fg:x="117" fg:w="5354"/><text x="2.3483%" y="1295.50">databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_threads::_{{closure}}</text></g><g><title>databend-query`databend_common_base::runtime::catch_unwind::catch_unwind (5,354 samples, 96.02%)</title><rect x="2.0983%" y="1269" width="96.0187%" height="15" fill="rgb(214,22,6)" fg:x="117" fg:w="5354"/><text x="2.3483%" y="1279.50">databend-query`databend_common_base::runtime::catch_unwind::catch_unwind</text></g><g><title>databend-query`std::panicking::try (5,354 samples, 96.02%)</title><rect x="2.0983%" y="1253" width="96.0187%" height="15" fill="rgb(207,137,27)" fg:x="117" fg:w="5354"/><text x="2.3483%" y="1263.50">databend-query`std::panicking::try</text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,354 samples, 96.02%)</title><rect x="2.0983%" y="1237" width="96.0187%" height="15" fill="rgb(210,8,46)" fg:x="117" fg:w="5354"/><text x="2.3483%" y="1247.50">databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_single_thread (5,354 samples, 96.02%)</title><rect x="2.0983%" y="1221" width="96.0187%" height="15" fill="rgb(240,16,54)" fg:x="117" fg:w="5354"/><text x="2.3483%" y="1231.50">databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::execute_single_thread</text></g><g><title>databend-query`databend_query::pipelines::executor::executor_worker_context::ExecutorWorkerContext::execute_sync_task (5,328 samples, 95.55%)</title><rect x="2.5646%" y="1205" width="95.5524%" height="15" fill="rgb(211,209,29)" fg:x="143" fg:w="5328"/><text x="2.8146%" y="1215.50">databend-query`databend_query::pipelines::executor::executor_worker_context::ExecutorWorkerContext::execute_sync_task</text></g><g><title>databend-query`databend_common_pipeline_core::processors::processor::ProcessorPtr::process (5,328 samples, 95.55%)</title><rect x="2.5646%" y="1189" width="95.5524%" height="15" fill="rgb(226,228,24)" fg:x="143" fg:w="5328"/><text x="2.8146%" y="1199.50">databend-query`databend_common_pipeline_core::processors::processor::ProcessorPtr::process</text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_build_state::HashJoinBuildState::finalize (7 samples, 0.13%)</title><rect x="97.9914%" y="1173" width="0.1255%" height="15" fill="rgb(222,84,9)" fg:x="5464" fg:w="7"/><text x="98.2414%" y="1183.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(databend_common_expression::values::Column,databend_common_expression::types::DataType)&gt;&gt; (1 samples, 0.02%)</title><rect x="98.0990%" y="1157" width="0.0179%" height="15" fill="rgb(234,203,30)" fg:x="5470" fg:w="1"/><text x="98.3490%" y="1167.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.0990%" y="1141" width="0.0179%" height="15" fill="rgb(238,109,14)" fg:x="5470" fg:w="1"/><text x="98.3490%" y="1151.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;(databend_common_expression::values::Column,databend_common_expression::types::DataType)&gt; (1 samples, 0.02%)</title><rect x="98.0990%" y="1125" width="0.0179%" height="15" fill="rgb(233,206,34)" fg:x="5470" fg:w="1"/><text x="98.3490%" y="1135.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="98.0990%" y="1109" width="0.0179%" height="15" fill="rgb(220,167,47)" fg:x="5470" fg:w="1"/><text x="98.3490%" y="1119.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f64&gt;&gt; (1 samples, 0.02%)</title><rect x="98.0990%" y="1093" width="0.0179%" height="15" fill="rgb(238,105,10)" fg:x="5470" fg:w="1"/><text x="98.3490%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="98.0990%" y="1077" width="0.0179%" height="15" fill="rgb(213,227,17)" fg:x="5470" fg:w="1"/><text x="98.3490%" y="1087.50"></text></g><g><title>databend-query`std::fs::OpenOptions::open (1 samples, 0.02%)</title><rect x="98.1169%" y="1141" width="0.0179%" height="15" fill="rgb(217,132,38)" fg:x="5471" fg:w="1"/><text x="98.3669%" y="1151.50"></text></g><g><title>databend-query`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="98.1169%" y="1125" width="0.0179%" height="15" fill="rgb(242,146,4)" fg:x="5471" fg:w="1"/><text x="98.3669%" y="1135.50"></text></g><g><title>databend-query`std::sys::unix::fs::File::open_c (1 samples, 0.02%)</title><rect x="98.1169%" y="1109" width="0.0179%" height="15" fill="rgb(212,61,9)" fg:x="5471" fg:w="1"/><text x="98.3669%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="98.1169%" y="1093" width="0.0179%" height="15" fill="rgb(247,126,22)" fg:x="5471" fg:w="1"/><text x="98.3669%" y="1103.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.02%)</title><rect x="98.1349%" y="1045" width="0.0179%" height="15" fill="rgb(220,196,2)" fg:x="5472" fg:w="1"/><text x="98.3849%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.02%)</title><rect x="98.1349%" y="1029" width="0.0179%" height="15" fill="rgb(208,46,4)" fg:x="5472" fg:w="1"/><text x="98.3849%" y="1039.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (4 samples, 0.07%)</title><rect x="98.1349%" y="1077" width="0.0717%" height="15" fill="rgb(252,104,46)" fg:x="5472" fg:w="4"/><text x="98.3849%" y="1087.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::park::Parker::park (4 samples, 0.07%)</title><rect x="98.1349%" y="1061" width="0.0717%" height="15" fill="rgb(237,152,48)" fg:x="5472" fg:w="4"/><text x="98.3849%" y="1071.50"></text></g><g><title>databend-query`tokio::runtime::time::Driver::park_internal (3 samples, 0.05%)</title><rect x="98.1528%" y="1045" width="0.0538%" height="15" fill="rgb(221,59,37)" fg:x="5473" fg:w="3"/><text x="98.4028%" y="1055.50"></text></g><g><title>databend-query`tokio::runtime::driver::IoStack::park_timeout (3 samples, 0.05%)</title><rect x="98.1528%" y="1029" width="0.0538%" height="15" fill="rgb(209,202,51)" fg:x="5473" fg:w="3"/><text x="98.4028%" y="1039.50"></text></g><g><title>databend-query`tokio::runtime::io::driver::Driver::turn (3 samples, 0.05%)</title><rect x="98.1528%" y="1013" width="0.0538%" height="15" fill="rgb(228,81,30)" fg:x="5473" fg:w="3"/><text x="98.4028%" y="1023.50"></text></g><g><title>libsystem_kernel.dylib`kevent (3 samples, 0.05%)</title><rect x="98.1528%" y="997" width="0.0538%" height="15" fill="rgb(227,42,39)" fg:x="5473" fg:w="3"/><text x="98.4028%" y="1007.50"></text></g><g><title>databend-query`parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.02%)</title><rect x="98.2066%" y="1061" width="0.0179%" height="15" fill="rgb(221,26,2)" fg:x="5476" fg:w="1"/><text x="98.4566%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.02%)</title><rect x="98.2066%" y="1045" width="0.0179%" height="15" fill="rgb(254,61,31)" fg:x="5476" fg:w="1"/><text x="98.4566%" y="1055.50"></text></g><g><title>databend-query`&lt;hyper::client::service::Connect&lt;C,B,T&gt; as tower_service::Service&lt;T&gt;&gt;::call::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2245%" y="965" width="0.0179%" height="15" fill="rgb(222,173,38)" fg:x="5477" fg:w="1"/><text x="98.4745%" y="975.50"></text></g><g><title>databend-query`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.2245%" y="949" width="0.0179%" height="15" fill="rgb(218,50,12)" fg:x="5477" fg:w="1"/><text x="98.4745%" y="959.50"></text></g><g><title>databend-query`&lt;hyper::proto::h2::client::ClientTask&lt;B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.2245%" y="933" width="0.0179%" height="15" fill="rgb(223,88,40)" fg:x="5477" fg:w="1"/><text x="98.4745%" y="943.50"></text></g><g><title>databend-query`h2::client::SendRequest&lt;B&gt;::send_request (1 samples, 0.02%)</title><rect x="98.2245%" y="917" width="0.0179%" height="15" fill="rgb(237,54,19)" fg:x="5477" fg:w="1"/><text x="98.4745%" y="927.50"></text></g><g><title>databend-query`h2::proto::streams::send::Send::send_headers (1 samples, 0.02%)</title><rect x="98.2245%" y="901" width="0.0179%" height="15" fill="rgb(251,129,25)" fg:x="5477" fg:w="1"/><text x="98.4745%" y="911.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;databend_common_base::runtime::runtime_tracker::TrackedFuture&lt;&lt;databend_common_storage::runtime_layer::RuntimeIO&lt;opendal::layers::complete::CompleteReader&lt;opendal::layers::error_context::ErrorContextAccessor&lt;opendal::services::fs::backend::FsBackend&gt;,opendal::layers::error_context::ErrorContextWrapper&lt;opendal::raw::oio::read::tokio_read::TokioReader&lt;tokio::fs::file::File&gt;&gt;&gt;&gt; as opendal::raw::oio::read::api::Read&gt;::poll_read::{{closure}}&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.2425%" y="965" width="0.0179%" height="15" fill="rgb(238,97,19)" fg:x="5478" fg:w="1"/><text x="98.4925%" y="975.50"></text></g><g><title>databend-query`databend_query::sessions::session_mgr::SessionManager::create_session::_{{closure}} (1 samples, 0.02%)</title><rect x="98.2604%" y="965" width="0.0179%" height="15" fill="rgb(240,169,18)" fg:x="5479" fg:w="1"/><text x="98.5104%" y="975.50"></text></g><g><title>databend-query`&lt;h2::codec::framed_read::FramedRead&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.04%)</title><rect x="98.2783%" y="869" width="0.0359%" height="15" fill="rgb(230,187,49)" fg:x="5480" fg:w="2"/><text x="98.5283%" y="879.50"></text></g><g><title>databend-query`&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.04%)</title><rect x="98.2783%" y="853" width="0.0359%" height="15" fill="rgb(209,44,26)" fg:x="5480" fg:w="2"/><text x="98.5283%" y="863.50"></text></g><g><title>databend-query`tokio_util::util::poll_read_buf (1 samples, 0.02%)</title><rect x="98.2963%" y="837" width="0.0179%" height="15" fill="rgb(244,0,6)" fg:x="5481" fg:w="1"/><text x="98.5463%" y="847.50"></text></g><g><title>databend-query`tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.02%)</title><rect x="98.2963%" y="821" width="0.0179%" height="15" fill="rgb(248,18,21)" fg:x="5481" fg:w="1"/><text x="98.5463%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1 samples, 0.02%)</title><rect x="98.2963%" y="805" width="0.0179%" height="15" fill="rgb(245,180,19)" fg:x="5481" fg:w="1"/><text x="98.5463%" y="815.50"></text></g><g><title>databend-query`h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (3 samples, 0.05%)</title><rect x="98.2783%" y="885" width="0.0538%" height="15" fill="rgb(252,118,36)" fg:x="5480" fg:w="3"/><text x="98.5283%" y="895.50"></text></g><g><title>databend-query`h2::codec::framed_read::decode_frame (1 samples, 0.02%)</title><rect x="98.3142%" y="869" width="0.0179%" height="15" fill="rgb(210,224,19)" fg:x="5482" fg:w="1"/><text x="98.5642%" y="879.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.02%)</title><rect x="98.3321%" y="821" width="0.0179%" height="15" fill="rgb(218,30,24)" fg:x="5483" fg:w="1"/><text x="98.5821%" y="831.50"></text></g><g><title>databend-query`tracing::span::Span::log (1 samples, 0.02%)</title><rect x="98.3321%" y="805" width="0.0179%" height="15" fill="rgb(219,75,50)" fg:x="5483" fg:w="1"/><text x="98.5821%" y="815.50"></text></g><g><title>databend-query`h2::codec::framed_write::Encoder&lt;B&gt;::buffer (2 samples, 0.04%)</title><rect x="98.3321%" y="837" width="0.0359%" height="15" fill="rgb(234,72,50)" fg:x="5483" fg:w="2"/><text x="98.5821%" y="847.50"></text></g><g><title>databend-query`h2::frame::headers::Headers::encode (1 samples, 0.02%)</title><rect x="98.3501%" y="821" width="0.0179%" height="15" fill="rgb(219,100,48)" fg:x="5484" fg:w="1"/><text x="98.6001%" y="831.50"></text></g><g><title>databend-query`h2::frame::headers::HeaderBlock::into_encoding (1 samples, 0.02%)</title><rect x="98.3501%" y="805" width="0.0179%" height="15" fill="rgb(253,5,41)" fg:x="5484" fg:w="1"/><text x="98.6001%" y="815.50"></text></g><g><title>databend-query`h2::hpack::encoder::Encoder::encode (1 samples, 0.02%)</title><rect x="98.3501%" y="789" width="0.0179%" height="15" fill="rgb(247,181,11)" fg:x="5484" fg:w="1"/><text x="98.6001%" y="799.50"></text></g><g><title>databend-query`hyper::proto::h2::client::conn_task::_{{closure}} (6 samples, 0.11%)</title><rect x="98.2783%" y="965" width="0.1076%" height="15" fill="rgb(222,223,25)" fg:x="5480" fg:w="6"/><text x="98.5283%" y="975.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (6 samples, 0.11%)</title><rect x="98.2783%" y="949" width="0.1076%" height="15" fill="rgb(214,198,28)" fg:x="5480" fg:w="6"/><text x="98.5283%" y="959.50"></text></g><g><title>databend-query`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.11%)</title><rect x="98.2783%" y="933" width="0.1076%" height="15" fill="rgb(230,46,43)" fg:x="5480" fg:w="6"/><text x="98.5283%" y="943.50"></text></g><g><title>databend-query`&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (6 samples, 0.11%)</title><rect x="98.2783%" y="917" width="0.1076%" height="15" fill="rgb(233,65,53)" fg:x="5480" fg:w="6"/><text x="98.5283%" y="927.50"></text></g><g><title>databend-query`h2::proto::connection::Connection&lt;T,P,B&gt;::poll (6 samples, 0.11%)</title><rect x="98.2783%" y="901" width="0.1076%" height="15" fill="rgb(221,121,27)" fg:x="5480" fg:w="6"/><text x="98.5283%" y="911.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Streams&lt;B,P&gt;::poll_complete (3 samples, 0.05%)</title><rect x="98.3321%" y="885" width="0.0538%" height="15" fill="rgb(247,70,47)" fg:x="5483" fg:w="3"/><text x="98.5821%" y="895.50"></text></g><g><title>databend-query`h2::proto::streams::streams::Inner::poll_complete (3 samples, 0.05%)</title><rect x="98.3321%" y="869" width="0.0538%" height="15" fill="rgb(228,85,35)" fg:x="5483" fg:w="3"/><text x="98.5821%" y="879.50"></text></g><g><title>databend-query`h2::proto::streams::prioritize::Prioritize::poll_complete (3 samples, 0.05%)</title><rect x="98.3321%" y="853" width="0.0538%" height="15" fill="rgb(209,50,18)" fg:x="5483" fg:w="3"/><text x="98.5821%" y="863.50"></text></g><g><title>databend-query`h2::proto::streams::prioritize::Prioritize::pop_frame (1 samples, 0.02%)</title><rect x="98.3680%" y="837" width="0.0179%" height="15" fill="rgb(250,19,35)" fg:x="5485" fg:w="1"/><text x="98.6180%" y="847.50"></text></g><g><title>databend-query`&lt;axum::boxed::MakeErasedHandler&lt;H,S,B&gt; as axum::boxed::ErasedIntoRoute&lt;S,B,core::convert::Infallible&gt;&gt;::into_route (1 samples, 0.02%)</title><rect x="98.3859%" y="949" width="0.0179%" height="15" fill="rgb(253,107,29)" fg:x="5486" fg:w="1"/><text x="98.6359%" y="959.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.4218%" y="821" width="0.0179%" height="15" fill="rgb(252,179,29)" fg:x="5488" fg:w="1"/><text x="98.6718%" y="831.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.4218%" y="805" width="0.0179%" height="15" fill="rgb(238,194,6)" fg:x="5488" fg:w="1"/><text x="98.6718%" y="815.50"></text></g><g><title>databend-query`databend_common_grpc::dns_resolver::ConnectionFactory::create_rpc_endpoint (1 samples, 0.02%)</title><rect x="98.4218%" y="789" width="0.0179%" height="15" fill="rgb(238,164,29)" fg:x="5488" fg:w="1"/><text x="98.6718%" y="799.50"></text></g><g><title>databend-query`http::uri::scheme::Scheme2&lt;usize&gt;::parse (1 samples, 0.02%)</title><rect x="98.4218%" y="773" width="0.0179%" height="15" fill="rgb(224,25,9)" fg:x="5488" fg:w="1"/><text x="98.6718%" y="783.50"></text></g><g><title>databend-query`tonic::codec::decode::Streaming&lt;T&gt;::decode_chunk (1 samples, 0.02%)</title><rect x="98.4397%" y="805" width="0.0179%" height="15" fill="rgb(244,153,23)" fg:x="5489" fg:w="1"/><text x="98.6897%" y="815.50"></text></g><g><title>databend-query`&lt;tonic::codec::prost::ProstDecoder&lt;U&gt; as tonic::codec::Decoder&gt;::decode (1 samples, 0.02%)</title><rect x="98.4397%" y="789" width="0.0179%" height="15" fill="rgb(212,203,14)" fg:x="5489" fg:w="1"/><text x="98.6897%" y="799.50"></text></g><g><title>databend-query`prost::message::Message::decode (1 samples, 0.02%)</title><rect x="98.4397%" y="773" width="0.0179%" height="15" fill="rgb(220,164,20)" fg:x="5489" fg:w="1"/><text x="98.6897%" y="783.50"></text></g><g><title>databend-query`&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.02%)</title><rect x="98.4397%" y="757" width="0.0179%" height="15" fill="rgb(222,203,48)" fg:x="5489" fg:w="1"/><text x="98.6897%" y="767.50"></text></g><g><title>databend-query`&lt;tonic::codec::decode::Streaming&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.04%)</title><rect x="98.4397%" y="821" width="0.0359%" height="15" fill="rgb(215,159,22)" fg:x="5489" fg:w="2"/><text x="98.6897%" y="831.50"></text></g><g><title>databend-query`tonic::codec::decode::StreamingInner::poll_data (1 samples, 0.02%)</title><rect x="98.4577%" y="805" width="0.0179%" height="15" fill="rgb(216,183,47)" fg:x="5490" fg:w="1"/><text x="98.7077%" y="815.50"></text></g><g><title>databend-query`&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (1 samples, 0.02%)</title><rect x="98.4577%" y="789" width="0.0179%" height="15" fill="rgb(229,195,25)" fg:x="5490" fg:w="1"/><text x="98.7077%" y="799.50"></text></g><g><title>databend-query`&lt;http_body::combinators::map_data::MapData&lt;B,F&gt; as http_body::Body&gt;::poll_data (1 samples, 0.02%)</title><rect x="98.4577%" y="773" width="0.0179%" height="15" fill="rgb(224,132,51)" fg:x="5490" fg:w="1"/><text x="98.7077%" y="783.50"></text></g><g><title>databend-query`&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (1 samples, 0.02%)</title><rect x="98.4577%" y="757" width="0.0179%" height="15" fill="rgb(240,63,7)" fg:x="5490" fg:w="1"/><text x="98.7077%" y="767.50"></text></g><g><title>databend-query`hyper::body::body::Body::poll_inner (1 samples, 0.02%)</title><rect x="98.4577%" y="741" width="0.0179%" height="15" fill="rgb(249,182,41)" fg:x="5490" fg:w="1"/><text x="98.7077%" y="751.50"></text></g><g><title>databend-query`h2::proto::streams::streams::OpaqueStreamRef::release_capacity (1 samples, 0.02%)</title><rect x="98.4577%" y="725" width="0.0179%" height="15" fill="rgb(243,47,26)" fg:x="5490" fg:w="1"/><text x="98.7077%" y="735.50"></text></g><g><title>databend-query`h2::proto::streams::recv::Recv::release_capacity (1 samples, 0.02%)</title><rect x="98.4577%" y="709" width="0.0179%" height="15" fill="rgb(233,48,2)" fg:x="5490" fg:w="1"/><text x="98.7077%" y="719.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="98.4218%" y="837" width="0.0717%" height="15" fill="rgb(244,165,34)" fg:x="5488" fg:w="4"/><text x="98.6718%" y="847.50"></text></g><g><title>databend-query`tonic::client::grpc::Grpc&lt;T&gt;::create_response (1 samples, 0.02%)</title><rect x="98.4756%" y="821" width="0.0179%" height="15" fill="rgb(207,89,7)" fg:x="5491" fg:w="1"/><text x="98.7256%" y="831.50"></text></g><g><title>databend-query`tonic::status::Status::from_header_map (1 samples, 0.02%)</title><rect x="98.4756%" y="805" width="0.0179%" height="15" fill="rgb(244,117,36)" fg:x="5491" fg:w="1"/><text x="98.7256%" y="815.50"></text></g><g><title>databend-query`http::header::name::HdrName::from_bytes (1 samples, 0.02%)</title><rect x="98.4756%" y="789" width="0.0179%" height="15" fill="rgb(226,144,34)" fg:x="5491" fg:w="1"/><text x="98.7256%" y="799.50"></text></g><g><title>databend-query`&lt;databend_common_base::future::TimingFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.11%)</title><rect x="98.4039%" y="869" width="0.1076%" height="15" fill="rgb(213,23,19)" fg:x="5487" fg:w="6"/><text x="98.6539%" y="879.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.09%)</title><rect x="98.4218%" y="853" width="0.0897%" height="15" fill="rgb(217,75,12)" fg:x="5488" fg:w="5"/><text x="98.6718%" y="863.50"></text></g><g><title>databend-query`log::__private_api_log (1 samples, 0.02%)</title><rect x="98.4935%" y="837" width="0.0179%" height="15" fill="rgb(224,159,17)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="847.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.02%)</title><rect x="98.4935%" y="821" width="0.0179%" height="15" fill="rgb(217,118,1)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="831.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.02%)</title><rect x="98.4935%" y="805" width="0.0179%" height="15" fill="rgb(232,180,48)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="815.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.02%)</title><rect x="98.4935%" y="789" width="0.0179%" height="15" fill="rgb(230,27,33)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="799.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (1 samples, 0.02%)</title><rect x="98.4935%" y="773" width="0.0179%" height="15" fill="rgb(205,31,21)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="783.50"></text></g><g><title>databend-query`core::ops::function::Fn::call (1 samples, 0.02%)</title><rect x="98.4935%" y="757" width="0.0179%" height="15" fill="rgb(253,59,4)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="767.50"></text></g><g><title>databend-query`databend_common_tracing::init::format_text_log (1 samples, 0.02%)</title><rect x="98.4935%" y="741" width="0.0179%" height="15" fill="rgb(224,201,9)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="751.50"></text></g><g><title>databend-query`fern::log_impl::FormatCallback::finish (1 samples, 0.02%)</title><rect x="98.4935%" y="725" width="0.0179%" height="15" fill="rgb(229,206,30)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="735.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Writer as log::Log&gt;::log (1 samples, 0.02%)</title><rect x="98.4935%" y="709" width="0.0179%" height="15" fill="rgb(212,67,47)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="719.50"></text></g><g><title>databend-query`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.02%)</title><rect x="98.4935%" y="693" width="0.0179%" height="15" fill="rgb(211,96,50)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="703.50"></text></g><g><title>databend-query`&lt;tracing_appender::non_blocking::NonBlocking as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="98.4935%" y="677" width="0.0179%" height="15" fill="rgb(252,114,18)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="687.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="98.4935%" y="661" width="0.0179%" height="15" fill="rgb(223,58,37)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="671.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="98.4935%" y="645" width="0.0179%" height="15" fill="rgb(237,70,4)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="98.4935%" y="629" width="0.0179%" height="15" fill="rgb(244,85,46)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.4935%" y="613" width="0.0179%" height="15" fill="rgb(223,39,52)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="98.4935%" y="597" width="0.0179%" height="15" fill="rgb(218,200,14)" fg:x="5492" fg:w="1"/><text x="98.7435%" y="607.50"></text></g><g><title>databend-query`&lt;tonic::service::interceptor::InterceptedService&lt;S,F&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (1 samples, 0.02%)</title><rect x="98.5115%" y="869" width="0.0179%" height="15" fill="rgb(208,171,16)" fg:x="5493" fg:w="1"/><text x="98.7615%" y="879.50"></text></g><g><title>databend-query`core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.02%)</title><rect x="98.5294%" y="469" width="0.0179%" height="15" fill="rgb(234,200,18)" fg:x="5494" fg:w="1"/><text x="98.7794%" y="479.50"></text></g><g><title>databend-query`core::fmt::builders::DebugStruct::field (1 samples, 0.02%)</title><rect x="98.5294%" y="453" width="0.0179%" height="15" fill="rgb(228,45,11)" fg:x="5494" fg:w="1"/><text x="98.7794%" y="463.50"></text></g><g><title>databend-query`&lt;http::header::map::HeaderMap&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="98.5294%" y="437" width="0.0179%" height="15" fill="rgb(237,182,11)" fg:x="5494" fg:w="1"/><text x="98.7794%" y="447.50"></text></g><g><title>databend-query`core::fmt::builders::DebugMap::entries (1 samples, 0.02%)</title><rect x="98.5294%" y="421" width="0.0179%" height="15" fill="rgb(241,175,49)" fg:x="5494" fg:w="1"/><text x="98.7794%" y="431.50"></text></g><g><title>databend-query`core::fmt::builders::DebugMap::value (1 samples, 0.02%)</title><rect x="98.5294%" y="405" width="0.0179%" height="15" fill="rgb(247,38,35)" fg:x="5494" fg:w="1"/><text x="98.7794%" y="415.50"></text></g><g><title>databend-query`&lt;http::header::value::HeaderValue as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="98.5294%" y="389" width="0.0179%" height="15" fill="rgb(228,39,49)" fg:x="5494" fg:w="1"/><text x="98.7794%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="98.5294%" y="373" width="0.0179%" height="15" fill="rgb(226,101,26)" fg:x="5494" fg:w="1"/><text x="98.7794%" y="383.50"></text></g><g><title>databend-query`&lt;databend_common_tracing::init::format_text_log::KvDisplay as core::fmt::Display&gt;::fmt (2 samples, 0.04%)</title><rect x="98.5294%" y="677" width="0.0359%" height="15" fill="rgb(206,141,19)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="687.50"></text></g><g><title>databend-query`&lt;core::option::Option&lt;S&gt; as log::kv::source::Source&gt;::visit (2 samples, 0.04%)</title><rect x="98.5294%" y="661" width="0.0359%" height="15" fill="rgb(211,200,13)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="671.50"></text></g><g><title>databend-query`&lt;[S] as log::kv::source::Source&gt;::visit (2 samples, 0.04%)</title><rect x="98.5294%" y="645" width="0.0359%" height="15" fill="rgb(241,121,6)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="655.50"></text></g><g><title>databend-query`&lt;databend_common_tracing::init::format_text_log::KvWriter as log::kv::source::Visitor&gt;::visit_pair (2 samples, 0.04%)</title><rect x="98.5294%" y="629" width="0.0359%" height="15" fill="rgb(234,221,29)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="639.50"></text></g><g><title>databend-query`core::fmt::write (2 samples, 0.04%)</title><rect x="98.5294%" y="613" width="0.0359%" height="15" fill="rgb(229,136,5)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="623.50"></text></g><g><title>databend-query`value_bag::internal::fmt::_&lt;impl core::fmt::Display for value_bag::ValueBag&gt;::fmt (2 samples, 0.04%)</title><rect x="98.5294%" y="597" width="0.0359%" height="15" fill="rgb(238,36,11)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="607.50"></text></g><g><title>databend-query`&lt;core::result::Result&lt;T,E&gt; as core::fmt::Debug&gt;::fmt (2 samples, 0.04%)</title><rect x="98.5294%" y="581" width="0.0359%" height="15" fill="rgb(251,55,41)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="591.50"></text></g><g><title>databend-query`core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.04%)</title><rect x="98.5294%" y="565" width="0.0359%" height="15" fill="rgb(242,34,40)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="575.50"></text></g><g><title>databend-query`core::fmt::builders::DebugTuple::field (2 samples, 0.04%)</title><rect x="98.5294%" y="549" width="0.0359%" height="15" fill="rgb(215,42,17)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="559.50"></text></g><g><title>databend-query`&lt;tonic::response::Response&lt;T&gt; as core::fmt::Debug&gt;::fmt (2 samples, 0.04%)</title><rect x="98.5294%" y="533" width="0.0359%" height="15" fill="rgb(207,44,46)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="543.50"></text></g><g><title>databend-query`core::fmt::Formatter::debug_struct_field3_finish (2 samples, 0.04%)</title><rect x="98.5294%" y="517" width="0.0359%" height="15" fill="rgb(211,206,28)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="527.50"></text></g><g><title>databend-query`core::fmt::builders::DebugStruct::field (2 samples, 0.04%)</title><rect x="98.5294%" y="501" width="0.0359%" height="15" fill="rgb(237,167,16)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="511.50"></text></g><g><title>databend-query`&lt;tonic::metadata::map::MetadataMap as core::fmt::Debug&gt;::fmt (2 samples, 0.04%)</title><rect x="98.5294%" y="485" width="0.0359%" height="15" fill="rgb(233,66,6)" fg:x="5494" fg:w="2"/><text x="98.7794%" y="495.50"></text></g><g><title>databend-query`core::fmt::builders::DebugStruct::field (1 samples, 0.02%)</title><rect x="98.5473%" y="469" width="0.0179%" height="15" fill="rgb(246,123,29)" fg:x="5495" fg:w="1"/><text x="98.7973%" y="479.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.18%)</title><rect x="98.4039%" y="917" width="0.1793%" height="15" fill="rgb(209,62,40)" fg:x="5487" fg:w="10"/><text x="98.6539%" y="927.50"></text></g><g><title>databend-query`&lt;databend_common_base::future::TimingFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.18%)</title><rect x="98.4039%" y="901" width="0.1793%" height="15" fill="rgb(218,4,25)" fg:x="5487" fg:w="10"/><text x="98.6539%" y="911.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.18%)</title><rect x="98.4039%" y="885" width="0.1793%" height="15" fill="rgb(253,91,49)" fg:x="5487" fg:w="10"/><text x="98.6539%" y="895.50"></text></g><g><title>databend-query`log::__private_api_log (3 samples, 0.05%)</title><rect x="98.5294%" y="869" width="0.0538%" height="15" fill="rgb(228,155,29)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="879.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (3 samples, 0.05%)</title><rect x="98.5294%" y="853" width="0.0538%" height="15" fill="rgb(243,57,37)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="863.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (3 samples, 0.05%)</title><rect x="98.5294%" y="837" width="0.0538%" height="15" fill="rgb(244,167,17)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="847.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (3 samples, 0.05%)</title><rect x="98.5294%" y="821" width="0.0538%" height="15" fill="rgb(207,181,38)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="831.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Dispatch as log::Log&gt;::log (3 samples, 0.05%)</title><rect x="98.5294%" y="805" width="0.0538%" height="15" fill="rgb(211,8,23)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="815.50"></text></g><g><title>databend-query`core::ops::function::Fn::call (3 samples, 0.05%)</title><rect x="98.5294%" y="789" width="0.0538%" height="15" fill="rgb(235,11,44)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="799.50"></text></g><g><title>databend-query`databend_common_tracing::init::format_text_log (3 samples, 0.05%)</title><rect x="98.5294%" y="773" width="0.0538%" height="15" fill="rgb(248,18,52)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="783.50"></text></g><g><title>databend-query`fern::log_impl::FormatCallback::finish (3 samples, 0.05%)</title><rect x="98.5294%" y="757" width="0.0538%" height="15" fill="rgb(208,4,7)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="767.50"></text></g><g><title>databend-query`&lt;fern::log_impl::Writer as log::Log&gt;::log (3 samples, 0.05%)</title><rect x="98.5294%" y="741" width="0.0538%" height="15" fill="rgb(240,17,39)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="751.50"></text></g><g><title>databend-query`std::io::Write::write_fmt (3 samples, 0.05%)</title><rect x="98.5294%" y="725" width="0.0538%" height="15" fill="rgb(207,170,3)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="735.50"></text></g><g><title>databend-query`core::fmt::write (3 samples, 0.05%)</title><rect x="98.5294%" y="709" width="0.0538%" height="15" fill="rgb(236,100,52)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="719.50"></text></g><g><title>databend-query`core::fmt::write (3 samples, 0.05%)</title><rect x="98.5294%" y="693" width="0.0538%" height="15" fill="rgb(246,78,51)" fg:x="5494" fg:w="3"/><text x="98.7794%" y="703.50"></text></g><g><title>databend-query`core::fmt::write (1 samples, 0.02%)</title><rect x="98.5653%" y="677" width="0.0179%" height="15" fill="rgb(211,17,15)" fg:x="5496" fg:w="1"/><text x="98.8153%" y="687.50"></text></g><g><title>databend-query`&lt;databend_common_base::runtime::runtime_tracker::UnlimitedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.20%)</title><rect x="98.4039%" y="949" width="0.1973%" height="15" fill="rgb(209,59,46)" fg:x="5487" fg:w="11"/><text x="98.6539%" y="959.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.20%)</title><rect x="98.4039%" y="933" width="0.1973%" height="15" fill="rgb(210,92,25)" fg:x="5487" fg:w="11"/><text x="98.6539%" y="943.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_meta_client::grpc_client::MetaGrpcClient::kv_api&lt;databend_common_meta_kvapi::kvapi::message::GetKVReq&gt;::{{closure}}&gt; (1 samples, 0.02%)</title><rect x="98.5832%" y="917" width="0.0179%" height="15" fill="rgb(238,174,52)" fg:x="5497" fg:w="1"/><text x="98.8332%" y="927.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::auth_plugin_for_username (1 samples, 0.02%)</title><rect x="98.6011%" y="949" width="0.0179%" height="15" fill="rgb(230,73,7)" fg:x="5498" fg:w="1"/><text x="98.8511%" y="959.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::on_query::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6191%" y="949" width="0.0179%" height="15" fill="rgb(243,124,40)" fg:x="5499" fg:w="1"/><text x="98.8691%" y="959.50"></text></g><g><title>databend-query`&lt;databend_common_base::runtime::runtime_tracker::TrackedFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.6549%" y="933" width="0.0179%" height="15" fill="rgb(244,170,11)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="943.50"></text></g><g><title>databend-query`&lt;databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.6549%" y="917" width="0.0179%" height="15" fill="rgb(207,114,54)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="927.50"></text></g><g><title>databend-query`databend_common_base::runtime::catch_unwind::catch_unwind (1 samples, 0.02%)</title><rect x="98.6549%" y="901" width="0.0179%" height="15" fill="rgb(205,42,20)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="911.50"></text></g><g><title>databend-query`std::panicking::try (1 samples, 0.02%)</title><rect x="98.6549%" y="885" width="0.0179%" height="15" fill="rgb(230,30,28)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="895.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask::create::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6549%" y="869" width="0.0179%" height="15" fill="rgb(205,73,54)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="879.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.6549%" y="853" width="0.0179%" height="15" fill="rgb(254,227,23)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="863.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::processor_async_task::ProcessorAsyncTask::create::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6549%" y="837" width="0.0179%" height="15" fill="rgb(228,202,34)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="847.50"></text></g><g><title>databend-query`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.6549%" y="821" width="0.0179%" height="15" fill="rgb(222,225,37)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="831.50"></text></g><g><title>databend-query`databend_common_pipeline_core::processors::processor::ProcessorPtr::async_process::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6549%" y="805" width="0.0179%" height="15" fill="rgb(221,14,54)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="815.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.6549%" y="789" width="0.0179%" height="15" fill="rgb(254,102,2)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="799.50"></text></g><g><title>databend-query`&lt;alloc::boxed::Box&lt;T&gt; as databend_common_pipeline_core::processors::processor::Processor&gt;::async_process::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6549%" y="773" width="0.0179%" height="15" fill="rgb(232,104,17)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="783.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_sources::async_source::AsyncSourcer&lt;T&gt; as databend_common_pipeline_core::processors::processor::Processor&gt;::async_process::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6549%" y="757" width="0.0179%" height="15" fill="rgb(250,220,14)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="767.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.6549%" y="741" width="0.0179%" height="15" fill="rgb(241,158,9)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="751.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.6549%" y="725" width="0.0179%" height="15" fill="rgb(246,9,43)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="735.50"></text></g><g><title>databend-query`&lt;databend_common_storages_system::tables_table::TablesTable&lt;_&gt; as databend_common_storages_system::table::AsyncSystemTable&gt;::get_full_data::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6549%" y="709" width="0.0179%" height="15" fill="rgb(206,73,33)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.6549%" y="693" width="0.0179%" height="15" fill="rgb(222,79,8)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="703.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.6549%" y="677" width="0.0179%" height="15" fill="rgb(234,8,54)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="687.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn databend_common_catalog::table::Table&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.6549%" y="661" width="0.0179%" height="15" fill="rgb(209,134,38)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="671.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.6549%" y="645" width="0.0179%" height="15" fill="rgb(230,127,29)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="655.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_storages_fuse::fuse_table::FuseTable&gt; (1 samples, 0.02%)</title><rect x="98.6549%" y="629" width="0.0179%" height="15" fill="rgb(242,44,41)" fg:x="5501" fg:w="1"/><text x="98.9049%" y="639.50"></text></g><g><title>databend-query`&lt;databend_query::interpreters::interpreter_use_database::UseDatabaseInterpreter as databend_query::interpreters::interpreter::Interpreter&gt;::execute2::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6729%" y="901" width="0.0179%" height="15" fill="rgb(222,56,43)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="911.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.6729%" y="885" width="0.0179%" height="15" fill="rgb(238,39,47)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="895.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.6729%" y="869" width="0.0179%" height="15" fill="rgb(226,79,43)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="879.50"></text></g><g><title>databend-query`&lt;databend_query::catalogs::default::database_catalog::DatabaseCatalog as databend_common_catalog::catalog::interface::Catalog&gt;::get_database::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6729%" y="853" width="0.0179%" height="15" fill="rgb(242,105,53)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="863.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.6729%" y="837" width="0.0179%" height="15" fill="rgb(251,132,46)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="847.50"></text></g><g><title>databend-query`&lt;databend_query::catalogs::default::mutable_catalog::MutableCatalog as databend_common_catalog::catalog::interface::Catalog&gt;::get_database::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6729%" y="821" width="0.0179%" height="15" fill="rgb(231,77,14)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="831.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.6729%" y="805" width="0.0179%" height="15" fill="rgb(240,135,9)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="815.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.6729%" y="789" width="0.0179%" height="15" fill="rgb(248,109,14)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="799.50"></text></g><g><title>databend-query`databend_common_meta_api::schema_api_impl::get_db_or_err::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6729%" y="773" width="0.0179%" height="15" fill="rgb(227,146,52)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="783.50"></text></g><g><title>databend-query`databend_common_meta_api::util::get_pb_value::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6729%" y="757" width="0.0179%" height="15" fill="rgb(232,54,3)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="767.50"></text></g><g><title>databend-query`databend_common_meta_api::util::deserialize_struct (1 samples, 0.02%)</title><rect x="98.6729%" y="741" width="0.0179%" height="15" fill="rgb(229,201,43)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="751.50"></text></g><g><title>databend-query`prost::message::Message::decode (1 samples, 0.02%)</title><rect x="98.6729%" y="725" width="0.0179%" height="15" fill="rgb(252,161,33)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="735.50"></text></g><g><title>databend-query`prost::message::Message::merge (1 samples, 0.02%)</title><rect x="98.6729%" y="709" width="0.0179%" height="15" fill="rgb(226,146,40)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="719.50"></text></g><g><title>databend-query`&lt;databend_common_protos::pb::DatabaseMeta as prost::message::Message&gt;::merge_field (1 samples, 0.02%)</title><rect x="98.6729%" y="693" width="0.0179%" height="15" fill="rgb(219,47,25)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="703.50"></text></g><g><title>databend-query`prost::encoding::string::merge (1 samples, 0.02%)</title><rect x="98.6729%" y="677" width="0.0179%" height="15" fill="rgb(250,135,13)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="687.50"></text></g><g><title>databend-query`prost::encoding::_&lt;impl prost::encoding::sealed::BytesAdapter for alloc::vec::Vec&lt;u8&gt;&gt;::replace_with (1 samples, 0.02%)</title><rect x="98.6729%" y="661" width="0.0179%" height="15" fill="rgb(219,229,18)" fg:x="5502" fg:w="1"/><text x="98.9229%" y="671.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="98.6908%" y="709" width="0.0179%" height="15" fill="rgb(217,152,27)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="719.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="98.6908%" y="693" width="0.0179%" height="15" fill="rgb(225,71,47)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="703.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.6908%" y="677" width="0.0179%" height="15" fill="rgb(220,139,14)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="687.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="98.6908%" y="661" width="0.0179%" height="15" fill="rgb(247,54,32)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="671.50"></text></g><g><title>databend-query`&lt;databend_common_sql::planner::plans::scalar_expr::ScalarExpr as databend_common_sql::planner::semantic::lowering::TypeCheck&lt;usize&gt;&gt;::type_check (1 samples, 0.02%)</title><rect x="98.6908%" y="645" width="0.0179%" height="15" fill="rgb(252,131,39)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="655.50"></text></g><g><title>databend-query`&lt;databend_common_expression::expression::RawExpr&lt;ColumnID&gt; as databend_common_sql::planner::semantic::lowering::TypeCheck&lt;ColumnID&gt;&gt;::type_check (1 samples, 0.02%)</title><rect x="98.6908%" y="629" width="0.0179%" height="15" fill="rgb(210,108,39)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="639.50"></text></g><g><title>databend-query`databend_common_expression::type_check::check (1 samples, 0.02%)</title><rect x="98.6908%" y="613" width="0.0179%" height="15" fill="rgb(205,23,29)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="623.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="98.6908%" y="597" width="0.0179%" height="15" fill="rgb(246,139,46)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="607.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="98.6908%" y="581" width="0.0179%" height="15" fill="rgb(250,81,26)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="591.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="98.6908%" y="565" width="0.0179%" height="15" fill="rgb(214,104,7)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="575.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.6908%" y="549" width="0.0179%" height="15" fill="rgb(233,189,8)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="559.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="98.6908%" y="533" width="0.0179%" height="15" fill="rgb(228,141,17)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="543.50"></text></g><g><title>databend-query`&lt;databend_common_expression::values::Scalar as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="98.6908%" y="517" width="0.0179%" height="15" fill="rgb(247,157,1)" fg:x="5503" fg:w="1"/><text x="98.9408%" y="527.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (1 samples, 0.02%)</title><rect x="98.7088%" y="405" width="0.0179%" height="15" fill="rgb(249,225,5)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="415.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.7088%" y="389" width="0.0179%" height="15" fill="rgb(242,55,13)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="399.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.7088%" y="373" width="0.0179%" height="15" fill="rgb(230,49,50)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="383.50"></text></g><g><title>databend-query`&lt;dyn databend_common_catalog::table::Table as databend_common_sql::executor::table_read_plan::ToReadDataSourcePlan&gt;::read_plan_with_catalog::_{{closure}} (1 samples, 0.02%)</title><rect x="98.7088%" y="357" width="0.0179%" height="15" fill="rgb(241,111,38)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="367.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.7088%" y="341" width="0.0179%" height="15" fill="rgb(252,155,4)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="351.50"></text></g><g><title>databend-query`&lt;dyn databend_common_catalog::table::Table as databend_common_sql::executor::table_read_plan::ToReadDataSourcePlan&gt;::read_plan_with_catalog::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.7088%" y="325" width="0.0179%" height="15" fill="rgb(212,69,32)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="335.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.7088%" y="309" width="0.0179%" height="15" fill="rgb(243,107,47)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="319.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.7088%" y="293" width="0.0179%" height="15" fill="rgb(247,130,12)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="303.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.7088%" y="277" width="0.0179%" height="15" fill="rgb(233,74,16)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="287.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.7088%" y="261" width="0.0179%" height="15" fill="rgb(208,58,18)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="271.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.7088%" y="245" width="0.0179%" height="15" fill="rgb(242,225,1)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="255.50"></text></g><g><title>databend-query`databend_common_storages_fuse::pruning::fuse_pruner::FusePruner::create_with_pages (1 samples, 0.02%)</title><rect x="98.7088%" y="229" width="0.0179%" height="15" fill="rgb(249,39,40)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="239.50"></text></g><g><title>databend-query`databend_common_storages_fuse::pruning::fuse_pruner::PruningContext::try_create (1 samples, 0.02%)</title><rect x="98.7088%" y="213" width="0.0179%" height="15" fill="rgb(207,72,44)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="223.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_expression::function::FunctionContext&gt; (1 samples, 0.02%)</title><rect x="98.7088%" y="197" width="0.0179%" height="15" fill="rgb(215,193,12)" fg:x="5504" fg:w="1"/><text x="98.9588%" y="207.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_storages_fuse::pruning::fuse_pruner::FusePruner&gt; (1 samples, 0.02%)</title><rect x="98.7267%" y="165" width="0.0179%" height="15" fill="rgb(248,41,39)" fg:x="5505" fg:w="1"/><text x="98.9767%" y="175.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="98.7267%" y="149" width="0.0179%" height="15" fill="rgb(253,85,4)" fg:x="5505" fg:w="1"/><text x="98.9767%" y="159.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_storages_fuse::pruning::bloom_pruner::BloomPrunerCreator&gt; (1 samples, 0.02%)</title><rect x="98.7267%" y="133" width="0.0179%" height="15" fill="rgb(243,70,31)" fg:x="5505" fg:w="1"/><text x="98.9767%" y="143.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_select::SelectInterpreter::build_physical_plan::_{{closure}} (4 samples, 0.07%)</title><rect x="98.6908%" y="885" width="0.0717%" height="15" fill="rgb(253,195,26)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="895.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.07%)</title><rect x="98.6908%" y="869" width="0.0717%" height="15" fill="rgb(243,42,11)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="879.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (4 samples, 0.07%)</title><rect x="98.6908%" y="853" width="0.0717%" height="15" fill="rgb(239,66,17)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="863.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.07%)</title><rect x="98.6908%" y="837" width="0.0717%" height="15" fill="rgb(217,132,21)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="847.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (4 samples, 0.07%)</title><rect x="98.6908%" y="821" width="0.0717%" height="15" fill="rgb(252,202,21)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="831.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (4 samples, 0.07%)</title><rect x="98.6908%" y="805" width="0.0717%" height="15" fill="rgb(233,98,36)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="815.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.07%)</title><rect x="98.6908%" y="789" width="0.0717%" height="15" fill="rgb(216,153,54)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="799.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (4 samples, 0.07%)</title><rect x="98.6908%" y="773" width="0.0717%" height="15" fill="rgb(250,99,7)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="783.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (4 samples, 0.07%)</title><rect x="98.6908%" y="757" width="0.0717%" height="15" fill="rgb(207,56,50)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="767.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.07%)</title><rect x="98.6908%" y="741" width="0.0717%" height="15" fill="rgb(244,61,34)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="751.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (4 samples, 0.07%)</title><rect x="98.6908%" y="725" width="0.0717%" height="15" fill="rgb(241,50,38)" fg:x="5503" fg:w="4"/><text x="98.9408%" y="735.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="709" width="0.0538%" height="15" fill="rgb(212,166,30)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.7088%" y="693" width="0.0538%" height="15" fill="rgb(249,127,32)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="703.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="677" width="0.0538%" height="15" fill="rgb(209,103,0)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="687.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="661" width="0.0538%" height="15" fill="rgb(238,209,51)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="671.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.7088%" y="645" width="0.0538%" height="15" fill="rgb(237,56,23)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="655.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="629" width="0.0538%" height="15" fill="rgb(215,153,46)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="639.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="613" width="0.0538%" height="15" fill="rgb(224,49,31)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="623.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.7088%" y="597" width="0.0538%" height="15" fill="rgb(250,18,42)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="607.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="581" width="0.0538%" height="15" fill="rgb(215,176,39)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="591.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="565" width="0.0538%" height="15" fill="rgb(223,77,29)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="575.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.7088%" y="549" width="0.0538%" height="15" fill="rgb(234,94,52)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="559.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="533" width="0.0538%" height="15" fill="rgb(220,154,50)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="543.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="517" width="0.0538%" height="15" fill="rgb(212,11,10)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.7088%" y="501" width="0.0538%" height="15" fill="rgb(205,166,19)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="511.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="485" width="0.0538%" height="15" fill="rgb(244,198,16)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="495.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plans::physical_hash_join::_&lt;impl databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder&gt;::build_hash_join::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="469" width="0.0538%" height="15" fill="rgb(219,69,12)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="479.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="453" width="0.0538%" height="15" fill="rgb(245,30,7)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.7088%" y="437" width="0.0538%" height="15" fill="rgb(218,221,48)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="447.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (3 samples, 0.05%)</title><rect x="98.7088%" y="421" width="0.0538%" height="15" fill="rgb(216,66,15)" fg:x="5504" fg:w="3"/><text x="98.9588%" y="431.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plans::physical_hash_join::_&lt;impl databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder&gt;::build_hash_join::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7267%" y="405" width="0.0359%" height="15" fill="rgb(226,122,50)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="415.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7267%" y="389" width="0.0359%" height="15" fill="rgb(239,156,16)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="399.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.7267%" y="373" width="0.0359%" height="15" fill="rgb(224,27,38)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="383.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7267%" y="357" width="0.0359%" height="15" fill="rgb(224,39,27)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="367.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7267%" y="341" width="0.0359%" height="15" fill="rgb(215,92,29)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="351.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.7267%" y="325" width="0.0359%" height="15" fill="rgb(207,159,16)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="335.50"></text></g><g><title>databend-query`databend_common_sql::executor::physical_plan_builder::PhysicalPlanBuilder::build::_{{closure}}::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7267%" y="309" width="0.0359%" height="15" fill="rgb(238,163,47)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="319.50"></text></g><g><title>databend-query`&lt;dyn databend_common_catalog::table::Table as databend_common_sql::executor::table_read_plan::ToReadDataSourcePlan&gt;::read_plan_with_catalog::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7267%" y="293" width="0.0359%" height="15" fill="rgb(219,91,49)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="303.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.7267%" y="277" width="0.0359%" height="15" fill="rgb(227,167,31)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="287.50"></text></g><g><title>databend-query`&lt;dyn databend_common_catalog::table::Table as databend_common_sql::executor::table_read_plan::ToReadDataSourcePlan&gt;::read_plan_with_catalog::_{{closure}}::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7267%" y="261" width="0.0359%" height="15" fill="rgb(234,80,54)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="271.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="98.7267%" y="245" width="0.0359%" height="15" fill="rgb(212,114,2)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="255.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.7267%" y="229" width="0.0359%" height="15" fill="rgb(234,50,24)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="239.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="98.7267%" y="213" width="0.0359%" height="15" fill="rgb(221,68,8)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="223.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.7267%" y="197" width="0.0359%" height="15" fill="rgb(254,180,31)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="207.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="98.7267%" y="181" width="0.0359%" height="15" fill="rgb(247,130,50)" fg:x="5505" fg:w="2"/><text x="98.9767%" y="191.50"></text></g><g><title>databend-query`databend_common_storages_fuse::pruning::fuse_pruner::FusePruner::create_with_pages (1 samples, 0.02%)</title><rect x="98.7446%" y="165" width="0.0179%" height="15" fill="rgb(211,109,4)" fg:x="5506" fg:w="1"/><text x="98.9946%" y="175.50"></text></g><g><title>databend-query`databend_common_storages_fuse::pruning::fuse_pruner::PruningContext::try_create (1 samples, 0.02%)</title><rect x="98.7446%" y="149" width="0.0179%" height="15" fill="rgb(238,50,21)" fg:x="5506" fg:w="1"/><text x="98.9946%" y="159.50"></text></g><g><title>databend-query`databend_common_base::runtime::runtime::Runtime::with_worker_threads (1 samples, 0.02%)</title><rect x="98.7446%" y="133" width="0.0179%" height="15" fill="rgb(225,57,45)" fg:x="5506" fg:w="1"/><text x="98.9946%" y="143.50"></text></g><g><title>databend-query`databend_common_base::runtime::runtime::Runtime::create (1 samples, 0.02%)</title><rect x="98.7446%" y="117" width="0.0179%" height="15" fill="rgb(209,196,50)" fg:x="5506" fg:w="1"/><text x="98.9946%" y="127.50"></text></g><g><title>databend-query`tokio::runtime::builder::Builder::build (1 samples, 0.02%)</title><rect x="98.7446%" y="101" width="0.0179%" height="15" fill="rgb(242,140,13)" fg:x="5506" fg:w="1"/><text x="98.9946%" y="111.50"></text></g><g><title>databend-query`tokio::runtime::driver::Driver::new (1 samples, 0.02%)</title><rect x="98.7446%" y="85" width="0.0179%" height="15" fill="rgb(217,111,7)" fg:x="5506" fg:w="1"/><text x="98.9946%" y="95.50"></text></g><g><title>databend-query`mio::poll::Registry::register (1 samples, 0.02%)</title><rect x="98.7446%" y="69" width="0.0179%" height="15" fill="rgb(253,193,51)" fg:x="5506" fg:w="1"/><text x="98.9946%" y="79.50"></text></g><g><title>databend-query`mio::sys::unix::selector::kqueue::Selector::register (1 samples, 0.02%)</title><rect x="98.7446%" y="53" width="0.0179%" height="15" fill="rgb(252,70,29)" fg:x="5506" fg:w="1"/><text x="98.9946%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.02%)</title><rect x="98.7446%" y="37" width="0.0179%" height="15" fill="rgb(232,127,12)" fg:x="5506" fg:w="1"/><text x="98.9946%" y="47.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="98.7626%" y="741" width="0.0179%" height="15" fill="rgb(211,180,21)" fg:x="5507" fg:w="1"/><text x="99.0126%" y="751.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_expression::schema::DataSchema&gt; (1 samples, 0.02%)</title><rect x="98.7626%" y="725" width="0.0179%" height="15" fill="rgb(229,72,13)" fg:x="5507" fg:w="1"/><text x="99.0126%" y="735.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;databend_common_expression::schema::DataField&gt;&gt; (1 samples, 0.02%)</title><rect x="98.7626%" y="709" width="0.0179%" height="15" fill="rgb(240,211,49)" fg:x="5507" fg:w="1"/><text x="99.0126%" y="719.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.7626%" y="693" width="0.0179%" height="15" fill="rgb(219,149,40)" fg:x="5507" fg:w="1"/><text x="99.0126%" y="703.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_expression::schema::DataField&gt; (1 samples, 0.02%)</title><rect x="98.7626%" y="677" width="0.0179%" height="15" fill="rgb(210,127,46)" fg:x="5507" fg:w="1"/><text x="99.0126%" y="687.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.11%)</title><rect x="98.6908%" y="901" width="0.1076%" height="15" fill="rgb(220,106,7)" fg:x="5503" fg:w="6"/><text x="98.9408%" y="911.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_select::SelectInterpreter::build_pipeline::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7626%" y="885" width="0.0359%" height="15" fill="rgb(249,31,22)" fg:x="5507" fg:w="2"/><text x="99.0126%" y="895.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.7626%" y="869" width="0.0359%" height="15" fill="rgb(253,1,49)" fg:x="5507" fg:w="2"/><text x="99.0126%" y="879.50"></text></g><g><title>databend-query`databend_query::schedulers::scheduler::build_query_pipeline::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7626%" y="853" width="0.0359%" height="15" fill="rgb(227,144,33)" fg:x="5507" fg:w="2"/><text x="99.0126%" y="863.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.7626%" y="837" width="0.0359%" height="15" fill="rgb(249,163,44)" fg:x="5507" fg:w="2"/><text x="99.0126%" y="847.50"></text></g><g><title>databend-query`databend_query::schedulers::scheduler::build_query_pipeline_without_render_result_set::_{{closure}} (2 samples, 0.04%)</title><rect x="98.7626%" y="821" width="0.0359%" height="15" fill="rgb(234,15,39)" fg:x="5507" fg:w="2"/><text x="99.0126%" y="831.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.7626%" y="805" width="0.0359%" height="15" fill="rgb(207,66,16)" fg:x="5507" fg:w="2"/><text x="99.0126%" y="815.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.7626%" y="789" width="0.0359%" height="15" fill="rgb(233,112,24)" fg:x="5507" fg:w="2"/><text x="99.0126%" y="799.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (2 samples, 0.04%)</title><rect x="98.7626%" y="773" width="0.0359%" height="15" fill="rgb(230,90,22)" fg:x="5507" fg:w="2"/><text x="99.0126%" y="783.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (2 samples, 0.04%)</title><rect x="98.7626%" y="757" width="0.0359%" height="15" fill="rgb(229,61,13)" fg:x="5507" fg:w="2"/><text x="99.0126%" y="767.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="741" width="0.0179%" height="15" fill="rgb(225,57,24)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="751.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="725" width="0.0179%" height="15" fill="rgb(208,169,48)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="735.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="709" width="0.0179%" height="15" fill="rgb(244,218,51)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="719.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="693" width="0.0179%" height="15" fill="rgb(214,148,10)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="703.50"></text></g><g><title>databend-query`databend_query::pipelines::builders::builder_aggregate::_&lt;impl databend_query::pipelines::pipeline_builder::PipelineBuilder&gt;::build_aggregate_final (1 samples, 0.02%)</title><rect x="98.7805%" y="677" width="0.0179%" height="15" fill="rgb(225,174,27)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="687.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="661" width="0.0179%" height="15" fill="rgb(230,96,26)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="671.50"></text></g><g><title>databend-query`databend_query::pipelines::builders::builder_aggregate::_&lt;impl databend_query::pipelines::pipeline_builder::PipelineBuilder&gt;::build_aggregate_partial (1 samples, 0.02%)</title><rect x="98.7805%" y="645" width="0.0179%" height="15" fill="rgb(232,10,30)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="655.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="629" width="0.0179%" height="15" fill="rgb(222,8,50)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="639.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="613" width="0.0179%" height="15" fill="rgb(213,81,27)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="623.50"></text></g><g><title>databend-query`databend_query::pipelines::builders::builder_join::_&lt;impl databend_query::pipelines::pipeline_builder::PipelineBuilder&gt;::expand_build_side_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="597" width="0.0179%" height="15" fill="rgb(245,50,10)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="607.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::finalize (1 samples, 0.02%)</title><rect x="98.7805%" y="581" width="0.0179%" height="15" fill="rgb(216,100,18)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="591.50"></text></g><g><title>databend-query`databend_query::pipelines::pipeline_builder::PipelineBuilder::build_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="565" width="0.0179%" height="15" fill="rgb(236,147,54)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="575.50"></text></g><g><title>databend-query`databend_query::pipelines::builders::builder_join::_&lt;impl databend_query::pipelines::pipeline_builder::PipelineBuilder&gt;::expand_build_side_pipeline (1 samples, 0.02%)</title><rect x="98.7805%" y="549" width="0.0179%" height="15" fill="rgb(205,143,26)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="559.50"></text></g><g><title>databend-query`databend_query::pipelines::processors::transforms::hash_join::hash_join_build_state::HashJoinBuildState::try_create (1 samples, 0.02%)</title><rect x="98.7805%" y="533" width="0.0179%" height="15" fill="rgb(236,26,9)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="543.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="98.7805%" y="517" width="0.0179%" height="15" fill="rgb(221,165,53)" fg:x="5508" fg:w="1"/><text x="99.0305%" y="527.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter::log_query_start (1 samples, 0.02%)</title><rect x="98.7984%" y="901" width="0.0179%" height="15" fill="rgb(214,110,17)" fg:x="5509" fg:w="1"/><text x="99.0484%" y="911.50"></text></g><g><title>databend-query`databend_query::interpreters::common::query_log::InterpreterQueryLog::log_start (1 samples, 0.02%)</title><rect x="98.7984%" y="885" width="0.0179%" height="15" fill="rgb(237,197,12)" fg:x="5509" fg:w="1"/><text x="99.0484%" y="895.50"></text></g><g><title>databend-query`databend_query::interpreters::common::query_log::InterpreterQueryLog::write_log (1 samples, 0.02%)</title><rect x="98.7984%" y="869" width="0.0179%" height="15" fill="rgb(205,84,17)" fg:x="5509" fg:w="1"/><text x="99.0484%" y="879.50"></text></g><g><title>databend-query`databend_common_storages_system::query_log_table::_::_&lt;impl serde::ser::Serialize for databend_common_storages_system::query_log_table::QueryLogElement&gt;::serialize (1 samples, 0.02%)</title><rect x="98.7984%" y="853" width="0.0179%" height="15" fill="rgb(237,18,45)" fg:x="5509" fg:w="1"/><text x="99.0484%" y="863.50"></text></g><g><title>databend-query`serde::ser::SerializeMap::serialize_entry (1 samples, 0.02%)</title><rect x="98.7984%" y="837" width="0.0179%" height="15" fill="rgb(221,87,14)" fg:x="5509" fg:w="1"/><text x="99.0484%" y="847.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="98.7984%" y="821" width="0.0179%" height="15" fill="rgb(238,186,15)" fg:x="5509" fg:w="1"/><text x="99.0484%" y="831.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.20%)</title><rect x="98.6370%" y="949" width="0.1973%" height="15" fill="rgb(208,115,11)" fg:x="5500" fg:w="11"/><text x="98.8870%" y="959.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.16%)</title><rect x="98.6729%" y="933" width="0.1614%" height="15" fill="rgb(254,175,0)" fg:x="5502" fg:w="9"/><text x="98.9229%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.16%)</title><rect x="98.6729%" y="917" width="0.1614%" height="15" fill="rgb(227,24,42)" fg:x="5502" fg:w="9"/><text x="98.9229%" y="927.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_pulling_executor::PipelinePullingExecutor::from_pipelines (1 samples, 0.02%)</title><rect x="98.8164%" y="901" width="0.0179%" height="15" fill="rgb(223,211,37)" fg:x="5510" fg:w="1"/><text x="99.0664%" y="911.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::pipeline_executor::PipelineExecutor::from_pipelines (1 samples, 0.02%)</title><rect x="98.8164%" y="885" width="0.0179%" height="15" fill="rgb(235,49,27)" fg:x="5510" fg:w="1"/><text x="99.0664%" y="895.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::RunningGraph::from_pipelines (1 samples, 0.02%)</title><rect x="98.8164%" y="869" width="0.0179%" height="15" fill="rgb(254,97,51)" fg:x="5510" fg:w="1"/><text x="99.0664%" y="879.50"></text></g><g><title>databend-query`databend_query::pipelines::executor::executor_graph::ExecutingGraph::init_graph (1 samples, 0.02%)</title><rect x="98.8164%" y="853" width="0.0179%" height="15" fill="rgb(249,51,40)" fg:x="5510" fg:w="1"/><text x="99.0664%" y="863.50"></text></g><g><title>databend-query`&lt;databend_common_pipeline_transforms::processors::transforms::transform::Transformer&lt;T&gt; as databend_common_pipeline_core::processors::processor::Processor&gt;::name (1 samples, 0.02%)</title><rect x="98.8164%" y="837" width="0.0179%" height="15" fill="rgb(210,128,45)" fg:x="5510" fg:w="1"/><text x="99.0664%" y="847.50"></text></g><g><title>databend-query`databend_storages_common_table_meta::meta::format::decode (1 samples, 0.02%)</title><rect x="98.8343%" y="885" width="0.0179%" height="15" fill="rgb(224,137,50)" fg:x="5511" fg:w="1"/><text x="99.0843%" y="895.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="98.8343%" y="869" width="0.0179%" height="15" fill="rgb(242,15,9)" fg:x="5511" fg:w="1"/><text x="99.0843%" y="879.50"></text></g><g><title>databend-query`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect x="98.8343%" y="853" width="0.0179%" height="15" fill="rgb(233,187,41)" fg:x="5511" fg:w="1"/><text x="99.0843%" y="863.50"></text></g><g><title>databend-query`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::sync::Arc&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect x="98.8343%" y="837" width="0.0179%" height="15" fill="rgb(227,2,29)" fg:x="5511" fg:w="1"/><text x="99.0843%" y="847.50"></text></g><g><title>databend-query`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::boxed::Box&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect x="98.8343%" y="821" width="0.0179%" height="15" fill="rgb(222,70,3)" fg:x="5511" fg:w="1"/><text x="99.0843%" y="831.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="98.8343%" y="805" width="0.0179%" height="15" fill="rgb(213,11,42)" fg:x="5511" fg:w="1"/><text x="99.0843%" y="815.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="98.8343%" y="789" width="0.0179%" height="15" fill="rgb(225,150,9)" fg:x="5511" fg:w="1"/><text x="99.0843%" y="799.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="98.8343%" y="773" width="0.0179%" height="15" fill="rgb(230,162,45)" fg:x="5511" fg:w="1"/><text x="99.0843%" y="783.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="98.8343%" y="757" width="0.0179%" height="15" fill="rgb(222,14,52)" fg:x="5511" fg:w="1"/><text x="99.0843%" y="767.50"></text></g><g><title>databend-query`databend_common_storages_fuse::pruning::block_pruner::BlockPruner::pruning::_{{closure}} (2 samples, 0.04%)</title><rect x="98.8343%" y="949" width="0.0359%" height="15" fill="rgb(254,198,14)" fg:x="5511" fg:w="2"/><text x="99.0843%" y="959.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.8343%" y="933" width="0.0359%" height="15" fill="rgb(220,217,30)" fg:x="5511" fg:w="2"/><text x="99.0843%" y="943.50"></text></g><g><title>databend-query`databend_common_storages_fuse::pruning::block_pruner::BlockPruner::block_pruning_sync (2 samples, 0.04%)</title><rect x="98.8343%" y="917" width="0.0359%" height="15" fill="rgb(215,146,41)" fg:x="5511" fg:w="2"/><text x="99.0843%" y="927.50"></text></g><g><title>databend-query`databend_storages_common_table_meta::meta::format::read_and_deserialize (2 samples, 0.04%)</title><rect x="98.8343%" y="901" width="0.0359%" height="15" fill="rgb(217,27,36)" fg:x="5511" fg:w="2"/><text x="99.0843%" y="911.50"></text></g><g><title>databend-query`databend_storages_common_table_meta::meta::format::decompress (1 samples, 0.02%)</title><rect x="98.8522%" y="885" width="0.0179%" height="15" fill="rgb(219,218,39)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="895.50"></text></g><g><title>databend-query`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="98.8522%" y="869" width="0.0179%" height="15" fill="rgb(219,4,42)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="879.50"></text></g><g><title>databend-query`std::io::default_read_buf (1 samples, 0.02%)</title><rect x="98.8522%" y="853" width="0.0179%" height="15" fill="rgb(249,119,36)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="863.50"></text></g><g><title>databend-query`&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="98.8522%" y="837" width="0.0179%" height="15" fill="rgb(209,23,33)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="847.50"></text></g><g><title>databend-query`zstd_safe::DCtx::decompress_stream (1 samples, 0.02%)</title><rect x="98.8522%" y="821" width="0.0179%" height="15" fill="rgb(211,10,0)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="831.50"></text></g><g><title>databend-query`ZSTD_decompressStream (1 samples, 0.02%)</title><rect x="98.8522%" y="805" width="0.0179%" height="15" fill="rgb(208,99,37)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="815.50"></text></g><g><title>databend-query`ZSTD_decompressContinueStream (1 samples, 0.02%)</title><rect x="98.8522%" y="789" width="0.0179%" height="15" fill="rgb(213,132,31)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="799.50"></text></g><g><title>databend-query`ZSTD_decompressContinue (1 samples, 0.02%)</title><rect x="98.8522%" y="773" width="0.0179%" height="15" fill="rgb(243,129,40)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="783.50"></text></g><g><title>databend-query`ZSTD_decompressBlock_internal (1 samples, 0.02%)</title><rect x="98.8522%" y="757" width="0.0179%" height="15" fill="rgb(210,66,33)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="767.50"></text></g><g><title>databend-query`ZSTD_decodeLiteralsBlock (1 samples, 0.02%)</title><rect x="98.8522%" y="741" width="0.0179%" height="15" fill="rgb(209,189,4)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="751.50"></text></g><g><title>databend-query`HUF_decompress4X1_usingDTable_internal (1 samples, 0.02%)</title><rect x="98.8522%" y="725" width="0.0179%" height="15" fill="rgb(214,107,37)" fg:x="5512" fg:w="1"/><text x="99.1022%" y="735.50"></text></g><g><title>databend-query`databend_query::sessions::session_mgr::SessionManager::create_session::_{{closure}} (1 samples, 0.02%)</title><rect x="98.8702%" y="949" width="0.0179%" height="15" fill="rgb(245,88,54)" fg:x="5513" fg:w="1"/><text x="99.1202%" y="959.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.8702%" y="933" width="0.0179%" height="15" fill="rgb(205,146,20)" fg:x="5513" fg:w="1"/><text x="99.1202%" y="943.50"></text></g><g><title>databend-query`uuid::fmt::format_hyphenated (1 samples, 0.02%)</title><rect x="98.8702%" y="917" width="0.0179%" height="15" fill="rgb(220,161,25)" fg:x="5513" fg:w="1"/><text x="99.1202%" y="927.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="98.8881%" y="869" width="0.0179%" height="15" fill="rgb(215,152,15)" fg:x="5514" fg:w="1"/><text x="99.1381%" y="879.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::sessions::query_ctx::QueryContext&gt; (1 samples, 0.02%)</title><rect x="98.8881%" y="853" width="0.0179%" height="15" fill="rgb(233,192,44)" fg:x="5514" fg:w="1"/><text x="99.1381%" y="863.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="98.8881%" y="837" width="0.0179%" height="15" fill="rgb(240,170,46)" fg:x="5514" fg:w="1"/><text x="99.1381%" y="847.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::sessions::query_ctx_shared::QueryContextShared&gt; (1 samples, 0.02%)</title><rect x="98.8881%" y="821" width="0.0179%" height="15" fill="rgb(207,104,33)" fg:x="5514" fg:w="1"/><text x="99.1381%" y="831.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx_shared::QueryContextShared as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.8881%" y="805" width="0.0179%" height="15" fill="rgb(219,21,39)" fg:x="5514" fg:w="1"/><text x="99.1381%" y="815.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="98.8881%" y="789" width="0.0179%" height="15" fill="rgb(214,133,29)" fg:x="5514" fg:w="1"/><text x="99.1381%" y="799.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::authenticate::_{{closure}} (2 samples, 0.04%)</title><rect x="98.8881%" y="933" width="0.0359%" height="15" fill="rgb(226,93,6)" fg:x="5514" fg:w="2"/><text x="99.1381%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.8881%" y="917" width="0.0359%" height="15" fill="rgb(252,222,34)" fg:x="5514" fg:w="2"/><text x="99.1381%" y="927.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase::authenticate::_{{closure}} (2 samples, 0.04%)</title><rect x="98.8881%" y="901" width="0.0359%" height="15" fill="rgb(252,92,48)" fg:x="5514" fg:w="2"/><text x="99.1381%" y="911.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.8881%" y="885" width="0.0359%" height="15" fill="rgb(245,223,24)" fg:x="5514" fg:w="2"/><text x="99.1381%" y="895.50"></text></g><g><title>databend-query`databend_common_users::user_mgr::_&lt;impl databend_common_users::user_api::UserApiProvider&gt;::get_user_with_client_ip::_{{closure}} (1 samples, 0.02%)</title><rect x="98.9060%" y="869" width="0.0179%" height="15" fill="rgb(205,176,3)" fg:x="5515" fg:w="1"/><text x="99.1560%" y="879.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.9060%" y="853" width="0.0179%" height="15" fill="rgb(235,151,15)" fg:x="5515" fg:w="1"/><text x="99.1560%" y="863.50"></text></g><g><title>databend-query`databend_common_users::user_mgr::_&lt;impl databend_common_users::user_api::UserApiProvider&gt;::get_user::_{{closure}} (1 samples, 0.02%)</title><rect x="98.9060%" y="837" width="0.0179%" height="15" fill="rgb(237,209,11)" fg:x="5515" fg:w="1"/><text x="99.1560%" y="847.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;object_store::path::parts::InvalidPart&gt; (1 samples, 0.02%)</title><rect x="98.9060%" y="821" width="0.0179%" height="15" fill="rgb(243,227,24)" fg:x="5515" fg:w="1"/><text x="99.1560%" y="831.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="98.9240%" y="789" width="0.0179%" height="15" fill="rgb(239,193,16)" fg:x="5516" fg:w="1"/><text x="99.1740%" y="799.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.9240%" y="773" width="0.0179%" height="15" fill="rgb(231,27,9)" fg:x="5516" fg:w="1"/><text x="99.1740%" y="783.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::bind_context::BindContext::new (1 samples, 0.02%)</title><rect x="98.9240%" y="757" width="0.0179%" height="15" fill="rgb(219,169,10)" fg:x="5516" fg:w="1"/><text x="99.1740%" y="767.50"></text></g><g><title>databend-query`dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher_and_shard_amount (1 samples, 0.02%)</title><rect x="98.9240%" y="741" width="0.0179%" height="15" fill="rgb(244,229,43)" fg:x="5516" fg:w="1"/><text x="99.1740%" y="751.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="98.9240%" y="725" width="0.0179%" height="15" fill="rgb(254,38,20)" fg:x="5516" fg:w="1"/><text x="99.1740%" y="735.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="98.9240%" y="709" width="0.0179%" height="15" fill="rgb(250,47,30)" fg:x="5516" fg:w="1"/><text x="99.1740%" y="719.50"></text></g><g><title>databend-query`hashbrown::raw::inner::RawTable&lt;T,A&gt;::fallible_with_capacity (1 samples, 0.02%)</title><rect x="98.9240%" y="693" width="0.0179%" height="15" fill="rgb(224,124,36)" fg:x="5516" fg:w="1"/><text x="99.1740%" y="703.50"></text></g><g><title>databend-query`databend_common_sql::planner::planner::Planner::plan_sql::_{{closure}} (2 samples, 0.04%)</title><rect x="98.9240%" y="837" width="0.0359%" height="15" fill="rgb(246,68,51)" fg:x="5516" fg:w="2"/><text x="99.1740%" y="847.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="98.9240%" y="821" width="0.0359%" height="15" fill="rgb(253,43,49)" fg:x="5516" fg:w="2"/><text x="99.1740%" y="831.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="98.9240%" y="805" width="0.0359%" height="15" fill="rgb(219,54,36)" fg:x="5516" fg:w="2"/><text x="99.1740%" y="815.50"></text></g><g><title>databend-query`databend_common_ast::parser::parser::parse_sql (1 samples, 0.02%)</title><rect x="98.9419%" y="789" width="0.0179%" height="15" fill="rgb(227,133,34)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="799.50"></text></g><g><title>databend-query`databend_common_ast::parser::statement::statement (1 samples, 0.02%)</title><rect x="98.9419%" y="773" width="0.0179%" height="15" fill="rgb(247,227,15)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="783.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9419%" y="757" width="0.0179%" height="15" fill="rgb(229,96,14)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="767.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="98.9419%" y="741" width="0.0179%" height="15" fill="rgb(220,79,17)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="751.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="98.9419%" y="725" width="0.0179%" height="15" fill="rgb(205,131,53)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="735.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9419%" y="709" width="0.0179%" height="15" fill="rgb(209,50,29)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="719.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::query (1 samples, 0.02%)</title><rect x="98.9419%" y="693" width="0.0179%" height="15" fill="rgb(245,86,46)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="703.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9419%" y="677" width="0.0179%" height="15" fill="rgb(235,66,46)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="687.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::set_operation (1 samples, 0.02%)</title><rect x="98.9419%" y="661" width="0.0179%" height="15" fill="rgb(232,148,31)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="671.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::set_operation_element (1 samples, 0.02%)</title><rect x="98.9419%" y="645" width="0.0179%" height="15" fill="rgb(217,149,8)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="655.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9419%" y="629" width="0.0179%" height="15" fill="rgb(209,183,11)" fg:x="5517" fg:w="1"/><text x="99.1919%" y="639.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::on_init::_{{closure}} (3 samples, 0.05%)</title><rect x="98.9240%" y="933" width="0.0538%" height="15" fill="rgb(208,55,20)" fg:x="5516" fg:w="3"/><text x="99.1740%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.9240%" y="917" width="0.0538%" height="15" fill="rgb(218,39,14)" fg:x="5516" fg:w="3"/><text x="99.1740%" y="927.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase::do_init::_{{closure}} (3 samples, 0.05%)</title><rect x="98.9240%" y="901" width="0.0538%" height="15" fill="rgb(216,169,33)" fg:x="5516" fg:w="3"/><text x="99.1740%" y="911.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.9240%" y="885" width="0.0538%" height="15" fill="rgb(233,80,24)" fg:x="5516" fg:w="3"/><text x="99.1740%" y="895.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="98.9240%" y="869" width="0.0538%" height="15" fill="rgb(213,179,31)" fg:x="5516" fg:w="3"/><text x="99.1740%" y="879.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.9240%" y="853" width="0.0538%" height="15" fill="rgb(209,19,5)" fg:x="5516" fg:w="3"/><text x="99.1740%" y="863.50"></text></g><g><title>databend-query`databend_query::interpreters::interpreter_factory::InterpreterFactory::get::_{{closure}} (1 samples, 0.02%)</title><rect x="98.9598%" y="837" width="0.0179%" height="15" fill="rgb(219,18,35)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="847.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.9598%" y="821" width="0.0179%" height="15" fill="rgb(209,169,16)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="831.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.9598%" y="805" width="0.0179%" height="15" fill="rgb(245,90,51)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="815.50"></text></g><g><title>databend-query`&lt;databend_query::interpreters::access::privilege_access::PrivilegeAccess as databend_query::interpreters::access::accessor::AccessChecker&gt;::check::_{{closure}} (1 samples, 0.02%)</title><rect x="98.9598%" y="789" width="0.0179%" height="15" fill="rgb(220,99,45)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="799.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="98.9598%" y="773" width="0.0179%" height="15" fill="rgb(249,89,25)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="783.50"></text></g><g><title>databend-query`&lt;databend_query::interpreters::access::privilege_access::PrivilegeAccess as databend_query::interpreters::access::accessor::AccessChecker&gt;::check::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="98.9598%" y="757" width="0.0179%" height="15" fill="rgb(239,193,0)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="767.50"></text></g><g><title>databend-query`databend_query::interpreters::access::privilege_access::has_priv::_{{closure}} (1 samples, 0.02%)</title><rect x="98.9598%" y="741" width="0.0179%" height="15" fill="rgb(231,126,1)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="751.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="98.9598%" y="725" width="0.0179%" height="15" fill="rgb(243,166,3)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="735.50"></text></g><g><title>databend-query`&lt;databend_common_meta_app::principal::user_grant::UserGrantSet as core::ops::bit::BitOr&gt;::bitor (1 samples, 0.02%)</title><rect x="98.9598%" y="709" width="0.0179%" height="15" fill="rgb(223,22,34)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="719.50"></text></g><g><title>databend-query`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.9598%" y="693" width="0.0179%" height="15" fill="rgb(251,52,51)" fg:x="5518" fg:w="1"/><text x="99.2098%" y="703.50"></text></g><g><title>databend-query`databend_common_ast::parser::parser::parse_sql (1 samples, 0.02%)</title><rect x="98.9778%" y="645" width="0.0179%" height="15" fill="rgb(221,165,28)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="655.50"></text></g><g><title>databend-query`databend_common_ast::parser::statement::statement (1 samples, 0.02%)</title><rect x="98.9778%" y="629" width="0.0179%" height="15" fill="rgb(218,121,47)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="639.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9778%" y="613" width="0.0179%" height="15" fill="rgb(209,120,9)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="623.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="98.9778%" y="597" width="0.0179%" height="15" fill="rgb(236,68,12)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="607.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="98.9778%" y="581" width="0.0179%" height="15" fill="rgb(225,194,26)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="591.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9778%" y="565" width="0.0179%" height="15" fill="rgb(231,84,39)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="575.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::query (1 samples, 0.02%)</title><rect x="98.9778%" y="549" width="0.0179%" height="15" fill="rgb(210,11,45)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="559.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9778%" y="533" width="0.0179%" height="15" fill="rgb(224,54,52)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="543.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::set_operation (1 samples, 0.02%)</title><rect x="98.9778%" y="517" width="0.0179%" height="15" fill="rgb(238,102,14)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="527.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::set_operation_element (1 samples, 0.02%)</title><rect x="98.9778%" y="501" width="0.0179%" height="15" fill="rgb(243,160,52)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="511.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="98.9778%" y="485" width="0.0179%" height="15" fill="rgb(216,114,19)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="495.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9778%" y="469" width="0.0179%" height="15" fill="rgb(244,166,37)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="479.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC) as nom::sequence::Tuple&lt;Input,(A,B,C),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9778%" y="453" width="0.0179%" height="15" fill="rgb(246,29,44)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="463.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9778%" y="437" width="0.0179%" height="15" fill="rgb(215,56,53)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="447.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::order_by_expr (1 samples, 0.02%)</title><rect x="98.9778%" y="421" width="0.0179%" height="15" fill="rgb(217,60,2)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="431.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC) as nom::sequence::Tuple&lt;Input,(A,B,C),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9778%" y="405" width="0.0179%" height="15" fill="rgb(207,26,24)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="415.50"></text></g><g><title>databend-query`databend_common_ast::parser::expr::expr (1 samples, 0.02%)</title><rect x="98.9778%" y="389" width="0.0179%" height="15" fill="rgb(252,210,15)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="399.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9778%" y="373" width="0.0179%" height="15" fill="rgb(253,209,26)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="383.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="98.9778%" y="357" width="0.0179%" height="15" fill="rgb(238,170,14)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="367.50"></text></g><g><title>databend-query`databend_common_ast::parser::expr::expr_element (1 samples, 0.02%)</title><rect x="98.9778%" y="341" width="0.0179%" height="15" fill="rgb(216,178,15)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="351.50"></text></g><g><title>databend-query`&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="98.9778%" y="325" width="0.0179%" height="15" fill="rgb(250,197,2)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="335.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="98.9778%" y="309" width="0.0179%" height="15" fill="rgb(212,70,42)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="319.50"></text></g><g><title>databend-query`&lt;databend_common_ast::error::Error as nom::error::ParseError&lt;databend_common_ast::input::Input&gt;&gt;::or (1 samples, 0.02%)</title><rect x="98.9778%" y="293" width="0.0179%" height="15" fill="rgb(227,213,9)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="303.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="98.9778%" y="277" width="0.0179%" height="15" fill="rgb(245,99,25)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="287.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="98.9778%" y="261" width="0.0179%" height="15" fill="rgb(250,82,29)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="271.50"></text></g><g><title>databend-query`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="98.9778%" y="245" width="0.0179%" height="15" fill="rgb(241,226,54)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="255.50"></text></g><g><title>databend-query`__rust_realloc (1 samples, 0.02%)</title><rect x="98.9778%" y="229" width="0.0179%" height="15" fill="rgb(221,99,41)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="239.50"></text></g><g><title>databend-query`databend_common_base::mem_allocator::jemalloc::not_linux::_&lt;impl core::alloc::Allocator for databend_common_base::mem_allocator::jemalloc::JEAllocator&gt;::grow (1 samples, 0.02%)</title><rect x="98.9778%" y="213" width="0.0179%" height="15" fill="rgb(213,90,21)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="223.50"></text></g><g><title>databend-query`std::alloc::System::grow_impl (1 samples, 0.02%)</title><rect x="98.9778%" y="197" width="0.0179%" height="15" fill="rgb(205,208,24)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="98.9778%" y="181" width="0.0179%" height="15" fill="rgb(246,31,12)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="98.9778%" y="165" width="0.0179%" height="15" fill="rgb(213,154,6)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="98.9778%" y="149" width="0.0179%" height="15" fill="rgb(222,163,29)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.9778%" y="133" width="0.0179%" height="15" fill="rgb(227,201,8)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.9778%" y="117" width="0.0179%" height="15" fill="rgb(233,9,32)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="98.9778%" y="101" width="0.0179%" height="15" fill="rgb(217,54,24)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="98.9778%" y="85" width="0.0179%" height="15" fill="rgb(235,192,0)" fg:x="5519" fg:w="1"/><text x="99.2278%" y="95.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::try_create (1 samples, 0.02%)</title><rect x="98.9957%" y="437" width="0.0179%" height="15" fill="rgb(235,45,9)" fg:x="5520" fg:w="1"/><text x="99.2457%" y="447.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::_&lt;impl chrono::offset::TimeZone for chrono_tz::timezones::Tz&gt;::offset_from_local_datetime (2 samples, 0.04%)</title><rect x="99.0136%" y="309" width="0.0359%" height="15" fill="rgb(246,42,40)" fg:x="5521" fg:w="2"/><text x="99.2636%" y="319.50"></text></g><g><title>databend-query`&lt;chrono_tz::timezones::Tz as chrono_tz::timezone_impl::TimeSpans&gt;::timespans (1 samples, 0.02%)</title><rect x="99.0674%" y="293" width="0.0179%" height="15" fill="rgb(248,111,24)" fg:x="5524" fg:w="1"/><text x="99.3174%" y="303.50"></text></g><g><title>databend-query`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (3 samples, 0.05%)</title><rect x="99.0854%" y="293" width="0.0538%" height="15" fill="rgb(249,65,22)" fg:x="5525" fg:w="3"/><text x="99.3354%" y="303.50"></text></g><g><title>databend-query`chrono::naive::internals::cycle_to_yo (1 samples, 0.02%)</title><rect x="99.1212%" y="277" width="0.0179%" height="15" fill="rgb(238,111,51)" fg:x="5527" fg:w="1"/><text x="99.3712%" y="287.50"></text></g><g><title>databend-query`chrono::traits::Datelike::num_days_from_ce (1 samples, 0.02%)</title><rect x="99.1392%" y="293" width="0.0179%" height="15" fill="rgb(250,118,22)" fg:x="5528" fg:w="1"/><text x="99.3892%" y="303.50"></text></g><g><title>databend-query`chrono_tz::binary_search::binary_search (1 samples, 0.02%)</title><rect x="99.1571%" y="293" width="0.0179%" height="15" fill="rgb(234,84,26)" fg:x="5529" fg:w="1"/><text x="99.4071%" y="303.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::project::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::normalize_select_list::_{{closure}} (22 samples, 0.39%)</title><rect x="98.9957%" y="485" width="0.3945%" height="15" fill="rgb(243,172,12)" fg:x="5520" fg:w="22"/><text x="99.2457%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 0.39%)</title><rect x="98.9957%" y="469" width="0.3945%" height="15" fill="rgb(236,150,49)" fg:x="5520" fg:w="22"/><text x="99.2457%" y="479.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (22 samples, 0.39%)</title><rect x="98.9957%" y="453" width="0.3945%" height="15" fill="rgb(225,197,26)" fg:x="5520" fg:w="22"/><text x="99.2457%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.38%)</title><rect x="99.0136%" y="437" width="0.3766%" height="15" fill="rgb(214,17,42)" fg:x="5521" fg:w="21"/><text x="99.2636%" y="447.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::try_create (21 samples, 0.38%)</title><rect x="99.0136%" y="421" width="0.3766%" height="15" fill="rgb(224,165,40)" fg:x="5521" fg:w="21"/><text x="99.2636%" y="431.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as databend_common_catalog::table_context::TableContext&gt;::get_function_context (21 samples, 0.38%)</title><rect x="99.0136%" y="405" width="0.3766%" height="15" fill="rgb(246,100,4)" fg:x="5521" fg:w="21"/><text x="99.2636%" y="415.50"></text></g><g><title>databend-query`databend_common_expression::utils::date_helper::TzFactory::instance (21 samples, 0.38%)</title><rect x="99.0136%" y="389" width="0.3766%" height="15" fill="rgb(222,103,0)" fg:x="5521" fg:w="21"/><text x="99.2636%" y="399.50"></text></g><g><title>databend-query`std::sys_common::once::queue::Once::call (21 samples, 0.38%)</title><rect x="99.0136%" y="373" width="0.3766%" height="15" fill="rgb(227,189,26)" fg:x="5521" fg:w="21"/><text x="99.2636%" y="383.50"></text></g><g><title>databend-query`std::sync::once::Once::call_once::_{{closure}} (21 samples, 0.38%)</title><rect x="99.0136%" y="357" width="0.3766%" height="15" fill="rgb(214,202,17)" fg:x="5521" fg:w="21"/><text x="99.2636%" y="367.50"></text></g><g><title>databend-query`core::ops::function::FnOnce::call_once (21 samples, 0.38%)</title><rect x="99.0136%" y="341" width="0.3766%" height="15" fill="rgb(229,111,3)" fg:x="5521" fg:w="21"/><text x="99.2636%" y="351.50"></text></g><g><title>databend-query`databend_common_expression::utils::date_helper::TzFactory::get (21 samples, 0.38%)</title><rect x="99.0136%" y="325" width="0.3766%" height="15" fill="rgb(229,172,15)" fg:x="5521" fg:w="21"/><text x="99.2636%" y="335.50"></text></g><g><title>databend-query`databend_common_expression::utils::date_helper::TzLUT::new (19 samples, 0.34%)</title><rect x="99.0495%" y="309" width="0.3407%" height="15" fill="rgb(230,224,35)" fg:x="5523" fg:w="19"/><text x="99.2995%" y="319.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::_&lt;impl chrono::offset::TimeZone for chrono_tz::timezones::Tz&gt;::offset_from_local_datetime (12 samples, 0.22%)</title><rect x="99.1750%" y="293" width="0.2152%" height="15" fill="rgb(251,141,6)" fg:x="5530" fg:w="12"/><text x="99.4250%" y="303.50"></text></g><g><title>databend-query`chrono_tz::binary_search::binary_search (11 samples, 0.20%)</title><rect x="99.1930%" y="277" width="0.1973%" height="15" fill="rgb(225,208,6)" fg:x="5531" fg:w="11"/><text x="99.4430%" y="287.50"></text></g><g><title>databend-query`chrono_tz::timezone_impl::FixedTimespanSet::local_span (6 samples, 0.11%)</title><rect x="99.2826%" y="261" width="0.1076%" height="15" fill="rgb(246,181,16)" fg:x="5536" fg:w="6"/><text x="99.5326%" y="271.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::ddl::database::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_show_databases::_{{closure}} (24 samples, 0.43%)</title><rect x="98.9778%" y="709" width="0.4304%" height="15" fill="rgb(227,129,36)" fg:x="5519" fg:w="24"/><text x="99.2278%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.43%)</title><rect x="98.9778%" y="693" width="0.4304%" height="15" fill="rgb(248,117,24)" fg:x="5519" fg:w="24"/><text x="99.2278%" y="703.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::binder::Binder::bind_rewrite_to_query::_{{closure}} (24 samples, 0.43%)</title><rect x="98.9778%" y="677" width="0.4304%" height="15" fill="rgb(214,185,35)" fg:x="5519" fg:w="24"/><text x="99.2278%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.43%)</title><rect x="98.9778%" y="661" width="0.4304%" height="15" fill="rgb(236,150,34)" fg:x="5519" fg:w="24"/><text x="99.2278%" y="671.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (23 samples, 0.41%)</title><rect x="98.9957%" y="645" width="0.4125%" height="15" fill="rgb(243,228,27)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.41%)</title><rect x="98.9957%" y="629" width="0.4125%" height="15" fill="rgb(245,77,44)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="639.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (23 samples, 0.41%)</title><rect x="98.9957%" y="613" width="0.4125%" height="15" fill="rgb(235,214,42)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="623.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (23 samples, 0.41%)</title><rect x="98.9957%" y="597" width="0.4125%" height="15" fill="rgb(221,74,3)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="607.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.41%)</title><rect x="98.9957%" y="581" width="0.4125%" height="15" fill="rgb(206,121,29)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="591.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (23 samples, 0.41%)</title><rect x="98.9957%" y="565" width="0.4125%" height="15" fill="rgb(249,131,53)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="575.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.41%)</title><rect x="98.9957%" y="549" width="0.4125%" height="15" fill="rgb(236,170,29)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="559.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (23 samples, 0.41%)</title><rect x="98.9957%" y="533" width="0.4125%" height="15" fill="rgb(247,96,15)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="543.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.41%)</title><rect x="98.9957%" y="517" width="0.4125%" height="15" fill="rgb(211,210,7)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="527.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (23 samples, 0.41%)</title><rect x="98.9957%" y="501" width="0.4125%" height="15" fill="rgb(240,88,50)" fg:x="5520" fg:w="23"/><text x="99.2457%" y="511.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.3902%" y="485" width="0.0179%" height="15" fill="rgb(209,229,26)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="495.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.02%)</title><rect x="99.3902%" y="469" width="0.0179%" height="15" fill="rgb(210,68,23)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="479.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.3902%" y="453" width="0.0179%" height="15" fill="rgb(229,180,13)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="463.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="99.3902%" y="437" width="0.0179%" height="15" fill="rgb(236,53,44)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="447.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.3902%" y="421" width="0.0179%" height="15" fill="rgb(244,214,29)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="431.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.3902%" y="405" width="0.0179%" height="15" fill="rgb(220,75,29)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="415.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.02%)</title><rect x="99.3902%" y="389" width="0.0179%" height="15" fill="rgb(214,183,37)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="399.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.3902%" y="373" width="0.0179%" height="15" fill="rgb(239,117,29)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="383.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.02%)</title><rect x="99.3902%" y="357" width="0.0179%" height="15" fill="rgb(237,171,35)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="367.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.3902%" y="341" width="0.0179%" height="15" fill="rgb(229,178,53)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="351.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_scalar_function_call (1 samples, 0.02%)</title><rect x="99.3902%" y="325" width="0.0179%" height="15" fill="rgb(210,102,19)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="335.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::try_fold_constant (1 samples, 0.02%)</title><rect x="99.3902%" y="309" width="0.0179%" height="15" fill="rgb(235,127,22)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="319.50"></text></g><g><title>databend-query`databend_common_expression::evaluator::ConstantFolder&lt;Index&gt;::fold (1 samples, 0.02%)</title><rect x="99.3902%" y="293" width="0.0179%" height="15" fill="rgb(244,31,31)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="303.50"></text></g><g><title>databend-query`databend_common_expression::evaluator::ConstantFolder&lt;Index&gt;::fold_to_stable (1 samples, 0.02%)</title><rect x="99.3902%" y="277" width="0.0179%" height="15" fill="rgb(231,43,21)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="287.50"></text></g><g><title>databend-query`core::option::Option&lt;T&gt;::zip (1 samples, 0.02%)</title><rect x="99.3902%" y="261" width="0.0179%" height="15" fill="rgb(217,131,35)" fg:x="5542" fg:w="1"/><text x="99.6402%" y="271.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::ddl::table::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_show_tables::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="709" width="0.0179%" height="15" fill="rgb(221,149,4)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="693" width="0.0179%" height="15" fill="rgb(232,170,28)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="703.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::binder::Binder::bind_rewrite_to_query::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="677" width="0.0179%" height="15" fill="rgb(238,56,10)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="661" width="0.0179%" height="15" fill="rgb(235,196,14)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="671.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="645" width="0.0179%" height="15" fill="rgb(216,45,48)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="629" width="0.0179%" height="15" fill="rgb(238,213,17)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="639.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="613" width="0.0179%" height="15" fill="rgb(212,13,2)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="623.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="597" width="0.0179%" height="15" fill="rgb(240,114,20)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="607.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="581" width="0.0179%" height="15" fill="rgb(228,41,40)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="591.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="565" width="0.0179%" height="15" fill="rgb(244,132,35)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="575.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="549" width="0.0179%" height="15" fill="rgb(253,189,4)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="559.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="533" width="0.0179%" height="15" fill="rgb(224,37,19)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="543.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="517" width="0.0179%" height="15" fill="rgb(235,223,18)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="527.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="501" width="0.0179%" height="15" fill="rgb(235,163,25)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="511.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::table::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_table_reference::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="485" width="0.0179%" height="15" fill="rgb(217,145,28)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="469" width="0.0179%" height="15" fill="rgb(223,223,32)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="479.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::table::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_single_table::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="453" width="0.0179%" height="15" fill="rgb(227,189,39)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="437" width="0.0179%" height="15" fill="rgb(248,10,22)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="447.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="421" width="0.0179%" height="15" fill="rgb(248,46,39)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="431.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::table::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::resolve_data_source::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="405" width="0.0179%" height="15" fill="rgb(248,113,48)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="415.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="389" width="0.0179%" height="15" fill="rgb(245,16,25)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="399.50"></text></g><g><title>databend-query`&lt;databend_query::sessions::query_ctx::QueryContext as databend_common_catalog::table_context::TableContext&gt;::get_table::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4082%" y="373" width="0.0179%" height="15" fill="rgb(249,152,16)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="383.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4082%" y="357" width="0.0179%" height="15" fill="rgb(250,16,1)" fg:x="5543" fg:w="1"/><text x="99.6582%" y="367.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::aggregate::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::analyze_aggregate_select (1 samples, 0.02%)</title><rect x="99.4261%" y="597" width="0.0179%" height="15" fill="rgb(249,138,3)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="607.50"></text></g><g><title>databend-query`&lt;databend_common_sql::planner::binder::aggregate::AggregateRewriter as databend_common_sql::planner::plans::scalar_expr::VisitorMut&gt;::visit (1 samples, 0.02%)</title><rect x="99.4261%" y="581" width="0.0179%" height="15" fill="rgb(227,71,41)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="591.50"></text></g><g><title>databend-query`databend_common_sql::planner::plans::scalar_expr::ScalarExpr::data_type (1 samples, 0.02%)</title><rect x="99.4261%" y="565" width="0.0179%" height="15" fill="rgb(209,184,23)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="575.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::lowering::_&lt;impl databend_common_sql::planner::plans::scalar_expr::ScalarExpr&gt;::as_expr (1 samples, 0.02%)</title><rect x="99.4261%" y="549" width="0.0179%" height="15" fill="rgb(223,215,31)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="559.50"></text></g><g><title>databend-query`databend_common_expression::type_check::check (1 samples, 0.02%)</title><rect x="99.4261%" y="533" width="0.0179%" height="15" fill="rgb(210,146,28)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="543.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="99.4261%" y="517" width="0.0179%" height="15" fill="rgb(209,183,41)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="527.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.4261%" y="501" width="0.0179%" height="15" fill="rgb(209,224,45)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="511.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="99.4261%" y="485" width="0.0179%" height="15" fill="rgb(224,209,51)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="495.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.4261%" y="469" width="0.0179%" height="15" fill="rgb(223,17,39)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="479.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="99.4261%" y="453" width="0.0179%" height="15" fill="rgb(234,204,37)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="463.50"></text></g><g><title>databend-query`databend_common_expression::type_check::check (1 samples, 0.02%)</title><rect x="99.4261%" y="437" width="0.0179%" height="15" fill="rgb(236,120,5)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="447.50"></text></g><g><title>databend-query`databend_common_expression::type_check::check_function (1 samples, 0.02%)</title><rect x="99.4261%" y="421" width="0.0179%" height="15" fill="rgb(248,97,27)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="431.50"></text></g><g><title>databend-query`databend_common_expression::type_check::try_check_function (1 samples, 0.02%)</title><rect x="99.4261%" y="405" width="0.0179%" height="15" fill="rgb(240,66,17)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="415.50"></text></g><g><title>databend-query`databend_common_expression::type_check::try_unify_signature (1 samples, 0.02%)</title><rect x="99.4261%" y="389" width="0.0179%" height="15" fill="rgb(210,79,3)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="399.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="99.4261%" y="373" width="0.0179%" height="15" fill="rgb(214,176,27)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="383.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.4261%" y="357" width="0.0179%" height="15" fill="rgb(235,185,3)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="367.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.4261%" y="341" width="0.0179%" height="15" fill="rgb(227,24,12)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="351.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="99.4261%" y="325" width="0.0179%" height="15" fill="rgb(252,169,48)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="335.50"></text></g><g><title>databend-query`databend_common_expression::type_check::unify (1 samples, 0.02%)</title><rect x="99.4261%" y="309" width="0.0179%" height="15" fill="rgb(212,65,1)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="319.50"></text></g><g><title>databend-query`databend_common_expression::type_check::can_auto_cast_to (1 samples, 0.02%)</title><rect x="99.4261%" y="293" width="0.0179%" height="15" fill="rgb(242,39,24)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="303.50"></text></g><g><title>databend-query`&lt;databend_common_expression::types::DataType as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="99.4261%" y="277" width="0.0179%" height="15" fill="rgb(249,32,23)" fg:x="5544" fg:w="1"/><text x="99.6761%" y="287.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::project::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::normalize_select_list::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4440%" y="597" width="0.0179%" height="15" fill="rgb(251,195,23)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="607.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4440%" y="581" width="0.0179%" height="15" fill="rgb(236,174,8)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="591.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4440%" y="565" width="0.0179%" height="15" fill="rgb(220,197,8)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="575.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4440%" y="549" width="0.0179%" height="15" fill="rgb(240,108,37)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="559.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4440%" y="533" width="0.0179%" height="15" fill="rgb(232,176,24)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="543.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4440%" y="517" width="0.0179%" height="15" fill="rgb(243,35,29)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="527.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4440%" y="501" width="0.0179%" height="15" fill="rgb(210,37,18)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="511.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_aggregate_function::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4440%" y="485" width="0.0179%" height="15" fill="rgb(224,184,40)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4440%" y="469" width="0.0179%" height="15" fill="rgb(236,39,29)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="479.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4440%" y="453" width="0.0179%" height="15" fill="rgb(232,48,39)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4440%" y="437" width="0.0179%" height="15" fill="rgb(236,34,42)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="447.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4440%" y="421" width="0.0179%" height="15" fill="rgb(243,106,37)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="431.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4440%" y="405" width="0.0179%" height="15" fill="rgb(218,96,6)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="415.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4440%" y="389" width="0.0179%" height="15" fill="rgb(235,130,12)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="399.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4440%" y="373" width="0.0179%" height="15" fill="rgb(231,95,0)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="383.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4440%" y="357" width="0.0179%" height="15" fill="rgb(228,12,23)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="367.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_scalar_function_call (1 samples, 0.02%)</title><rect x="99.4440%" y="341" width="0.0179%" height="15" fill="rgb(216,12,1)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="351.50"></text></g><g><title>databend-query`databend_common_expression::type_check::check (1 samples, 0.02%)</title><rect x="99.4440%" y="325" width="0.0179%" height="15" fill="rgb(219,59,3)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="335.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="99.4440%" y="309" width="0.0179%" height="15" fill="rgb(215,208,46)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="319.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.4440%" y="293" width="0.0179%" height="15" fill="rgb(254,224,29)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="303.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="99.4440%" y="277" width="0.0179%" height="15" fill="rgb(232,14,29)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="287.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.4440%" y="261" width="0.0179%" height="15" fill="rgb(208,45,52)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="271.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="99.4440%" y="245" width="0.0179%" height="15" fill="rgb(234,191,28)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="255.50"></text></g><g><title>databend-query`databend_common_expression::type_check::check (1 samples, 0.02%)</title><rect x="99.4440%" y="229" width="0.0179%" height="15" fill="rgb(244,67,43)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="239.50"></text></g><g><title>databend-query`databend_common_expression::type_check::check_function (1 samples, 0.02%)</title><rect x="99.4440%" y="213" width="0.0179%" height="15" fill="rgb(236,189,24)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="223.50"></text></g><g><title>databend-query`databend_common_expression::type_check::try_check_function (1 samples, 0.02%)</title><rect x="99.4440%" y="197" width="0.0179%" height="15" fill="rgb(239,214,33)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="207.50"></text></g><g><title>databend-query`databend_common_expression::type_check::try_unify_signature (1 samples, 0.02%)</title><rect x="99.4440%" y="181" width="0.0179%" height="15" fill="rgb(226,176,41)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="191.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="99.4440%" y="165" width="0.0179%" height="15" fill="rgb(248,47,8)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="175.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.4440%" y="149" width="0.0179%" height="15" fill="rgb(218,81,44)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="159.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="99.4440%" y="133" width="0.0179%" height="15" fill="rgb(213,98,6)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="143.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.4440%" y="117" width="0.0179%" height="15" fill="rgb(222,85,22)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="127.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="99.4440%" y="101" width="0.0179%" height="15" fill="rgb(239,46,39)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="111.50"></text></g><g><title>databend-query`databend_common_expression::type_check::unify (1 samples, 0.02%)</title><rect x="99.4440%" y="85" width="0.0179%" height="15" fill="rgb(237,12,29)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="95.50"></text></g><g><title>databend-query`databend_common_expression::type_check::can_auto_cast_to (1 samples, 0.02%)</title><rect x="99.4440%" y="69" width="0.0179%" height="15" fill="rgb(214,77,8)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="79.50"></text></g><g><title>databend-query`&lt;databend_common_expression::types::DataType as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="99.4440%" y="53" width="0.0179%" height="15" fill="rgb(217,168,37)" fg:x="5545" fg:w="1"/><text x="99.6940%" y="63.50"></text></g><g><title>databend-query`databend_common_storages_fuse::fuse_column::FuseTableColumnStatisticsProvider::new (1 samples, 0.02%)</title><rect x="99.4620%" y="453" width="0.0179%" height="15" fill="rgb(221,217,23)" fg:x="5546" fg:w="1"/><text x="99.7120%" y="463.50"></text></g><g><title>databend-query`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.4620%" y="437" width="0.0179%" height="15" fill="rgb(243,229,36)" fg:x="5546" fg:w="1"/><text x="99.7120%" y="447.50"></text></g><g><title>databend-query`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="99.4620%" y="421" width="0.0179%" height="15" fill="rgb(251,163,40)" fg:x="5546" fg:w="1"/><text x="99.7120%" y="431.50"></text></g><g><title>databend-query`databend_common_catalog::statistics::basic_statistics::BasicColumnStatistics::get_useful_stat (1 samples, 0.02%)</title><rect x="99.4620%" y="405" width="0.0179%" height="15" fill="rgb(237,222,12)" fg:x="5546" fg:w="1"/><text x="99.7120%" y="415.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="99.4799%" y="421" width="0.0179%" height="15" fill="rgb(248,132,6)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="431.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4799%" y="405" width="0.0179%" height="15" fill="rgb(227,167,50)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="415.50"></text></g><g><title>databend-query`&lt;databend_common_storages_fuse::io::read::meta::meta_readers::LoaderWrapper&lt;opendal::types::operator::operator::Operator&gt; as databend_storages_common_cache::read::loader::Loader&lt;databend_storages_common_table_meta::meta::v4::snapshot::TableSnapshot&gt;&gt;::load::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4799%" y="389" width="0.0179%" height="15" fill="rgb(242,84,37)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="399.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4799%" y="373" width="0.0179%" height="15" fill="rgb(212,4,50)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="383.50"></text></g><g><title>databend-query`databend_storages_common_table_meta::readers::snapshot_reader::_&lt;impl databend_storages_common_table_meta::readers::versioned_reader::VersionedReader&lt;databend_storages_common_table_meta::meta::v4::snapshot::TableSnapshot&gt; for databend_storages_common_table_meta::meta::versions::SnapshotVersion&gt;::read::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4799%" y="357" width="0.0179%" height="15" fill="rgb(230,228,32)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="367.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.4799%" y="341" width="0.0179%" height="15" fill="rgb(248,217,23)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="351.50"></text></g><g><title>databend-query`databend_storages_common_table_meta::meta::v4::snapshot::TableSnapshot::from_slice (1 samples, 0.02%)</title><rect x="99.4799%" y="325" width="0.0179%" height="15" fill="rgb(238,197,32)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="335.50"></text></g><g><title>databend-query`databend_storages_common_table_meta::meta::format::read_and_deserialize (1 samples, 0.02%)</title><rect x="99.4799%" y="309" width="0.0179%" height="15" fill="rgb(236,106,1)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="319.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="99.4799%" y="293" width="0.0179%" height="15" fill="rgb(219,228,13)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="303.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="99.4799%" y="277" width="0.0179%" height="15" fill="rgb(238,30,35)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="287.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="99.4799%" y="261" width="0.0179%" height="15" fill="rgb(236,70,23)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="271.50"></text></g><g><title>databend-query`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect x="99.4799%" y="245" width="0.0179%" height="15" fill="rgb(249,104,48)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="255.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="99.4799%" y="229" width="0.0179%" height="15" fill="rgb(254,117,50)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="239.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_enum (1 samples, 0.02%)</title><rect x="99.4799%" y="213" width="0.0179%" height="15" fill="rgb(223,152,4)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="223.50"></text></g><g><title>databend-query`&lt;databend_common_expression::schema::_::&lt;impl serde::de::Deserialize for databend_common_expression::schema::TableDataType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (1 samples, 0.02%)</title><rect x="99.4799%" y="197" width="0.0179%" height="15" fill="rgb(245,6,2)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="207.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_enum (1 samples, 0.02%)</title><rect x="99.4799%" y="181" width="0.0179%" height="15" fill="rgb(249,150,24)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="191.50"></text></g><g><title>databend-query`&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="99.4799%" y="165" width="0.0179%" height="15" fill="rgb(228,185,42)" fg:x="5547" fg:w="1"/><text x="99.7299%" y="175.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::table::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_table_reference::_{{closure}} (3 samples, 0.05%)</title><rect x="99.4620%" y="597" width="0.0538%" height="15" fill="rgb(226,39,33)" fg:x="5546" fg:w="3"/><text x="99.7120%" y="607.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="99.4620%" y="581" width="0.0538%" height="15" fill="rgb(221,166,19)" fg:x="5546" fg:w="3"/><text x="99.7120%" y="591.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::table::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_single_table::_{{closure}} (3 samples, 0.05%)</title><rect x="99.4620%" y="565" width="0.0538%" height="15" fill="rgb(209,109,2)" fg:x="5546" fg:w="3"/><text x="99.7120%" y="575.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="99.4620%" y="549" width="0.0538%" height="15" fill="rgb(252,216,26)" fg:x="5546" fg:w="3"/><text x="99.7120%" y="559.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="99.4620%" y="533" width="0.0538%" height="15" fill="rgb(227,173,36)" fg:x="5546" fg:w="3"/><text x="99.7120%" y="543.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::table::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_base_table::_{{closure}} (3 samples, 0.05%)</title><rect x="99.4620%" y="517" width="0.0538%" height="15" fill="rgb(209,90,7)" fg:x="5546" fg:w="3"/><text x="99.7120%" y="527.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="99.4620%" y="501" width="0.0538%" height="15" fill="rgb(250,194,11)" fg:x="5546" fg:w="3"/><text x="99.7120%" y="511.50"></text></g><g><title>databend-query`&lt;databend_common_storages_fuse::fuse_table::FuseTable as databend_common_catalog::table::Table&gt;::column_statistics_provider::_{{closure}} (3 samples, 0.05%)</title><rect x="99.4620%" y="485" width="0.0538%" height="15" fill="rgb(220,72,50)" fg:x="5546" fg:w="3"/><text x="99.7120%" y="495.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="99.4620%" y="469" width="0.0538%" height="15" fill="rgb(222,106,48)" fg:x="5546" fg:w="3"/><text x="99.7120%" y="479.50"></text></g><g><title>databend-query`databend_common_storages_fuse::fuse_table::FuseTable::read_table_snapshot::_{{closure}} (2 samples, 0.04%)</title><rect x="99.4799%" y="453" width="0.0359%" height="15" fill="rgb(216,220,45)" fg:x="5547" fg:w="2"/><text x="99.7299%" y="463.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="99.4799%" y="437" width="0.0359%" height="15" fill="rgb(234,112,18)" fg:x="5547" fg:w="2"/><text x="99.7299%" y="447.50"></text></g><g><title>databend-query`databend_common_storages_fuse::fuse_table::FuseTable::snapshot_loc::_{{closure}} (1 samples, 0.02%)</title><rect x="99.4978%" y="421" width="0.0179%" height="15" fill="rgb(206,179,9)" fg:x="5548" fg:w="1"/><text x="99.7478%" y="431.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 0.56%)</title><rect x="98.9778%" y="789" width="0.5560%" height="15" fill="rgb(215,115,40)" fg:x="5519" fg:w="31"/><text x="99.2278%" y="799.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (31 samples, 0.56%)</title><rect x="98.9778%" y="773" width="0.5560%" height="15" fill="rgb(222,69,34)" fg:x="5519" fg:w="31"/><text x="99.2278%" y="783.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}} (31 samples, 0.56%)</title><rect x="98.9778%" y="757" width="0.5560%" height="15" fill="rgb(209,161,10)" fg:x="5519" fg:w="31"/><text x="99.2278%" y="767.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (31 samples, 0.56%)</title><rect x="98.9778%" y="741" width="0.5560%" height="15" fill="rgb(217,6,38)" fg:x="5519" fg:w="31"/><text x="99.2278%" y="751.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::binder::Binder::bind_statement::_{{closure}}::_{{closure}} (31 samples, 0.56%)</title><rect x="98.9778%" y="725" width="0.5560%" height="15" fill="rgb(229,229,48)" fg:x="5519" fg:w="31"/><text x="99.2278%" y="735.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_query::_{{closure}} (6 samples, 0.11%)</title><rect x="99.4261%" y="709" width="0.1076%" height="15" fill="rgb(225,21,28)" fg:x="5544" fg:w="6"/><text x="99.6761%" y="719.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.11%)</title><rect x="99.4261%" y="693" width="0.1076%" height="15" fill="rgb(206,33,13)" fg:x="5544" fg:w="6"/><text x="99.6761%" y="703.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_set_expr::_{{closure}} (6 samples, 0.11%)</title><rect x="99.4261%" y="677" width="0.1076%" height="15" fill="rgb(242,178,17)" fg:x="5544" fg:w="6"/><text x="99.6761%" y="687.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.11%)</title><rect x="99.4261%" y="661" width="0.1076%" height="15" fill="rgb(220,162,5)" fg:x="5544" fg:w="6"/><text x="99.6761%" y="671.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}} (6 samples, 0.11%)</title><rect x="99.4261%" y="645" width="0.1076%" height="15" fill="rgb(210,33,43)" fg:x="5544" fg:w="6"/><text x="99.6761%" y="655.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.11%)</title><rect x="99.4261%" y="629" width="0.1076%" height="15" fill="rgb(216,116,54)" fg:x="5544" fg:w="6"/><text x="99.6761%" y="639.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::select::_&lt;impl databend_common_sql::planner::binder::binder::Binder&gt;::bind_select_stmt::_{{closure}}::_{{closure}} (6 samples, 0.11%)</title><rect x="99.4261%" y="613" width="0.1076%" height="15" fill="rgb(249,92,24)" fg:x="5544" fg:w="6"/><text x="99.6761%" y="623.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5158%" y="597" width="0.0179%" height="15" fill="rgb(231,189,14)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="607.50"></text></g><g><title>databend-query`databend_common_sql::planner::binder::scalar::ScalarBinder::bind::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="581" width="0.0179%" height="15" fill="rgb(230,8,41)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="591.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5158%" y="565" width="0.0179%" height="15" fill="rgb(249,7,27)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="575.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="549" width="0.0179%" height="15" fill="rgb(232,86,5)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="559.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5158%" y="533" width="0.0179%" height="15" fill="rgb(224,175,18)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="543.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="517" width="0.0179%" height="15" fill="rgb(220,129,12)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="527.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="501" width="0.0179%" height="15" fill="rgb(210,19,36)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="511.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5158%" y="485" width="0.0179%" height="15" fill="rgb(219,96,14)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="495.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="469" width="0.0179%" height="15" fill="rgb(249,106,1)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="479.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5158%" y="453" width="0.0179%" height="15" fill="rgb(249,155,20)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="463.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="437" width="0.0179%" height="15" fill="rgb(244,168,9)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="447.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5158%" y="421" width="0.0179%" height="15" fill="rgb(216,23,50)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="431.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="405" width="0.0179%" height="15" fill="rgb(224,219,20)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="415.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_binary_op::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="389" width="0.0179%" height="15" fill="rgb(222,156,15)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="399.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5158%" y="373" width="0.0179%" height="15" fill="rgb(231,97,17)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="383.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_function::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="357" width="0.0179%" height="15" fill="rgb(218,70,48)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="367.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.5158%" y="341" width="0.0179%" height="15" fill="rgb(212,196,52)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="351.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::resolve_scalar_function_call (1 samples, 0.02%)</title><rect x="99.5158%" y="325" width="0.0179%" height="15" fill="rgb(243,203,18)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="335.50"></text></g><g><title>databend-query`databend_common_sql::planner::semantic::type_check::TypeChecker::try_fold_constant (1 samples, 0.02%)</title><rect x="99.5158%" y="309" width="0.0179%" height="15" fill="rgb(252,125,41)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="319.50"></text></g><g><title>databend-query`databend_common_expression::evaluator::ConstantFolder&lt;Index&gt;::fold (1 samples, 0.02%)</title><rect x="99.5158%" y="293" width="0.0179%" height="15" fill="rgb(223,180,33)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="303.50"></text></g><g><title>databend-query`databend_common_expression::evaluator::ConstantFolder&lt;Index&gt;::fold_to_stable (1 samples, 0.02%)</title><rect x="99.5158%" y="277" width="0.0179%" height="15" fill="rgb(254,159,46)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="287.50"></text></g><g><title>databend-query`databend_common_expression::evaluator::ConstantFolder&lt;Index&gt;::fold_once (1 samples, 0.02%)</title><rect x="99.5158%" y="261" width="0.0179%" height="15" fill="rgb(254,38,10)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="271.50"></text></g><g><title>databend-query`databend_common_expression::register::erase_calc_domain_generic_2_arg::_{{closure}} (1 samples, 0.02%)</title><rect x="99.5158%" y="245" width="0.0179%" height="15" fill="rgb(208,217,32)" fg:x="5549" fg:w="1"/><text x="99.7658%" y="255.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD,FnE,FnF,FnG,FnH,FnI,FnJ,FnK) as nom::sequence::Tuple&lt;Input,(A,B,C,D,E,F,G,H,I,J,K),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="597" width="0.0179%" height="15" fill="rgb(221,120,13)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="607.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="581" width="0.0179%" height="15" fill="rgb(246,54,52)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="591.50"></text></g><g><title>databend-query`&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="565" width="0.0179%" height="15" fill="rgb(242,34,25)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="575.50"></text></g><g><title>databend-query`databend_common_ast::parser::expr::expr (1 samples, 0.02%)</title><rect x="99.5337%" y="549" width="0.0179%" height="15" fill="rgb(247,209,9)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="559.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="533" width="0.0179%" height="15" fill="rgb(228,71,26)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="543.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="517" width="0.0179%" height="15" fill="rgb(222,145,49)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="527.50"></text></g><g><title>databend-query`databend_common_ast::parser::expr::expr_element (1 samples, 0.02%)</title><rect x="99.5337%" y="501" width="0.0179%" height="15" fill="rgb(218,121,17)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="511.50"></text></g><g><title>databend-query`&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="99.5337%" y="485" width="0.0179%" height="15" fill="rgb(244,50,7)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="495.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="99.5337%" y="469" width="0.0179%" height="15" fill="rgb(246,229,37)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="479.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="453" width="0.0179%" height="15" fill="rgb(225,18,5)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="463.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="437" width="0.0179%" height="15" fill="rgb(213,204,8)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="447.50"></text></g><g><title>databend-query`databend_common_ast::parser::expr::binary_op (1 samples, 0.02%)</title><rect x="99.5337%" y="421" width="0.0179%" height="15" fill="rgb(238,103,6)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="431.50"></text></g><g><title>databend-query`&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="99.5337%" y="405" width="0.0179%" height="15" fill="rgb(222,25,35)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="415.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.02%)</title><rect x="99.5337%" y="389" width="0.0179%" height="15" fill="rgb(213,203,35)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="399.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="373" width="0.0179%" height="15" fill="rgb(221,79,53)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="383.50"></text></g><g><title>databend-query`&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="357" width="0.0179%" height="15" fill="rgb(243,200,35)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="367.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5337%" y="341" width="0.0179%" height="15" fill="rgb(248,60,25)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="351.50"></text></g><g><title>databend-query`databend_common_ast::error::Error::from_error_kind (1 samples, 0.02%)</title><rect x="99.5337%" y="325" width="0.0179%" height="15" fill="rgb(227,53,46)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="335.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="99.5337%" y="309" width="0.0179%" height="15" fill="rgb(216,120,32)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.5337%" y="293" width="0.0179%" height="15" fill="rgb(220,134,1)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.5337%" y="277" width="0.0179%" height="15" fill="rgb(237,168,5)" fg:x="5550" fg:w="1"/><text x="99.7837%" y="287.50"></text></g><g><title>databend-query`databend_common_ast::parser::parser::parse_sql (2 samples, 0.04%)</title><rect x="99.5337%" y="789" width="0.0359%" height="15" fill="rgb(231,100,33)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="799.50"></text></g><g><title>databend-query`databend_common_ast::parser::statement::statement (2 samples, 0.04%)</title><rect x="99.5337%" y="773" width="0.0359%" height="15" fill="rgb(236,177,47)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="783.50"></text></g><g><title>databend-query`&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (2 samples, 0.04%)</title><rect x="99.5337%" y="757" width="0.0359%" height="15" fill="rgb(235,7,49)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="767.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (2 samples, 0.04%)</title><rect x="99.5337%" y="741" width="0.0359%" height="15" fill="rgb(232,119,22)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="751.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (2 samples, 0.04%)</title><rect x="99.5337%" y="725" width="0.0359%" height="15" fill="rgb(254,73,53)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="735.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.04%)</title><rect x="99.5337%" y="709" width="0.0359%" height="15" fill="rgb(251,35,20)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="719.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::query (2 samples, 0.04%)</title><rect x="99.5337%" y="693" width="0.0359%" height="15" fill="rgb(241,119,20)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="703.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.04%)</title><rect x="99.5337%" y="677" width="0.0359%" height="15" fill="rgb(207,102,14)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="687.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::set_operation (2 samples, 0.04%)</title><rect x="99.5337%" y="661" width="0.0359%" height="15" fill="rgb(248,201,50)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="671.50"></text></g><g><title>databend-query`databend_common_ast::parser::query::set_operation_element (2 samples, 0.04%)</title><rect x="99.5337%" y="645" width="0.0359%" height="15" fill="rgb(222,185,44)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="655.50"></text></g><g><title>databend-query`&lt;(A,B,C,D,E,F,G,H,I) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (2 samples, 0.04%)</title><rect x="99.5337%" y="629" width="0.0359%" height="15" fill="rgb(218,107,18)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="639.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.04%)</title><rect x="99.5337%" y="613" width="0.0359%" height="15" fill="rgb(237,177,39)" fg:x="5550" fg:w="2"/><text x="99.7837%" y="623.50"></text></g><g><title>databend-query`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.02%)</title><rect x="99.5516%" y="597" width="0.0179%" height="15" fill="rgb(246,69,6)" fg:x="5551" fg:w="1"/><text x="99.8016%" y="607.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::cascades::tasks::Task::execute (1 samples, 0.02%)</title><rect x="99.5696%" y="741" width="0.0179%" height="15" fill="rgb(234,208,37)" fg:x="5552" fg:w="1"/><text x="99.8196%" y="751.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::cascades::tasks::apply_rule::ApplyRuleTask::execute (1 samples, 0.02%)</title><rect x="99.5696%" y="725" width="0.0179%" height="15" fill="rgb(225,4,6)" fg:x="5552" fg:w="1"/><text x="99.8196%" y="735.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::m_expr::MExpr::apply_rule (1 samples, 0.02%)</title><rect x="99.5696%" y="709" width="0.0179%" height="15" fill="rgb(233,45,0)" fg:x="5552" fg:w="1"/><text x="99.8196%" y="719.50"></text></g><g><title>databend-query`&lt;databend_common_sql::planner::optimizer::rule::transform::rule_eager_aggregation::RuleEagerAggregation as databend_common_sql::planner::optimizer::rule::rule::Rule&gt;::apply (1 samples, 0.02%)</title><rect x="99.5696%" y="693" width="0.0179%" height="15" fill="rgb(226,136,5)" fg:x="5552" fg:w="1"/><text x="99.8196%" y="703.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.5696%" y="677" width="0.0179%" height="15" fill="rgb(211,91,47)" fg:x="5552" fg:w="1"/><text x="99.8196%" y="687.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::cascades::cascade::CascadesOptimizer::optimize (2 samples, 0.04%)</title><rect x="99.5696%" y="757" width="0.0359%" height="15" fill="rgb(242,88,51)" fg:x="5552" fg:w="2"/><text x="99.8196%" y="767.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::format::display_memo (1 samples, 0.02%)</title><rect x="99.5875%" y="741" width="0.0179%" height="15" fill="rgb(230,91,28)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="751.50"></text></g><g><title>databend-query`core::iter::adapters::try_process (1 samples, 0.02%)</title><rect x="99.5875%" y="725" width="0.0179%" height="15" fill="rgb(254,186,29)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="735.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.5875%" y="709" width="0.0179%" height="15" fill="rgb(238,6,4)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="719.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="99.5875%" y="693" width="0.0179%" height="15" fill="rgb(221,151,16)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="703.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.5875%" y="677" width="0.0179%" height="15" fill="rgb(251,143,52)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="687.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="99.5875%" y="661" width="0.0179%" height="15" fill="rgb(206,90,15)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="671.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::format::group_to_format_tree (1 samples, 0.02%)</title><rect x="99.5875%" y="645" width="0.0179%" height="15" fill="rgb(218,35,8)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="655.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.5875%" y="629" width="0.0179%" height="15" fill="rgb(239,215,6)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="639.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="99.5875%" y="613" width="0.0179%" height="15" fill="rgb(245,116,39)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="623.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="99.5875%" y="597" width="0.0179%" height="15" fill="rgb(242,65,28)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="607.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::format::m_expr_to_format_tree (1 samples, 0.02%)</title><rect x="99.5875%" y="581" width="0.0179%" height="15" fill="rgb(252,132,53)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="591.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.5875%" y="565" width="0.0179%" height="15" fill="rgb(224,159,50)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="575.50"></text></g><g><title>databend-query`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="99.5875%" y="549" width="0.0179%" height="15" fill="rgb(224,93,4)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="559.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="99.5875%" y="533" width="0.0179%" height="15" fill="rgb(208,81,34)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="543.50"></text></g><g><title>databend-query`alloc::fmt::format::format_inner (1 samples, 0.02%)</title><rect x="99.5875%" y="517" width="0.0179%" height="15" fill="rgb(233,92,54)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="527.50"></text></g><g><title>databend-query`&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="99.5875%" y="501" width="0.0179%" height="15" fill="rgb(237,21,14)" fg:x="5553" fg:w="1"/><text x="99.8375%" y="511.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::optimize (1 samples, 0.02%)</title><rect x="99.6055%" y="757" width="0.0179%" height="15" fill="rgb(249,128,51)" fg:x="5554" fg:w="1"/><text x="99.8555%" y="767.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::solve (1 samples, 0.02%)</title><rect x="99.6055%" y="741" width="0.0179%" height="15" fill="rgb(223,129,24)" fg:x="5554" fg:w="1"/><text x="99.8555%" y="751.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::emit_csg (1 samples, 0.02%)</title><rect x="99.6055%" y="725" width="0.0179%" height="15" fill="rgb(231,168,25)" fg:x="5554" fg:w="1"/><text x="99.8555%" y="735.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::hyper_dp::dphyp::DPhpy::emit_csg_cmp (1 samples, 0.02%)</title><rect x="99.6055%" y="709" width="0.0179%" height="15" fill="rgb(224,39,20)" fg:x="5554" fg:w="1"/><text x="99.8555%" y="719.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::hyper_dp::join_node::JoinNode::cardinality (1 samples, 0.02%)</title><rect x="99.6055%" y="693" width="0.0179%" height="15" fill="rgb(225,152,53)" fg:x="5554" fg:w="1"/><text x="99.8555%" y="703.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::property::builder::RelExpr::derive_cardinality (1 samples, 0.02%)</title><rect x="99.6055%" y="677" width="0.0179%" height="15" fill="rgb(252,17,24)" fg:x="5554" fg:w="1"/><text x="99.8555%" y="687.50"></text></g><g><title>databend-query`databend_common_storage::statistics::Datum::to_double (1 samples, 0.02%)</title><rect x="99.6055%" y="661" width="0.0179%" height="15" fill="rgb(250,114,30)" fg:x="5554" fg:w="1"/><text x="99.8555%" y="671.50"></text></g><g><title>databend-query`&lt;databend_common_sql::planner::optimizer::rule::rewrite::rule_eliminate_sort::RuleEliminateSort as databend_common_sql::planner::optimizer::rule::rule::Rule&gt;::apply (1 samples, 0.02%)</title><rect x="99.6234%" y="709" width="0.0179%" height="15" fill="rgb(229,5,4)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="719.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::property::builder::RelExpr::derive_relational_prop (1 samples, 0.02%)</title><rect x="99.6234%" y="693" width="0.0179%" height="15" fill="rgb(225,176,49)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="703.50"></text></g><g><title>databend-query`&lt;databend_common_sql::planner::plans::eval_scalar::EvalScalar as databend_common_sql::planner::plans::operator::Operator&gt;::derive_relational_prop (1 samples, 0.02%)</title><rect x="99.6234%" y="677" width="0.0179%" height="15" fill="rgb(224,221,49)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="687.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::property::builder::RelExpr::derive_relational_prop_child (1 samples, 0.02%)</title><rect x="99.6234%" y="661" width="0.0179%" height="15" fill="rgb(253,169,27)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="671.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::property::builder::RelExpr::derive_relational_prop (1 samples, 0.02%)</title><rect x="99.6234%" y="645" width="0.0179%" height="15" fill="rgb(211,206,16)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="655.50"></text></g><g><title>databend-query`&lt;databend_common_sql::planner::plans::aggregate::Aggregate as databend_common_sql::planner::plans::operator::Operator&gt;::derive_relational_prop (1 samples, 0.02%)</title><rect x="99.6234%" y="629" width="0.0179%" height="15" fill="rgb(244,87,35)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="639.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::property::builder::RelExpr::derive_relational_prop_child (1 samples, 0.02%)</title><rect x="99.6234%" y="613" width="0.0179%" height="15" fill="rgb(246,28,10)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="623.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::property::builder::RelExpr::derive_relational_prop (1 samples, 0.02%)</title><rect x="99.6234%" y="597" width="0.0179%" height="15" fill="rgb(229,12,44)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="607.50"></text></g><g><title>databend-query`&lt;databend_common_sql::planner::plans::aggregate::Aggregate as databend_common_sql::planner::plans::operator::Operator&gt;::derive_relational_prop (1 samples, 0.02%)</title><rect x="99.6234%" y="581" width="0.0179%" height="15" fill="rgb(210,145,37)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="591.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::property::builder::RelExpr::derive_relational_prop_child (1 samples, 0.02%)</title><rect x="99.6234%" y="565" width="0.0179%" height="15" fill="rgb(227,112,52)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="575.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::property::builder::RelExpr::derive_relational_prop (1 samples, 0.02%)</title><rect x="99.6234%" y="549" width="0.0179%" height="15" fill="rgb(238,155,34)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="559.50"></text></g><g><title>databend-query`&lt;databend_common_sql::planner::plans::eval_scalar::EvalScalar as databend_common_sql::planner::plans::operator::Operator&gt;::derive_relational_prop (1 samples, 0.02%)</title><rect x="99.6234%" y="533" width="0.0179%" height="15" fill="rgb(239,226,36)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="543.50"></text></g><g><title>databend-query`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="99.6234%" y="517" width="0.0179%" height="15" fill="rgb(230,16,23)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="527.50"></text></g><g><title>databend-query`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="99.6234%" y="501" width="0.0179%" height="15" fill="rgb(236,171,36)" fg:x="5555" fg:w="1"/><text x="99.8734%" y="511.50"></text></g><g><title>databend-query`databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorkerBase::do_query::_{{closure}} (38 samples, 0.68%)</title><rect x="98.9778%" y="885" width="0.6815%" height="15" fill="rgb(221,22,14)" fg:x="5519" fg:w="38"/><text x="99.2278%" y="895.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.68%)</title><rect x="98.9778%" y="869" width="0.6815%" height="15" fill="rgb(242,43,11)" fg:x="5519" fg:w="38"/><text x="99.2278%" y="879.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (38 samples, 0.68%)</title><rect x="98.9778%" y="853" width="0.6815%" height="15" fill="rgb(232,69,23)" fg:x="5519" fg:w="38"/><text x="99.2278%" y="863.50"></text></g><g><title>databend-query`databend_common_sql::planner::planner::Planner::plan_sql::_{{closure}} (38 samples, 0.68%)</title><rect x="98.9778%" y="837" width="0.6815%" height="15" fill="rgb(216,180,54)" fg:x="5519" fg:w="38"/><text x="99.2278%" y="847.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.68%)</title><rect x="98.9778%" y="821" width="0.6815%" height="15" fill="rgb(216,5,24)" fg:x="5519" fg:w="38"/><text x="99.2278%" y="831.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (38 samples, 0.68%)</title><rect x="98.9778%" y="805" width="0.6815%" height="15" fill="rgb(225,89,9)" fg:x="5519" fg:w="38"/><text x="99.2278%" y="815.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::optimize (5 samples, 0.09%)</title><rect x="99.5696%" y="789" width="0.0897%" height="15" fill="rgb(243,75,33)" fg:x="5552" fg:w="5"/><text x="99.8196%" y="799.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::optimize_query (5 samples, 0.09%)</title><rect x="99.5696%" y="773" width="0.0897%" height="15" fill="rgb(247,141,45)" fg:x="5552" fg:w="5"/><text x="99.8196%" y="783.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (2 samples, 0.04%)</title><rect x="99.6234%" y="757" width="0.0359%" height="15" fill="rgb(232,177,36)" fg:x="5555" fg:w="2"/><text x="99.8734%" y="767.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (2 samples, 0.04%)</title><rect x="99.6234%" y="741" width="0.0359%" height="15" fill="rgb(219,125,36)" fg:x="5555" fg:w="2"/><text x="99.8734%" y="751.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (2 samples, 0.04%)</title><rect x="99.6234%" y="725" width="0.0359%" height="15" fill="rgb(227,94,9)" fg:x="5555" fg:w="2"/><text x="99.8734%" y="735.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="99.6413%" y="709" width="0.0179%" height="15" fill="rgb(240,34,52)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="719.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="99.6413%" y="693" width="0.0179%" height="15" fill="rgb(216,45,12)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="703.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="99.6413%" y="677" width="0.0179%" height="15" fill="rgb(246,21,19)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="687.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="99.6413%" y="661" width="0.0179%" height="15" fill="rgb(213,98,42)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="671.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="99.6413%" y="645" width="0.0179%" height="15" fill="rgb(250,136,47)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="655.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="99.6413%" y="629" width="0.0179%" height="15" fill="rgb(251,124,27)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="639.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="99.6413%" y="613" width="0.0179%" height="15" fill="rgb(229,180,14)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="623.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="99.6413%" y="597" width="0.0179%" height="15" fill="rgb(245,216,25)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="607.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::optimizer::RecursiveOptimizer::optimize_expression (1 samples, 0.02%)</title><rect x="99.6413%" y="581" width="0.0179%" height="15" fill="rgb(251,43,5)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="591.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::rule::factory::RuleFactory::create_rule (1 samples, 0.02%)</title><rect x="99.6413%" y="565" width="0.0179%" height="15" fill="rgb(250,128,24)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="575.50"></text></g><g><title>databend-query`databend_common_sql::planner::optimizer::s_expr::SExpr::create (1 samples, 0.02%)</title><rect x="99.6413%" y="549" width="0.0179%" height="15" fill="rgb(217,117,27)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="559.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="99.6413%" y="533" width="0.0179%" height="15" fill="rgb(245,147,4)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.6413%" y="517" width="0.0179%" height="15" fill="rgb(242,201,35)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.6413%" y="501" width="0.0179%" height="15" fill="rgb(218,181,1)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="99.6413%" y="485" width="0.0179%" height="15" fill="rgb(222,6,29)" fg:x="5556" fg:w="1"/><text x="99.8913%" y="495.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::hash_join::transform_hash_join_build::TransformHashJoinBuild&gt; (1 samples, 0.02%)</title><rect x="99.6593%" y="645" width="0.0179%" height="15" fill="rgb(208,186,3)" fg:x="5557" fg:w="1"/><text x="99.9093%" y="655.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="99.6593%" y="629" width="0.0179%" height="15" fill="rgb(216,36,26)" fg:x="5557" fg:w="1"/><text x="99.9093%" y="639.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="99.6593%" y="613" width="0.0179%" height="15" fill="rgb(248,201,23)" fg:x="5557" fg:w="1"/><text x="99.9093%" y="623.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.6593%" y="597" width="0.0179%" height="15" fill="rgb(251,170,31)" fg:x="5557" fg:w="1"/><text x="99.9093%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="99.6593%" y="581" width="0.0179%" height="15" fill="rgb(207,110,25)" fg:x="5557" fg:w="1"/><text x="99.9093%" y="591.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;core::cell::SyncUnsafeCell&lt;databend_query::pipelines::processors::transforms::hash_join::build_state::BuildState&gt;&gt; (1 samples, 0.02%)</title><rect x="99.6772%" y="597" width="0.0179%" height="15" fill="rgb(250,54,15)" fg:x="5558" fg:w="1"/><text x="99.9272%" y="607.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;databend_common_expression::values::ColumnVec&gt;&gt; (1 samples, 0.02%)</title><rect x="99.6772%" y="581" width="0.0179%" height="15" fill="rgb(227,68,33)" fg:x="5558" fg:w="1"/><text x="99.9272%" y="591.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;[databend_common_expression::values::ColumnVec]&gt; (1 samples, 0.02%)</title><rect x="99.6772%" y="565" width="0.0179%" height="15" fill="rgb(238,34,41)" fg:x="5558" fg:w="1"/><text x="99.9272%" y="575.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;databend_common_arrow::arrow::buffer::immutable::Buffer&lt;i32&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="99.6772%" y="549" width="0.0179%" height="15" fill="rgb(220,11,15)" fg:x="5558" fg:w="1"/><text x="99.9272%" y="559.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.6772%" y="533" width="0.0179%" height="15" fill="rgb(246,111,35)" fg:x="5558" fg:w="1"/><text x="99.9272%" y="543.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="99.6772%" y="517" width="0.0179%" height="15" fill="rgb(209,88,53)" fg:x="5558" fg:w="1"/><text x="99.9272%" y="527.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_common_arrow::arrow::buffer::Bytes&lt;f32&gt;&gt; (1 samples, 0.02%)</title><rect x="99.6772%" y="501" width="0.0179%" height="15" fill="rgb(231,185,47)" fg:x="5558" fg:w="1"/><text x="99.9272%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="99.6772%" y="485" width="0.0179%" height="15" fill="rgb(233,154,1)" fg:x="5558" fg:w="1"/><text x="99.9272%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="99.6772%" y="469" width="0.0179%" height="15" fill="rgb(225,15,46)" fg:x="5558" fg:w="1"/><text x="99.9272%" y="479.50"></text></g><g><title>databend-query`opensrv_mysql::tls::plain_run_with_options::_{{closure}} (46 samples, 0.82%)</title><rect x="98.8881%" y="949" width="0.8250%" height="15" fill="rgb(211,135,41)" fg:x="5514" fg:w="46"/><text x="99.1381%" y="959.50"></text></g><g><title>databend-query`&lt;databend_query::servers::mysql::mysql_interactive_worker::InteractiveWorker as opensrv_mysql::AsyncMysqlShim&lt;W&gt;&gt;::on_query::_{{closure}} (41 samples, 0.74%)</title><rect x="98.9778%" y="933" width="0.7353%" height="15" fill="rgb(208,54,0)" fg:x="5519" fg:w="41"/><text x="99.2278%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (41 samples, 0.74%)</title><rect x="98.9778%" y="917" width="0.7353%" height="15" fill="rgb(244,136,14)" fg:x="5519" fg:w="41"/><text x="99.2278%" y="927.50"></text></g><g><title>databend-query`&lt;minitrace::future::InSpan&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.74%)</title><rect x="98.9778%" y="901" width="0.7353%" height="15" fill="rgb(241,56,14)" fg:x="5519" fg:w="41"/><text x="99.2278%" y="911.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="99.6593%" y="885" width="0.0538%" height="15" fill="rgb(205,80,24)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="895.50"></text></g><g><title>databend-query`databend_query::servers::mysql::writers::query_result_writer::DFQueryResultWriter&lt;W&gt;::ok::_{{closure}} (3 samples, 0.05%)</title><rect x="99.6593%" y="869" width="0.0538%" height="15" fill="rgb(220,57,4)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="879.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="99.6593%" y="853" width="0.0538%" height="15" fill="rgb(226,193,50)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="863.50"></text></g><g><title>databend-query`&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 0.05%)</title><rect x="99.6593%" y="837" width="0.0538%" height="15" fill="rgb(231,168,22)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="847.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;axum::boxed::BoxedIntoRoute&lt;(),hyper::body::body::Body,core::convert::Infallible&gt;&gt; (3 samples, 0.05%)</title><rect x="99.6593%" y="821" width="0.0538%" height="15" fill="rgb(254,215,14)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="831.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::stream::progress_stream::ProgressStream&gt; (3 samples, 0.05%)</title><rect x="99.6593%" y="805" width="0.0538%" height="15" fill="rgb(211,115,16)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="815.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;alloc::vec::Vec&lt;databend_common_meta_app::principal::role_info::RoleInfo&gt;,databend_common_exception::exception::ErrorCode&gt;+core::marker::Send&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="99.6593%" y="789" width="0.0538%" height="15" fill="rgb(236,210,16)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="799.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::pipeline_pulling_executor::PipelinePullingExecutor&gt; (3 samples, 0.05%)</title><rect x="99.6593%" y="773" width="0.0538%" height="15" fill="rgb(221,94,12)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="783.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.05%)</title><rect x="99.6593%" y="757" width="0.0538%" height="15" fill="rgb(235,218,49)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="767.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;petgraph::graph_impl::Graph&lt;core::option::Option&lt;alloc::sync::Arc&lt;databend_query::pipelines::executor::executor_graph::Node&gt;&gt;,core::option::Option&lt;databend_query::pipelines::executor::executor_graph::EdgeInfo&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="99.6593%" y="741" width="0.0538%" height="15" fill="rgb(217,114,14)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="751.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::Node&lt;core::option::Option&lt;alloc::sync::Arc&lt;databend_query::pipelines::executor::executor_graph::Node&gt;&gt;&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="99.6593%" y="725" width="0.0538%" height="15" fill="rgb(216,145,22)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="735.50"></text></g><g><title>databend-query`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="99.6593%" y="709" width="0.0538%" height="15" fill="rgb(217,112,39)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="719.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.05%)</title><rect x="99.6593%" y="693" width="0.0538%" height="15" fill="rgb(225,85,32)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="703.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::executor::executor_graph::Node&gt; (3 samples, 0.05%)</title><rect x="99.6593%" y="677" width="0.0538%" height="15" fill="rgb(245,209,47)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="687.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.05%)</title><rect x="99.6593%" y="661" width="0.0538%" height="15" fill="rgb(218,220,15)" fg:x="5557" fg:w="3"/><text x="99.9093%" y="671.50"></text></g><g><title>databend-query`core::ptr::drop_in_place&lt;databend_query::pipelines::processors::transforms::hash_join::transform_hash_join_probe::TransformHashJoinProbe&gt; (2 samples, 0.04%)</title><rect x="99.6772%" y="645" width="0.0359%" height="15" fill="rgb(222,202,31)" fg:x="5558" fg:w="2"/><text x="99.9272%" y="655.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.04%)</title><rect x="99.6772%" y="629" width="0.0359%" height="15" fill="rgb(243,203,4)" fg:x="5558" fg:w="2"/><text x="99.9272%" y="639.50"></text></g><g><title>databend-query`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.04%)</title><rect x="99.6772%" y="613" width="0.0359%" height="15" fill="rgb(237,92,17)" fg:x="5558" fg:w="2"/><text x="99.9272%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="99.6951%" y="597" width="0.0179%" height="15" fill="rgb(231,119,7)" fg:x="5559" fg:w="1"/><text x="99.9451%" y="607.50"></text></g><g><title>databend-query`&lt;databend_storages_common_index::bloom_index::BloomIndexMeta as core::convert::TryFrom&lt;parquet_format_safe::parquet_format::FileMetaData&gt;&gt;::try_from (1 samples, 0.02%)</title><rect x="99.7310%" y="901" width="0.0179%" height="15" fill="rgb(237,82,41)" fg:x="5561" fg:w="1"/><text x="99.9810%" y="911.50"></text></g><g><title>databend-query`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="99.7310%" y="885" width="0.0179%" height="15" fill="rgb(226,81,48)" fg:x="5561" fg:w="1"/><text x="99.9810%" y="895.50"></text></g><g><title>databend-query`__rust_alloc (1 samples, 0.02%)</title><rect x="99.7310%" y="869" width="0.0179%" height="15" fill="rgb(234,70,51)" fg:x="5561" fg:w="1"/><text x="99.9810%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.7310%" y="853" width="0.0179%" height="15" fill="rgb(251,86,4)" fg:x="5561" fg:w="1"/><text x="99.9810%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.7310%" y="837" width="0.0179%" height="15" fill="rgb(244,144,28)" fg:x="5561" fg:w="1"/><text x="99.9810%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.7310%" y="821" width="0.0179%" height="15" fill="rgb(232,161,39)" fg:x="5561" fg:w="1"/><text x="99.9810%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="99.7310%" y="805" width="0.0179%" height="15" fill="rgb(247,34,51)" fg:x="5561" fg:w="1"/><text x="99.9810%" y="815.50"></text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (88 samples, 1.58%)</title><rect x="98.2245%" y="997" width="1.5782%" height="15" fill="rgb(225,132,2)" fg:x="5477" fg:w="88"/><text x="98.4745%" y="1007.50"></text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (88 samples, 1.58%)</title><rect x="98.2245%" y="981" width="1.5782%" height="15" fill="rgb(209,159,44)" fg:x="5477" fg:w="88"/><text x="98.4745%" y="991.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (79 samples, 1.42%)</title><rect x="98.3859%" y="965" width="1.4168%" height="15" fill="rgb(251,214,1)" fg:x="5486" fg:w="79"/><text x="98.6359%" y="975.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.09%)</title><rect x="99.7131%" y="949" width="0.0897%" height="15" fill="rgb(247,84,47)" fg:x="5560" fg:w="5"/><text x="99.9631%" y="959.50"></text></g><g><title>databend-query`&lt;databend_common_storages_fuse::io::read::meta::meta_readers::LoaderWrapper&lt;opendal::types::operator::operator::Operator&gt; as databend_storages_common_cache::read::loader::Loader&lt;databend_storages_common_index::bloom_index::BloomIndexMeta&gt;&gt;::load::_{{closure}} (5 samples, 0.09%)</title><rect x="99.7131%" y="933" width="0.0897%" height="15" fill="rgb(240,111,43)" fg:x="5560" fg:w="5"/><text x="99.9631%" y="943.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.09%)</title><rect x="99.7131%" y="917" width="0.0897%" height="15" fill="rgb(215,214,35)" fg:x="5560" fg:w="5"/><text x="99.9631%" y="927.50"></text></g><g><title>databend-query`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="99.7489%" y="901" width="0.0538%" height="15" fill="rgb(248,207,23)" fg:x="5562" fg:w="3"/><text x="99.9989%" y="911.50"></text></g><g><title>databend-query`&lt;parquet_format_safe::parquet_format::FileMetaData as parquet_format_safe::thrift::protocol::ReadThrift&gt;::read_from_in_protocol (3 samples, 0.05%)</title><rect x="99.7489%" y="885" width="0.0538%" height="15" fill="rgb(214,186,4)" fg:x="5562" fg:w="3"/><text x="99.9989%" y="895.50"></text></g><g><title>databend-query`&lt;parquet_format_safe::parquet_format::RowGroup as parquet_format_safe::thrift::protocol::ReadThrift&gt;::read_from_in_protocol (3 samples, 0.05%)</title><rect x="99.7489%" y="869" width="0.0538%" height="15" fill="rgb(220,133,22)" fg:x="5562" fg:w="3"/><text x="99.9989%" y="879.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (89 samples, 1.60%)</title><rect x="98.2245%" y="1045" width="1.5961%" height="15" fill="rgb(239,134,19)" fg:x="5477" fg:w="89"/><text x="98.4745%" y="1055.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::poll_future (89 samples, 1.60%)</title><rect x="98.2245%" y="1029" width="1.5961%" height="15" fill="rgb(250,140,9)" fg:x="5477" fg:w="89"/><text x="98.4745%" y="1039.50"></text></g><g><title>databend-query`std::panicking::try (89 samples, 1.60%)</title><rect x="98.2245%" y="1013" width="1.5961%" height="15" fill="rgb(225,59,14)" fg:x="5477" fg:w="89"/><text x="98.4745%" y="1023.50"></text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.02%)</title><rect x="99.8027%" y="997" width="0.0179%" height="15" fill="rgb(214,152,51)" fg:x="5565" fg:w="1"/><text x="100.0527%" y="1007.50"></text></g><g><title>databend-query`tokio::runtime::blocking::pool::Inner::run (96 samples, 1.72%)</title><rect x="98.1169%" y="1285" width="1.7217%" height="15" fill="rgb(251,227,43)" fg:x="5471" fg:w="96"/><text x="98.3669%" y="1295.50"></text></g><g><title>databend-query`tokio::runtime::task::UnownedTask&lt;S&gt;::run (96 samples, 1.72%)</title><rect x="98.1169%" y="1269" width="1.7217%" height="15" fill="rgb(241,96,17)" fg:x="5471" fg:w="96"/><text x="98.3669%" y="1279.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (96 samples, 1.72%)</title><rect x="98.1169%" y="1253" width="1.7217%" height="15" fill="rgb(234,198,43)" fg:x="5471" fg:w="96"/><text x="98.3669%" y="1263.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (96 samples, 1.72%)</title><rect x="98.1169%" y="1237" width="1.7217%" height="15" fill="rgb(220,108,29)" fg:x="5471" fg:w="96"/><text x="98.3669%" y="1247.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::poll_future (96 samples, 1.72%)</title><rect x="98.1169%" y="1221" width="1.7217%" height="15" fill="rgb(226,163,33)" fg:x="5471" fg:w="96"/><text x="98.3669%" y="1231.50"></text></g><g><title>databend-query`std::panicking::try (96 samples, 1.72%)</title><rect x="98.1169%" y="1205" width="1.7217%" height="15" fill="rgb(205,194,45)" fg:x="5471" fg:w="96"/><text x="98.3669%" y="1215.50"></text></g><g><title>databend-query`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (96 samples, 1.72%)</title><rect x="98.1169%" y="1189" width="1.7217%" height="15" fill="rgb(206,143,44)" fg:x="5471" fg:w="96"/><text x="98.3669%" y="1199.50"></text></g><g><title>databend-query`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (96 samples, 1.72%)</title><rect x="98.1169%" y="1173" width="1.7217%" height="15" fill="rgb(236,136,36)" fg:x="5471" fg:w="96"/><text x="98.3669%" y="1183.50"></text></g><g><title>databend-query`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (96 samples, 1.72%)</title><rect x="98.1169%" y="1157" width="1.7217%" height="15" fill="rgb(249,172,42)" fg:x="5471" fg:w="96"/><text x="98.3669%" y="1167.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::run (95 samples, 1.70%)</title><rect x="98.1349%" y="1141" width="1.7037%" height="15" fill="rgb(216,139,23)" fg:x="5472" fg:w="95"/><text x="98.3849%" y="1151.50"></text></g><g><title>databend-query`tokio::runtime::context::runtime::enter_runtime (95 samples, 1.70%)</title><rect x="98.1349%" y="1125" width="1.7037%" height="15" fill="rgb(207,166,20)" fg:x="5472" fg:w="95"/><text x="98.3849%" y="1135.50"></text></g><g><title>databend-query`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (95 samples, 1.70%)</title><rect x="98.1349%" y="1109" width="1.7037%" height="15" fill="rgb(210,209,22)" fg:x="5472" fg:w="95"/><text x="98.3849%" y="1119.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::run (95 samples, 1.70%)</title><rect x="98.1349%" y="1093" width="1.7037%" height="15" fill="rgb(232,118,20)" fg:x="5472" fg:w="95"/><text x="98.3849%" y="1103.50"></text></g><g><title>databend-query`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (91 samples, 1.63%)</title><rect x="98.2066%" y="1077" width="1.6320%" height="15" fill="rgb(238,113,42)" fg:x="5476" fg:w="91"/><text x="98.4566%" y="1087.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (90 samples, 1.61%)</title><rect x="98.2245%" y="1061" width="1.6141%" height="15" fill="rgb(231,42,5)" fg:x="5477" fg:w="90"/><text x="98.4745%" y="1071.50"></text></g><g><title>databend-query`tokio::runtime::task::harness::poll_future (1 samples, 0.02%)</title><rect x="99.8207%" y="1045" width="0.0179%" height="15" fill="rgb(243,166,24)" fg:x="5566" fg:w="1"/><text x="100.0707%" y="1055.50"></text></g><g><title>databend-query`crossbeam_channel::context::Context::with::_{{closure}} (1 samples, 0.02%)</title><rect x="99.8565%" y="1237" width="0.0179%" height="15" fill="rgb(237,226,12)" fg:x="5568" fg:w="1"/><text x="100.1065%" y="1247.50"></text></g><g><title>databend-query`std::thread::park (1 samples, 0.02%)</title><rect x="99.8565%" y="1221" width="0.0179%" height="15" fill="rgb(229,133,24)" fg:x="5568" fg:w="1"/><text x="100.1065%" y="1231.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (1 samples, 0.02%)</title><rect x="99.8565%" y="1205" width="0.0179%" height="15" fill="rgb(238,33,43)" fg:x="5568" fg:w="1"/><text x="100.1065%" y="1215.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_wait_trap (1 samples, 0.02%)</title><rect x="99.8565%" y="1189" width="0.0179%" height="15" fill="rgb(227,59,38)" fg:x="5568" fg:w="1"/><text x="100.1065%" y="1199.50"></text></g><g><title>databend-query`crossbeam_channel::channel::Receiver&lt;T&gt;::recv (3 samples, 0.05%)</title><rect x="99.8386%" y="1269" width="0.0538%" height="15" fill="rgb(230,97,0)" fg:x="5567" fg:w="3"/><text x="100.0886%" y="1279.50"></text></g><g><title>databend-query`crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (3 samples, 0.05%)</title><rect x="99.8386%" y="1253" width="0.0538%" height="15" fill="rgb(250,173,50)" fg:x="5567" fg:w="3"/><text x="100.0886%" y="1263.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.02%)</title><rect x="99.8745%" y="1237" width="0.0179%" height="15" fill="rgb(240,15,50)" fg:x="5569" fg:w="1"/><text x="100.1245%" y="1247.50"></text></g><g><title>databend-query`std::sys::unix::thread::Thread::new::thread_start (5,458 samples, 97.88%)</title><rect x="2.0983%" y="1349" width="97.8838%" height="15" fill="rgb(221,93,22)" fg:x="117" fg:w="5458"/><text x="2.3483%" y="1359.50">databend-query`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>databend-query`core::ops::function::FnOnce::call_once{{vtable.shim}} (5,458 samples, 97.88%)</title><rect x="2.0983%" y="1333" width="97.8838%" height="15" fill="rgb(245,180,53)" fg:x="117" fg:w="5458"/><text x="2.3483%" y="1343.50">databend-query`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>databend-query`std::panicking::try (5,458 samples, 97.88%)</title><rect x="2.0983%" y="1317" width="97.8838%" height="15" fill="rgb(231,88,51)" fg:x="117" fg:w="5458"/><text x="2.3483%" y="1327.50">databend-query`std::panicking::try</text></g><g><title>databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace (5,458 samples, 97.88%)</title><rect x="2.0983%" y="1301" width="97.8838%" height="15" fill="rgb(240,58,21)" fg:x="117" fg:w="5458"/><text x="2.3483%" y="1311.50">databend-query`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>databend-query`tracing_appender::worker::Worker&lt;T&gt;::work (8 samples, 0.14%)</title><rect x="99.8386%" y="1285" width="0.1435%" height="15" fill="rgb(237,21,10)" fg:x="5567" fg:w="8"/><text x="100.0886%" y="1295.50"></text></g><g><title>databend-query`std::io::Write::write_all (5 samples, 0.09%)</title><rect x="99.8924%" y="1269" width="0.0897%" height="15" fill="rgb(218,43,11)" fg:x="5570" fg:w="5"/><text x="100.1424%" y="1279.50"></text></g><g><title>libsystem_kernel.dylib`write (5 samples, 0.09%)</title><rect x="99.8924%" y="1253" width="0.0897%" height="15" fill="rgb(218,221,29)" fg:x="5570" fg:w="5"/><text x="100.1424%" y="1263.50"></text></g><g><title>all (5,576 samples, 100%)</title><rect x="0.0000%" y="1397" width="100.0000%" height="15" fill="rgb(214,118,42)" fg:x="0" fg:w="5576"/><text x="0.2500%" y="1407.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5,459 samples, 97.90%)</title><rect x="2.0983%" y="1381" width="97.9017%" height="15" fill="rgb(251,200,26)" fg:x="117" fg:w="5459"/><text x="2.3483%" y="1391.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (5,459 samples, 97.90%)</title><rect x="2.0983%" y="1365" width="97.9017%" height="15" fill="rgb(237,101,39)" fg:x="117" fg:w="5459"/><text x="2.3483%" y="1375.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.02%)</title><rect x="99.9821%" y="1349" width="0.0179%" height="15" fill="rgb(251,117,11)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1359.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (1 samples, 0.02%)</title><rect x="99.9821%" y="1333" width="0.0179%" height="15" fill="rgb(216,223,23)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1343.50"></text></g><g><title>dyld`dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.02%)</title><rect x="99.9821%" y="1317" width="0.0179%" height="15" fill="rgb(251,54,12)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1327.50"></text></g><g><title>dyld`invocation function for block in dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.02%)</title><rect x="99.9821%" y="1301" width="0.0179%" height="15" fill="rgb(254,176,54)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1311.50"></text></g><g><title>databend-query`std::sys::unix::thread_local_dtor::register_dtor::run_dtors (1 samples, 0.02%)</title><rect x="99.9821%" y="1285" width="0.0179%" height="15" fill="rgb(210,32,8)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1295.50"></text></g><g><title>databend-query`std::sys::common::thread_local::fast_local::destroy_value (1 samples, 0.02%)</title><rect x="99.9821%" y="1269" width="0.0179%" height="15" fill="rgb(235,52,38)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1279.50"></text></g><g><title>databend-query`std::panicking::try (1 samples, 0.02%)</title><rect x="99.9821%" y="1253" width="0.0179%" height="15" fill="rgb(231,4,44)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1263.50"></text></g><g><title>databend-query`&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9821%" y="1237" width="0.0179%" height="15" fill="rgb(249,2,32)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="99.9821%" y="1221" width="0.0179%" height="15" fill="rgb(224,65,26)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1231.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="99.9821%" y="1205" width="0.0179%" height="15" fill="rgb(250,73,40)" fg:x="5575" fg:w="1"/><text x="100.2321%" y="1215.50"></text></g></svg></svg>