statement ok
drop table if exists t1;

statement ok
create table t1(a int not null, b int not null);

statement ok
create table t2(a int not null, b int not null);

statement ok
create table t3(a int not null, b int not null);

# a = 1
query T
explain select * from t1 where a = 1 and a = 1;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 1], limit: NONE]
└── estimated rows: 0.00

# false
query T
explain select * from t1 where a = 1 and a = 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [false], limit: NONE]
└── estimated rows: 0.00

# false
query T
explain select * from t1 where a = 1 and a != 1
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [false], limit: NONE]
└── estimated rows: 0.00

# a = 1
query T
explain select * from t1 where a = 1 and a != 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 1], limit: NONE]
└── estimated rows: 0.00

# a = 1
query T
explain select * from t1 where a = 1 and a < 2; 
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 1], limit: NONE]
└── estimated rows: 0.00

# false
query T
explain select * from t1 where a = 1 and a < 1;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [false], limit: NONE]
└── estimated rows: 0.00

# a = 1
query T
explain select * from t1 where a = 1 and a <= 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 1], limit: NONE]
└── estimated rows: 0.00

# a = 1
query T
explain select * from t1 where a = 1 and a <= 1;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 1], limit: NONE]
└── estimated rows: 0.00

# a = 1;
query T
explain select * from t1 where a = 1 and a > 0;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 1], limit: NONE]
└── estimated rows: 0.00

# false
query T
explain select * from t1 where a = 1 and a > 1;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [false], limit: NONE]
└── estimated rows: 0.00

# a = 1;
query T
explain select * from t1 where a = 1 and a >= 0;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 1], limit: NONE]
└── estimated rows: 0.00

# a = 1;
query T
explain select * from t1 where a = 1 and a >= 1;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 1], limit: NONE]
└── estimated rows: 0.00


# false
query T
explain select * from t1 where a != 1 and a = 1;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [false], limit: NONE]
└── estimated rows: 0.00

# a = 2
query T
explain select * from t1 where a != 1 and a = 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 2], limit: NONE]
└── estimated rows: 0.00

# a != 1
query T
explain select * from t1 where a != 1 and a != 1
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) <> 1], limit: NONE]
└── estimated rows: 0.00

# a != 1 and a != 2
query T
explain select * from t1 where a != 1 and a != 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) <> 1, t1.a (#0) <> 2)], limit: NONE]
└── estimated rows: 0.00

# a < 1
query T
explain select * from t1 where a != 1 and a < 1; 
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) < 1], limit: NONE]
└── estimated rows: 0.00

# a != 1 and a < 2
query T
explain select * from t1 where a != 1 and a < 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) <> 1, t1.a (#0) < 2)], limit: NONE]
└── estimated rows: 0.00

# a != 1 and a <= 1
query T
explain select * from t1 where a != 1 and a <= 1;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) <> 1, t1.a (#0) <= 1)], limit: NONE]
└── estimated rows: 0.00

# a != 1 and a <= 2
query T
explain select * from t1 where a != 1 and a <= 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) <> 1, t1.a (#0) <= 2)], limit: NONE]
└── estimated rows: 0.00

# a > 1;
query T
explain select * from t1 where a != 1 and a > 1;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) > 1], limit: NONE]
└── estimated rows: 0.00

# a != 1 and a > 0
query T
explain select * from t1 where a != 1 and a > 0;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) <> 1, t1.a (#0) > 0)], limit: NONE]
└── estimated rows: 0.00

# a != 1 and a >= 1
query T
explain select * from t1 where a != 1 and a >= 1;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) <> 1, t1.a (#0) >= 1)], limit: NONE]
└── estimated rows: 0.00

# a != 1 and a >= 0
query T
explain select * from t1 where a != 1 and a >= 0;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) <> 1, t1.a (#0) >= 0)], limit: NONE]
└── estimated rows: 0.00

# false
query T
explain select * from t1 where a < 5 and a = 10;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [false], limit: NONE]
└── estimated rows: 0.00

# a = 2
query T
explain select * from t1 where a < 5 and a = 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) = 2], limit: NONE]
└── estimated rows: 0.00

# a < 5
query T
explain select * from t1 where a < 5 and a != 10
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) < 5], limit: NONE]
└── estimated rows: 0.00

# a < 5 and a != 2
query T
explain select * from t1 where a < 5 and a != 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) < 5, t1.a (#0) <> 2)], limit: NONE]
└── estimated rows: 0.00

# a < 5
query T
explain select * from t1 where a < 5 and a <= 10; 
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [t1.a (#0) < 5], limit: NONE]
└── estimated rows: 0.00

# false
query T
explain select * from t1 where a < 5 and a > 10;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [false], limit: NONE]
└── estimated rows: 0.00

# a < 5 and a > 2
query T
explain select * from t1 where a < 5 and a > 2;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) < 5, t1.a (#0) > 2)], limit: NONE]
└── estimated rows: 0.00

# a > 10 and a <= 100
query T
explain select * from t1 where 10000 > a and a > 10 and 100 >= a;
----
TableScan
├── table: default.default.t1
├── output columns: [a (#0), b (#1)]
├── read rows: 0
├── read bytes: 0
├── partitions total: 0
├── partitions scanned: 0
├── push downs: [filters: [and_filters(t1.a (#0) <= 100, t1.a (#0) > 10)], limit: NONE]
└── estimated rows: 0.00

# t1.a > 10 and t2.a > 10
query T
explain select * from t1, t2 where t1.a = t2.a and t1.a > 5 and t2.a > 10;
----
HashJoin
├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── join type: INNER
├── build keys: [t2.a (#2)]
├── probe keys: [CAST(t1.a (#0) AS Int32 NULL)]
├── filters: []
├── estimated rows: 0.00
├── TableScan(Build)
│   ├── table: default.default.t2
│   ├── output columns: [a (#2), b (#3)]
│   ├── read rows: 0
│   ├── read bytes: 0
│   ├── partitions total: 0
│   ├── partitions scanned: 0
│   ├── push downs: [filters: [is_true(t2.a (#2) > 10)], limit: NONE]
│   └── estimated rows: 0.00
└── TableScan(Probe)
    ├── table: default.default.t1
    ├── output columns: [a (#0), b (#1)]
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [t1.a (#0) > 10], limit: NONE]
    └── estimated rows: 0.00

# t1.a > 5 and t1.a < 10, t2.a > 5 and t2.a < 10, t3.a > 5 and t3.a < 10
query T
explain select * from t1, t2, t3 where t1.a = t2.a and t1.a = t3.a and t1.a > 5 and t3.a < 10;
----
HashJoin
├── output columns: [t3.a (#4), t3.b (#5), t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
├── join type: INNER
├── build keys: [to_int64(t1.a (#0))]
├── probe keys: [to_int64(t3.a (#4))]
├── filters: []
├── estimated rows: 0.00
├── HashJoin(Build)
│   ├── output columns: [t1.a (#0), t1.b (#1), t2.b (#3), t2.a (#2)]
│   ├── join type: INNER
│   ├── build keys: [t2.a (#2)]
│   ├── probe keys: [CAST(t1.a (#0) AS Int32 NULL)]
│   ├── filters: []
│   ├── estimated rows: 0.00
│   ├── TableScan(Build)
│   │   ├── table: default.default.t2
│   │   ├── output columns: [a (#2), b (#3)]
│   │   ├── read rows: 0
│   │   ├── read bytes: 0
│   │   ├── partitions total: 0
│   │   ├── partitions scanned: 0
│   │   ├── push downs: [filters: [and_filters(t2.a (#2) > 5, t2.a (#2) < 10)], limit: NONE]
│   │   └── estimated rows: 0.00
│   └── TableScan(Probe)
│       ├── table: default.default.t1
│       ├── output columns: [a (#0), b (#1)]
│       ├── read rows: 0
│       ├── read bytes: 0
│       ├── partitions total: 0
│       ├── partitions scanned: 0
│       ├── push downs: [filters: [and_filters(t1.a (#0) > 5, t1.a (#0) < 10)], limit: NONE]
│       └── estimated rows: 0.00
└── TableScan(Probe)
    ├── table: default.default.t3
    ├── output columns: [a (#4), b (#5)]
    ├── read rows: 10
    ├── read bytes: 108
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    ├── push downs: [filters: [and_filters(t3.a (#4) < 10, t3.a (#4) > 5)], limit: NONE]
    └── estimated rows: 4.55

statement ok
drop table t1;

statement ok
drop table t2;

statement ok
drop table t3;