query T
explain select number from numbers(10) group by number;
----
EvalScalar
├── expressions: [numbers.number (#0)]
├── estimated rows: 10.00
└── AggregateFinal
    ├── group by: [number]
    ├── aggregate functions: []
    ├── estimated rows: 10.00
    └── AggregatePartial
        ├── group by: [number]
        ├── aggregate functions: []
        ├── estimated rows: 10.00
        └── EvalScalar
            ├── expressions: [numbers.number (#0)]
            ├── estimated rows: 10.00
            └── TableScan
                ├── table: default.system.numbers
                ├── read rows: 10
                ├── read bytes: 80
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 10.00


query T
explain select number from numbers(10) group by 1;
----
EvalScalar
├── expressions: [numbers.number (#0)]
├── estimated rows: 10.00
└── AggregateFinal
    ├── group by: [number]
    ├── aggregate functions: []
    ├── estimated rows: 10.00
    └── AggregatePartial
        ├── group by: [number]
        ├── aggregate functions: []
        ├── estimated rows: 10.00
        └── EvalScalar
            ├── expressions: [numbers.number (#0)]
            ├── estimated rows: 10.00
            └── TableScan
                ├── table: default.system.numbers
                ├── read rows: 10
                ├── read bytes: 80
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 10.00


query T
explain select 1 from numbers(10) group by 1;
----
EvalScalar
├── expressions: [1]
├── estimated rows: 10.00
└── TableScan
    ├── table: default.system.numbers
    ├── read rows: 10
    ├── read bytes: 80
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00



query T
explain select 1, number, number + 1, number -1 from numbers(10) group by number, abs(number), cast(number as int);
----
EvalScalar
├── expressions: [numbers.number (#0), 1, numbers.number (#0) + 1, numbers.number (#0) - 1]
├── estimated rows: 10.00
└── AggregateFinal
    ├── group by: [number]
    ├── aggregate functions: []
    ├── estimated rows: 10.00
    └── AggregatePartial
        ├── group by: [number]
        ├── aggregate functions: []
        ├── estimated rows: 10.00
        └── EvalScalar
            ├── expressions: [numbers.number (#0)]
            ├── estimated rows: 10.00
            └── TableScan
                ├── table: default.system.numbers
                ├── read rows: 10
                ├── read bytes: 80
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 10.00


query T
explain select count(3), type, name, trim(name) as a from system.columns group by name, type, a, concat(name, trim(name)), concat(type, name), length(name);
----
EvalScalar
├── expressions: [columns.name (#0), columns.type (#3), count(3) (#13), trim_both(columns.name (#0), ' ')]
├── estimated rows: 0.00
└── AggregateFinal
    ├── group by: [name, type]
    ├── aggregate functions: [count()]
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── group by: [name, type]
        ├── aggregate functions: [count()]
        ├── estimated rows: 0.00
        └── EvalScalar
            ├── expressions: [columns.name (#0), columns.type (#3)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.system.columns
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 0.00


statement ok
create table explain_agg_t1(a int, b int);

query T
explain select a from explain_agg_t1 group by a having 1 = 0;
----
EvalScalar
├── expressions: [explain_agg_t1.a (#0)]
├── estimated rows: 0.00
└── AggregateFinal
    ├── group by: [a]
    ├── aggregate functions: []
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── group by: [a]
        ├── aggregate functions: []
        ├── estimated rows: 0.00
        └── EvalScalar
            ├── expressions: [explain_agg_t1.a (#0)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.default.explain_agg_t1
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [false], limit: NONE]
                ├── output columns: [a]
                └── estimated rows: 0.00

query T
explain select a from explain_agg_t1 group by a having a > 3;
----
EvalScalar
├── expressions: [explain_agg_t1.a (#0)]
├── estimated rows: 0.00
└── AggregateFinal
    ├── group by: [a]
    ├── aggregate functions: []
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── group by: [a]
        ├── aggregate functions: []
        ├── estimated rows: 0.00
        └── EvalScalar
            ├── expressions: [explain_agg_t1.a (#0)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.default.explain_agg_t1
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [explain_agg_t1.a (#0) > 3], limit: NONE]
                ├── output columns: [a]
                └── estimated rows: 0.00

query T
explain select a, max(b) from explain_agg_t1 group by a having a > 1;
----
EvalScalar
├── expressions: [explain_agg_t1.a (#0), max(b) (#2)]
├── estimated rows: 0.00
└── AggregateFinal
    ├── group by: [a]
    ├── aggregate functions: [max(b)]
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── group by: [a]
        ├── aggregate functions: [max(b)]
        ├── estimated rows: 0.00
        └── EvalScalar
            ├── expressions: [explain_agg_t1.b (#1), explain_agg_t1.a (#0)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.default.explain_agg_t1
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [explain_agg_t1.a (#0) > 1], limit: NONE]
                └── estimated rows: 0.00

query T
explain select a, avg(b) from explain_agg_t1 group by a having a > 1 and max(b) > 10;
----
EvalScalar
├── expressions: [explain_agg_t1.a (#0), avg(b) (#2)]
├── estimated rows: 0.00
└── Filter
    ├── filters: [is_true(max(b) (#4) > 10)]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── group by: [a]
        ├── aggregate functions: [avg(b), max(b)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── group by: [a]
            ├── aggregate functions: [avg(b), max(b)]
            ├── estimated rows: 0.00
            └── EvalScalar
                ├── expressions: [explain_agg_t1.b (#1), explain_agg_t1.b (#1), explain_agg_t1.a (#0)]
                ├── estimated rows: 0.00
                └── TableScan
                    ├── table: default.default.explain_agg_t1
                    ├── read rows: 0
                    ├── read bytes: 0
                    ├── partitions total: 0
                    ├── partitions scanned: 0
                    ├── push downs: [filters: [explain_agg_t1.a (#0) > 1], limit: NONE]
                    └── estimated rows: 0.00

statement ok
drop table explain_agg_t1;

statement ok
drop table if exists t1

statement ok
create table t1 as select number as a from numbers(10)

statement ok
drop table if exists t2

statement ok
create table t2 as select number as a from numbers(100)

query T
explain select count() from t1, t2 where t1.a > t2.a;
----
EvalScalar
├── expressions: [count() (#2)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── group by: []
    ├── aggregate functions: [count()]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [count()]
        ├── estimated rows: 1.00
        └── MergeJoin
            ├── join type: INNER
            ├── range join conditions: [t2.a (#1) "lt" t1.a (#0)]
            ├── other conditions: []
            ├── estimated rows: 1000.00
            ├── TableScan(Left)
            │   ├── table: default.default.t2
            │   ├── read rows: 100
            │   ├── read bytes: 414
            │   ├── partitions total: 1
            │   ├── partitions scanned: 1
            │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            │   ├── push downs: [filters: [], limit: NONE]
            │   └── estimated rows: 100.00
            └── TableScan(Right)
                ├── table: default.default.t1
                ├── read rows: 10
                ├── read bytes: 54
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 10.00


statement ok
drop table t1;

statement ok
drop table t2;
