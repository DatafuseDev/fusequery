statement ok
CREATE DATABASE IF NOT EXISTS test_explain_window

statement ok
USE test_explain_window

statement ok
DROP TABLE IF EXISTS empsalary

statement ok
CREATE TABLE empsalary (depname string, empno bigint, salary int, enroll_date date)

query 
explain SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno
----
Sort
├── output columns: [empsalary.depname (#0), empsalary.empno (#1), empsalary.salary (#2), sum(salary) OVER (PARTITION BY depname ORDER BY empno) (#4)]
├── sort keys: [depname ASC NULLS LAST, empno ASC NULLS LAST]
├── estimated rows: 0.00
└── Window
    ├── output columns: [empsalary.depname (#0), empsalary.empno (#1), empsalary.salary (#2), sum(salary) OVER (PARTITION BY depname ORDER BY empno) (#4)]
    ├── aggregate function: [sum(salary)]
    ├── partition by: [depname]
    ├── order by: [empno]
    ├── frame: [Range: Preceding(None) ~ CurrentRow]
    └── TableScan
        ├── table: default.test_explain_window.empsalary
        ├── output columns: [depname (#0), empno (#1), salary (#2)]
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 0.00

statement ok
set max_threads=4;

query 
explain pipeline SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno;
----
CompoundBlockOperator(Project) × 1 processor
  Merge (TransformSortMerge × 4 processors) to (CompoundBlockOperator(Project) × 1)
    TransformSortMerge × 4 processors
      SortPartialTransform × 4 processors
        Merge (Transform Window × 1 processor) to (SortPartialTransform × 4)
          Transform Window × 1 processor
            Merge (TransformSortMerge × 4 processors) to (Transform Window × 1)
              TransformSortMerge × 4 processors
                SortPartialTransform × 4 processors
                  Merge (DeserializeDataTransform × 1 processor) to (SortPartialTransform × 4)
                    DeserializeDataTransform × 1 processor
                      SyncReadParquetDataSource × 1 processor

statement ok
DROP TABLE IF EXISTS Test

statement ok
CREATE TABLE Test (k int, v int);

# push down filter in window function
query
explain SELECT k, v FROM (SELECT *, rank() OVER (PARTITION BY k ORDER BY v DESC) AS rank FROM ((SELECT k, v FROM Test) UNION ALL (SELECT k, v FROM Test) ) t1 ) t2 WHERE rank = 1 AND k = 12;
----
Filter
├── output columns: [test.k (#0), test.v (#1)]
├── filters: [rank() OVER (PARTITION BY k ORDER BY v DESC) (#4) = 1]
├── estimated rows: 0.00
└── Window
  ├── output columns: [test.k (#0), test.v (#1), rank() OVER (PARTITION BY k ORDER BY v DESC) (#4)]
  ├── aggregate function: [rank]
  ├── partition by: [k]
  ├── order by: [v]
  ├── frame: [Range: Preceding(None) ~ CurrentRow]
  └── UnionAll
    ├── output columns: [test.k (#0), test.v (#1)]
    ├── estimated rows: 0.00
    ├── Filter
    │   ├── output columns: [test.k (#0), test.v (#1)]
    │   ├── filters: [is_true(test.k (#0) = 12)]
    │   ├── estimated rows: 0.00
    │   └── TableScan
    │       ├── table: default.test_explain_window.test
    │       ├── output columns: [k (#0), v (#1)]
    │       ├── read rows: 0
    │       ├── read bytes: 0
    │       ├── partitions total: 0
    │       ├── partitions scanned: 0
    │       ├── push downs: [filters: [is_true(test.k (#0) = 12)], limit: NONE]
    │       └── estimated rows: 0.00
    └── Filter
      ├── output columns: [test.k (#2), test.v (#3)]
      ├── filters: [is_true(test.k (#2) = 12)]
      ├── estimated rows: 0.00
      └── TableScan
        ├── table: default.test_explain_window.test
        ├── output columns: [k (#2), v (#3)]
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [is_true(test.k (#2) = 12)], limit: NONE]
        └── estimated rows: 0.00

# cannot push down filter in window function
query
explain SELECT k, v FROM (SELECT *, rank() OVER (PARTITION BY v ORDER BY v DESC) AS rank FROM ((SELECT k, v FROM Test) UNION ALL (SELECT k, v FROM Test) ) t1 ) t2 WHERE rank = 1 AND k = 12;
----
Filter
├── output columns: [test.k (#0), test.v (#1)]
├── filters: [rank() OVER (PARTITION BY v ORDER BY v DESC) (#4) = 1, is_true(t1.k (#0) = 12)]
├── estimated rows: 0.00
└── Window
  ├── output columns: [test.k (#0), test.v (#1), rank() OVER (PARTITION BY v ORDER BY v DESC) (#4)]
  ├── aggregate function: [rank]
  ├── partition by: [v]
  ├── order by: [v]
  ├── frame: [Range: Preceding(None) ~ CurrentRow]
  └── UnionAll
    ├── output columns: [test.k (#0), test.v (#1)]
    ├── estimated rows: 0.00
    ├── TableScan
    │   ├── table: default.test_explain_window.test
    │   ├── output columns: [k (#0), v (#1)]
    │   ├── read rows: 0
    │   ├── read bytes: 0
    │   ├── partitions total: 0
    │   ├── partitions scanned: 0
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 0.00
    └── TableScan
      ├── table: default.test_explain_window.test
      ├── output columns: [k (#2), v (#3)]
      ├── read rows: 0
      ├── read bytes: 0
      ├── partitions total: 0
      ├── partitions scanned: 0
      ├── push downs: [filters: [], limit: NONE]
      └── estimated rows: 0.00

statement ok
DROP DATABASE test_explain_window;
