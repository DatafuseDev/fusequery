statement ok
drop table if exists t_lazy

statement ok
create table t_lazy (a int, b float, c string, d tuple(a int, b int), e date)

query T
explain select * from t_lazy order by a desc limit 2
----
EvalScalar
├── expressions: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── estimated rows: 0.00
└── RowFetch
    ├── columns to fetch: [b, c, d, e]
    ├── estimated rows: 0.00
    └── Limit
        ├── limit: 2
        ├── offset: 0
        ├── estimated rows: 0.00
        └── Sort
            ├── sort keys: [a DESC NULLS LAST]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.default.t_lazy
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [], limit: 2]
                ├── output columns: [a, _row_id]
                └── estimated rows: 0.00

query T
explain select * from t_lazy where a > 1 limit 2
----
EvalScalar
├── expressions: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── estimated rows: 0.00
└── RowFetch
    ├── columns to fetch: [b, c, d, e]
    ├── estimated rows: 0.00
    └── Limit
        ├── limit: 2
        ├── offset: 0
        ├── estimated rows: 0.00
        └── Filter
            ├── filters: [t_lazy.a (#0) > 1]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.default.t_lazy
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [t_lazy.a (#0) > 1], limit: NONE]
                ├── output columns: [a, _row_id]
                └── estimated rows: 0.00

query T
explain select * from t_lazy where true limit 2
----
EvalScalar
├── expressions: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── estimated rows: 0.00
└── Limit
    ├── limit: 2
    ├── offset: 0
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t_lazy
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: 2]
        └── estimated rows: 0.00

# ISSUE #11831

statement ok
create table if not exists t_11831 (uid uint64, c1 string, c2 string, time uint64);

query T
explain SELECT * FROM (SELECT * FROM t_11831 WHERE time >= 1686672000000 AND time <= 1686758399000) AS t1 WHERE uid = 11 ORDER BY time DESC LIMIT 10;
----
EvalScalar
├── expressions: [t1.uid (#0), t1.c1 (#1), t1.c2 (#2), t1.time (#3)]
├── estimated rows: 0.00
└── RowFetch
    ├── columns to fetch: [c1, c2]
    ├── estimated rows: 0.00
    └── Limit
        ├── limit: 10
        ├── offset: 0
        ├── estimated rows: 0.00
        └── Sort
            ├── sort keys: [time DESC NULLS LAST]
            ├── estimated rows: 0.00
            └── EvalScalar
                ├── expressions: [t_11831.uid (#0), t_11831.time (#3)]
                ├── estimated rows: 0.00
                └── Filter
                    ├── filters: [t1.uid (#0) = 11, t_11831.time (#3) >= 1686672000000, t_11831.time (#3) <= 1686758399000]
                    ├── estimated rows: 0.00
                    └── TableScan
                        ├── table: default.default.t_11831
                        ├── read rows: 0
                        ├── read bytes: 0
                        ├── partitions total: 0
                        ├── partitions scanned: 0
                        ├── push downs: [filters: [and_filters(CAST(and_filters(CAST(and_filters(CAST(and_filters(CAST(t_11831.time (#3) >= 1686672000000 AS Boolean NULL), CAST(t_11831.time (#3) <= 1686758399000 AS Boolean NULL)) AS Boolean NULL), CAST(t1.uid (#0) = 11 AS Boolean NULL)) AS Boolean NULL), CAST(t_11831.time (#3) >= 1686672000000 AS Boolean NULL)) AS Boolean NULL), CAST(t_11831.time (#3) <= 1686758399000 AS Boolean NULL))], limit: NONE]
                        ├── output columns: [uid, time, _row_id]
                        └── estimated rows: 0.00

statement ok
drop table t_11831

statement ok
set lazy_read_threshold=0

query T
explain select * from t_lazy order by a desc limit 2
----
EvalScalar
├── expressions: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── estimated rows: 0.00
└── Limit
    ├── limit: 2
    ├── offset: 0
    ├── estimated rows: 0.00
    └── Sort
        ├── sort keys: [a DESC NULLS LAST]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t_lazy
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [], limit: 2]
            └── estimated rows: 0.00

query T
explain select * from t_lazy where a > 1 limit 2
----
EvalScalar
├── expressions: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── estimated rows: 0.00
└── Limit
    ├── limit: 2
    ├── offset: 0
    ├── estimated rows: 0.00
    └── Filter
        ├── filters: [t_lazy.a (#0) > 1]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.default.t_lazy
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t_lazy.a (#0) > 1], limit: NONE]
            └── estimated rows: 0.00

query T
explain select * from t_lazy where true limit 2
----
EvalScalar
├── expressions: [t_lazy.a (#0), t_lazy.b (#1), t_lazy.c (#2), t_lazy.d (#3), t_lazy.e (#6)]
├── estimated rows: 0.00
└── Limit
    ├── limit: 2
    ├── offset: 0
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.t_lazy
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: 2]
        └── estimated rows: 0.00

statement ok
drop table t_lazy
