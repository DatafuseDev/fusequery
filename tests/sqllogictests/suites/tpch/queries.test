statement ok
set sandbox_tenant = 'test_tenant';

statement ok
use tpch;

statement ok
analyze table customer

statement ok
analyze table lineitem

statement ok
analyze table nation

statement ok
analyze table orders

statement ok
analyze table partsupp

statement ok
analyze table part

statement ok
analyze table region

statement ok
analyze table supplier

# Q1
query I
select
    l_returnflag,
    l_linestatus,
    sum(l_quantity) as sum_qty,
    sum(l_extendedprice) as sum_base_price,
    sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
    sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
    avg(l_quantity) as avg_qty,
    avg(l_extendedprice) as avg_price,
    avg(l_discount) as avg_disc,
    count(*) as count_order
from
    lineitem
where
        l_shipdate <= add_days(to_date('1998-12-01'), -90)
group by
    l_returnflag,
    l_linestatus
order by
    l_returnflag,
    l_linestatus;
----
A F 3774200.00 5320753880.69 5054096266.6828 5256751331.449234 25.5375 36002.1238 0.0501 147790
N F 95257.00 133737795.84 127132372.6512 132286291.229445 25.3006 35521.3269 0.0493 3765
N O 7459297.00 10512270008.90 9986238338.3847 10385578376.585467 25.5455 36000.9246 0.0500 292000
R F 3785523.00 5337950526.47 5071818532.9420 5274405503.049367 25.5259 35994.0292 0.0499 148301

# Q2
query I
select
    s_acctbal,
    s_name,
    n_name,
    p_partkey,
    p_mfgr,
    s_address,
    s_phone,
    s_comment
from
    part,
    supplier,
    partsupp,
    nation,
    region
where
        p_partkey = ps_partkey
  and s_suppkey = ps_suppkey
  and p_size = 15
  and p_type like '%BRASS'
  and s_nationkey = n_nationkey
  and n_regionkey = r_regionkey
  and r_name = 'EUROPE'
  and ps_supplycost = (
    select
        min(ps_supplycost)
    from
        partsupp,
        supplier,
        nation,
        region
    where
            p_partkey = ps_partkey
      and s_suppkey = ps_suppkey
      and s_nationkey = n_nationkey
      and n_regionkey = r_regionkey
      and r_name = 'EUROPE'
)
order by
    s_acctbal desc,
    n_name,
    s_name,
    p_partkey;
----
9828.21 Supplier#000000647 UNITED KINGDOM 13120 Manufacturer#5 x5U7MBZmwfG9 33-258-202-4782 s the slyly even ideas poach fluffily
9508.37 Supplier#000000070 FRANCE 3563 Manufacturer#1 INWNH2w,OOWgNDq0BRCcBwOMQc6PdFDc4 16-821-608-1166 ests sleep quickly express ideas. ironic ideas haggle about the final T
9508.37 Supplier#000000070 FRANCE 17268 Manufacturer#4 INWNH2w,OOWgNDq0BRCcBwOMQc6PdFDc4 16-821-608-1166 ests sleep quickly express ideas. ironic ideas haggle about the final T
9453.01 Supplier#000000802 ROMANIA 10021 Manufacturer#5 ,6HYXb4uaHITmtMBj4Ak57Pd 29-342-882-6463 gular frets. permanently special multipliers believe blithely alongs
9453.01 Supplier#000000802 ROMANIA 13275 Manufacturer#4 ,6HYXb4uaHITmtMBj4Ak57Pd 29-342-882-6463 gular frets. permanently special multipliers believe blithely alongs
9192.10 Supplier#000000115 UNITED KINGDOM 13325 Manufacturer#1 nJ 2t0f7Ve,wL1,6WzGBJLNBUCKlsV 33-597-248-1220 es across the carefully express accounts boost caref
9032.15 Supplier#000000959 GERMANY 4958 Manufacturer#4 8grA EHBnwOZhO 17-108-642-3106 nding dependencies nag furiou
8702.02 Supplier#000000333 RUSSIA 11810 Manufacturer#3 MaVf XgwPdkiX4nfJGOis8Uu2zKiIZH 32-508-202-6136 oss the deposits cajole carefully even pinto beans. regular foxes detect alo
8615.50 Supplier#000000812 FRANCE 10551 Manufacturer#2 8qh4tezyScl5bidLAysvutB,,ZI2dn6xP 16-585-724-6633 y quickly regular deposits? quickly pending packages after the caref
8615.50 Supplier#000000812 FRANCE 13811 Manufacturer#4 8qh4tezyScl5bidLAysvutB,,ZI2dn6xP 16-585-724-6633 y quickly regular deposits? quickly pending packages after the caref
8488.53 Supplier#000000367 RUSSIA 6854 Manufacturer#4 E Sv9brQVf43Mzz 32-458-198-9557 ages. carefully final excuses nag finally. carefully ironic deposits abov
8430.52 Supplier#000000646 FRANCE 11384 Manufacturer#3 IUzsmT,2oBgjhWP2TlXTL6IkJH,4h,1SJRt 16-601-220-5489 ites among the always final ideas kindle according to the theodolites. notornis in
8271.39 Supplier#000000146 RUSSIA 4637 Manufacturer#5 rBDNgCr04x0sfdzD5,gFOutCiG2 32-792-619-3155 s cajole quickly special requests. quickly enticing theodolites h
8096.98 Supplier#000000574 RUSSIA 323 Manufacturer#4 2O8 sy9g2mlBOuEjzj0pA2pevk, 32-866-246-8752 ully after the regular requests. slyly final dependencies wake slyly along the busy deposit
7392.78 Supplier#000000170 UNITED KINGDOM 7655 Manufacturer#2 RtsXQ,SunkA XHy9 33-803-340-5398 ake carefully across the quickly
7205.20 Supplier#000000477 GERMANY 10956 Manufacturer#5 VtaNKN5Mqui5yh7j2ldd5waf 17-180-144-7991  excuses wake express deposits. furiously careful asymptotes according to the carefull
6820.35 Supplier#000000007 UNITED KINGDOM 13217 Manufacturer#5 s,4TicNGB4uO6PaSqNBUq 33-990-965-2201 s unwind silently furiously regular courts. final requests are deposits. requests wake quietly blit
6721.70 Supplier#000000954 FRANCE 4191 Manufacturer#3 P3O5p UFz1QsLmZX 16-537-341-8517 ect blithely blithely final acco
6329.90 Supplier#000000996 GERMANY 10735 Manufacturer#2 Wx4dQwOAwWjfSCGupfrM 17-447-811-3282  ironic forges cajole blithely agai
6173.87 Supplier#000000408 RUSSIA 18139 Manufacturer#1 qcor1u,vJXAokjnL5,dilyYNmh 32-858-724-2950 blithely pending packages cajole furiously slyly pending notornis. slyly final
5364.99 Supplier#000000785 RUSSIA 13784 Manufacturer#4 W VkHBpQyD3qjQjWGpWicOpmILFehmEdWy67kUGY 32-297-653-2203  packages boost carefully. express ideas along
5069.27 Supplier#000000328 GERMANY 16327 Manufacturer#1 SMm24d WG62 17-231-513-5721 he unusual ideas. slyly final packages a
4941.88 Supplier#000000321 ROMANIA 7320 Manufacturer#5 pLngFl5yeMcHyov 29-573-279-1406 y final requests impress s
4672.25 Supplier#000000239 RUSSIA 12238 Manufacturer#1 XO101kgHrJagK2FL1U6QCaTE ncCsMbeuTgK6o8 32-396-654-6826 arls wake furiously deposits. even, regular depen
4586.49 Supplier#000000680 RUSSIA 5679 Manufacturer#3 UhvDfdEfJh,Qbe7VZb8uSGO2TU 0jEa6nXZXE 32-522-382-1620  the regularly regular dependencies. carefully bold excuses under th
4518.31 Supplier#000000149 FRANCE 18344 Manufacturer#5 pVyWsjOidpHKp4NfKU4yLeym 16-660-553-2456 ts detect along the foxes. final Tiresias are. idly pending deposits haggle; even, blithe pin
4315.15 Supplier#000000509 FRANCE 18972 Manufacturer#2 SF7dR8V5pK 16-298-154-3365 ronic orbits are furiously across the requests. quickly express ideas across the special, bold
3526.53 Supplier#000000553 FRANCE 8036 Manufacturer#4 a,liVofXbCJ 16-599-552-3755 lar dinos nag slyly brave
3526.53 Supplier#000000553 FRANCE 17018 Manufacturer#3 a,liVofXbCJ 16-599-552-3755 lar dinos nag slyly brave
3294.68 Supplier#000000350 GERMANY 4841 Manufacturer#4 KIFxV73eovmwhh 17-113-181-4017 e slyly special foxes. furiously unusual deposits detect carefully carefully ruthless foxes. quick
2972.26 Supplier#000000016 RUSSIA 1015 Manufacturer#4 YjP5C55zHDXL7LalK27zfQnwejdpin4AMpvh 32-822-502-4215 ously express ideas haggle quickly dugouts? fu
2963.09 Supplier#000000840 ROMANIA 3080 Manufacturer#2 iYzUIypKhC0Y 29-781-337-5584 eep blithely regular dependencies. blithely regular platelets sublate alongside o
2221.25 Supplier#000000771 ROMANIA 13981 Manufacturer#2 lwZ I15rq9kmZXUNhl 29-986-304-9006 nal foxes eat slyly about the fluffily permanent id
1381.97 Supplier#000000104 FRANCE 18103 Manufacturer#3 Dcl4yGrzqv3OPeRO49bKh78XmQEDR7PBXIs0m 16-434-972-6922 gular ideas. bravely bold deposits haggle through the carefully final deposits. slyly unusual idea
906.07 Supplier#000000138 ROMANIA 8363 Manufacturer#4 utbplAm g7RmxVfYoNdhcrQGWuzRqPe0qHSwbKw 29-533-434-6776 ickly unusual requests cajole. accounts above the furiously special excuses
765.69 Supplier#000000799 RUSSIA 11276 Manufacturer#2 jwFN7ZB3T9sMF 32-579-339-1495 nusual requests. furiously unusual epitaphs integrate. slyly
727.89 Supplier#000000470 ROMANIA 6213 Manufacturer#3 XckbzsAgBLbUkdfjgJEPjmUMTM8ebSMEvI 29-165-289-1523 gular excuses. furiously regular excuses sleep slyly caref
683.07 Supplier#000000651 RUSSIA 4888 Manufacturer#4 oWekiBV6s,1g 32-181-426-4490 ly regular requests cajole abou
167.56 Supplier#000000290 FRANCE 2037 Manufacturer#1 6Bk06GVtwZaKqg01 16-675-286-5102  the theodolites. ironic, ironic deposits above
91.39 Supplier#000000949 UNITED KINGDOM 9430 Manufacturer#2 a,UE,6nRVl2fCphkOoetR1ajIzAEJ1Aa1G1HV 33-332-697-2768 pinto beans. carefully express requests hagg
-314.06 Supplier#000000510 ROMANIA 17242 Manufacturer#4 VmXQl ,vY8JiEseo8Mv4zscvNCfsY 29-207-852-3454  bold deposits. carefully even d
-820.89 Supplier#000000409 GERMANY 2156 Manufacturer#5 LyXUYFz7aXrvy65kKAbTatGzGS,NDBcdtD 17-719-517-9836 y final, slow theodolites. furiously regular req
-845.44 Supplier#000000704 ROMANIA 9926 Manufacturer#5 hQvlBqbqqnA5Dgo1BffRBX78tkkRu 29-300-896-5991 ctions. carefully sly requ
-942.73 Supplier#000000563 GERMANY 5797 Manufacturer#1 Rc7U1cRUhYs03JD 17-108-537-2691 slyly furiously final decoys; silent, special realms poach f

# Q3
query I
select
    l_orderkey,
    sum(l_extendedprice * (1 - l_discount)) as revenue,
    o_orderdate,
    o_shippriority
from
    customer,
    orders,
    lineitem
where
        c_mktsegment = 'BUILDING'
  and c_custkey = o_custkey
  and l_orderkey = o_orderkey
  and o_orderdate < to_date('1995-03-15')
  and l_shipdate > to_date('1995-03-15')
group by
    l_orderkey,
    o_orderdate,
    o_shippriority
order by
    revenue desc,
    o_orderdate
limit 5;
----
223140 355369.0698 1995-03-14 0
584291 354494.7318 1995-02-21 0
405063 353125.4577 1995-03-03 0
573861 351238.2770 1995-03-09 0
554757 349181.7426 1995-03-14 0

# Q4
query I
select
    o_orderpriority,
    count(*) as order_count
from
    orders
where
        o_orderdate >= to_date('1993-07-01')
  and o_orderdate < add_months(to_date('1993-07-01'), 3)
  and exists (
        select
            *
        from
            lineitem
        where
                l_orderkey = o_orderkey
          and l_commitdate < l_receiptdate
    )
group by
    o_orderpriority
order by
    o_orderpriority;
----
1-URGENT 999
2-HIGH 997
3-MEDIUM 1031
4-NOT SPECIFIED 989
5-LOW 1077

# Q5
query I
select
    n_name,
    ceil(sum(l_extendedprice * (1 - l_discount)) / 10) as revenue
from
    customer,
    orders,
    lineitem,
    supplier,
    nation,
    region
where
        c_custkey = o_custkey
  and l_orderkey = o_orderkey
  and l_suppkey = s_suppkey
  and c_nationkey = s_nationkey
  and s_nationkey = n_nationkey
  and n_regionkey = r_regionkey
  and r_name = 'ASIA'
  and o_orderdate >= to_date('1994-01-01')
  and o_orderdate < add_years(to_date('1994-01-01'), 1)
group by
    n_name
order by
    revenue desc;
----
CHINA 782211.0
INDIA 637613.0
JAPAN 600008.0
INDONESIA 558048.0
VIETNAM 449785.0

# Q6
query I
select
   truncate(sum(l_extendedprice * l_discount),3) as revenue
from
   lineitem
where
   l_shipdate >= '1994-01-01'
   and l_shipdate < date_add(year, 1, to_date('1994-01-01'))
   and l_discount between 0.05 and 0.07
   and l_quantity < 24;
----
11803420.0

# Q7
query I
select
    supp_nation,
    cust_nation,
    l_year,
    truncate(sum(volume),3) as revenue
from
    (
        select
            n1.n_name as supp_nation,
            n2.n_name as cust_nation,
            extract(year from l_shipdate) as l_year,
            l_extendedprice * (1 - l_discount) as volume
        from
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2
        where
                s_suppkey = l_suppkey
          and o_orderkey = l_orderkey
          and c_custkey = o_custkey
          and s_nationkey = n1.n_nationkey
          and c_nationkey = n2.n_nationkey
          and (
                (n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
                or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')
            )
          and l_shipdate between to_date('1995-01-01') and to_date('1996-12-31')
    ) as shipping
group by
    supp_nation,
    cust_nation,
    l_year
order by
    supp_nation,
    cust_nation,
    l_year;
----
FRANCE GERMANY 1995 4637235.0
FRANCE GERMANY 1996 5224780.0
GERMANY FRANCE 1995 6232819.0
GERMANY FRANCE 1996 5557312.5

# Q8
query I
select
    o_year,
    truncate(sum(case
            when nation = 'BRAZIL' then volume
            else 0
        end) / sum(volume),8) as mkt_share
from
    (
        select
            extract(year from o_orderdate) as o_year,
            l_extendedprice * (1 - l_discount) as volume,
            n2.n_name as nation
        from
            part,
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2,
            region
        where
                p_partkey = l_partkey
          and s_suppkey = l_suppkey
          and l_orderkey = o_orderkey
          and o_custkey = c_custkey
          and c_nationkey = n1.n_nationkey
          and n1.n_regionkey = r_regionkey
          and r_name = 'AMERICA'
          and s_nationkey = n2.n_nationkey
          and o_orderdate between to_date('1995-01-01') and to_date('1996-12-31')
          and p_type = 'ECONOMY ANODIZED STEEL'
    ) as all_nations
group by
    o_year
order by
    o_year;
----
1995 0.02864874
1996 0.01825027

# Q9
query I
select
    nation,
    o_year,
    truncate(truncate(sum(amount),0)/10, 0) as sum_profit
from
    (
        select
            n_name as nation,
            extract(year from o_orderdate) as o_year,
            truncate(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity, 100) as amount
        from
            part,
            supplier,
            lineitem,
            partsupp,
            orders,
            nation
        where
                s_suppkey = l_suppkey
          and ps_suppkey = l_suppkey
          and ps_partkey = l_partkey
          and p_partkey = l_partkey
          and o_orderkey = l_orderkey
          and s_nationkey = n_nationkey
          and p_name like '%green%'
    ) as profit
group by
    nation,
    o_year
order by
    sum_profit
limit 5;
----
MOZAMBIQUE 1998 162042.0
JORDAN 1998 181148.0
MOROCCO 1998 181533.0
JAPAN 1998 184953.0
VIETNAM 1998 192431.0

# Q10
query I
select
    c_custkey,
    c_name,
    TRUNCATE(sum(l_extendedprice * (1 - l_discount)), 3) as revenue,
    c_acctbal,
    n_name,
    c_address,
    c_phone,
    c_comment
from
    customer,
    orders,
    lineitem,
    nation
where
        c_custkey = o_custkey
  and l_orderkey = o_orderkey
  and o_orderdate >= to_date('1993-10-01')
  and o_orderdate < add_months(to_date('1993-10-01'), 3)
  and l_returnflag = 'R'
  and c_nationkey = n_nationkey
group by
    c_custkey,
    c_name,
    c_acctbal,
    c_phone,
    n_name,
    c_address,
    c_comment
order by
    revenue desc limit 5;
----
8242 Customer#000008242 622786.687 6322.09 ETHIOPIA P2n4nJhy,UqSo2s43YfSvYJDZ6lk 15-792-676-1184 slyly regular packages haggle carefully ironic ideas. courts are furiously. furiously unusual theodolites cajole. i
7714 Customer#000007714 557400.312 9799.98 IRAN SnnIGB,SkmnWpX3 20-922-418-6024 arhorses according to the blithely express re
11032 Customer#000011032 512500.937 8496.93 UNITED KINGDOM WIKHC7K3Cn7156iNOyfVG3cZ7YqkgsR,Ly 33-102-772-3533 posits-- furiously ironic accounts are again
2455 Customer#000002455 481592.437 2070.99 GERMANY RVn1ZSRtLqPlJLIZxvpmsbgC02 17-946-225-9977 al asymptotes. finally ironic accounts cajole furiously. permanently unusual theodolites aro
12106 Customer#000012106 479414.218 5342.11 UNITED STATES wth3twOmu6vy 34-905-346-4472 ly after the blithely regular foxes. accounts haggle carefully alongside of the blithely even ideas.

# Q11
query I
select
    ps_partkey,
    sum(ps_supplycost * ps_availqty) as value
from
    partsupp,
    supplier,
    nation
where
    ps_suppkey = s_suppkey
  and s_nationkey = n_nationkey
  and n_name = 'GERMANY'
group by
    ps_partkey having
    sum(ps_supplycost * ps_availqty) > (
    select
    sum(ps_supplycost * ps_availqty) * 0.000002
    from
    partsupp,
    supplier,
    nation
    where
    ps_suppkey = s_suppkey
                  and s_nationkey = n_nationkey
                  and n_name = 'GERMANY'
    )
order by
    value desc limit 100;
----
12098 16227681.21
5134 15709338.52
13334 15023662.41
17052 14351644.20
3452 14070870.14
12552 13332469.18
1084 13170428.29
5797 13038622.72
12633 12892561.61
403 12856217.34
1833 12024581.72
2084 11502875.36
17349 11354213.05
18427 11282385.24
2860 11262529.95
17852 10934711.93
9871 10889253.68
12231 10841131.39
6366 10759786.81
12146 10257362.66
5043 10226395.88
12969 10125777.93
1504 10004397.08
14327 9981697.08
134 9965150.66
6860 9805871.26
10624 9776138.40
15819 9775705.31
3293 9674928.12
19865 9653766.83
8870 9648981.87
15778 9636332.82
12360 9635023.92
14389 9475588.34
3257 9451029.24
9476 9435207.28
19629 9391236.40
7179 9386222.25
15723 9383900.80
4054 9313810.02
2380 9307751.22
19084 9302916.80
4703 9280804.80
18791 9267017.97
19994 9235972.92
9149 9121803.90
15118 9120819.50
6116 9079369.20
7052 9077468.92
14147 9069193.78
7305 9035228.53
9130 9024379.25
16698 8991337.95
1553 8977226.10
16777 8961355.62
1402 8953779.12
18963 8934063.40
8358 8930611.48
17547 8860117.00
5128 8844222.75
17063 8840649.60
15490 8833581.40
14761 8817240.56
19601 8791341.02
16160 8740262.76
13597 8702669.82
13653 8693170.16
16383 8691505.92
325 8667741.28
8879 8667584.38
10564 8667098.22
17429 8661827.90
17403 8643350.30
18294 8616583.43
4181 8592684.66
13008 8567480.64
13211 8537000.01
1884 8532644.34
11101 8530945.32
11562 8528028.57
15878 8523591.84
834 8522135.27
2423 8517902.85
15383 8513433.11
18119 8507611.80
7389 8506099.20
5016 8489784.15
17473 8444766.24
6669 8428618.46
384 8418472.27
12052 8411519.28
17562 8409022.83
8128 8379149.47
13813 8374830.84
12800 8318626.78
10887 8315019.36
1644 8285453.08
16638 8274568.00
1394 8255140.60
7219 8254985.30

# Q12
query I
select
    l_shipmode,
    sum(case
            when o_orderpriority = '1-URGENT'
                or o_orderpriority = '2-HIGH'
                then 1
            else 0
        end) as high_line_count,
    sum(case
            when o_orderpriority <> '1-URGENT'
                and o_orderpriority <> '2-HIGH'
                then 1
            else 0
        end) as low_line_count
from
    orders,
    lineitem
where
        o_orderkey = l_orderkey
  and l_shipmode in ('MAIL', 'SHIP')
  and l_commitdate < l_receiptdate
  and l_shipdate < l_commitdate
  and l_receiptdate >= to_date('1994-01-01')
  and l_receiptdate < date_add(year, 1, to_date('1994-01-01'))
group by
    l_shipmode
order by
    l_shipmode;
----
MAIL 647 945
SHIP 620 943

# Q13
query I
select
    c_count,
    count(*) as custdist
from
    (
        select
            c_custkey,
            count(o_orderkey) as c_count
        from
            customer
                left outer join
            orders
            on c_custkey = o_custkey
                and o_comment not like '%pending%deposits%'
        group by
            c_custkey
    )
        c_orders
group by
    c_count
order by
    custdist desc,
    c_count desc;
----
0 5000
10 676
9 651
11 618
12 554
8 548
13 514
7 487
19 485
18 461
14 454
20 444
16 442
17 438
15 430
21 396
22 378
6 355
23 322
24 262
25 188
5 184
26 162
27 138
28 103
4 92
29 59
3 49
30 29
31 26
32 19
2 12
33 8
34 7
35 5
1 3
36 1

# Q14
query I
select
            TRUNCATE(100.00 * sum(case
                             when p_type like 'PROMO%'
                                 then l_extendedprice * (1 - l_discount)
                             else 0
            end) / sum(l_extendedprice * (1 - l_discount)), 5) as promo_revenue
from
    lineitem,
    part
where
        l_partkey = p_partkey
  and l_shipdate >= to_date('1995-09-01')
  and l_shipdate < add_months(to_date('1995-09-01'), 1);
----
16.28385

# Q15
query I
with revenue as (
    select
        l_suppkey as supplier_no,
        truncate(sum(l_extendedprice * (1 - l_discount)), 2) as total_revenue
    from
        lineitem
    where
            l_shipdate >= to_date ('1996-01-01')
      and l_shipdate < to_date ('1996-04-01')
    group by
        l_suppkey)
select
    s_suppkey,
    s_name,
    s_address,
    s_phone,
    total_revenue
from
    supplier,
    revenue
where
        s_suppkey = supplier_no
  and total_revenue = (
    select
        max(total_revenue)
    from
        revenue
)
order by
    s_suppkey;
----
677 Supplier#000000677 8mhrffG7D2WJBSQbOGstQ 23-290-639-3315 1614410.37

# Q16
query I
select
    p_brand,
    p_type,
    p_size,
    count(distinct ps_suppkey) as supplier_cnt
from
    partsupp,
    part
where
        p_partkey = ps_partkey
  and p_brand <> 'Brand#45'
  and p_type not like 'MEDIUM POLISHED%'
  and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
  and ps_suppkey not in (
    select
        s_suppkey
    from
        supplier
    where
            s_comment like '%Customer%Complaints%'
)
group by
    p_brand,
    p_type,
    p_size
order by
    supplier_cnt desc,
    p_brand,
    p_type,
    p_size
limit 20;
----
Brand#14 SMALL ANODIZED NICKEL 45 12
Brand#22 SMALL BURNISHED BRASS 19 12
Brand#25 PROMO POLISHED COPPER 14 12
Brand#35 LARGE ANODIZED STEEL 45 12
Brand#35 PROMO BRUSHED COPPER 9 12
Brand#51 ECONOMY ANODIZED STEEL 9 12
Brand#53 LARGE BRUSHED NICKEL 45 12
Brand#11 ECONOMY POLISHED COPPER 14 8
Brand#11 LARGE PLATED STEEL 23 8
Brand#11 PROMO POLISHED STEEL 23 8
Brand#11 STANDARD ANODIZED COPPER 9 8
Brand#12 ECONOMY BURNISHED BRASS 9 8
Brand#12 LARGE ANODIZED BRASS 14 8
Brand#12 SMALL ANODIZED TIN 23 8
Brand#12 SMALL BRUSHED NICKEL 23 8
Brand#12 STANDARD ANODIZED BRASS 3 8
Brand#12 STANDARD BURNISHED TIN 23 8
Brand#13 ECONOMY POLISHED BRASS 9 8
Brand#13 LARGE BURNISHED COPPER 45 8
Brand#13 MEDIUM ANODIZED STEEL 23 8

#Q17
query I
select
        truncate(sum(l_extendedprice) / 7.0,8) as avg_yearly
from
    lineitem,
    part
where
        p_partkey = l_partkey
  and p_brand = 'Brand#23'
  and p_container = 'MED BOX'
  and l_quantity < (
    select
            0.2 * avg(l_quantity)
    from
        lineitem
    where
            l_partkey = p_partkey
);
----
23512.75195312

#Q18
query I
select
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice,
    sum(l_quantity)
from
    customer,
    orders,
    lineitem
where
        o_orderkey in (
        select
            l_orderkey
        from
            lineitem
        group by
            l_orderkey having
                sum(l_quantity) > 300
    )
  and c_custkey = o_custkey
  and o_orderkey = l_orderkey
group by
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice
order by
    o_totalprice desc,
    o_orderdate;
----
Customer#000001639 1639 502886 1994-04-12 456423.88 312.00
Customer#000006655 6655 29158 1995-10-21 452805.02 305.00
Customer#000014110 14110 565574 1995-09-24 425099.85 301.00
Customer#000001775 1775 6882 1997-04-09 408368.10 303.00
Customer#000011459 11459 551136 1993-05-19 386812.74 308.00

# Q19
query I
select
    truncate(sum(l_extendedprice* (1 - l_discount)),3) as revenue
from
    lineitem,
    part
where
    (
                p_partkey = l_partkey
            and p_brand = 'Brand#52'
            and p_container in
                (
                 'SM CASE',
                 'SM BOX',
                 'SM PACK',
                 'SM PKG'
                    )
            and l_quantity >= 4
            and l_quantity <= 4 + 10
            and p_size between 1 and 5
            and l_shipmode in
                (
                 'AIR',
                 'AIR REG'
                    )
            and l_shipinstruct = 'DELIVER IN PERSON'
        )
   or
    (
                p_partkey = l_partkey
            and p_brand = 'Brand#11'
            and p_container in
                (
                 'MED BAG',
                 'MED BOX',
                 'MED PKG',
                 'MED PACK'
                    )
            and l_quantity >= 18
            and l_quantity <= 18 + 10
            and p_size between 1 and 10
            and l_shipmode in
                (
                 'AIR',
                 'AIR REG'
                    )
            and l_shipinstruct = 'DELIVER IN PERSON'
        )
   or
    (
                p_partkey = l_partkey
            and p_brand = 'Brand#51'
            and p_container in
                (
                 'LG CASE',
                 'LG BOX',
                 'LG PACK',
                 'LG PKG'
                    )
            and l_quantity >= 29
            and l_quantity <= 29 + 10
            and p_size between 1 and 15
            and l_shipmode in
                (
                 'AIR',
                 'AIR REG'
                    )
            and l_shipinstruct = 'DELIVER IN PERSON'
        )
;
----
350370.468

# Q20
query I
select
    s_name,
    s_address
from
    supplier,
    nation
where
        s_suppkey in (
        select
            ps_suppkey
        from
            partsupp
        where
                ps_partkey in (
                select
                    p_partkey
                from
                    part
                where
                        p_name like 'forest%'
            )
          and ps_availqty > (
            select
                    0.5 * sum(l_quantity)
            from
                lineitem
            where
                    l_partkey = ps_partkey
              and l_suppkey = ps_suppkey
              and l_shipdate >= to_date('1994-01-01')
              and l_shipdate < add_years(to_date('1994-01-01'), 1)
        )
    )
  and s_nationkey = n_nationkey
  and n_name = 'CANADA'
order by
    s_name;
----
Supplier#000000157 ,mEGorBfVIm
Supplier#000000197 YC2Acon6kjY3zj3Fbxs2k4Vdf7X0cd2F
Supplier#000000287 7a9SP7qW5Yku5PvSg
Supplier#000000378 FfbhyCxWvcPrO8ltp9
Supplier#000000530 0qwCMwobKY OcmLyfRXlagA8ukENJv,
Supplier#000000555 TfB,a5bfl3Ah 3Z 74GqnNs6zKVGM
Supplier#000000557 jj0wUYh9K3fG5Jhdhrkuy ,4
Supplier#000000729 pqck2ppy758TQpZCUAjPvlU55K3QjfL7Bi
Supplier#000000935 ij98czM 2KzWe7dDTOxB8sq0UfCdvrX

# Q21
query I
select
    s_name,
    truncate(count(*),4) as numwait
from
    supplier,
    lineitem l1,
    orders,
    nation
where
        s_suppkey = l1.l_suppkey
  and o_orderkey = l1.l_orderkey
  and o_orderstatus = 'F'
  and l1.l_receiptdate > l1.l_commitdate
  and exists (
        select
            *
        from
            lineitem l2
        where
                l2.l_orderkey = l1.l_orderkey
          and l2.l_suppkey <> l1.l_suppkey
    )
  and not exists (
        select
            *
        from
            lineitem l3
        where
                l3.l_orderkey = l1.l_orderkey
          and l3.l_suppkey <> l1.l_suppkey
          and l3.l_receiptdate > l3.l_commitdate
    )
  and s_nationkey = n_nationkey
  and n_name = 'SAUDI ARABIA'
group by
    s_name
order by
    numwait desc,
    s_name;
----
Supplier#000000445 16.0
Supplier#000000825 16.0
Supplier#000000709 15.0
Supplier#000000762 15.0
Supplier#000000357 14.0
Supplier#000000399 14.0
Supplier#000000496 14.0
Supplier#000000977 13.0
Supplier#000000144 12.0
Supplier#000000188 12.0
Supplier#000000415 12.0
Supplier#000000472 12.0
Supplier#000000633 12.0
Supplier#000000708 12.0
Supplier#000000889 12.0
Supplier#000000380 11.0
Supplier#000000602 11.0
Supplier#000000659 11.0
Supplier#000000821 11.0
Supplier#000000929 11.0
Supplier#000000262 10.0
Supplier#000000460 10.0
Supplier#000000486 10.0
Supplier#000000669 10.0
Supplier#000000718 10.0
Supplier#000000778 10.0
Supplier#000000167 9.0
Supplier#000000578 9.0
Supplier#000000673 9.0
Supplier#000000687 9.0
Supplier#000000074 8.0
Supplier#000000565 8.0
Supplier#000000648 8.0
Supplier#000000918 8.0
Supplier#000000427 7.0
Supplier#000000503 7.0
Supplier#000000610 7.0
Supplier#000000670 7.0
Supplier#000000811 7.0
Supplier#000000114 6.0
Supplier#000000379 6.0
Supplier#000000436 6.0
Supplier#000000500 6.0
Supplier#000000660 6.0
Supplier#000000788 6.0
Supplier#000000846 6.0
Supplier#000000920 4.0

# Q22
query I
select
    cntrycode,
    count(*) as numcust,
    sum(c_acctbal) as totacctbal
from
    (
        select
            substring(c_phone from 1 for 2) as cntrycode,
            c_acctbal
        from
            customer
        where
                substring(c_phone from 1 for 2) in
                ('13', '31', '23', '29', '30', '18', '17')
          and c_acctbal > (
            select
                avg(c_acctbal)
            from
                customer
            where
                    c_acctbal > 0.00
              and substring(c_phone from 1 for 2) in
                  ('13', '31', '23', '29', '30', '18', '17')
        )
          and not exists (
                select
                    *
                from
                    orders
                where
                        o_custkey = c_custkey
            )
    ) as custsale
group by
    cntrycode
order by
    cntrycode;
----
13 94 714035.05
17 96 722560.15
18 99 738012.52
23 93 708285.25
29 85 632693.46
30 87 646748.02
31 87 647372.50

# Q1
query I
explain select
    l_returnflag,
    l_linestatus,
    sum(l_quantity) as sum_qty,
    sum(l_extendedprice) as sum_base_price,
    sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
    sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
    avg(l_quantity) as avg_qty,
    avg(l_extendedprice) as avg_price,
    avg(l_discount) as avg_disc,
    count(*) as count_order
from
    lineitem
where
        l_shipdate <= add_days(to_date('1998-12-01'), -90)
group by
    l_returnflag,
    l_linestatus
order by
    l_returnflag,
    l_linestatus;
----
EvalScalar
├── expressions: [lineitem.l_returnflag (#8), lineitem.l_linestatus (#9), sum(l_quantity) (#24), sum(l_extendedprice) (#25), sum((l_extendedprice * (1 - l_discount))) (#27), sum(((l_extendedprice * (1 - l_discount)) * (1 + l_tax))) (#29), avg(l_quantity) (#30), avg(l_extendedprice) (#31), avg(l_discount) (#32), COUNT(*) (#33)]
├── estimated rows: 6.00
└── Sort
    ├── sort keys: [l_returnflag ASC NULLS LAST, l_linestatus ASC NULLS LAST]
    ├── estimated rows: 6.00
    └── AggregateFinal
        ├── group by: [l_returnflag, l_linestatus]
        ├── aggregate functions: [sum(l_quantity), sum(l_extendedprice), sum(sum_arg_0), sum(sum_arg_0), avg(l_quantity), avg(l_extendedprice), avg(l_discount), count()]
        ├── estimated rows: 6.00
        └── AggregatePartial
            ├── group by: [l_returnflag, l_linestatus]
            ├── aggregate functions: [sum(l_quantity), sum(l_extendedprice), sum(sum_arg_0), sum(sum_arg_0), avg(l_quantity), avg(l_extendedprice), avg(l_discount), count()]
            ├── estimated rows: 6.00
            └── EvalScalar
                ├── expressions: [lineitem.l_quantity (#4), lineitem.l_extendedprice (#5), lineitem.l_extendedprice (#5) * (1 - lineitem.l_discount (#6)), lineitem.l_extendedprice (#5) * (1 - lineitem.l_discount (#6)) * (1 + lineitem.l_tax (#7)), lineitem.l_quantity (#4), lineitem.l_extendedprice (#5), lineitem.l_discount (#6), lineitem.l_returnflag (#8), lineitem.l_linestatus (#9)]
                ├── estimated rows: 582554.87
                └── Filter
                    ├── filters: [lineitem.l_shipdate (#10) <= '1998-09-02']
                    ├── estimated rows: 582554.87
                    └── TableScan
                        ├── table: default.tpch.lineitem
                        ├── read rows: 600572
                        ├── read bytes: 3701333
                        ├── partitions total: 1
                        ├── partitions scanned: 1
                        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        ├── push downs: [filters: [lineitem.l_shipdate (#10) <= '1998-09-02'], limit: NONE]
                        ├── output columns: [l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate]
                        └── estimated rows: 600572.00

# Q2
query I
explain select
    s_acctbal,
    s_name,
    n_name,
    p_partkey,
    p_mfgr,
    s_address,
    s_phone,
    s_comment
from
    part,
    supplier,
    partsupp,
    nation,
    region
where
        p_partkey = ps_partkey
  and s_suppkey = ps_suppkey
  and p_size = 15
  and p_type like '%BRASS'
  and s_nationkey = n_nationkey
  and n_regionkey = r_regionkey
  and r_name = 'EUROPE'
  and ps_supplycost = (
    select
        min(ps_supplycost)
    from
        partsupp,
        supplier,
        nation,
        region
    where
            p_partkey = ps_partkey
      and s_suppkey = ps_suppkey
      and s_nationkey = n_nationkey
      and n_regionkey = r_regionkey
      and r_name = 'EUROPE'
)
order by
    s_acctbal desc,
    n_name,
    s_name,
    p_partkey;
----
EvalScalar
├── expressions: [part.p_partkey (#0), part.p_mfgr (#2), supplier.s_name (#10), supplier.s_address (#11), supplier.s_phone (#13), supplier.s_acctbal (#14), supplier.s_comment (#15), nation.n_name (#22)]
├── estimated rows: 12.80
└── Sort
    ├── sort keys: [s_acctbal DESC NULLS LAST, n_name ASC NULLS LAST, s_name ASC NULLS LAST, p_partkey ASC NULLS LAST]
    ├── estimated rows: 12.80
    └── Filter
        ├── filters: [is_true(CAST(partsupp.ps_supplycost (#19) AS Decimal(15, 2) NULL) = scalar_subquery_48 (#48))]
        ├── estimated rows: 12.80
        └── HashJoin
            ├── join type: SINGLE
            ├── build keys: [ps_partkey (#28)]
            ├── probe keys: [p_partkey (#0)]
            ├── filters: []
            ├── estimated rows: 64.00
            ├── EvalScalar(Build)
            │   ├── expressions: [min(ps_supplycost) (#47), ps_partkey (#28)]
            │   ├── estimated rows: 16000.00
            │   └── AggregateFinal
            │       ├── group by: [ps_partkey]
            │       ├── aggregate functions: [min(ps_supplycost)]
            │       ├── estimated rows: 16000.00
            │       └── AggregatePartial
            │           ├── group by: [ps_partkey]
            │           ├── aggregate functions: [min(ps_supplycost)]
            │           ├── estimated rows: 16000.00
            │           └── EvalScalar
            │               ├── expressions: [partsupp.ps_supplycost (#31), ps_partkey (#28)]
            │               ├── estimated rows: 16000.00
            │               └── HashJoin
            │                   ├── join type: INNER
            │                   ├── build keys: [supplier.s_suppkey (#33)]
            │                   ├── probe keys: [partsupp.ps_suppkey (#29)]
            │                   ├── filters: []
            │                   ├── estimated rows: 16000.00
            │                   ├── HashJoin(Build)
            │                   │   ├── join type: INNER
            │                   │   ├── build keys: [nation.n_nationkey (#40)]
            │                   │   ├── probe keys: [supplier.s_nationkey (#36)]
            │                   │   ├── filters: []
            │                   │   ├── estimated rows: 200.00
            │                   │   ├── HashJoin(Build)
            │                   │   │   ├── join type: INNER
            │                   │   │   ├── build keys: [region.r_regionkey (#44)]
            │                   │   │   ├── probe keys: [nation.n_regionkey (#42)]
            │                   │   │   ├── filters: []
            │                   │   │   ├── estimated rows: 5.00
            │                   │   │   ├── Filter(Build)
            │                   │   │   │   ├── filters: [region.r_name (#45) = 'EUROPE']
            │                   │   │   │   ├── estimated rows: 1.00
            │                   │   │   │   └── TableScan
            │                   │   │   │       ├── table: default.tpch.region
            │                   │   │   │       ├── read rows: 5
            │                   │   │   │       ├── read bytes: 136
            │                   │   │   │       ├── partitions total: 1
            │                   │   │   │       ├── partitions scanned: 1
            │                   │   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
            │                   │   │   │       ├── push downs: [filters: [region.r_name (#45) = 'EUROPE'], limit: NONE]
            │                   │   │   │       ├── output columns: [r_regionkey, r_name]
            │                   │   │   │       └── estimated rows: 5.00
            │                   │   │   └── TableScan(Probe)
            │                   │   │       ├── table: default.tpch.nation
            │                   │   │       ├── read rows: 25
            │                   │   │       ├── read bytes: 148
            │                   │   │       ├── partitions total: 1
            │                   │   │       ├── partitions scanned: 1
            │                   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            │                   │   │       ├── push downs: [filters: [], limit: NONE]
            │                   │   │       ├── output columns: [n_nationkey, n_regionkey]
            │                   │   │       └── estimated rows: 25.00
            │                   │   └── TableScan(Probe)
            │                   │       ├── table: default.tpch.supplier
            │                   │       ├── read rows: 1000
            │                   │       ├── read bytes: 2728
            │                   │       ├── partitions total: 1
            │                   │       ├── partitions scanned: 1
            │                   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            │                   │       ├── push downs: [filters: [], limit: NONE]
            │                   │       ├── output columns: [s_suppkey, s_nationkey]
            │                   │       └── estimated rows: 1000.00
            │                   └── TableScan(Probe)
            │                       ├── table: default.tpch.partsupp
            │                       ├── read rows: 80000
            │                       ├── read bytes: 347442
            │                       ├── partitions total: 1
            │                       ├── partitions scanned: 1
            │                       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            │                       ├── push downs: [filters: [], limit: NONE]
            │                       ├── output columns: [ps_partkey, ps_suppkey, ps_supplycost]
            │                       └── estimated rows: 80000.00
            └── HashJoin(Probe)
                ├── join type: INNER
                ├── build keys: [supplier.s_suppkey (#9)]
                ├── probe keys: [partsupp.ps_suppkey (#17)]
                ├── filters: []
                ├── estimated rows: 64.00
                ├── HashJoin(Build)
                │   ├── join type: INNER
                │   ├── build keys: [nation.n_nationkey (#21)]
                │   ├── probe keys: [supplier.s_nationkey (#12)]
                │   ├── filters: []
                │   ├── estimated rows: 200.00
                │   ├── HashJoin(Build)
                │   │   ├── join type: INNER
                │   │   ├── build keys: [region.r_regionkey (#25)]
                │   │   ├── probe keys: [nation.n_regionkey (#23)]
                │   │   ├── filters: []
                │   │   ├── estimated rows: 5.00
                │   │   ├── Filter(Build)
                │   │   │   ├── filters: [region.r_name (#26) = 'EUROPE']
                │   │   │   ├── estimated rows: 1.00
                │   │   │   └── TableScan
                │   │   │       ├── table: default.tpch.region
                │   │   │       ├── read rows: 5
                │   │   │       ├── read bytes: 136
                │   │   │       ├── partitions total: 1
                │   │   │       ├── partitions scanned: 1
                │   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                │   │   │       ├── push downs: [filters: [region.r_name (#26) = 'EUROPE'], limit: NONE]
                │   │   │       ├── output columns: [r_regionkey, r_name]
                │   │   │       └── estimated rows: 5.00
                │   │   └── TableScan(Probe)
                │   │       ├── table: default.tpch.nation
                │   │       ├── read rows: 25
                │   │       ├── read bytes: 358
                │   │       ├── partitions total: 1
                │   │       ├── partitions scanned: 1
                │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                │   │       ├── push downs: [filters: [], limit: NONE]
                │   │       ├── output columns: [n_nationkey, n_name, n_regionkey]
                │   │       └── estimated rows: 25.00
                │   └── TableScan(Probe)
                │       ├── table: default.tpch.supplier
                │       ├── read rows: 1000
                │       ├── read bytes: 53974
                │       ├── partitions total: 1
                │       ├── partitions scanned: 1
                │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                │       ├── push downs: [filters: [], limit: NONE]
                │       └── estimated rows: 1000.00
                └── HashJoin(Probe)
                    ├── join type: INNER
                    ├── build keys: [part.p_partkey (#0)]
                    ├── probe keys: [partsupp.ps_partkey (#16)]
                    ├── filters: []
                    ├── estimated rows: 320.00
                    ├── Filter(Build)
                    │   ├── filters: [part.p_size (#5) = 15, like(part.p_type (#4), '%BRASS')]
                    │   ├── estimated rows: 80.00
                    │   └── TableScan
                    │       ├── table: default.tpch.part
                    │       ├── read rows: 20000
                    │       ├── read bytes: 143052
                    │       ├── partitions total: 1
                    │       ├── partitions scanned: 1
                    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                    │       ├── push downs: [filters: [and_filters(CAST(part.p_size (#5) = 15 AS Boolean NULL), CAST(like(part.p_type (#4), '%BRASS') AS Boolean NULL))], limit: NONE]
                    │       ├── output columns: [p_partkey, p_mfgr, p_type, p_size]
                    │       └── estimated rows: 20000.00
                    └── TableScan(Probe)
                        ├── table: default.tpch.partsupp
                        ├── read rows: 80000
                        ├── read bytes: 347442
                        ├── partitions total: 1
                        ├── partitions scanned: 1
                        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        ├── push downs: [filters: [], limit: NONE]
                        ├── output columns: [ps_partkey, ps_suppkey, ps_supplycost]
                        └── estimated rows: 80000.00

# Q3
query I
explain select
    l_orderkey,
    sum(l_extendedprice * (1 - l_discount)) as revenue,
    o_orderdate,
    o_shippriority
from
    customer,
    orders,
    lineitem
where
        c_mktsegment = 'BUILDING'
  and c_custkey = o_custkey
  and l_orderkey = o_orderkey
  and o_orderdate < to_date('1995-03-15')
  and l_shipdate > to_date('1995-03-15')
group by
    l_orderkey,
    o_orderdate,
    o_shippriority
order by
    revenue desc,
    o_orderdate
limit 5;
----
EvalScalar
├── expressions: [orders.o_orderdate (#12), orders.o_shippriority (#15), lineitem.l_orderkey (#17)]
├── estimated rows: 5.00
└── Limit
    ├── limit: 5
    ├── offset: 0
    ├── estimated rows: 5.00
    └── Sort
        ├── sort keys: [revenue DESC NULLS LAST, o_orderdate ASC NULLS LAST]
        ├── estimated rows: 93710.00
        └── EvalScalar
            ├── expressions: [sum((l_extendedprice * (1 - l_discount))) (#46)]
            ├── estimated rows: 93710.00
            └── AggregateFinal
                ├── group by: [l_orderkey, o_orderdate, o_shippriority]
                ├── aggregate functions: [sum(sum((l_extendedprice * (1 - l_discount))))]
                ├── estimated rows: 93710.00
                └── AggregatePartial
                    ├── group by: [l_orderkey, o_orderdate, o_shippriority]
                    ├── aggregate functions: [sum(sum((l_extendedprice * (1 - l_discount))))]
                    ├── estimated rows: 93710.00
                    └── HashJoin
                        ├── join type: INNER
                        ├── build keys: [lineitem.l_orderkey (#17)]
                        ├── probe keys: [orders.o_orderkey (#8)]
                        ├── filters: []
                        ├── estimated rows: 93710.00
                        ├── AggregateFinal(Build)
                        │   ├── group by: [l_orderkey]
                        │   ├── aggregate functions: [sum(sum_arg_0)]
                        │   ├── estimated rows: 43740.00
                        │   └── AggregatePartial
                        │       ├── group by: [l_orderkey]
                        │       ├── aggregate functions: [sum(sum_arg_0)]
                        │       ├── estimated rows: 43740.00
                        │       └── EvalScalar
                        │           ├── expressions: [lineitem.l_extendedprice (#22) * (1 - lineitem.l_discount (#23)), lineitem.l_orderkey (#17)]
                        │           ├── estimated rows: 324308.34
                        │           └── Filter
                        │               ├── filters: [lineitem.l_shipdate (#27) > '1995-03-15']
                        │               ├── estimated rows: 324308.34
                        │               └── TableScan
                        │                   ├── table: default.tpch.lineitem
                        │                   ├── read rows: 600572
                        │                   ├── read bytes: 3878051
                        │                   ├── partitions total: 1
                        │                   ├── partitions scanned: 1
                        │                   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        │                   ├── push downs: [filters: [lineitem.l_shipdate (#27) > '1995-03-15'], limit: NONE]
                        │                   ├── output columns: [l_orderkey, l_extendedprice, l_discount, l_shipdate]
                        │                   └── estimated rows: 600572.00
                        └── HashJoin(Probe)
                            ├── join type: INNER
                            ├── build keys: [customer.c_custkey (#0)]
                            ├── probe keys: [orders.o_custkey (#9)]
                            ├── filters: []
                            ├── estimated rows: 93710.00
                            ├── Filter(Build)
                            │   ├── filters: [customer.c_mktsegment (#6) = 'BUILDING']
                            │   ├── estimated rows: 3000.00
                            │   └── TableScan
                            │       ├── table: default.tpch.customer
                            │       ├── read rows: 15000
                            │       ├── read bytes: 47697
                            │       ├── partitions total: 1
                            │       ├── partitions scanned: 1
                            │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                            │       ├── push downs: [filters: [customer.c_mktsegment (#6) = 'BUILDING'], limit: NONE]
                            │       ├── output columns: [c_custkey, c_mktsegment]
                            │       └── estimated rows: 15000.00
                            └── Filter(Probe)
                                ├── filters: [orders.o_orderdate (#12) < '1995-03-15']
                                ├── estimated rows: 72000.52
                                └── TableScan
                                    ├── table: default.tpch.orders
                                    ├── read rows: 150000
                                    ├── read bytes: 782008
                                    ├── partitions total: 1
                                    ├── partitions scanned: 1
                                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                    ├── push downs: [filters: [orders.o_orderdate (#12) < '1995-03-15'], limit: NONE]
                                    ├── output columns: [o_orderkey, o_custkey, o_orderdate, o_shippriority]
                                    └── estimated rows: 150000.00

# Q4
query I
explain select
    o_orderpriority,
    count(*) as order_count
from
    orders
where
        o_orderdate >= to_date('1993-07-01')
  and o_orderdate < add_months(to_date('1993-07-01'), 3)
  and exists (
        select
            *
        from
            lineitem
        where
                l_orderkey = o_orderkey
          and l_commitdate < l_receiptdate
    )
group by
    o_orderpriority
order by
    o_orderpriority;
----
EvalScalar
├── expressions: [orders.o_orderpriority (#5), COUNT(*) (#10)]
├── estimated rows: 1.00
└── Sort
    ├── sort keys: [o_orderpriority ASC NULLS LAST]
    ├── estimated rows: 1.00
    └── AggregateFinal
        ├── group by: [o_orderpriority]
        ├── aggregate functions: [count()]
        ├── estimated rows: 1.00
        └── AggregatePartial
            ├── group by: [o_orderpriority]
            ├── aggregate functions: [count()]
            ├── estimated rows: 1.00
            └── EvalScalar
                ├── expressions: [orders.o_orderpriority (#5)]
                ├── estimated rows: 4680.93
                └── HashJoin
                    ├── join type: RIGHT SEMI
                    ├── build keys: [orders.o_orderkey (#0)]
                    ├── probe keys: [lineitem.l_orderkey (#11)]
                    ├── filters: []
                    ├── estimated rows: 4680.93
                    ├── Filter(Build)
                    │   ├── filters: [orders.o_orderdate (#4) >= '1993-07-01', orders.o_orderdate (#4) < '1993-10-01']
                    │   ├── estimated rows: 4680.93
                    │   └── TableScan
                    │       ├── table: default.tpch.orders
                    │       ├── read rows: 150000
                    │       ├── read bytes: 600177
                    │       ├── partitions total: 1
                    │       ├── partitions scanned: 1
                    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                    │       ├── push downs: [filters: [and_filters(CAST(orders.o_orderdate (#4) >= '1993-07-01' AS Boolean NULL), CAST(orders.o_orderdate (#4) < '1993-10-01' AS Boolean NULL))], limit: NONE]
                    │       ├── output columns: [o_orderkey, o_orderdate, o_orderpriority]
                    │       └── estimated rows: 150000.00
                    └── EvalScalar(Probe)
                        ├── expressions: [lineitem.l_orderkey (#11), lineitem.l_orderkey (#11)]
                        ├── estimated rows: 120114.40
                        └── Filter
                            ├── filters: [lineitem.l_commitdate (#22) < lineitem.l_receiptdate (#23)]
                            ├── estimated rows: 120114.40
                            └── TableScan
                                ├── table: default.tpch.lineitem
                                ├── read rows: 600572
                                ├── read bytes: 2865037
                                ├── partitions total: 1
                                ├── partitions scanned: 1
                                ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                ├── push downs: [filters: [lineitem.l_commitdate (#22) < lineitem.l_receiptdate (#23)], limit: NONE]
                                ├── output columns: [l_orderkey, l_commitdate, l_receiptdate]
                                └── estimated rows: 600572.00

# Q5
query I
explain select
    n_name,
    ceil(sum(l_extendedprice * (1 - l_discount)) / 10) as revenue
from
    customer,
    orders,
    lineitem,
    supplier,
    nation,
    region
where
        c_custkey = o_custkey
  and l_orderkey = o_orderkey
  and l_suppkey = s_suppkey
  and c_nationkey = s_nationkey
  and s_nationkey = n_nationkey
  and n_regionkey = r_regionkey
  and r_name = 'ASIA'
  and o_orderdate >= to_date('1994-01-01')
  and o_orderdate < add_years(to_date('1994-01-01'), 1)
group by
    n_name
order by
    revenue desc;
----
EvalScalar
├── expressions: [nation.n_name (#41)]
├── estimated rows: 25.00
└── Sort
    ├── sort keys: [revenue DESC NULLS LAST]
    ├── estimated rows: 25.00
    └── EvalScalar
        ├── expressions: [ceil(CAST(sum((l_extendedprice * (1 - l_discount))) (#49) / 10 AS Float32 NULL))]
        ├── estimated rows: 25.00
        └── AggregateFinal
            ├── group by: [n_name]
            ├── aggregate functions: [sum(sum_arg_0)]
            ├── estimated rows: 25.00
            └── AggregatePartial
                ├── group by: [n_name]
                ├── aggregate functions: [sum(sum_arg_0)]
                ├── estimated rows: 25.00
                └── EvalScalar
                    ├── expressions: [lineitem.l_extendedprice (#22) * (1 - lineitem.l_discount (#23)), nation.n_name (#41)]
                    ├── estimated rows: 17657.33
                    └── HashJoin
                        ├── join type: INNER
                        ├── build keys: [customer.c_nationkey (#3), customer.c_custkey (#0)]
                        ├── probe keys: [supplier.s_nationkey (#36), orders.o_custkey (#9)]
                        ├── filters: []
                        ├── estimated rows: 17657.33
                        ├── TableScan(Build)
                        │   ├── table: default.tpch.customer
                        │   ├── read rows: 15000
                        │   ├── read bytes: 43142
                        │   ├── partitions total: 1
                        │   ├── partitions scanned: 1
                        │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        │   ├── push downs: [filters: [], limit: NONE]
                        │   ├── output columns: [c_custkey, c_nationkey]
                        │   └── estimated rows: 15000.00
                        └── HashJoin(Probe)
                            ├── join type: INNER
                            ├── build keys: [supplier.s_suppkey (#33)]
                            ├── probe keys: [lineitem.l_suppkey (#19)]
                            ├── filters: []
                            ├── estimated rows: 17657.33
                            ├── HashJoin(Build)
                            │   ├── join type: INNER
                            │   ├── build keys: [nation.n_nationkey (#40)]
                            │   ├── probe keys: [supplier.s_nationkey (#36)]
                            │   ├── filters: []
                            │   ├── estimated rows: 200.00
                            │   ├── HashJoin(Build)
                            │   │   ├── join type: INNER
                            │   │   ├── build keys: [region.r_regionkey (#44)]
                            │   │   ├── probe keys: [nation.n_regionkey (#42)]
                            │   │   ├── filters: []
                            │   │   ├── estimated rows: 5.00
                            │   │   ├── Filter(Build)
                            │   │   │   ├── filters: [region.r_name (#45) = 'ASIA']
                            │   │   │   ├── estimated rows: 1.00
                            │   │   │   └── TableScan
                            │   │   │       ├── table: default.tpch.region
                            │   │   │       ├── read rows: 5
                            │   │   │       ├── read bytes: 136
                            │   │   │       ├── partitions total: 1
                            │   │   │       ├── partitions scanned: 1
                            │   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                            │   │   │       ├── push downs: [filters: [region.r_name (#45) = 'ASIA'], limit: NONE]
                            │   │   │       ├── output columns: [r_regionkey, r_name]
                            │   │   │       └── estimated rows: 5.00
                            │   │   └── TableScan(Probe)
                            │   │       ├── table: default.tpch.nation
                            │   │       ├── read rows: 25
                            │   │       ├── read bytes: 358
                            │   │       ├── partitions total: 1
                            │   │       ├── partitions scanned: 1
                            │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │   │       ├── push downs: [filters: [], limit: NONE]
                            │   │       ├── output columns: [n_nationkey, n_name, n_regionkey]
                            │   │       └── estimated rows: 25.00
                            │   └── TableScan(Probe)
                            │       ├── table: default.tpch.supplier
                            │       ├── read rows: 1000
                            │       ├── read bytes: 2728
                            │       ├── partitions total: 1
                            │       ├── partitions scanned: 1
                            │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │       ├── push downs: [filters: [], limit: NONE]
                            │       ├── output columns: [s_suppkey, s_nationkey]
                            │       └── estimated rows: 1000.00
                            └── HashJoin(Probe)
                                ├── join type: INNER
                                ├── build keys: [orders.o_orderkey (#8)]
                                ├── probe keys: [lineitem.l_orderkey (#17)]
                                ├── filters: []
                                ├── estimated rows: 88286.66
                                ├── Filter(Build)
                                │   ├── filters: [orders.o_orderdate (#12) >= '1994-01-01', orders.o_orderdate (#12) < '1995-01-01']
                                │   ├── estimated rows: 22050.64
                                │   └── TableScan
                                │       ├── table: default.tpch.orders
                                │       ├── read rows: 150000
                                │       ├── read bytes: 781945
                                │       ├── partitions total: 1
                                │       ├── partitions scanned: 1
                                │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                │       ├── push downs: [filters: [and_filters(CAST(orders.o_orderdate (#12) >= '1994-01-01' AS Boolean NULL), CAST(orders.o_orderdate (#12) < '1995-01-01' AS Boolean NULL))], limit: NONE]
                                │       ├── output columns: [o_orderkey, o_custkey, o_orderdate]
                                │       └── estimated rows: 150000.00
                                └── TableScan(Probe)
                                    ├── table: default.tpch.lineitem
                                    ├── read rows: 600572
                                    ├── read bytes: 5034325
                                    ├── partitions total: 1
                                    ├── partitions scanned: 1
                                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                    ├── push downs: [filters: [], limit: NONE]
                                    ├── output columns: [l_orderkey, l_suppkey, l_extendedprice, l_discount]
                                    └── estimated rows: 600572.00

# Q6
query I
explain select
   truncate(sum(l_extendedprice * l_discount),3) as revenue
from
   lineitem
where
   l_shipdate >= '1994-01-01'
   and l_shipdate < date_add(year, 1, to_date('1994-01-01'))
   and l_discount between 0.05 and 0.07
   and l_quantity < 24;
----
EvalScalar
├── expressions: [truncate(CAST(sum((l_extendedprice * l_discount)) (#17) AS Float32 NULL), 3)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── group by: []
    ├── aggregate functions: [sum(sum_arg_0)]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [sum(sum_arg_0)]
        ├── estimated rows: 1.00
        └── EvalScalar
            ├── expressions: [lineitem.l_extendedprice (#5) * lineitem.l_discount (#6)]
            ├── estimated rows: 413.19
            └── Filter
                ├── filters: [lineitem.l_shipdate (#10) >= '1994-01-01', lineitem.l_shipdate (#10) < '1995-01-01', lineitem.l_discount (#6) >= 0.05, lineitem.l_discount (#6) <= 0.07, lineitem.l_quantity (#4) < 24.00]
                ├── estimated rows: 413.19
                └── TableScan
                    ├── table: default.tpch.lineitem
                    ├── read rows: 600572
                    ├── read bytes: 3251101
                    ├── partitions total: 1
                    ├── partitions scanned: 1
                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                    ├── push downs: [filters: [and_filters(CAST(and_filters(CAST(and_filters(CAST(and_filters(CAST(lineitem.l_shipdate (#10) >= '1994-01-01' AS Boolean NULL), CAST(lineitem.l_shipdate (#10) < '1995-01-01' AS Boolean NULL)) AS Boolean NULL), CAST(lineitem.l_discount (#6) >= 0.05 AS Boolean NULL)) AS Boolean NULL), CAST(lineitem.l_discount (#6) <= 0.07 AS Boolean NULL)) AS Boolean NULL), CAST(lineitem.l_quantity (#4) < 24.00 AS Boolean NULL))], limit: NONE]
                    ├── output columns: [l_quantity, l_extendedprice, l_discount, l_shipdate]
                    └── estimated rows: 600572.00

# Q7
query I
explain select
    supp_nation,
    cust_nation,
    l_year,
    truncate(sum(volume),3) as revenue
from
    (
        select
            n1.n_name as supp_nation,
            n2.n_name as cust_nation,
            extract(year from l_shipdate) as l_year,
            l_extendedprice * (1 - l_discount) as volume
        from
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2
        where
                s_suppkey = l_suppkey
          and o_orderkey = l_orderkey
          and c_custkey = o_custkey
          and s_nationkey = n1.n_nationkey
          and c_nationkey = n2.n_nationkey
          and (
                (n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
                or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')
            )
          and l_shipdate between to_date('1995-01-01') and to_date('1996-12-31')
    ) as shipping
group by
    supp_nation,
    cust_nation,
    l_year
order by
    supp_nation,
    cust_nation,
    l_year;
----
EvalScalar
├── expressions: [shipping.supp_nation (#41), shipping.cust_nation (#45), shipping.l_year (#48), truncate(CAST(sum(volume) (#51) AS Float32 NULL), 3)]
├── estimated rows: 1073.11
└── Sort
    ├── sort keys: [n_name ASC NULLS LAST, n_name ASC NULLS LAST, l_year ASC NULLS LAST]
    ├── estimated rows: 1073.11
    └── AggregateFinal
        ├── group by: [n_name, n_name, l_year]
        ├── aggregate functions: [sum(volume)]
        ├── estimated rows: 1073.11
        └── AggregatePartial
            ├── group by: [n_name, n_name, l_year]
            ├── aggregate functions: [sum(volume)]
            ├── estimated rows: 1073.11
            └── EvalScalar
                ├── expressions: [shipping.volume (#49), shipping.supp_nation (#41), shipping.cust_nation (#45), shipping.l_year (#48)]
                ├── estimated rows: 1073.11
                └── EvalScalar
                    ├── expressions: [n1.n_name (#41), n2.n_name (#45), to_year(lineitem.l_shipdate (#17)), lineitem.l_extendedprice (#12) * (1 - lineitem.l_discount (#13))]
                    ├── estimated rows: 1073.11
                    └── Filter
                        ├── filters: [n1.n_name (#41) = 'FRANCE' AND n2.n_name (#45) = 'GERMANY' OR n1.n_name (#41) = 'GERMANY' AND n2.n_name (#45) = 'FRANCE']
                        ├── estimated rows: 1073.11
                        └── HashJoin
                            ├── join type: INNER
                            ├── build keys: [supplier.s_suppkey (#0)]
                            ├── probe keys: [lineitem.l_suppkey (#9)]
                            ├── filters: []
                            ├── estimated rows: 1073.11
                            ├── HashJoin(Build)
                            │   ├── join type: INNER
                            │   ├── build keys: [n1.n_nationkey (#40)]
                            │   ├── probe keys: [supplier.s_nationkey (#3)]
                            │   ├── filters: []
                            │   ├── estimated rows: 78.40
                            │   ├── Filter(Build)
                            │   │   ├── filters: [n1.n_name (#41) = 'FRANCE' OR n1.n_name (#41) = 'GERMANY']
                            │   │   ├── estimated rows: 1.96
                            │   │   └── TableScan
                            │   │       ├── table: default.tpch.nation
                            │   │       ├── read rows: 25
                            │   │       ├── read bytes: 283
                            │   │       ├── partitions total: 1
                            │   │       ├── partitions scanned: 1
                            │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                            │   │       ├── push downs: [filters: [n1.n_name (#41) = 'FRANCE' OR n1.n_name (#41) = 'GERMANY'], limit: NONE]
                            │   │       ├── output columns: [n_nationkey, n_name]
                            │   │       └── estimated rows: 25.00
                            │   └── TableScan(Probe)
                            │       ├── table: default.tpch.supplier
                            │       ├── read rows: 1000
                            │       ├── read bytes: 2728
                            │       ├── partitions total: 1
                            │       ├── partitions scanned: 1
                            │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │       ├── push downs: [filters: [], limit: NONE]
                            │       ├── output columns: [s_suppkey, s_nationkey]
                            │       └── estimated rows: 1000.00
                            └── HashJoin(Probe)
                                ├── join type: INNER
                                ├── build keys: [orders.o_orderkey (#23)]
                                ├── probe keys: [lineitem.l_orderkey (#7)]
                                ├── filters: []
                                ├── estimated rows: 13687.58
                                ├── HashJoin(Build)
                                │   ├── join type: INNER
                                │   ├── build keys: [customer.c_custkey (#32)]
                                │   ├── probe keys: [orders.o_custkey (#24)]
                                │   ├── filters: []
                                │   ├── estimated rows: 11760.00
                                │   ├── HashJoin(Build)
                                │   │   ├── join type: INNER
                                │   │   ├── build keys: [n2.n_nationkey (#44)]
                                │   │   ├── probe keys: [customer.c_nationkey (#35)]
                                │   │   ├── filters: []
                                │   │   ├── estimated rows: 1176.00
                                │   │   ├── Filter(Build)
                                │   │   │   ├── filters: [n2.n_name (#45) = 'GERMANY' OR n2.n_name (#45) = 'FRANCE']
                                │   │   │   ├── estimated rows: 1.96
                                │   │   │   └── TableScan
                                │   │   │       ├── table: default.tpch.nation
                                │   │   │       ├── read rows: 25
                                │   │   │       ├── read bytes: 283
                                │   │   │       ├── partitions total: 1
                                │   │   │       ├── partitions scanned: 1
                                │   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                                │   │   │       ├── push downs: [filters: [n2.n_name (#45) = 'GERMANY' OR n2.n_name (#45) = 'FRANCE'], limit: NONE]
                                │   │   │       ├── output columns: [n_nationkey, n_name]
                                │   │   │       └── estimated rows: 25.00
                                │   │   └── TableScan(Probe)
                                │   │       ├── table: default.tpch.customer
                                │   │       ├── read rows: 15000
                                │   │       ├── read bytes: 43142
                                │   │       ├── partitions total: 1
                                │   │       ├── partitions scanned: 1
                                │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                │   │       ├── push downs: [filters: [], limit: NONE]
                                │   │       ├── output columns: [c_custkey, c_nationkey]
                                │   │       └── estimated rows: 15000.00
                                │   └── TableScan(Probe)
                                │       ├── table: default.tpch.orders
                                │       ├── read rows: 150000
                                │       ├── read bytes: 495719
                                │       ├── partitions total: 1
                                │       ├── partitions scanned: 1
                                │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                │       ├── push downs: [filters: [], limit: NONE]
                                │       ├── output columns: [o_orderkey, o_custkey]
                                │       └── estimated rows: 150000.00
                                └── Filter(Probe)
                                    ├── filters: [lineitem.l_shipdate (#17) >= '1995-01-01', lineitem.l_shipdate (#17) <= '1996-12-31']
                                    ├── estimated rows: 174586.48
                                    └── TableScan
                                        ├── table: default.tpch.lineitem
                                        ├── read rows: 600572
                                        ├── read bytes: 5040801
                                        ├── partitions total: 1
                                        ├── partitions scanned: 1
                                        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                        ├── push downs: [filters: [and_filters(CAST(lineitem.l_shipdate (#17) >= '1995-01-01' AS Boolean NULL), CAST(lineitem.l_shipdate (#17) <= '1996-12-31' AS Boolean NULL))], limit: NONE]
                                        ├── output columns: [l_orderkey, l_suppkey, l_extendedprice, l_discount, l_shipdate]
                                        └── estimated rows: 600572.00

# Q8
query I
explain select
    o_year,
    truncate(sum(case
            when nation = 'BRAZIL' then volume
            else 0
        end) / sum(volume),8) as mkt_share
from
    (
        select
            extract(year from o_orderdate) as o_year,
            l_extendedprice * (1 - l_discount) as volume,
            n2.n_name as nation
        from
            part,
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2,
            region
        where
                p_partkey = l_partkey
          and s_suppkey = l_suppkey
          and l_orderkey = o_orderkey
          and o_custkey = c_custkey
          and c_nationkey = n1.n_nationkey
          and n1.n_regionkey = r_regionkey
          and r_name = 'AMERICA'
          and s_nationkey = n2.n_nationkey
          and o_orderdate between to_date('1995-01-01') and to_date('1996-12-31')
          and p_type = 'ECONOMY ANODIZED STEEL'
    ) as all_nations
group by
    o_year
order by
    o_year;
----
EvalScalar
├── expressions: [all_nations.o_year (#60), truncate(CAST(sum(CASE WHEN (nation = 'BRAZIL') THEN volume ELSE 0 END) (#64) / sum(volume) (#65) AS Float32 NULL), 8)]
├── estimated rows: 242.23
└── Sort
    ├── sort keys: [o_year ASC NULLS LAST]
    ├── estimated rows: 242.23
    └── AggregateFinal
        ├── group by: [o_year]
        ├── aggregate functions: [sum(sum_arg_0), sum(volume)]
        ├── estimated rows: 242.23
        └── AggregatePartial
            ├── group by: [o_year]
            ├── aggregate functions: [sum(sum_arg_0), sum(volume)]
            ├── estimated rows: 242.23
            └── EvalScalar
                ├── expressions: [if(CAST(all_nations.nation (#54) = 'BRAZIL' AS Boolean NULL), all_nations.volume (#61), 0.0000), all_nations.volume (#61), all_nations.o_year (#60)]
                ├── estimated rows: 242.23
                └── EvalScalar
                    ├── expressions: [n2.n_name (#54), to_year(orders.o_orderdate (#36)), lineitem.l_extendedprice (#21) * (1 - lineitem.l_discount (#22))]
                    ├── estimated rows: 242.23
                    └── HashJoin
                        ├── join type: INNER
                        ├── build keys: [n2.n_nationkey (#53)]
                        ├── probe keys: [supplier.s_nationkey (#12)]
                        ├── filters: []
                        ├── estimated rows: 242.23
                        ├── TableScan(Build)
                        │   ├── table: default.tpch.nation
                        │   ├── read rows: 25
                        │   ├── read bytes: 283
                        │   ├── partitions total: 1
                        │   ├── partitions scanned: 1
                        │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        │   ├── push downs: [filters: [], limit: NONE]
                        │   ├── output columns: [n_nationkey, n_name]
                        │   └── estimated rows: 25.00
                        └── HashJoin(Probe)
                            ├── join type: INNER
                            ├── build keys: [lineitem.l_suppkey (#18)]
                            ├── probe keys: [supplier.s_suppkey (#9)]
                            ├── filters: []
                            ├── estimated rows: 242.23
                            ├── HashJoin(Build)
                            │   ├── join type: INNER
                            │   ├── build keys: [n1.n_nationkey (#49)]
                            │   ├── probe keys: [customer.c_nationkey (#44)]
                            │   ├── filters: []
                            │   ├── estimated rows: 242.23
                            │   ├── HashJoin(Build)
                            │   │   ├── join type: INNER
                            │   │   ├── build keys: [region.r_regionkey (#57)]
                            │   │   ├── probe keys: [n1.n_regionkey (#51)]
                            │   │   ├── filters: []
                            │   │   ├── estimated rows: 5.00
                            │   │   ├── Filter(Build)
                            │   │   │   ├── filters: [region.r_name (#58) = 'AMERICA']
                            │   │   │   ├── estimated rows: 1.00
                            │   │   │   └── TableScan
                            │   │   │       ├── table: default.tpch.region
                            │   │   │       ├── read rows: 5
                            │   │   │       ├── read bytes: 136
                            │   │   │       ├── partitions total: 1
                            │   │   │       ├── partitions scanned: 1
                            │   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                            │   │   │       ├── push downs: [filters: [region.r_name (#58) = 'AMERICA'], limit: NONE]
                            │   │   │       ├── output columns: [r_regionkey, r_name]
                            │   │   │       └── estimated rows: 5.00
                            │   │   └── TableScan(Probe)
                            │   │       ├── table: default.tpch.nation
                            │   │       ├── read rows: 25
                            │   │       ├── read bytes: 148
                            │   │       ├── partitions total: 1
                            │   │       ├── partitions scanned: 1
                            │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │   │       ├── push downs: [filters: [], limit: NONE]
                            │   │       ├── output columns: [n_nationkey, n_regionkey]
                            │   │       └── estimated rows: 25.00
                            │   └── HashJoin(Probe)
                            │       ├── join type: INNER
                            │       ├── build keys: [orders.o_custkey (#33)]
                            │       ├── probe keys: [customer.c_custkey (#41)]
                            │       ├── filters: []
                            │       ├── estimated rows: 1211.16
                            │       ├── HashJoin(Build)
                            │       │   ├── join type: INNER
                            │       │   ├── build keys: [lineitem.l_orderkey (#16)]
                            │       │   ├── probe keys: [orders.o_orderkey (#32)]
                            │       │   ├── filters: []
                            │       │   ├── estimated rows: 1211.16
                            │       │   ├── HashJoin(Build)
                            │       │   │   ├── join type: INNER
                            │       │   │   ├── build keys: [part.p_partkey (#0)]
                            │       │   │   ├── probe keys: [lineitem.l_partkey (#17)]
                            │       │   │   ├── filters: []
                            │       │   │   ├── estimated rows: 4003.81
                            │       │   │   ├── Filter(Build)
                            │       │   │   │   ├── filters: [part.p_type (#4) = 'ECONOMY ANODIZED STEEL']
                            │       │   │   │   ├── estimated rows: 133.33
                            │       │   │   │   └── TableScan
                            │       │   │   │       ├── table: default.tpch.part
                            │       │   │   │       ├── read rows: 20000
                            │       │   │   │       ├── read bytes: 113727
                            │       │   │   │       ├── partitions total: 1
                            │       │   │   │       ├── partitions scanned: 1
                            │       │   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                            │       │   │   │       ├── push downs: [filters: [part.p_type (#4) = 'ECONOMY ANODIZED STEEL'], limit: NONE]
                            │       │   │   │       ├── output columns: [p_partkey, p_type]
                            │       │   │   │       └── estimated rows: 20000.00
                            │       │   │   └── TableScan(Probe)
                            │       │   │       ├── table: default.tpch.lineitem
                            │       │   │       ├── read rows: 600572
                            │       │   │       ├── read bytes: 6550682
                            │       │   │       ├── partitions total: 1
                            │       │   │       ├── partitions scanned: 1
                            │       │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │       │   │       ├── push downs: [filters: [], limit: NONE]
                            │       │   │       ├── output columns: [l_orderkey, l_partkey, l_suppkey, l_extendedprice, l_discount]
                            │       │   │       └── estimated rows: 600572.00
                            │       │   └── Filter(Probe)
                            │       │       ├── filters: [orders.o_orderdate (#36) >= '1995-01-01', orders.o_orderdate (#36) <= '1996-12-31']
                            │       │       ├── estimated rows: 45375.15
                            │       │       └── TableScan
                            │       │           ├── table: default.tpch.orders
                            │       │           ├── read rows: 150000
                            │       │           ├── read bytes: 781945
                            │       │           ├── partitions total: 1
                            │       │           ├── partitions scanned: 1
                            │       │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │       │           ├── push downs: [filters: [and_filters(CAST(orders.o_orderdate (#36) >= '1995-01-01' AS Boolean NULL), CAST(orders.o_orderdate (#36) <= '1996-12-31' AS Boolean NULL))], limit: NONE]
                            │       │           ├── output columns: [o_orderkey, o_custkey, o_orderdate]
                            │       │           └── estimated rows: 150000.00
                            │       └── TableScan(Probe)
                            │           ├── table: default.tpch.customer
                            │           ├── read rows: 15000
                            │           ├── read bytes: 43142
                            │           ├── partitions total: 1
                            │           ├── partitions scanned: 1
                            │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │           ├── push downs: [filters: [], limit: NONE]
                            │           ├── output columns: [c_custkey, c_nationkey]
                            │           └── estimated rows: 15000.00
                            └── TableScan(Probe)
                                ├── table: default.tpch.supplier
                                ├── read rows: 1000
                                ├── read bytes: 2728
                                ├── partitions total: 1
                                ├── partitions scanned: 1
                                ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                ├── push downs: [filters: [], limit: NONE]
                                ├── output columns: [s_suppkey, s_nationkey]
                                └── estimated rows: 1000.00

# Q9
query I
explain select
    nation,
    o_year,
    truncate(truncate(sum(amount),0)/10, 0) as sum_profit
from
    (
        select
            n_name as nation,
            extract(year from o_orderdate) as o_year,
            truncate(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity, 100) as amount
        from
            part,
            supplier,
            lineitem,
            partsupp,
            orders,
            nation
        where
                s_suppkey = l_suppkey
          and ps_suppkey = l_suppkey
          and ps_partkey = l_partkey
          and p_partkey = l_partkey
          and o_orderkey = l_orderkey
          and s_nationkey = n_nationkey
          and p_name like '%green%'
    ) as profit
group by
    nation,
    o_year
order by
    sum_profit
limit 5;
----
EvalScalar
├── expressions: [profit.nation (#47), profit.o_year (#50)]
├── estimated rows: 5.00
└── Limit
    ├── limit: 5
    ├── offset: 0
    ├── estimated rows: 5.00
    └── Sort
        ├── sort keys: [sum_profit ASC NULLS LAST]
        ├── estimated rows: 480457.60
        └── EvalScalar
            ├── expressions: [truncate(truncate(sum(amount) (#53), 0) / 10, 0)]
            ├── estimated rows: 480457.60
            └── AggregateFinal
                ├── group by: [n_name, o_year]
                ├── aggregate functions: [sum(amount)]
                ├── estimated rows: 480457.60
                └── AggregatePartial
                    ├── group by: [n_name, o_year]
                    ├── aggregate functions: [sum(amount)]
                    ├── estimated rows: 480457.60
                    └── EvalScalar
                        ├── expressions: [profit.amount (#51), profit.nation (#47), profit.o_year (#50)]
                        ├── estimated rows: 480457.60
                        └── EvalScalar
                            ├── expressions: [nation.n_name (#47), to_year(orders.o_orderdate (#41)), truncate(to_float32(lineitem.l_extendedprice (#21) * (1 - lineitem.l_discount (#22)) - partsupp.ps_supplycost (#35) * lineitem.l_quantity (#20)), 100)]
                            ├── estimated rows: 480457.60
                            └── HashJoin
                                ├── join type: INNER
                                ├── build keys: [partsupp.ps_suppkey (#33), partsupp.ps_partkey (#32)]
                                ├── probe keys: [lineitem.l_suppkey (#18), lineitem.l_partkey (#17)]
                                ├── filters: []
                                ├── estimated rows: 480457.60
                                ├── TableScan(Build)
                                │   ├── table: default.tpch.partsupp
                                │   ├── read rows: 80000
                                │   ├── read bytes: 347442
                                │   ├── partitions total: 1
                                │   ├── partitions scanned: 1
                                │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                │   ├── push downs: [filters: [], limit: NONE]
                                │   ├── output columns: [ps_partkey, ps_suppkey, ps_supplycost]
                                │   └── estimated rows: 80000.00
                                └── HashJoin(Probe)
                                    ├── join type: INNER
                                    ├── build keys: [supplier.s_suppkey (#9)]
                                    ├── probe keys: [lineitem.l_suppkey (#18)]
                                    ├── filters: []
                                    ├── estimated rows: 120114.40
                                    ├── HashJoin(Build)
                                    │   ├── join type: INNER
                                    │   ├── build keys: [nation.n_nationkey (#46)]
                                    │   ├── probe keys: [supplier.s_nationkey (#12)]
                                    │   ├── filters: []
                                    │   ├── estimated rows: 1000.00
                                    │   ├── TableScan(Build)
                                    │   │   ├── table: default.tpch.nation
                                    │   │   ├── read rows: 25
                                    │   │   ├── read bytes: 283
                                    │   │   ├── partitions total: 1
                                    │   │   ├── partitions scanned: 1
                                    │   │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                    │   │   ├── push downs: [filters: [], limit: NONE]
                                    │   │   ├── output columns: [n_nationkey, n_name]
                                    │   │   └── estimated rows: 25.00
                                    │   └── TableScan(Probe)
                                    │       ├── table: default.tpch.supplier
                                    │       ├── read rows: 1000
                                    │       ├── read bytes: 2728
                                    │       ├── partitions total: 1
                                    │       ├── partitions scanned: 1
                                    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                    │       ├── push downs: [filters: [], limit: NONE]
                                    │       ├── output columns: [s_suppkey, s_nationkey]
                                    │       └── estimated rows: 1000.00
                                    └── HashJoin(Probe)
                                        ├── join type: INNER
                                        ├── build keys: [lineitem.l_orderkey (#16)]
                                        ├── probe keys: [orders.o_orderkey (#37)]
                                        ├── filters: []
                                        ├── estimated rows: 120114.40
                                        ├── HashJoin(Build)
                                        │   ├── join type: INNER
                                        │   ├── build keys: [part.p_partkey (#0)]
                                        │   ├── probe keys: [lineitem.l_partkey (#17)]
                                        │   ├── filters: []
                                        │   ├── estimated rows: 120114.40
                                        │   ├── Filter(Build)
                                        │   │   ├── filters: [like(part.p_name (#1), '%green%')]
                                        │   │   ├── estimated rows: 4000.00
                                        │   │   └── TableScan
                                        │   │       ├── table: default.tpch.part
                                        │   │       ├── read rows: 20000
                                        │   │       ├── read bytes: 230836
                                        │   │       ├── partitions total: 1
                                        │   │       ├── partitions scanned: 1
                                        │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                        │   │       ├── push downs: [filters: [like(part.p_name (#1), '%green%')], limit: NONE]
                                        │   │       ├── output columns: [p_partkey, p_name]
                                        │   │       └── estimated rows: 20000.00
                                        │   └── TableScan(Probe)
                                        │       ├── table: default.tpch.lineitem
                                        │       ├── read rows: 600572
                                        │       ├── read bytes: 7350269
                                        │       ├── partitions total: 1
                                        │       ├── partitions scanned: 1
                                        │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                        │       ├── push downs: [filters: [], limit: NONE]
                                        │       ├── output columns: [l_orderkey, l_partkey, l_suppkey, l_quantity, l_extendedprice, l_discount]
                                        │       └── estimated rows: 600572.00
                                        └── TableScan(Probe)
                                            ├── table: default.tpch.orders
                                            ├── read rows: 150000
                                            ├── read bytes: 420350
                                            ├── partitions total: 1
                                            ├── partitions scanned: 1
                                            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                            ├── push downs: [filters: [], limit: NONE]
                                            ├── output columns: [o_orderkey, o_orderdate]
                                            └── estimated rows: 150000.00

# Q10
query I
explain select
    c_custkey,
    c_name,
    TRUNCATE(sum(l_extendedprice * (1 - l_discount)), 3) as revenue,
    c_acctbal,
    n_name,
    c_address,
    c_phone,
    c_comment
from
    customer,
    orders,
    lineitem,
    nation
where
        c_custkey = o_custkey
  and l_orderkey = o_orderkey
  and o_orderdate >= to_date('1993-10-01')
  and o_orderdate < add_months(to_date('1993-10-01'), 3)
  and l_returnflag = 'R'
  and c_nationkey = n_nationkey
group by
    c_custkey,
    c_name,
    c_acctbal,
    c_phone,
    n_name,
    c_address,
    c_comment
order by
    revenue desc limit 5;
----
EvalScalar
├── expressions: [customer.c_custkey (#0), customer.c_name (#1), customer.c_address (#2), customer.c_phone (#4), customer.c_acctbal (#5), customer.c_comment (#7), nation.n_name (#34)]
├── estimated rows: 5.00
└── Limit
    ├── limit: 5
    ├── offset: 0
    ├── estimated rows: 5.00
    └── Sort
        ├── sort keys: [revenue DESC NULLS LAST]
        ├── estimated rows: 66673.12
        └── EvalScalar
            ├── expressions: [truncate(CAST(sum((l_extendedprice * (1 - l_discount))) (#39) AS Float32 NULL), 3)]
            ├── estimated rows: 66673.12
            └── AggregateFinal
                ├── group by: [c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment]
                ├── aggregate functions: [sum(sum_arg_0)]
                ├── estimated rows: 66673.12
                └── AggregatePartial
                    ├── group by: [c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment]
                    ├── aggregate functions: [sum(sum_arg_0)]
                    ├── estimated rows: 66673.12
                    └── EvalScalar
                        ├── expressions: [lineitem.l_extendedprice (#22) * (1 - lineitem.l_discount (#23)), customer.c_custkey (#0), customer.c_name (#1), customer.c_acctbal (#5), customer.c_phone (#4), nation.n_name (#34), customer.c_address (#2), customer.c_comment (#7)]
                        ├── estimated rows: 66673.12
                        └── HashJoin
                            ├── join type: INNER
                            ├── build keys: [orders.o_orderkey (#8)]
                            ├── probe keys: [lineitem.l_orderkey (#17)]
                            ├── filters: []
                            ├── estimated rows: 66673.12
                            ├── HashJoin(Build)
                            │   ├── join type: INNER
                            │   ├── build keys: [nation.n_nationkey (#33)]
                            │   ├── probe keys: [customer.c_nationkey (#3)]
                            │   ├── filters: []
                            │   ├── estimated rows: 5550.91
                            │   ├── TableScan(Build)
                            │   │   ├── table: default.tpch.nation
                            │   │   ├── read rows: 25
                            │   │   ├── read bytes: 283
                            │   │   ├── partitions total: 1
                            │   │   ├── partitions scanned: 1
                            │   │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │   │   ├── push downs: [filters: [], limit: NONE]
                            │   │   ├── output columns: [n_nationkey, n_name]
                            │   │   └── estimated rows: 25.00
                            │   └── HashJoin(Probe)
                            │       ├── join type: INNER
                            │       ├── build keys: [orders.o_custkey (#9)]
                            │       ├── probe keys: [customer.c_custkey (#0)]
                            │       ├── filters: []
                            │       ├── estimated rows: 5550.91
                            │       ├── Filter(Build)
                            │       │   ├── filters: [orders.o_orderdate (#12) >= '1993-10-01', orders.o_orderdate (#12) < '1994-01-01']
                            │       │   ├── estimated rows: 5550.91
                            │       │   └── TableScan
                            │       │       ├── table: default.tpch.orders
                            │       │       ├── read rows: 150000
                            │       │       ├── read bytes: 781945
                            │       │       ├── partitions total: 1
                            │       │       ├── partitions scanned: 1
                            │       │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │       │       ├── push downs: [filters: [and_filters(CAST(orders.o_orderdate (#12) >= '1993-10-01' AS Boolean NULL), CAST(orders.o_orderdate (#12) < '1994-01-01' AS Boolean NULL))], limit: NONE]
                            │       │       ├── output columns: [o_orderkey, o_custkey, o_orderdate]
                            │       │       └── estimated rows: 150000.00
                            │       └── TableScan(Probe)
                            │           ├── table: default.tpch.customer
                            │           ├── read rows: 15000
                            │           ├── read bytes: 821020
                            │           ├── partitions total: 1
                            │           ├── partitions scanned: 1
                            │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │           ├── push downs: [filters: [], limit: NONE]
                            │           ├── output columns: [c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_comment]
                            │           └── estimated rows: 15000.00
                            └── Filter(Probe)
                                ├── filters: [lineitem.l_returnflag (#25) = 'R']
                                ├── estimated rows: 200190.67
                                └── TableScan
                                    ├── table: default.tpch.lineitem
                                    ├── read rows: 600572
                                    ├── read bytes: 3944046
                                    ├── partitions total: 1
                                    ├── partitions scanned: 1
                                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                                    ├── push downs: [filters: [lineitem.l_returnflag (#25) = 'R'], limit: NONE]
                                    ├── output columns: [l_orderkey, l_extendedprice, l_discount, l_returnflag]
                                    └── estimated rows: 600572.00

# Q11
query I
explain select
    ps_partkey,
    sum(ps_supplycost * ps_availqty) as value
from
    partsupp,
    supplier,
    nation
where
    ps_suppkey = s_suppkey
  and s_nationkey = n_nationkey
  and n_name = 'GERMANY'
group by
    ps_partkey having
    sum(ps_supplycost * ps_availqty) > (
    select
    sum(ps_supplycost * ps_availqty) * 0.000002
    from
    partsupp,
    supplier,
    nation
    where
    ps_suppkey = s_suppkey
                  and s_nationkey = n_nationkey
                  and n_name = 'GERMANY'
    )
order by
    value desc limit 100;
----
EvalScalar
├── expressions: [partsupp.ps_partkey (#0)]
├── estimated rows: 100.00
└── Limit
    ├── limit: 100
    ├── offset: 0
    ├── estimated rows: 100.00
    └── Sort
        ├── sort keys: [value DESC NULLS LAST]
        ├── estimated rows: 640.00
        └── EvalScalar
            ├── expressions: [sum((ps_supplycost * ps_availqty)) (#40)]
            ├── estimated rows: 640.00
            └── Filter
                ├── filters: [is_true(CAST(sum((ps_supplycost * ps_availqty)) (#40) AS Float32 NULL) > CAST(scalar_subquery_38 (#38) AS Float32 NULL))]
                ├── estimated rows: 640.00
                └── HashJoin
                    ├── join type: SINGLE
                    ├── build keys: []
                    ├── probe keys: []
                    ├── filters: []
                    ├── estimated rows: 3200.00
                    ├── EvalScalar(Build)
                    │   ├── expressions: [sum((ps_supplycost * ps_availqty)) (#37) * 0.000002]
                    │   ├── estimated rows: 1.00
                    │   └── AggregateFinal
                    │       ├── group by: []
                    │       ├── aggregate functions: [sum(sum_arg_0)]
                    │       ├── estimated rows: 1.00
                    │       └── AggregatePartial
                    │           ├── group by: []
                    │           ├── aggregate functions: [sum(sum_arg_0)]
                    │           ├── estimated rows: 1.00
                    │           └── EvalScalar
                    │               ├── expressions: [partsupp.ps_supplycost (#23) * partsupp.ps_availqty (#22)]
                    │               ├── estimated rows: 3200.00
                    │               └── HashJoin
                    │                   ├── join type: INNER
                    │                   ├── build keys: [supplier.s_suppkey (#25)]
                    │                   ├── probe keys: [partsupp.ps_suppkey (#21)]
                    │                   ├── filters: []
                    │                   ├── estimated rows: 3200.00
                    │                   ├── HashJoin(Build)
                    │                   │   ├── join type: INNER
                    │                   │   ├── build keys: [nation.n_nationkey (#32)]
                    │                   │   ├── probe keys: [supplier.s_nationkey (#28)]
                    │                   │   ├── filters: []
                    │                   │   ├── estimated rows: 40.00
                    │                   │   ├── Filter(Build)
                    │                   │   │   ├── filters: [nation.n_name (#33) = 'GERMANY']
                    │                   │   │   ├── estimated rows: 1.00
                    │                   │   │   └── TableScan
                    │                   │   │       ├── table: default.tpch.nation
                    │                   │   │       ├── read rows: 25
                    │                   │   │       ├── read bytes: 283
                    │                   │   │       ├── partitions total: 1
                    │                   │   │       ├── partitions scanned: 1
                    │                   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                    │                   │   │       ├── push downs: [filters: [nation.n_name (#33) = 'GERMANY'], limit: NONE]
                    │                   │   │       ├── output columns: [n_nationkey, n_name]
                    │                   │   │       └── estimated rows: 25.00
                    │                   │   └── TableScan(Probe)
                    │                   │       ├── table: default.tpch.supplier
                    │                   │       ├── read rows: 1000
                    │                   │       ├── read bytes: 2728
                    │                   │       ├── partitions total: 1
                    │                   │       ├── partitions scanned: 1
                    │                   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                    │                   │       ├── push downs: [filters: [], limit: NONE]
                    │                   │       ├── output columns: [s_suppkey, s_nationkey]
                    │                   │       └── estimated rows: 1000.00
                    │                   └── TableScan(Probe)
                    │                       ├── table: default.tpch.partsupp
                    │                       ├── read rows: 80000
                    │                       ├── read bytes: 518526
                    │                       ├── partitions total: 1
                    │                       ├── partitions scanned: 1
                    │                       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                    │                       ├── push downs: [filters: [], limit: NONE]
                    │                       ├── output columns: [ps_suppkey, ps_availqty, ps_supplycost]
                    │                       └── estimated rows: 80000.00
                    └── AggregateFinal(Probe)
                        ├── group by: [ps_partkey]
                        ├── aggregate functions: [sum(sum_arg_0)]
                        ├── estimated rows: 3200.00
                        └── AggregatePartial
                            ├── group by: [ps_partkey]
                            ├── aggregate functions: [sum(sum_arg_0)]
                            ├── estimated rows: 3200.00
                            └── EvalScalar
                                ├── expressions: [partsupp.ps_supplycost (#3) * partsupp.ps_availqty (#2), partsupp.ps_partkey (#0)]
                                ├── estimated rows: 3200.00
                                └── HashJoin
                                    ├── join type: INNER
                                    ├── build keys: [supplier.s_suppkey (#5)]
                                    ├── probe keys: [partsupp.ps_suppkey (#1)]
                                    ├── filters: []
                                    ├── estimated rows: 3200.00
                                    ├── HashJoin(Build)
                                    │   ├── join type: INNER
                                    │   ├── build keys: [nation.n_nationkey (#12)]
                                    │   ├── probe keys: [supplier.s_nationkey (#8)]
                                    │   ├── filters: []
                                    │   ├── estimated rows: 40.00
                                    │   ├── Filter(Build)
                                    │   │   ├── filters: [nation.n_name (#13) = 'GERMANY']
                                    │   │   ├── estimated rows: 1.00
                                    │   │   └── TableScan
                                    │   │       ├── table: default.tpch.nation
                                    │   │       ├── read rows: 25
                                    │   │       ├── read bytes: 283
                                    │   │       ├── partitions total: 1
                                    │   │       ├── partitions scanned: 1
                                    │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                                    │   │       ├── push downs: [filters: [nation.n_name (#13) = 'GERMANY'], limit: NONE]
                                    │   │       ├── output columns: [n_nationkey, n_name]
                                    │   │       └── estimated rows: 25.00
                                    │   └── TableScan(Probe)
                                    │       ├── table: default.tpch.supplier
                                    │       ├── read rows: 1000
                                    │       ├── read bytes: 2728
                                    │       ├── partitions total: 1
                                    │       ├── partitions scanned: 1
                                    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                    │       ├── push downs: [filters: [], limit: NONE]
                                    │       ├── output columns: [s_suppkey, s_nationkey]
                                    │       └── estimated rows: 1000.00
                                    └── TableScan(Probe)
                                        ├── table: default.tpch.partsupp
                                        ├── read rows: 80000
                                        ├── read bytes: 539528
                                        ├── partitions total: 1
                                        ├── partitions scanned: 1
                                        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                        ├── push downs: [filters: [], limit: NONE]
                                        ├── output columns: [ps_partkey, ps_suppkey, ps_availqty, ps_supplycost]
                                        └── estimated rows: 80000.00

# Q12
query I
explain select
    l_shipmode,
    sum(case
            when o_orderpriority = '1-URGENT'
                or o_orderpriority = '2-HIGH'
                then 1
            else 0
        end) as high_line_count,
    sum(case
            when o_orderpriority <> '1-URGENT'
                and o_orderpriority <> '2-HIGH'
                then 1
            else 0
        end) as low_line_count
from
    orders,
    lineitem
where
        o_orderkey = l_orderkey
  and l_shipmode in ('MAIL', 'SHIP')
  and l_commitdate < l_receiptdate
  and l_shipdate < l_commitdate
  and l_receiptdate >= to_date('1994-01-01')
  and l_receiptdate < date_add(year, 1, to_date('1994-01-01'))
group by
    l_shipmode
order by
    l_shipmode;
----
EvalScalar
├── expressions: [lineitem.l_shipmode (#23), sum(CASE WHEN ((o_orderpriority = '1-URGENT') OR (o_orderpriority = '2-HIGH')) THEN 1 ELSE 0 END) (#28), sum(CASE WHEN ((o_orderpriority <> '1-URGENT') AND (o_orderpriority <> '2-HIGH')) THEN 1 ELSE 0 END) (#30)]
├── estimated rows: 1.00
└── Sort
    ├── sort keys: [l_shipmode ASC NULLS LAST]
    ├── estimated rows: 1.00
    └── AggregateFinal
        ├── group by: [l_shipmode]
        ├── aggregate functions: [sum(sum_arg_0), sum(sum_arg_0)]
        ├── estimated rows: 1.00
        └── AggregatePartial
            ├── group by: [l_shipmode]
            ├── aggregate functions: [sum(sum_arg_0), sum(sum_arg_0)]
            ├── estimated rows: 1.00
            └── EvalScalar
                ├── expressions: [if(CAST(orders.o_orderpriority (#5) = '1-URGENT' OR orders.o_orderpriority (#5) = '2-HIGH' AS Boolean NULL), 1, 0), if(CAST(orders.o_orderpriority (#5) <> '1-URGENT' AND orders.o_orderpriority (#5) <> '2-HIGH' AS Boolean NULL), 1, 0), lineitem.l_shipmode (#23)]
                ├── estimated rows: 905.03
                └── HashJoin
                    ├── join type: INNER
                    ├── build keys: [lineitem.l_orderkey (#9)]
                    ├── probe keys: [orders.o_orderkey (#0)]
                    ├── filters: []
                    ├── estimated rows: 905.03
                    ├── Filter(Build)
                    │   ├── filters: [lineitem.l_shipmode (#23) = 'MAIL' OR lineitem.l_shipmode (#23) = 'SHIP', lineitem.l_commitdate (#20) < lineitem.l_receiptdate (#21), lineitem.l_shipdate (#19) < lineitem.l_commitdate (#20), lineitem.l_receiptdate (#21) >= '1994-01-01', lineitem.l_receiptdate (#21) < '1995-01-01']
                    │   ├── estimated rows: 905.03
                    │   └── TableScan
                    │       ├── table: default.tpch.lineitem
                    │       ├── read rows: 600572
                    │       ├── read bytes: 3600248
                    │       ├── partitions total: 1
                    │       ├── partitions scanned: 1
                    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                    │       ├── push downs: [filters: [and_filters(CAST(and_filters(CAST(and_filters(CAST(and_filters(CAST(lineitem.l_shipmode (#23) = 'MAIL' OR lineitem.l_shipmode (#23) = 'SHIP' AS Boolean NULL), CAST(lineitem.l_commitdate (#20) < lineitem.l_receiptdate (#21) AS Boolean NULL)) AS Boolean NULL), CAST(lineitem.l_shipdate (#19) < lineitem.l_commitdate (#20) AS Boolean NULL)) AS Boolean NULL), CAST(lineitem.l_receiptdate (#21) >= '1994-01-01' AS Boolean NULL)) AS Boolean NULL), CAST(lineitem.l_receiptdate (#21) < '1995-01-01' AS Boolean NULL))], limit: NONE]
                    │       ├── output columns: [l_orderkey, l_shipdate, l_commitdate, l_receiptdate, l_shipmode]
                    │       └── estimated rows: 600572.00
                    └── TableScan(Probe)
                        ├── table: default.tpch.orders
                        ├── read rows: 150000
                        ├── read bytes: 313951
                        ├── partitions total: 1
                        ├── partitions scanned: 1
                        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        ├── push downs: [filters: [], limit: NONE]
                        ├── output columns: [o_orderkey, o_orderpriority]
                        └── estimated rows: 150000.00

# Q13
query I
explain select
    c_count,
    count(*) as custdist
from
    (
        select
            c_custkey,
            count(o_orderkey) as c_count
        from
            customer
                left outer join
            orders
            on c_custkey = o_custkey
                and o_comment not like '%pending%deposits%'
        group by
            c_custkey
    )
        c_orders
group by
    c_count
order by
    custdist desc,
    c_count desc;
----
EvalScalar
├── expressions: [c_orders.c_count (#19)]
├── estimated rows: 6400.00
└── Sort
    ├── sort keys: [custdist DESC NULLS LAST, c_count DESC NULLS LAST]
    ├── estimated rows: 6400.00
    └── EvalScalar
        ├── expressions: [COUNT(*) (#21)]
        ├── estimated rows: 6400.00
        └── AggregateFinal
            ├── group by: [c_count]
            ├── aggregate functions: [count()]
            ├── estimated rows: 6400.00
            └── AggregatePartial
                ├── group by: [c_count]
                ├── aggregate functions: [count()]
                ├── estimated rows: 6400.00
                └── EvalScalar
                    ├── expressions: [c_orders.c_count (#19)]
                    ├── estimated rows: 6400.00
                    └── EvalScalar
                        ├── expressions: [count(o_orderkey) (#18)]
                        ├── estimated rows: 6400.00
                        └── AggregateFinal
                            ├── group by: [c_custkey]
                            ├── aggregate functions: [count(o_orderkey)]
                            ├── estimated rows: 6400.00
                            └── AggregatePartial
                                ├── group by: [c_custkey]
                                ├── aggregate functions: [count(o_orderkey)]
                                ├── estimated rows: 6400.00
                                └── EvalScalar
                                    ├── expressions: [orders.o_orderkey (#8), customer.c_custkey (#0)]
                                    ├── estimated rows: 120000.00
                                    └── HashJoin
                                        ├── join type: RIGHT OUTER
                                        ├── build keys: [CAST(customer.c_custkey (#0) AS Int64 NULL)]
                                        ├── probe keys: [orders.o_custkey (#9)]
                                        ├── filters: []
                                        ├── estimated rows: 120000.00
                                        ├── TableScan(Build)
                                        │   ├── table: default.tpch.customer
                                        │   ├── read rows: 15000
                                        │   ├── read bytes: 29226
                                        │   ├── partitions total: 1
                                        │   ├── partitions scanned: 1
                                        │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                        │   ├── push downs: [filters: [], limit: NONE]
                                        │   ├── output columns: [c_custkey]
                                        │   └── estimated rows: 15000.00
                                        └── Filter(Probe)
                                            ├── filters: [NOT like(orders.o_comment (#16), '%pending%deposits%')]
                                            ├── estimated rows: 120000.00
                                            └── TableScan
                                                ├── table: default.tpch.orders
                                                ├── read rows: 150000
                                                ├── read bytes: 2522636
                                                ├── partitions total: 1
                                                ├── partitions scanned: 1
                                                ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                                ├── push downs: [filters: [NOT like(orders.o_comment (#16), '%pending%deposits%')], limit: NONE]
                                                ├── output columns: [o_orderkey, o_custkey, o_comment]
                                                └── estimated rows: 150000.00

# Q14
query I
explain select
            TRUNCATE(100.00 * sum(case
                             when p_type like 'PROMO%'
                                 then l_extendedprice * (1 - l_discount)
                             else 0
            end) / sum(l_extendedprice * (1 - l_discount)), 5) as promo_revenue
from
    lineitem,
    part
where
        l_partkey = p_partkey
  and l_shipdate >= to_date('1995-09-01')
  and l_shipdate < add_months(to_date('1995-09-01'), 1);
----
EvalScalar
├── expressions: [truncate(CAST(100.00 * sum(CASE WHEN (p_type LIKE 'PROMO%') THEN (l_extendedprice * (1 - l_discount)) ELSE 0 END) (#26) / sum((l_extendedprice * (1 - l_discount))) (#28) AS Float32 NULL), 5)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── group by: []
    ├── aggregate functions: [sum(sum_arg_0), sum(sum_arg_0)]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [sum(sum_arg_0), sum(sum_arg_0)]
        ├── estimated rows: 1.00
        └── EvalScalar
            ├── expressions: [if(CAST(part.p_type (#20) >= 'PROMO' AND part.p_type (#20) < 'PROMP' AS Boolean NULL), lineitem.l_extendedprice (#5) * (1 - lineitem.l_discount (#6)), 0.0000), lineitem.l_extendedprice (#5) * (1 - lineitem.l_discount (#6))]
            ├── estimated rows: 5646.35
            └── HashJoin
                ├── join type: INNER
                ├── build keys: [lineitem.l_partkey (#1)]
                ├── probe keys: [part.p_partkey (#16)]
                ├── filters: []
                ├── estimated rows: 5646.35
                ├── Filter(Build)
                │   ├── filters: [lineitem.l_shipdate (#10) >= '1995-09-01', lineitem.l_shipdate (#10) < '1995-10-01']
                │   ├── estimated rows: 5646.35
                │   └── TableScan
                │       ├── table: default.tpch.lineitem
                │       ├── read rows: 600572
                │       ├── read bytes: 3967871
                │       ├── partitions total: 1
                │       ├── partitions scanned: 1
                │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                │       ├── push downs: [filters: [and_filters(CAST(lineitem.l_shipdate (#10) >= '1995-09-01' AS Boolean NULL), CAST(lineitem.l_shipdate (#10) < '1995-10-01' AS Boolean NULL))], limit: NONE]
                │       ├── output columns: [l_partkey, l_extendedprice, l_discount, l_shipdate]
                │       └── estimated rows: 600572.00
                └── TableScan(Probe)
                    ├── table: default.tpch.part
                    ├── read rows: 20000
                    ├── read bytes: 113727
                    ├── partitions total: 1
                    ├── partitions scanned: 1
                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                    ├── push downs: [filters: [], limit: NONE]
                    ├── output columns: [p_partkey, p_type]
                    └── estimated rows: 20000.00

# Q15
query I
explain with revenue as (
    select
        l_suppkey as supplier_no,
        truncate(sum(l_extendedprice * (1 - l_discount)), 2) as total_revenue
    from
        lineitem
    where
            l_shipdate >= to_date ('1996-01-01')
      and l_shipdate < to_date ('1996-04-01')
    group by
        l_suppkey)
select
    s_suppkey,
    s_name,
    s_address,
    s_phone,
    total_revenue
from
    supplier,
    revenue
where
        s_suppkey = supplier_no
  and total_revenue = (
    select
        max(total_revenue)
    from
        revenue
)
order by
    s_suppkey;
----
EvalScalar
├── expressions: [supplier.s_suppkey (#0), supplier.s_name (#1), supplier.s_address (#2), supplier.s_phone (#4), revenue.total_revenue (#26)]
├── estimated rows: 0.40
└── Sort
    ├── sort keys: [s_suppkey ASC NULLS LAST]
    ├── estimated rows: 0.40
    └── Filter
        ├── filters: [is_true(revenue.total_revenue (#26) = scalar_subquery_48 (#48))]
        ├── estimated rows: 0.40
        └── HashJoin
            ├── join type: SINGLE
            ├── build keys: []
            ├── probe keys: []
            ├── filters: []
            ├── estimated rows: 2.00
            ├── EvalScalar(Build)
            │   ├── expressions: [max(total_revenue) (#47)]
            │   ├── estimated rows: 1.00
            │   └── AggregateFinal
            │       ├── group by: []
            │       ├── aggregate functions: [max(total_revenue)]
            │       ├── estimated rows: 1.00
            │       └── AggregatePartial
            │           ├── group by: []
            │           ├── aggregate functions: [max(total_revenue)]
            │           ├── estimated rows: 1.00
            │           └── EvalScalar
            │               ├── expressions: [revenue.total_revenue (#46)]
            │               ├── estimated rows: 2.00
            │               └── EvalScalar
            │                   ├── expressions: [truncate(CAST(sum((l_extendedprice * (1 - l_discount))) (#45) AS Float32 NULL), 2)]
            │                   ├── estimated rows: 2.00
            │                   └── AggregateFinal
            │                       ├── group by: [l_suppkey]
            │                       ├── aggregate functions: [sum(sum_arg_0)]
            │                       ├── estimated rows: 2.00
            │                       └── AggregatePartial
            │                           ├── group by: [l_suppkey]
            │                           ├── aggregate functions: [sum(sum_arg_0)]
            │                           ├── estimated rows: 2.00
            │                           └── EvalScalar
            │                               ├── expressions: [lineitem.l_extendedprice (#32) * (1 - lineitem.l_discount (#33)), lineitem.l_suppkey (#29)]
            │                               ├── estimated rows: 20180.11
            │                               └── Filter
            │                                   ├── filters: [lineitem.l_shipdate (#37) >= '1996-01-01', lineitem.l_shipdate (#37) < '1996-04-01']
            │                                   ├── estimated rows: 20180.11
            │                                   └── TableScan
            │                                       ├── table: default.tpch.lineitem
            │                                       ├── read rows: 600572
            │                                       ├── read bytes: 3614264
            │                                       ├── partitions total: 1
            │                                       ├── partitions scanned: 1
            │                                       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            │                                       ├── push downs: [filters: [and_filters(CAST(lineitem.l_shipdate (#37) >= '1996-01-01' AS Boolean NULL), CAST(lineitem.l_shipdate (#37) < '1996-04-01' AS Boolean NULL))], limit: NONE]
            │                                       ├── output columns: [l_suppkey, l_extendedprice, l_discount, l_shipdate]
            │                                       └── estimated rows: 600572.00
            └── HashJoin(Probe)
                ├── join type: INNER
                ├── build keys: [revenue.supplier_no (#9)]
                ├── probe keys: [supplier.s_suppkey (#0)]
                ├── filters: []
                ├── estimated rows: 2.00
                ├── EvalScalar(Build)
                │   ├── expressions: [lineitem.l_suppkey (#9), truncate(CAST(sum((l_extendedprice * (1 - l_discount))) (#25) AS Float32 NULL), 2)]
                │   ├── estimated rows: 2.00
                │   └── AggregateFinal
                │       ├── group by: [l_suppkey]
                │       ├── aggregate functions: [sum(sum_arg_0)]
                │       ├── estimated rows: 2.00
                │       └── AggregatePartial
                │           ├── group by: [l_suppkey]
                │           ├── aggregate functions: [sum(sum_arg_0)]
                │           ├── estimated rows: 2.00
                │           └── EvalScalar
                │               ├── expressions: [lineitem.l_extendedprice (#12) * (1 - lineitem.l_discount (#13)), lineitem.l_suppkey (#9)]
                │               ├── estimated rows: 20180.11
                │               └── Filter
                │                   ├── filters: [lineitem.l_shipdate (#17) >= '1996-01-01', lineitem.l_shipdate (#17) < '1996-04-01']
                │                   ├── estimated rows: 20180.11
                │                   └── TableScan
                │                       ├── table: default.tpch.lineitem
                │                       ├── read rows: 600572
                │                       ├── read bytes: 3614264
                │                       ├── partitions total: 1
                │                       ├── partitions scanned: 1
                │                       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                │                       ├── push downs: [filters: [and_filters(CAST(lineitem.l_shipdate (#17) >= '1996-01-01' AS Boolean NULL), CAST(lineitem.l_shipdate (#17) < '1996-04-01' AS Boolean NULL))], limit: NONE]
                │                       ├── output columns: [l_suppkey, l_extendedprice, l_discount, l_shipdate]
                │                       └── estimated rows: 600572.00
                └── TableScan(Probe)
                    ├── table: default.tpch.supplier
                    ├── read rows: 1000
                    ├── read bytes: 32083
                    ├── partitions total: 1
                    ├── partitions scanned: 1
                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                    ├── push downs: [filters: [], limit: NONE]
                    ├── output columns: [s_suppkey, s_name, s_address, s_phone]
                    └── estimated rows: 1000.00

# Q16
query I
explain select
    p_brand,
    p_type,
    p_size,
    count(distinct ps_suppkey) as supplier_cnt
from
    partsupp,
    part
where
        p_partkey = ps_partkey
  and p_brand <> 'Brand#45'
  and p_type not like 'MEDIUM POLISHED%'
  and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
  and ps_suppkey not in (
    select
        s_suppkey
    from
        supplier
    where
            s_comment like '%Customer%Complaints%'
)
group by
    p_brand,
    p_type,
    p_size
order by
    supplier_cnt desc,
    p_brand,
    p_type,
    p_size
limit 20;
----
EvalScalar
├── expressions: [part.p_brand (#8), part.p_type (#9), part.p_size (#10)]
├── estimated rows: 0.00
└── Limit
    ├── limit: 20
    ├── offset: 0
    ├── estimated rows: 0.00
    └── Sort
        ├── sort keys: [supplier_cnt DESC NULLS LAST, p_brand ASC NULLS LAST, p_type ASC NULLS LAST, p_size ASC NULLS LAST]
        ├── estimated rows: 0.00
        └── EvalScalar
            ├── expressions: [count(DISTINCT ps_suppkey) (#15)]
            ├── estimated rows: 0.00
            └── AggregateFinal
                ├── group by: [p_brand, p_type, p_size]
                ├── aggregate functions: [count_distinct(ps_suppkey)]
                ├── estimated rows: 0.00
                └── AggregatePartial
                    ├── group by: [p_brand, p_type, p_size]
                    ├── aggregate functions: [count_distinct(ps_suppkey)]
                    ├── estimated rows: 0.00
                    └── EvalScalar
                        ├── expressions: [partsupp.ps_suppkey (#1), part.p_brand (#8), part.p_type (#9), part.p_size (#10)]
                        ├── estimated rows: 0.00
                        └── Filter
                            ├── filters: [is_true(NOT 24 (#24))]
                            ├── estimated rows: 0.00
                            └── HashJoin
                                ├── join type: RIGHT MARK
                                ├── build keys: [subquery_16 (#16)]
                                ├── probe keys: [partsupp.ps_suppkey (#1)]
                                ├── filters: []
                                ├── estimated rows: 200.00
                                ├── EvalScalar(Build)
                                │   ├── expressions: [supplier.s_suppkey (#16)]
                                │   ├── estimated rows: 200.00
                                │   └── Filter
                                │       ├── filters: [like(supplier.s_comment (#22), '%Customer%Complaints%')]
                                │       ├── estimated rows: 200.00
                                │       └── TableScan
                                │           ├── table: default.tpch.supplier
                                │           ├── read rows: 1000
                                │           ├── read bytes: 19094
                                │           ├── partitions total: 1
                                │           ├── partitions scanned: 1
                                │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                │           ├── push downs: [filters: [like(supplier.s_comment (#22), '%Customer%Complaints%')], limit: NONE]
                                │           ├── output columns: [s_suppkey, s_comment]
                                │           └── estimated rows: 1000.00
                                └── HashJoin(Probe)
                                    ├── join type: INNER
                                    ├── build keys: [part.p_partkey (#5)]
                                    ├── probe keys: [partsupp.ps_partkey (#0)]
                                    ├── filters: []
                                    ├── estimated rows: 14745.60
                                    ├── Filter(Build)
                                    │   ├── filters: [part.p_brand (#8) <> 'Brand#45', NOT (part.p_type (#9) >= 'MEDIUM POLISHED' AND part.p_type (#9) < 'MEDIUM POLISHEE'), contains([49, 14, 23, 45, 19, 3, 36, 9], part.p_size (#10))]
                                    │   ├── estimated rows: 3686.40
                                    │   └── TableScan
                                    │       ├── table: default.tpch.part
                                    │       ├── read rows: 20000
                                    │       ├── read bytes: 161505
                                    │       ├── partitions total: 1
                                    │       ├── partitions scanned: 1
                                    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                    │       ├── push downs: [filters: [and_filters(CAST(and_filters(CAST(part.p_brand (#8) <> 'Brand#45' AS Boolean NULL), CAST(NOT (part.p_type (#9) >= 'MEDIUM POLISHED' AND part.p_type (#9) < 'MEDIUM POLISHEE') AS Boolean NULL)) AS Boolean NULL), CAST(contains([49, 14, 23, 45, 19, 3, 36, 9], part.p_size (#10)) AS Boolean NULL))], limit: NONE]
                                    │       ├── output columns: [p_partkey, p_brand, p_type, p_size]
                                    │       └── estimated rows: 20000.00
                                    └── TableScan(Probe)
                                        ├── table: default.tpch.partsupp
                                        ├── read rows: 80000
                                        ├── read bytes: 122677
                                        ├── partitions total: 1
                                        ├── partitions scanned: 1
                                        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                        ├── push downs: [filters: [], limit: NONE]
                                        ├── output columns: [ps_partkey, ps_suppkey]
                                        └── estimated rows: 80000.00

#Q17
query I
explain select
        truncate(sum(l_extendedprice) / 7.0,8) as avg_yearly
from
    lineitem,
    part
where
        p_partkey = l_partkey
  and p_brand = 'Brand#23'
  and p_container = 'MED BOX'
  and l_quantity < (
    select
            0.2 * avg(l_quantity)
    from
        lineitem
    where
            l_partkey = p_partkey
);
----
EvalScalar
├── expressions: [truncate(CAST(sum(l_extendedprice) (#25) / 7.0 AS Float32 NULL), 8)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── group by: []
    ├── aggregate functions: [sum(l_extendedprice)]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [sum(l_extendedprice)]
        ├── estimated rows: 1.00
        └── EvalScalar
            ├── expressions: [lineitem.l_extendedprice (#5)]
            ├── estimated rows: 120.11
            └── Filter
                ├── filters: [is_true(CAST(lineitem.l_quantity (#4) AS Decimal(38, 5) NULL) < scalar_subquery_43 (#43))]
                ├── estimated rows: 120.11
                └── HashJoin
                    ├── join type: SINGLE
                    ├── build keys: [l_partkey (#27)]
                    ├── probe keys: [p_partkey (#16)]
                    ├── filters: []
                    ├── estimated rows: 600.57
                    ├── EvalScalar(Build)
                    │   ├── expressions: [0.2 * avg(l_quantity) (#42), l_partkey (#27)]
                    │   ├── estimated rows: 20000.00
                    │   └── AggregateFinal
                    │       ├── group by: [l_partkey]
                    │       ├── aggregate functions: [avg(l_quantity)]
                    │       ├── estimated rows: 20000.00
                    │       └── AggregatePartial
                    │           ├── group by: [l_partkey]
                    │           ├── aggregate functions: [avg(l_quantity)]
                    │           ├── estimated rows: 20000.00
                    │           └── EvalScalar
                    │               ├── expressions: [lineitem.l_quantity (#30), l_partkey (#27)]
                    │               ├── estimated rows: 600572.00
                    │               └── TableScan
                    │                   ├── table: default.tpch.lineitem
                    │                   ├── read rows: 600572
                    │                   ├── read bytes: 2315944
                    │                   ├── partitions total: 1
                    │                   ├── partitions scanned: 1
                    │                   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                    │                   ├── push downs: [filters: [], limit: NONE]
                    │                   ├── output columns: [l_partkey, l_quantity]
                    │                   └── estimated rows: 600572.00
                    └── HashJoin(Probe)
                        ├── join type: INNER
                        ├── build keys: [part.p_partkey (#16)]
                        ├── probe keys: [lineitem.l_partkey (#1)]
                        ├── filters: []
                        ├── estimated rows: 600.57
                        ├── Filter(Build)
                        │   ├── filters: [part.p_brand (#19) = 'Brand#23', part.p_container (#22) = 'MED BOX']
                        │   ├── estimated rows: 20.00
                        │   └── TableScan
                        │       ├── table: default.tpch.part
                        │       ├── read rows: 20000
                        │       ├── read bytes: 104834
                        │       ├── partitions total: 1
                        │       ├── partitions scanned: 1
                        │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                        │       ├── push downs: [filters: [and_filters(CAST(part.p_brand (#19) = 'Brand#23' AS Boolean NULL), CAST(part.p_container (#22) = 'MED BOX' AS Boolean NULL))], limit: NONE]
                        │       ├── output columns: [p_partkey, p_brand, p_container]
                        │       └── estimated rows: 20000.00
                        └── TableScan(Probe)
                            ├── table: default.tpch.lineitem
                            ├── read rows: 600572
                            ├── read bytes: 4371297
                            ├── partitions total: 1
                            ├── partitions scanned: 1
                            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            ├── push downs: [filters: [], limit: NONE]
                            ├── output columns: [l_partkey, l_quantity, l_extendedprice]
                            └── estimated rows: 600572.00

#Q18
query I
explain select
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice,
    sum(l_quantity)
from
    customer,
    orders,
    lineitem
where
        o_orderkey in (
        select
            l_orderkey
        from
            lineitem
        group by
            l_orderkey having
                sum(l_quantity) > 300
    )
  and c_custkey = o_custkey
  and o_orderkey = l_orderkey
group by
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice
order by
    o_totalprice desc,
    o_orderdate;
----
EvalScalar
├── expressions: [customer.c_custkey (#0), customer.c_name (#1), orders.o_orderkey (#8), orders.o_totalprice (#11), orders.o_orderdate (#12), sum(l_quantity) (#33)]
├── estimated rows: 600572.00
└── Sort
    ├── sort keys: [o_totalprice DESC NULLS LAST, o_orderdate ASC NULLS LAST]
    ├── estimated rows: 600572.00
    └── AggregateFinal
        ├── group by: [c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice]
        ├── aggregate functions: [sum(l_quantity)]
        ├── estimated rows: 600572.00
        └── AggregatePartial
            ├── group by: [c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice]
            ├── aggregate functions: [sum(l_quantity)]
            ├── estimated rows: 600572.00
            └── EvalScalar
                ├── expressions: [lineitem.l_quantity (#21), customer.c_name (#1), customer.c_custkey (#0), orders.o_orderkey (#8), orders.o_orderdate (#12), orders.o_totalprice (#11)]
                ├── estimated rows: 600572.00
                └── HashJoin
                    ├── join type: LEFT SEMI
                    ├── build keys: [subquery_34 (#34)]
                    ├── probe keys: [orders.o_orderkey (#8)]
                    ├── filters: []
                    ├── estimated rows: 600572.00
                    ├── EvalScalar(Build)
                    │   ├── expressions: [lineitem.l_orderkey (#34)]
                    │   ├── estimated rows: 30000.00
                    │   └── Filter
                    │       ├── filters: [is_true(sum(l_quantity) (#50) > 300.00)]
                    │       ├── estimated rows: 30000.00
                    │       └── AggregateFinal
                    │           ├── group by: [l_orderkey]
                    │           ├── aggregate functions: [sum(l_quantity)]
                    │           ├── estimated rows: 150000.00
                    │           └── AggregatePartial
                    │               ├── group by: [l_orderkey]
                    │               ├── aggregate functions: [sum(l_quantity)]
                    │               ├── estimated rows: 150000.00
                    │               └── EvalScalar
                    │                   ├── expressions: [lineitem.l_quantity (#38), lineitem.l_orderkey (#34)]
                    │                   ├── estimated rows: 600572.00
                    │                   └── TableScan
                    │                       ├── table: default.tpch.lineitem
                    │                       ├── read rows: 600572
                    │                       ├── read bytes: 2226124
                    │                       ├── partitions total: 1
                    │                       ├── partitions scanned: 1
                    │                       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                    │                       ├── push downs: [filters: [], limit: NONE]
                    │                       ├── output columns: [l_orderkey, l_quantity]
                    │                       └── estimated rows: 600572.00
                    └── HashJoin(Probe)
                        ├── join type: INNER
                        ├── build keys: [orders.o_orderkey (#8)]
                        ├── probe keys: [lineitem.l_orderkey (#17)]
                        ├── filters: []
                        ├── estimated rows: 600572.00
                        ├── HashJoin(Build)
                        │   ├── join type: INNER
                        │   ├── build keys: [customer.c_custkey (#0)]
                        │   ├── probe keys: [orders.o_custkey (#9)]
                        │   ├── filters: []
                        │   ├── estimated rows: 150000.00
                        │   ├── TableScan(Build)
                        │   │   ├── table: default.tpch.customer
                        │   │   ├── read rows: 15000
                        │   │   ├── read bytes: 37103
                        │   │   ├── partitions total: 1
                        │   │   ├── partitions scanned: 1
                        │   │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        │   │   ├── push downs: [filters: [], limit: NONE]
                        │   │   ├── output columns: [c_custkey, c_name]
                        │   │   └── estimated rows: 15000.00
                        │   └── TableScan(Probe)
                        │       ├── table: default.tpch.orders
                        │       ├── read rows: 150000
                        │       ├── read bytes: 1363196
                        │       ├── partitions total: 1
                        │       ├── partitions scanned: 1
                        │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        │       ├── push downs: [filters: [], limit: NONE]
                        │       ├── output columns: [o_orderkey, o_custkey, o_totalprice, o_orderdate]
                        │       └── estimated rows: 150000.00
                        └── TableScan(Probe)
                            ├── table: default.tpch.lineitem
                            ├── read rows: 600572
                            ├── read bytes: 2226124
                            ├── partitions total: 1
                            ├── partitions scanned: 1
                            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            ├── push downs: [filters: [], limit: NONE]
                            ├── output columns: [l_orderkey, l_quantity]
                            └── estimated rows: 600572.00

# Q19
query I
explain select
    truncate(sum(l_extendedprice* (1 - l_discount)),3) as revenue
from
    lineitem,
    part
where
    (
                p_partkey = l_partkey
            and p_brand = 'Brand#52'
            and p_container in
                (
                 'SM CASE',
                 'SM BOX',
                 'SM PACK',
                 'SM PKG'
                    )
            and l_quantity >= 4
            and l_quantity <= 4 + 10
            and p_size between 1 and 5
            and l_shipmode in
                (
                 'AIR',
                 'AIR REG'
                    )
            and l_shipinstruct = 'DELIVER IN PERSON'
        )
   or
    (
                p_partkey = l_partkey
            and p_brand = 'Brand#11'
            and p_container in
                (
                 'MED BAG',
                 'MED BOX',
                 'MED PKG',
                 'MED PACK'
                    )
            and l_quantity >= 18
            and l_quantity <= 18 + 10
            and p_size between 1 and 10
            and l_shipmode in
                (
                 'AIR',
                 'AIR REG'
                    )
            and l_shipinstruct = 'DELIVER IN PERSON'
        )
   or
    (
                p_partkey = l_partkey
            and p_brand = 'Brand#51'
            and p_container in
                (
                 'LG CASE',
                 'LG BOX',
                 'LG PACK',
                 'LG PKG'
                    )
            and l_quantity >= 29
            and l_quantity <= 29 + 10
            and p_size between 1 and 15
            and l_shipmode in
                (
                 'AIR',
                 'AIR REG'
                    )
            and l_shipinstruct = 'DELIVER IN PERSON'
        )
;
----
EvalScalar
├── expressions: [truncate(CAST(sum((l_extendedprice * (1 - l_discount))) (#26) AS Float32 NULL), 3)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── group by: []
    ├── aggregate functions: [sum(sum_arg_0)]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [sum(sum_arg_0)]
        ├── estimated rows: 1.00
        └── EvalScalar
            ├── expressions: [lineitem.l_extendedprice (#5) * (1 - lineitem.l_discount (#6))]
            ├── estimated rows: 949.54
            └── Filter
                ├── filters: [part.p_brand (#19) = 'Brand#52' AND contains(['SM CASE', 'SM BOX', 'SM PACK', 'SM PKG'], part.p_container (#22)) AND lineitem.l_quantity (#4) >= 4.00 AND lineitem.l_quantity (#4) <= 14.00 AND part.p_size (#21) <= 5 OR part.p_brand (#19) = 'Brand#11' AND contains(['MED BAG', 'MED BOX', 'MED PKG', 'MED PACK'], part.p_container (#22)) AND lineitem.l_quantity (#4) >= 18.00 AND lineitem.l_quantity (#4) <= 28.00 AND part.p_size (#21) <= 10 OR part.p_brand (#19) = 'Brand#51' AND contains(['LG CASE', 'LG BOX', 'LG PACK', 'LG PKG'], part.p_container (#22)) AND lineitem.l_quantity (#4) >= 29.00 AND lineitem.l_quantity (#4) <= 39.00 AND part.p_size (#21) <= 15]
                ├── estimated rows: 949.54
                └── HashJoin
                    ├── join type: INNER
                    ├── build keys: [part.p_partkey (#16)]
                    ├── probe keys: [lineitem.l_partkey (#1)]
                    ├── filters: []
                    ├── estimated rows: 198137.80
                    ├── Filter(Build)
                    │   ├── filters: [part.p_size (#21) >= 1, part.p_brand (#19) = 'Brand#52' AND contains(['SM CASE', 'SM BOX', 'SM PACK', 'SM PKG'], part.p_container (#22)) AND part.p_size (#21) <= 5 OR part.p_brand (#19) = 'Brand#11' AND contains(['MED BAG', 'MED BOX', 'MED PKG', 'MED PACK'], part.p_container (#22)) AND part.p_size (#21) <= 10 OR part.p_brand (#19) = 'Brand#51' AND contains(['LG CASE', 'LG BOX', 'LG PACK', 'LG PKG'], part.p_container (#22)) AND part.p_size (#21) <= 15]
                    │   ├── estimated rows: 86.31
                    │   └── TableScan
                    │       ├── table: default.tpch.part
                    │       ├── read rows: 20000
                    │       ├── read bytes: 126392
                    │       ├── partitions total: 1
                    │       ├── partitions scanned: 1
                    │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                    │       ├── push downs: [filters: [and_filters(CAST(part.p_size (#21) >= 1 AS Boolean NULL), CAST(part.p_brand (#19) = 'Brand#52' AND contains(['SM CASE', 'SM BOX', 'SM PACK', 'SM PKG'], part.p_container (#22)) AND part.p_size (#21) <= 5 OR part.p_brand (#19) = 'Brand#11' AND contains(['MED BAG', 'MED BOX', 'MED PKG', 'MED PACK'], part.p_container (#22)) AND part.p_size (#21) <= 10 OR part.p_brand (#19) = 'Brand#51' AND contains(['LG CASE', 'LG BOX', 'LG PACK', 'LG PKG'], part.p_container (#22)) AND part.p_size (#21) <= 15 AS Boolean NULL))], limit: NONE]
                    │       ├── output columns: [p_partkey, p_brand, p_size, p_container]
                    │       └── estimated rows: 20000.00
                    └── Filter(Probe)
                        ├── filters: [lineitem.l_shipmode (#14) = 'AIR' OR lineitem.l_shipmode (#14) = 'AIR REG', lineitem.l_shipinstruct (#13) = 'DELIVER IN PERSON', lineitem.l_quantity (#4) >= 4.00 AND lineitem.l_quantity (#4) <= 14.00 OR lineitem.l_quantity (#4) >= 18.00 AND lineitem.l_quantity (#4) <= 28.00 OR lineitem.l_quantity (#4) >= 29.00 AND lineitem.l_quantity (#4) <= 39.00]
                        ├── estimated rows: 4591.41
                        └── TableScan
                            ├── table: default.tpch.lineitem
                            ├── read rows: 600572
                            ├── read bytes: 6130737
                            ├── partitions total: 1
                            ├── partitions scanned: 1
                            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                            ├── push downs: [filters: [and_filters(CAST(and_filters(CAST(lineitem.l_shipmode (#14) = 'AIR' OR lineitem.l_shipmode (#14) = 'AIR REG' AS Boolean NULL), CAST(lineitem.l_shipinstruct (#13) = 'DELIVER IN PERSON' AS Boolean NULL)) AS Boolean NULL), CAST(lineitem.l_quantity (#4) >= 4.00 AND lineitem.l_quantity (#4) <= 14.00 OR lineitem.l_quantity (#4) >= 18.00 AND lineitem.l_quantity (#4) <= 28.00 OR lineitem.l_quantity (#4) >= 29.00 AND lineitem.l_quantity (#4) <= 39.00 AS Boolean NULL))], limit: NONE]
                            ├── output columns: [l_partkey, l_quantity, l_extendedprice, l_discount, l_shipinstruct, l_shipmode]
                            └── estimated rows: 600572.00

# Q20
query I
explain select
    s_name,
    s_address
from
    supplier,
    nation
where
        s_suppkey in (
        select
            ps_suppkey
        from
            partsupp
        where
                ps_partkey in (
                select
                    p_partkey
                from
                    part
                where
                        p_name like 'forest%'
            )
          and ps_availqty > (
            select
                    0.5 * sum(l_quantity)
            from
                lineitem
            where
                    l_partkey = ps_partkey
              and l_suppkey = ps_suppkey
              and l_shipdate >= to_date('1994-01-01')
              and l_shipdate < add_years(to_date('1994-01-01'), 1)
        )
    )
  and s_nationkey = n_nationkey
  and n_name = 'CANADA'
order by
    s_name;
----
EvalScalar
├── expressions: [supplier.s_name (#1), supplier.s_address (#2)]
├── estimated rows: 40.00
└── Sort
    ├── sort keys: [s_name ASC NULLS LAST]
    ├── estimated rows: 40.00
    └── HashJoin
        ├── join type: RIGHT SEMI
        ├── build keys: [supplier.s_suppkey (#0)]
        ├── probe keys: [subquery_12 (#12)]
        ├── filters: []
        ├── estimated rows: 40.00
        ├── HashJoin(Build)
        │   ├── join type: INNER
        │   ├── build keys: [nation.n_nationkey (#7)]
        │   ├── probe keys: [supplier.s_nationkey (#3)]
        │   ├── filters: []
        │   ├── estimated rows: 40.00
        │   ├── Filter(Build)
        │   │   ├── filters: [nation.n_name (#8) = 'CANADA']
        │   │   ├── estimated rows: 1.00
        │   │   └── TableScan
        │   │       ├── table: default.tpch.nation
        │   │       ├── read rows: 25
        │   │       ├── read bytes: 283
        │   │       ├── partitions total: 1
        │   │       ├── partitions scanned: 1
        │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
        │   │       ├── push downs: [filters: [nation.n_name (#8) = 'CANADA'], limit: NONE]
        │   │       ├── output columns: [n_nationkey, n_name]
        │   │       └── estimated rows: 25.00
        │   └── TableScan(Probe)
        │       ├── table: default.tpch.supplier
        │       ├── read rows: 1000
        │       ├── read bytes: 25588
        │       ├── partitions total: 1
        │       ├── partitions scanned: 1
        │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
        │       ├── push downs: [filters: [], limit: NONE]
        │       ├── output columns: [s_suppkey, s_name, s_address, s_nationkey]
        │       └── estimated rows: 1000.00
        └── EvalScalar(Probe)
            ├── expressions: [partsupp.ps_suppkey (#12)]
            ├── estimated rows: 16000.00
            └── Filter
                ├── filters: [is_true(CAST(partsupp.ps_availqty (#13) AS Decimal(38, 3) NULL) > scalar_subquery_42 (#42))]
                ├── estimated rows: 16000.00
                └── HashJoin
                    ├── join type: SINGLE
                    ├── build keys: [l_partkey (#26), l_suppkey (#27)]
                    ├── probe keys: [ps_partkey (#11), ps_suppkey (#12)]
                    ├── filters: []
                    ├── estimated rows: 80000.00
                    ├── EvalScalar(Build)
                    │   ├── expressions: [0.5 * sum(l_quantity) (#41), l_suppkey (#27), l_partkey (#26)]
                    │   ├── estimated rows: 8484.00
                    │   └── AggregateFinal
                    │       ├── group by: [l_suppkey, l_partkey]
                    │       ├── aggregate functions: [sum(l_quantity)]
                    │       ├── estimated rows: 8484.00
                    │       └── AggregatePartial
                    │           ├── group by: [l_suppkey, l_partkey]
                    │           ├── aggregate functions: [sum(l_quantity)]
                    │           ├── estimated rows: 8484.00
                    │           └── EvalScalar
                    │               ├── expressions: [lineitem.l_quantity (#29), l_suppkey (#27), l_partkey (#26)]
                    │               ├── estimated rows: 85281.88
                    │               └── Filter
                    │                   ├── filters: [lineitem.l_shipdate (#35) >= '1994-01-01', lineitem.l_shipdate (#35) < '1995-01-01']
                    │                   ├── estimated rows: 85281.88
                    │                   └── TableScan
                    │                       ├── table: default.tpch.lineitem
                    │                       ├── read rows: 600572
                    │                       ├── read bytes: 3485170
                    │                       ├── partitions total: 1
                    │                       ├── partitions scanned: 1
                    │                       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                    │                       ├── push downs: [filters: [and_filters(CAST(lineitem.l_shipdate (#35) >= '1994-01-01' AS Boolean NULL), CAST(lineitem.l_shipdate (#35) < '1995-01-01' AS Boolean NULL))], limit: NONE]
                    │                       ├── output columns: [l_partkey, l_suppkey, l_quantity, l_shipdate]
                    │                       └── estimated rows: 600572.00
                    └── HashJoin(Probe)
                        ├── join type: LEFT SEMI
                        ├── build keys: [subquery_16 (#16)]
                        ├── probe keys: [partsupp.ps_partkey (#11)]
                        ├── filters: []
                        ├── estimated rows: 80000.00
                        ├── EvalScalar(Build)
                        │   ├── expressions: [part.p_partkey (#16)]
                        │   ├── estimated rows: 800.00
                        │   └── Filter
                        │       ├── filters: [part.p_name (#17) >= 'forest', part.p_name (#17) < 'foresu']
                        │       ├── estimated rows: 800.00
                        │       └── TableScan
                        │           ├── table: default.tpch.part
                        │           ├── read rows: 20000
                        │           ├── read bytes: 230836
                        │           ├── partitions total: 1
                        │           ├── partitions scanned: 1
                        │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        │           ├── push downs: [filters: [and_filters(CAST(part.p_name (#17) >= 'forest' AS Boolean NULL), CAST(part.p_name (#17) < 'foresu' AS Boolean NULL))], limit: NONE]
                        │           ├── output columns: [p_partkey, p_name]
                        │           └── estimated rows: 20000.00
                        └── TableScan(Probe)
                            ├── table: default.tpch.partsupp
                            ├── read rows: 80000
                            ├── read bytes: 314763
                            ├── partitions total: 1
                            ├── partitions scanned: 1
                            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            ├── push downs: [filters: [], limit: NONE]
                            ├── output columns: [ps_partkey, ps_suppkey, ps_availqty]
                            └── estimated rows: 80000.00

# Q21
query I
explain select
    s_name,
    truncate(count(*),4) as numwait
from
    supplier,
    lineitem l1,
    orders,
    nation
where
        s_suppkey = l1.l_suppkey
  and o_orderkey = l1.l_orderkey
  and o_orderstatus = 'F'
  and l1.l_receiptdate > l1.l_commitdate
  and exists (
        select
            *
        from
            lineitem l2
        where
                l2.l_orderkey = l1.l_orderkey
          and l2.l_suppkey <> l1.l_suppkey
    )
  and not exists (
        select
            *
        from
            lineitem l3
        where
                l3.l_orderkey = l1.l_orderkey
          and l3.l_suppkey <> l1.l_suppkey
          and l3.l_receiptdate > l3.l_commitdate
    )
  and s_nationkey = n_nationkey
  and n_name = 'SAUDI ARABIA'
group by
    s_name
order by
    numwait desc,
    s_name;
----
EvalScalar
├── expressions: [supplier.s_name (#1)]
├── estimated rows: 1000.00
└── Sort
    ├── sort keys: [numwait DESC NULLS LAST, s_name ASC NULLS LAST]
    ├── estimated rows: 1000.00
    └── EvalScalar
        ├── expressions: [truncate(COUNT(*) (#37), 4)]
        ├── estimated rows: 1000.00
        └── AggregateFinal
            ├── group by: [s_name]
            ├── aggregate functions: [count()]
            ├── estimated rows: 1000.00
            └── AggregatePartial
                ├── group by: [s_name]
                ├── aggregate functions: [count()]
                ├── estimated rows: 1000.00
                └── EvalScalar
                    ├── expressions: [supplier.s_name (#1)]
                    ├── estimated rows: 14413.44
                    └── HashJoin
                        ├── join type: RIGHT ANTI
                        ├── build keys: [l1.l_orderkey (#7)]
                        ├── probe keys: [l3.l_orderkey (#54)]
                        ├── filters: [l3.l_suppkey (#56) <> l1.l_suppkey (#9)]
                        ├── estimated rows: 14413.44
                        ├── HashJoin(Build)
                        │   ├── join type: RIGHT SEMI
                        │   ├── build keys: [l1.l_orderkey (#7)]
                        │   ├── probe keys: [l2.l_orderkey (#38)]
                        │   ├── filters: [l2.l_suppkey (#40) <> l1.l_suppkey (#9)]
                        │   ├── estimated rows: 14413.44
                        │   ├── HashJoin(Build)
                        │   │   ├── join type: INNER
                        │   │   ├── build keys: [l1.l_orderkey (#7)]
                        │   │   ├── probe keys: [orders.o_orderkey (#23)]
                        │   │   ├── filters: []
                        │   │   ├── estimated rows: 14413.44
                        │   │   ├── HashJoin(Build)
                        │   │   │   ├── join type: INNER
                        │   │   │   ├── build keys: [supplier.s_suppkey (#0)]
                        │   │   │   ├── probe keys: [l1.l_suppkey (#9)]
                        │   │   │   ├── filters: []
                        │   │   │   ├── estimated rows: 4804.58
                        │   │   │   ├── HashJoin(Build)
                        │   │   │   │   ├── join type: INNER
                        │   │   │   │   ├── build keys: [nation.n_nationkey (#32)]
                        │   │   │   │   ├── probe keys: [supplier.s_nationkey (#3)]
                        │   │   │   │   ├── filters: []
                        │   │   │   │   ├── estimated rows: 40.00
                        │   │   │   │   ├── Filter(Build)
                        │   │   │   │   │   ├── filters: [nation.n_name (#33) = 'SAUDI ARABIA']
                        │   │   │   │   │   ├── estimated rows: 1.00
                        │   │   │   │   │   └── TableScan
                        │   │   │   │   │       ├── table: default.tpch.nation
                        │   │   │   │   │       ├── read rows: 25
                        │   │   │   │   │       ├── read bytes: 283
                        │   │   │   │   │       ├── partitions total: 1
                        │   │   │   │   │       ├── partitions scanned: 1
                        │   │   │   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                        │   │   │   │   │       ├── push downs: [filters: [nation.n_name (#33) = 'SAUDI ARABIA'], limit: NONE]
                        │   │   │   │   │       ├── output columns: [n_nationkey, n_name]
                        │   │   │   │   │       └── estimated rows: 25.00
                        │   │   │   │   └── TableScan(Probe)
                        │   │   │   │       ├── table: default.tpch.supplier
                        │   │   │   │       ├── read rows: 1000
                        │   │   │   │       ├── read bytes: 3296
                        │   │   │   │       ├── partitions total: 1
                        │   │   │   │       ├── partitions scanned: 1
                        │   │   │   │       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        │   │   │   │       ├── push downs: [filters: [], limit: NONE]
                        │   │   │   │       ├── output columns: [s_suppkey, s_name, s_nationkey]
                        │   │   │   │       └── estimated rows: 1000.00
                        │   │   │   └── Filter(Probe)
                        │   │   │       ├── filters: [l1.l_receiptdate (#19) > l1.l_commitdate (#18)]
                        │   │   │       ├── estimated rows: 120114.40
                        │   │   │       └── TableScan
                        │   │   │           ├── table: default.tpch.lineitem
                        │   │   │           ├── read rows: 600572
                        │   │   │           ├── read bytes: 4027787
                        │   │   │           ├── partitions total: 1
                        │   │   │           ├── partitions scanned: 1
                        │   │   │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        │   │   │           ├── push downs: [filters: [l1.l_receiptdate (#19) > l1.l_commitdate (#18)], limit: NONE]
                        │   │   │           ├── output columns: [l_orderkey, l_suppkey, l_commitdate, l_receiptdate]
                        │   │   │           └── estimated rows: 600572.00
                        │   │   └── Filter(Probe)
                        │   │       ├── filters: [orders.o_orderstatus (#25) = 'F']
                        │   │       ├── estimated rows: 50000.00
                        │   │       └── TableScan
                        │   │           ├── table: default.tpch.orders
                        │   │           ├── read rows: 150000
                        │   │           ├── read bytes: 170985
                        │   │           ├── partitions total: 1
                        │   │           ├── partitions scanned: 1
                        │   │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                        │   │           ├── push downs: [filters: [orders.o_orderstatus (#25) = 'F'], limit: NONE]
                        │   │           ├── output columns: [o_orderkey, o_orderstatus]
                        │   │           └── estimated rows: 150000.00
                        │   └── EvalScalar(Probe)
                        │       ├── expressions: [l2.l_orderkey (#38), l2.l_suppkey (#40), l2.l_orderkey (#38), l2.l_suppkey (#40)]
                        │       ├── estimated rows: 600572.00
                        │       └── TableScan
                        │           ├── table: default.tpch.lineitem
                        │           ├── read rows: 600572
                        │           ├── read bytes: 2589287
                        │           ├── partitions total: 1
                        │           ├── partitions scanned: 1
                        │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                        │           ├── push downs: [filters: [], limit: NONE]
                        │           ├── output columns: [l_orderkey, l_suppkey]
                        │           └── estimated rows: 600572.00
                        └── EvalScalar(Probe)
                            ├── expressions: [l3.l_orderkey (#54), l3.l_suppkey (#56), l3.l_orderkey (#54), l3.l_suppkey (#56)]
                            ├── estimated rows: 120114.40
                            └── Filter
                                ├── filters: [l3.l_receiptdate (#66) > l3.l_commitdate (#65)]
                                ├── estimated rows: 120114.40
                                └── TableScan
                                    ├── table: default.tpch.lineitem
                                    ├── read rows: 600572
                                    ├── read bytes: 4027787
                                    ├── partitions total: 1
                                    ├── partitions scanned: 1
                                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                    ├── push downs: [filters: [l3.l_receiptdate (#66) > l3.l_commitdate (#65)], limit: NONE]
                                    ├── output columns: [l_orderkey, l_suppkey, l_commitdate, l_receiptdate]
                                    └── estimated rows: 600572.00

# Q22
query I
explain select
    cntrycode,
    count(*) as numcust,
    sum(c_acctbal) as totacctbal
from
    (
        select
            substring(c_phone from 1 for 2) as cntrycode,
            c_acctbal
        from
            customer
        where
                substring(c_phone from 1 for 2) in
                ('13', '31', '23', '29', '30', '18', '17')
          and c_acctbal > (
            select
                avg(c_acctbal)
            from
                customer
            where
                    c_acctbal > 0.00
              and substring(c_phone from 1 for 2) in
                  ('13', '31', '23', '29', '30', '18', '17')
        )
          and not exists (
                select
                    *
                from
                    orders
                where
                        o_custkey = c_custkey
            )
    ) as custsale
group by
    cntrycode
order by
    cntrycode;
----
EvalScalar
├── expressions: [custsale.cntrycode (#27), COUNT(*) (#30), sum(c_acctbal) (#31)]
├── estimated rows: 600.00
└── Sort
    ├── sort keys: [cntrycode ASC NULLS LAST]
    ├── estimated rows: 600.00
    └── AggregateFinal
        ├── group by: [cntrycode]
        ├── aggregate functions: [count(), sum(c_acctbal)]
        ├── estimated rows: 600.00
        └── AggregatePartial
            ├── group by: [cntrycode]
            ├── aggregate functions: [count(), sum(c_acctbal)]
            ├── estimated rows: 600.00
            └── EvalScalar
                ├── expressions: [custsale.c_acctbal (#5), custsale.cntrycode (#27)]
                ├── estimated rows: 600.00
                └── EvalScalar
                    ├── expressions: [customer.c_acctbal (#5), substr(customer.c_phone (#4), 1, 2)]
                    ├── estimated rows: 600.00
                    └── Filter
                        ├── filters: [is_true(CAST(customer.c_acctbal (#5) AS Decimal(38, 4) NULL) > scalar_subquery_17 (#17))]
                        ├── estimated rows: 600.00
                        └── HashJoin
                            ├── join type: RIGHT ANTI
                            ├── build keys: [customer.c_custkey (#0)]
                            ├── probe keys: [orders.o_custkey (#19)]
                            ├── filters: []
                            ├── estimated rows: 3000.00
                            ├── HashJoin(Build)
                            │   ├── join type: SINGLE
                            │   ├── build keys: []
                            │   ├── probe keys: []
                            │   ├── filters: []
                            │   ├── estimated rows: 3000.00
                            │   ├── EvalScalar(Build)
                            │   │   ├── expressions: [avg(c_acctbal) (#16)]
                            │   │   ├── estimated rows: 1.00
                            │   │   └── AggregateFinal
                            │   │       ├── group by: []
                            │   │       ├── aggregate functions: [avg(c_acctbal)]
                            │   │       ├── estimated rows: 1.00
                            │   │       └── AggregatePartial
                            │   │           ├── group by: []
                            │   │           ├── aggregate functions: [avg(c_acctbal)]
                            │   │           ├── estimated rows: 1.00
                            │   │           └── EvalScalar
                            │   │               ├── expressions: [customer.c_acctbal (#13)]
                            │   │               ├── estimated rows: 600.00
                            │   │               └── Filter
                            │   │                   ├── filters: [customer.c_acctbal (#13) > 0.00, contains(['13', '31', '23', '29', '30', '18', '17'], substr(customer.c_phone (#12), 1, 2))]
                            │   │                   ├── estimated rows: 600.00
                            │   │                   └── TableScan
                            │   │                       ├── table: default.tpch.customer
                            │   │                       ├── read rows: 15000
                            │   │                       ├── read bytes: 165159
                            │   │                       ├── partitions total: 1
                            │   │                       ├── partitions scanned: 1
                            │   │                       ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │   │                       ├── push downs: [filters: [and_filters(CAST(customer.c_acctbal (#13) > 0.00 AS Boolean NULL), CAST(contains(['13', '31', '23', '29', '30', '18', '17'], substr(customer.c_phone (#12), 1, 2)) AS Boolean NULL))], limit: NONE]
                            │   │                       ├── output columns: [c_phone, c_acctbal]
                            │   │                       └── estimated rows: 15000.00
                            │   └── Filter(Probe)
                            │       ├── filters: [contains(['13', '31', '23', '29', '30', '18', '17'], substr(customer.c_phone (#4), 1, 2))]
                            │       ├── estimated rows: 3000.00
                            │       └── TableScan
                            │           ├── table: default.tpch.customer
                            │           ├── read rows: 15000
                            │           ├── read bytes: 194385
                            │           ├── partitions total: 1
                            │           ├── partitions scanned: 1
                            │           ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                            │           ├── push downs: [filters: [contains(['13', '31', '23', '29', '30', '18', '17'], substr(customer.c_phone (#4), 1, 2))], limit: NONE]
                            │           ├── output columns: [c_custkey, c_phone, c_acctbal]
                            │           └── estimated rows: 15000.00
                            └── EvalScalar(Probe)
                                ├── expressions: [orders.o_custkey (#19), orders.o_custkey (#19)]
                                ├── estimated rows: 150000.00
                                └── TableScan
                                    ├── table: default.tpch.orders
                                    ├── read rows: 150000
                                    ├── read bytes: 361595
                                    ├── partitions total: 1
                                    ├── partitions scanned: 1
                                    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                                    ├── push downs: [filters: [], limit: NONE]
                                    ├── output columns: [o_custkey]
                                    └── estimated rows: 150000.00
