statement ok
use default

statement ok
DROP TABLE IF EXISTS c

statement ok
DROP TABLE IF EXISTS o

statement ok
CREATE TABLE c (c_id INT NULL, bill VARCHAR NULL)

statement ok
CREATE TABLE o (o_id INT NULL, c_id INT NULL, ship VARCHAR NULL)

statement ok
INSERT INTO c VALUES
    (1, 'CA'),
    (2, 'TX'),
    (3, 'MA'),
    (4, 'TX'),
    (5, NULL),
    (6, 'FL')

statement ok
INSERT INTO o VALUES
    (10, 1, 'CA'), (20, 1, 'CA'), (30, 1, 'CA'),
    (40, 2, 'CA'), (50, 2, 'TX'), (60, 2, NULL),
    (70, 4, 'WY'), (80, 4, NULL),
    (90, 6, 'WA')

# Subquery in WHERE clause

query IT
SELECT * FROM c WHERE EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
1  CA
2  TX
4  TX
6  FL

query IT
SELECT * FROM c, o WHERE c.c_id = o.c_id AND (EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) OR EXISTS(SELECT * FROM o where o.ship = c.bill)) ORDER BY c.c_id
----
1  CA   10 1  CA
1  CA   20 1  CA
1  CA   30 1  CA
2  TX   40 2  CA
2  TX   50 2  TX
2  TX   60 2  NULL
4  TX   70 4  WY
4  TX   80 4  NULL
6  FL   90 6  WA

query IT
SELECT * FROM c WHERE NOT EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
3  MA
5  NULL

query IT
SELECT *
FROM c
WHERE
    EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
    OR NOT EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
ORDER BY c_id
----
1  CA
2  TX
3  MA
4  TX
5  NULL
6  FL

query IT
SELECT * FROM c WHERE EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id AND c.bill='TX') ORDER BY c_id
----
2  TX
4  TX

query IT
SELECT * FROM c WHERE c.bill IN (SELECT o.ship FROM o WHERE o.c_id=c.c_id) and c.bill > 'MA'
----
2 TX

query IT
SELECT * FROM c WHERE 'WY' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
----
4  TX

query IT
SELECT *
FROM c
WHERE
    'WY' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
    OR 'WA' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
ORDER BY c_id
----
4  TX
6  FL

query IT
SELECT *
FROM c
WHERE
    'CA' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
    AND 'TX' NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
----
1  CA

query IT
SELECT * FROM c WHERE bill IN (SELECT ship FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
1  CA
2  TX


query IT
SELECT * FROM c WHERE bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
1  CA
3  MA
5  NULL


query IT
SELECT * FROM c WHERE bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
4  TX
6  FL


query IT
SELECT * FROM c WHERE (bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NULL
----
2  TX


query IT
SELECT * FROM c WHERE (bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NOT NULL ORDER BY c_id
----
1  CA
3  MA
4  TX
5  NULL
6  FL


query IT
SELECT * FROM c WHERE bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)
----
2  TX


query IT
SELECT * FROM c WHERE (bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NULL
----
4  TX


query IT
SELECT * FROM c WHERE (bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NOT NULL ORDER BY c_id
----
1  CA
2  TX
3  MA
5  NULL
6  FL


query IT
SELECT * FROM c WHERE bill = ANY(SELECT ship FROM o) ORDER BY c_id
----
1  CA
2  TX
4  TX


query IT
SELECT * FROM c WHERE bill = ANY(SELECT ship FROM o) OR bill IS NULL ORDER BY c_id
----
1  CA
2  TX
4  TX
5  NULL


query IT
SELECT *
FROM c
WHERE
    bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id)
    OR EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id AND ship='WY')
ORDER BY c_id
----
1  CA
3  MA
4  TX
5  NULL


query IT
SELECT *
FROM c
WHERE
    bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id)
    AND EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
----
1  CA


query IT
SELECT * FROM c WHERE bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id) ORDER BY c_id
----
3  MA
5  NULL
6  FL


query IT
SELECT * FROM c WHERE bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id AND ship IS NOT NULL) ORDER BY c_id
----
3  MA
4  TX
5  NULL
6  FL


query IT
SELECT * FROM c WHERE bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id AND ship IS NULL) ORDER BY c_id
----
1  CA
3  MA
5  NULL
6  FL


query IT
SELECT * FROM c WHERE (SELECT count(*) FROM o WHERE o.c_id=c.c_id) > 1 ORDER BY c_id
----
1  CA
2  TX
4  TX


query IT
SELECT * FROM c WHERE (SELECT count(ship) FROM o WHERE o.c_id=c.c_id) > 1 ORDER BY c_id
----
1  CA
2  TX


query IT
SELECT *
FROM c
WHERE
    (SELECT count(*) FROM o WHERE o.c_id=c.c_id) > 1
    AND (SELECT max(ship) FROM o WHERE o.c_id=c.c_id) = 'CA'
ORDER BY c_id
----
1  CA


query IT
SELECT c_id, bill
FROM c AS c2
WHERE EXISTS
(
    SELECT *
    FROM (SELECT c_id, coalesce(ship, bill) AS state FROM o WHERE c_id=c2.c_id) AS o
    WHERE state=bill
)
ORDER BY c_id
----
1  CA
2  TX
4  TX


statement ok
SELECT *
FROM c
WHERE (SELECT o_id FROM o WHERE o.c_id=c.c_id AND ship='WY')=4


query IT
SELECT * FROM c WHERE c_id=(SELECT c_id FROM o WHERE ship='WA' AND bill='FL')
----
6  FL


# Subquery in SELECT clause


query IT
SELECT c_id, EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  1
2  1
3  0
4  1
5  0
6  1


query IT
SELECT c_id, NOT EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  0
3  1
4  0
5  1
6  0


query IT
SELECT
    c_id,
    EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
    OR NOT EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
FROM c
ORDER BY c_id
----
1  1
2  1
3  1
4  1
5  1
6  1


query IT
SELECT c_id, EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id AND c.bill='TX') FROM c ORDER BY c_id
----
1  0
2  1
3  0
4  1
5  0
6  0


query IT
SELECT c_id, 'WY' IN (SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  NULL
3  0
4  1
5  0
6  0


query IT
SELECT
    c_id,
    'CA' IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
    AND 'TX' NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id)
FROM c
ORDER BY c_id
----
1  1
2  0
3  0
4  NULL
5  0
6  0


query IT
SELECT c_id, bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  1
2  0
3  1
4  0
5  1
6  0


query IT
SELECT c_id, bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  0
3  1
4  NULL
5  1
6  1


query IT
SELECT c_id, bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id AND ship IS NOT NULL)
FROM c
ORDER BY c_id
----
1  0
2  0
3  1
4  1
5  1
6  1


query IT
SELECT c_id, bill NOT IN (SELECT ship FROM o WHERE o.c_id=c.c_id AND ship IS NULL)
FROM c
ORDER BY c_id
----
1  1
2  NULL
3  1
4  NULL
5  1
6  1


query IT
SELECT c_id, bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  NULL
3  0
4  1
5  0
6  1


query IT
SELECT c_id, (bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NULL FROM c ORDER BY c_id
----
1  0
2  1
3  0
4  0
5  0
6  0


query IT
SELECT c_id, (bill < ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NOT NULL FROM c ORDER BY c_id
----
1  1
2  0
3  1
4  1
5  1
6  1


query IT
SELECT c_id, bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id) FROM c ORDER BY c_id
----
1  0
2  1
3  0
4  NULL
5  0
6  0


query IT
SELECT c_id, (bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NULL FROM c ORDER BY c_id
----
1  0
2  0
3  0
4  1
5  0
6  0


query IT
SELECT c_id, (bill > ANY(SELECT ship FROM o WHERE o.c_id=c.c_id)) IS NOT NULL FROM c ORDER BY c_id
----
1  1
2  1
3  1
4  0
5  1
6  1


query IT
SELECT c_id, bill = ANY(SELECT ship FROM o WHERE ship IS NOT NULL) FROM c ORDER BY c_id
----
1  1
2  1
3  0
4  1
5  NULL
6  0


query IT
SELECT
    c_id,
    bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id)
    OR EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id AND ship='WY')
FROM c
ORDER BY c_id
----
1  1
2  0
3  1
4  1
5  1
6  0


query IT
SELECT
    c_id,
    bill = ALL(SELECT ship FROM o WHERE o.c_id=c.c_id)
    AND EXISTS(SELECT * FROM o WHERE o.c_id=c.c_id)
FROM c
ORDER BY c_id
----
1  1
2  0
3  0
4  0
5  0
6  0


query IIT
SELECT
    c.c_id,
    o.o_id,
    (
        SELECT max(CASE WHEN c2.bill > o2.ship THEN c2.bill ELSE o2.ship END)
        FROM c AS c2, o AS o2
        WHERE c2.c_id=o2.c_id AND c2.c_id=c.c_id
    )
FROM c
LEFT JOIN o
ON c.c_id=o.c_id
ORDER BY c.c_id, o.o_id
----
1 10 CA
1 20 CA
1 30 CA
2 40 TX
2 50 TX
2 60 TX
4 70 WY
4 80 WY
6 90 WA
3 NULL NULL
5 NULL NULL


query II
SELECT
    c_id,
    (SELECT count(*) FROM o WHERE o.c_id=c.c_id)
FROM c
ORDER BY c_id
----
1 3
2 3
4 2
6 1
3 0
5 0


query I
SELECT max((SELECT count(*) FROM o WHERE o.c_id=c.c_id)) FROM c
----
3


query IT
SELECT
    c.c_id,
    (SELECT ship FROM o WHERE o.c_id=c.c_id ORDER BY ship LIMIT 1) IS NOT NULL
FROM c
ORDER BY c.c_id
----
1  1
2  0
3  0
4  0
5  0
6  0

query I
select * from numbers(5) where exists(select * from numbers(1)) order by number
----
0
1
2
3
4


statement ok
drop table o


statement ok
drop table c

query I
select * from (SELECT number AS a FROM numbers(10)) x where exists (select 1::UInt64 b) ORDER BY a
----
0
1
2
3
4
5
6
7
8
9

query I
select (select count() from numbers(10)) + (select count() from numbers(10))
----
20

query T
select 1 < ANY(SELECT NULL)
----
NULL

query I
select 1 < ANY(SELECT 1.0)
----
0

query I
select number from numbers(10) where number in (select unnest([1,2,3]))
----
1
2
3

statement ok
drop table if exists t1

statement ok
create table t1 (a int, b int);

statement ok
insert into t1 values(1, 2);

statement ok
drop table if exists t2

statement ok
create table t2 (a int, b int);

statement ok
insert into t2 values(1, 1);

query T
select * from t2 where t2.b < ANY(select NULL from t1 where t1.a = t1.a)
----

statement ok
create table t3(a int, b int);

statement ok
insert into t3 values(1, 2), (3, 4), (6, 5);

query T
SELECT  *, (SELECT SUM(a) FROM t3 WHERE b IN (SELECT b FROM t1 WHERE a = t2.a )) FROM t2 WHERE  b IN (SELECT b FROM t3 WHERE a > 1);
----



statement ok
drop table t1

statement ok
drop table t2

statement ok
drop table t3

statement ok
CREATE TABLE customers AS SELECT
  number % 100 AS customer_id,
  concat('Customer ', to_string(number % 100)) AS customer_name,
  CASE WHEN (rand() * 10000)::int % 3 = 0 THEN 'Small'
       WHEN (rand() * 10000 % 3)::int = 1 THEN 'Medium'
       ELSE 'Large'
  END AS segment,
  date_add('year', floor(rand() * 100 % 5)::int, '2021-01-01') AS create_timestamp,
  (rand() * 100)::int % 2 = 0 AS active
FROM numbers(100);


statement ok
CREATE TABLE products AS SELECT
  number % 10 AS product_id,
  concat('Product ', to_string(number % 10)) AS product_name,
  (rand() * 10000 % 2000 * 0.01)::decimal(10, 2) AS price,
  CASE WHEN (rand() * 100)::int % 4 = 0 THEN 'Electronics'
       WHEN (rand() * 100 % 4)::int = 1 THEN 'Clothing'
       WHEN (rand() * 1000 % 4)::int = 2 THEN 'Grocery'
       ELSE 'Furniture'
  END AS category
FROM numbers(10);

statement ok
CREATE TABLE sales AS SELECT
  number % 500 AS sale_id,
  number % 100 AS product_id,
  number % 100 AS customer_id,
  date_add('day', floor(rand() * 10000 % 365)::int, '2021-01-01') AS sale_date,
  (rand() * 10000 % 20 + 1)::int AS quantity,
  (rand() * 10000 % 2000 * 0.01)::decimal(10, 2) AS net_paid
FROM numbers(500);

query TI
SELECT customer_name, segment, (SELECT SUM(net_paid) FROM sales WHERE customer_id IN (SELECT customer_id FROM customers WHERE segment = c.segment AND active = true)) FROM customers c WHERE c.customer_id IN (SELECT customer_id FROM sales WHERE net_paid > 100) LIMIT 10;
----

query T
SELECT c.customer_name FROM customers c WHERE NOT EXISTS ( SELECT category FROM products WHERE category NOT IN ( SELECT p.category FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.customer_id = c.customer_id ) ) ORDER BY c.customer_name;
----

query T
SELECT (SELECT (SELECT customer_id FROM customers c1 WHERE c2.segment = c1.segment limit 1) from sales limit 1) FROM customers c2 limit 10;
----
0
0
0
0
0
0
0
0
0
0


statement ok
drop table customers;

statement ok
drop table products;

statement ok
drop table sales;
